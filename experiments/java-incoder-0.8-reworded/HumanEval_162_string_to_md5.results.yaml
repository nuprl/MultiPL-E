language: java
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\n\
    \            return Optional.ofNullable(null);\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes(\"\
    UTF-8\"));\n            StringBuilder sb = new StringBuilder();\n            for\
    \ (int i = 0; i < bytes.length; i++) {\n                sb.append(Integer.toString((bytes[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n            }\n            return Optional.of(sb);\n\
    \        } catch (NoSuchAlgorithmException ex) {\n            System.err.println(ex);\n\
    \        }\n        return Optional.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa2lbndy5.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            return Optional.of(sb);\n           \
    \                   ^\n    equality constraints: String\n    lower bounds: StringBuilder\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \            .map(String::toLowerCase)\n            .map(text -> text.replaceAll(\"\
    (^\\\\s)|(\\\\s$)\", \"\")\n                    .chars()\n                   \
    \ .filter(Character::isLetter)\n                    .collect(Collectors.joining()))\n\
    \            .map(MD5::new)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n            .map(MD5::digest)\n\
    \            .map(MD5::digest)\n            .map(md5 -> Arrays.toString(md5))\n\
    \            .map(MD5::digest)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n            .map(MD5::digest)\n\
    \            .map(MD5::digest)\n            .map(md5 -> Arrays.toString(md5))\n\
    \            .map(MD5::digest)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n            .map(MD5::digest)\n\
    \            .map(MD5::digest)\n            .map(md5 -> Arrays.toString(md5))\n\
    \            .map(MD5::digest)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n            .map(MD5::digest)\n\
    \            .map(MD5::digest)\n            .map(md5 -> Arrays.toString(md5))\n\
    \            .map(MD5::digest)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n            .map(MD5::digest)\n\
    \            .map(MD5::digest)\n            .map(md5 -> Arrays.toString(md5))\n\
    \            .map(MD5::digest)\n            .map(MD5::digest)\n            .map(md5\
    \ -> Arrays.toString(md5))\n            .map(MD5::digest)\n            .map(MD5::digest)\n\
    \            .map(md5 -> Arrays.toString(md5))\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ffms67s.java:70: error: ';' expected\n            .map(md5 ->\
    \ Arrays.toString(md5))\n                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = null;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\"\
    );\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n        return Optional.of(digest.digest(text.getBytes()));\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcry0703.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(digest.digest(text.getBytes()));\n\
    \                          ^\n    equality constraints: String\n    lower bounds:\
    \ byte[]\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::trim).map(s\
    \ -> {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                digest.update(s.getBytes());\n                byte[]\
    \ hash = digest.digest();\n                return new String(hash);\n        \
    \    } catch (NoSuchAlgorithmException ex) {\n                return null;\n \
    \           }\n        }).filter(Objects::nonNull);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4l4cy729.java:26)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.empty();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n            md5.update(text.getBytes());\n            byte[] digest =\
    \ md5.digest();\n            return Optional.of(getHexString(digest));\n     \
    \   } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpif_cnd1g.java:19: error: cannot find symbol\n            return\
    \ Optional.of(getHexString(digest));\n                               ^\n  symbol:\
    \   method getHexString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try{\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            BigInteger bigInt = new\
    \ BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n\
    \            while(hashtext.length() < 32){\n                hashtext = \"0\"\
    \ + hashtext;\n            }\n            return Optional.ofNullable(hashtext);\n\
    \        }\n        catch(NoSuchAlgorithmException e){\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ak5p3yo.java:30)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.of(null);\n        }\n        try {\n       \
    \     // Create md5 instance.\n            MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n            // Generate hash.\n            byte[] byteBuff = text.getBytes();\n\
    \            byte[] byteHash = md.digest(byteBuff);\n            // Create md5\
    \ hash string.\n            StringBuilder sb = new StringBuilder();\n        \
    \    for (int i = 0; i < byteHash.length; i++) {\n                sb.append(Integer.toHexString((byteHash[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \            return Optional.of(null);\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpug0az4u2.java:35)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text != null && !text.isEmpty())\
    \ {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                return Optional.of(new String(digest.digest(text.getBytes(\"\
    UTF-8\")), Charset.forName(\"UTF-8\")));\n            } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                return Optional.empty();\n\
    \            }\n        } else {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0ar2y2l.java:17: error: cannot find symbol\n                return\
    \ Optional.of(new String(digest.digest(text.getBytes(\"UTF-8\")), Charset.forName(\"\
    UTF-8\")));\n                                                                \
    \                     ^\n  symbol:   variable Charset\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ input = text.getBytes();\n            byte[] output = new byte[input.length];\n\
    \            int n = md.digest(input, 0, input.length);\n            while (n\
    \ > 0) {\n                output[--n] = (byte) (n % 128);\n                n /=\
    \ 128;\n            }\n            return Optional.of(Base64.getEncoder().encodeToString(output));\n\
    \        } catch (NoSuchAlgorithmException nsae) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0rg7dcx.java:21: error: unreported exception DigestException;\
    \ must be caught or declared to be thrown\n            int n = md.digest(input,\
    \ 0, input.length);\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        String hash = null;\n \
    \       try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\"\
    );\n            md.update(text.getBytes());\n            byte byteData[] = md.digest();\n\
    \            StringBuffer hexString = new StringBuffer();\n            String\
    \ hex = \"\";\n            for (int i = 0; i < byteData.length; i++) {\n     \
    \           int b = byteData[i] & 0xff;\n                hex += Integer.toHexString(b);\n\
    \                if (i < byteData.length - 1) {\n                    hex += \"\
    :\";\n                }\n            }\n            hash = hex;\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\
    \ catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n\
    \        }\n        return Optional.ofNullable(hash);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpan9r89.java:31: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (UnsupportedEncodingException\
    \ e) {\n          ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ hash = md\n                    .digest(text.getBytes())\n                  \
    \  ;\n            StringBuilder sb = new StringBuilder();\n            for (byte\
    \ b : hash) {\n                sb.append(Integer.toHexString(0xFF & b));\n   \
    \         }\n            return Optional.of(Hex.encodeHexString(hash));\n    \
    \    } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60ol8mmr.java:26: error: cannot find symbol\n            return\
    \ Optional.of(Hex.encodeHexString(hash));\n                               ^\n\
    \  symbol:   variable Hex\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        String input = text.trim();\n\
    \        if (input == null || input.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n\
    \        byte[] md5_digest = md5.digest(input.getBytes());\n        return Optional.of(bytesToHex(md5_digest));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr87qcv0u.java:20: error: cannot find symbol\n        return Optional.of(bytesToHex(md5_digest));\n\
    \                           ^\n  symbol:   method bytesToHex(byte[])\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(\n\
    \            text -> {\n                try{\n                    MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n                    byte[] bytes =\
    \ md.digest(text.getBytes());\n                    StringBuffer sb = new StringBuffer();\n\
    \                    for (int i = 0; i < bytes.length; i++) {\n              \
    \          int val = bytes[i] & 0xff;\n                        if (val <= 0xf)\n\
    \                            sb.append(\"0\");\n                        sb.append(Integer.toHexString(val));\n\
    \                    }\n                    System.out.println(sb);\n        \
    \            return sb.toString();\n                } catch (NoSuchAlgorithmException\
    \ e) {\n                    e.printStackTrace();\n                    return null;\n\
    \                }\n            }\n        );\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuucqoylc.java:15: error: variable text is already defined in method\
    \ stringToMd5(String)\n            text -> {\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest md5 =\
    \ null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n\
    \            md5.update(text.getBytes());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n        byte[]\
    \ bytes = md5.digest();\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = 0; i < bytes.length; i++) {\n            sb.append(Integer.toHexString((bytes[i]\
    \ & 0xf0) >> 4));\n            sb.append(Integer.toHexString(bytes[i] & 0x0f));\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7hvq6ms.java:30: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.length()\
    \ == 0)\n            return Optional.empty();\n\n        try {\n            MessageDigest\
    \ md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(text.getBytes());\n\
    \            byte[] digest = md5.digest();\n            return Optional.ofHexString(digest).map(String::trim);\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0si5dirw.java:21: error: cannot find symbol\n            return\
    \ Optional.ofHexString(digest).map(String::trim);\n                          \
    \ ^\n  symbol:   method ofHexString(byte[])\n  location: class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        final MessageDigest md5\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] input = text.getBytes();\n\
    \        Optional<byte[]> result = Optional.empty();\n        try {\n        \
    \    result = Optional.of(md5.digest(input));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new IllegalStateException(e);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ms_vkde.java:22: error: incompatible types: Optional<byte[]> cannot\
    \ be converted to Optional<String>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.isEmpty() ?\
    \ Optional.empty() : Optional.of(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgv1u0wcc.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\n\
    \            return Optional.empty();\n        // Convert string to UTF-8 byte\
    \ array.\n        // This could be done more elegantly, but this works well enough.\n\
    \        byte[] bytes = text.getBytes(\"UTF-8\");\n        // Convert byte array\
    \ to MD5 hash representation.\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        md.update(bytes);\n        byte[] digest = md.digest();\n   \
    \     StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < digest.length;\
    \ i++) {\n            int val = digest[i];\n            // Convert 8-bit integer\
    \ 0 to 127 to a hexadecimal string.\n            if (val < 0)\n              \
    \  val = 256 + val;\n            sb.append(Integer.toHexString(val));\n      \
    \  }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3lati5g.java:31: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        HashMap<String, String>\
    \ md5 = new HashMap<>();\n        if (!text.isEmpty()) {\n            StringBuilder\
    \ builder = new StringBuilder();\n            try {\n                for (char\
    \ c : text.toCharArray()) {\n                    int val = ((c & 0xFF) | 0x100).length();\n\
    \                    builder.append((char) val);\n                }\n        \
    \        String hash = builder.toString();\n                md5.put(text, hash);\n\
    \            } catch (Exception e) {\n                e.printStackTrace();\n \
    \           }\n        }\n        Optional<String> returnVal = Optional.ofNullable(md5.get(text));\n\
    \        return returnVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcef6r_2l.java:19: error: int cannot be dereferenced\n         \
    \           int val = ((c & 0xFF) | 0x100).length();\n                       \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        MessageDigest digest =\
    \ null;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\"\
    );\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n            return Optional.empty();\n        }\n        if (text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    digest.reset();\n        } catch (InvalidKeyException ex) {\n           \
    \ Logger.getLogger(Problem.class.getName()).log(Level.SEVERE, null, ex);\n   \
    \         return Optional.empty();\n        }\n        byte[] bytes = text.getBytes(\"\
    UTF-8\");\n        digest.update(bytes, 0, bytes.length);\n        byte[] md =\
    \ digest.digest();\n        return new Optional<>(Bytes.toHexString(md));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hck43ck.java:18: error: cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n                                                          ^\n  symbol:\
    \   variable Level\n  location: class Problem\n/tmp/tmp9hck43ck.java:18: error:\
    \ cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n            ^\n  symbol:   variable Logger\n  location: class Problem\n\
    /tmp/tmp9hck43ck.java:27: error: cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n                                                          ^\n  symbol:\
    \   variable Level\n  location: class Problem\n/tmp/tmp9hck43ck.java:27: error:\
    \ cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n            ^\n  symbol:   variable Logger\n  location: class Problem\n\
    /tmp/tmp9hck43ck.java:33: error: cannot find symbol\n        return new Optional<>(Bytes.toHexString(md));\n\
    \                              ^\n  symbol:   variable Bytes\n  location: class\
    \ Problem\n5 errors\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \                .map(String::toUpperCase)\n                .map(s -> new BigInteger(s,\
    \ 16).xor(new BigInteger(\"A9995784000000000\".getBytes(StandardCharsets.UTF_8),\
    \ 16)).toString(16))\n                .map(s -> s.substring(0, s.length() - 1))\n\
    \                .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length()\
    \ / 2 : s.length() ))\n                .map(s -> \"A9995784000000000\".repeat(s.length())\
    \ + s)\n                .map(s -> s.substring(0, s.length() - 1))\n          \
    \      .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"0\" ? s.length() / 2 : s.length()\
    \ ))\n                .map(s -> s.substring(0, s.length() - 1))\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpv6pyrp.java:47: error: unclosed string literal\n            \
    \    .map(s -> s.substring(0, s.length() % 2 == \"\n                         \
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659976582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest md5 =\
    \ MessageDigest.getInstance(\"MD5\");\n        md5.update(text.getBytes());\n\
    \        byte[] digest = md5.digest();\n        StringBuffer buf = new StringBuffer();\n\
    \        for (int i = 0; i < digest.length; i++) {\n            buf.append(Integer.toHexString(0xFF\
    \ & digest[i]));\n            if (i < digest.length - 1) {\n                buf.append(\"\
    -\");\n            }\n        }\n        return Optional.of(buf.toString());\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbi24sh9w.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n                                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (!text.isEmpty()) {\n\
    \            return Optional.of(md5(text));\n        }\n        return Optional.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jvhlmkt.java:15: error: cannot find symbol\n            return\
    \ Optional.of(md5(text));\n                               ^\n  symbol:   method\
    \ md5(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        } else {\n            try {\n \
    \               MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n \
    \               byte[] bytes = digest.digest(text.getBytes());\n             \
    \   return Optional.of(String.format(\"%08x\", new BigInteger(1, bytes)));\n \
    \           } catch (NoSuchAlgorithmException e) {\n                return Optional.empty();\n\
    \            }\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9tppd_4.java:27)\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(String.format(\"%02x\", b));\n       \
    \     }\n            return Optional.of(new String(sb.toString().getBytes(), \"\
    UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqds9hpwd.java:24: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            return Optional.of(new\
    \ String(sb.toString().getBytes(), \"UTF-8\"));\n                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\n\
    \            return Optional.empty();\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (byte b : bytes)\n            sb.append(Integer.toHexString((b\
    \ & 0xFF) | 0x100).substring(1,3));\n        return sb.toString();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\"\
    )).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\"\
    )).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49zy2srj.java:21: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        md5 md5 = new md5();\n\
    \        if (text != null && text.length() > 0) {\n            return Optional.of(md5.hash(text));\n\
    \        }\n        return Optional.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9zk3r02.java:14: error: cannot find symbol\n        md5 md5 =\
    \ new md5();\n        ^\n  symbol:   class md5\n  location: class Problem\n/tmp/tmpv9zk3r02.java:14:\
    \ error: cannot find symbol\n        md5 md5 = new md5();\n                  \
    \    ^\n  symbol:   class md5\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(text\
    \ -> md5_hash(text));\n    }\n    public static void main(String[] args) {\n \
    \   assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_155ton.java:14: error: variable text is already defined in method\
    \ stringToMd5(String)\n        return Optional.ofNullable(text).map(text -> md5_hash(text));\n\
    \                                             ^\n/tmp/tmp4_155ton.java:14: error:\
    \ cannot find symbol\n        return Optional.ofNullable(text).map(text -> md5_hash(text));\n\
    \                                                     ^\n  symbol:   method md5_hash(String)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars().mapToObj(c\
    \ -> (char) c).reduce(String::concat, String::concat).map(MD5::new);\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwke87l8.java:14: error: no suitable method found for reduce(String::concat,String::concat)\n\
    \        return text.chars().mapToObj(c -> (char) c).reduce(String::concat, String::concat).map(MD5::new);\n\
    \                                                   ^\n    method Stream.reduce(Character,BinaryOperator<Character>)\
    \ is not applicable\n      (argument mismatch; Character is not a functional interface)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Character,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\n/tmp/tmprwke87l8.java:14:\
    \ error: cannot find symbol\n        return text.chars().mapToObj(c -> (char)\
    \ c).reduce(String::concat, String::concat).map(MD5::new);\n                 \
    \                                                                            \
    \  ^\n  symbol:   class MD5\n  location: class Problem\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            String\
    \ hashedText = new String(\n                    MessageDigest.getInstance(\"MD5\"\
    ).digest(\n                            text.getBytes()));\n            return\
    \ Optional.of(hashedText);\n        } catch (NoSuchAlgorithmException e) {\n \
    \           e.printStackTrace();\n        }\n        return Optional.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbx2p08xm.java:25)\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] result = md.digest(text.getBytes());\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < result.length; i++) {\n\
    \            String hex = Integer.toHexString(0xff & result[i]);\n           \
    \ if (hex.length() == 1) {\n                sb.append('0');\n            }\n \
    \           sb.append(hex);\n        }\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_04v2g5.java:27: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> result\
    \ = Optional.empty();\n        if (Strings.isNullOrEmpty(text)) {\n          \
    \  return result;\n        }\n\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(text),\
    \ StandardCharsets.US_ASCII)) {\n            String line;\n            while ((line\
    \ = reader.readLine()) != null) {\n                String hashedLine = Hashing.md5().hashString(line,\
    \ Charsets.US_ASCII).toString();\n                result = Optional.of(hashedLine);\n\
    \                break;\n            }\n        } catch (IOException ex) {\n \
    \           throw new RuntimeException(ex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedbpfuaw.java:15: error: cannot find symbol\n        if (Strings.isNullOrEmpty(text))\
    \ {\n            ^\n  symbol:   variable Strings\n  location: class Problem\n\
    /tmp/tmpedbpfuaw.java:19: error: cannot find symbol\n        try (BufferedReader\
    \ reader = Files.newBufferedReader(Paths.get(text), StandardCharsets.US_ASCII))\
    \ {\n                                                                        \
    \      ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n/tmp/tmpedbpfuaw.java:19:\
    \ error: cannot find symbol\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(text),\
    \ StandardCharsets.US_ASCII)) {\n                                     ^\n  symbol:\
    \   variable Files\n  location: class Problem\n/tmp/tmpedbpfuaw.java:19: error:\
    \ cannot find symbol\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(text),\
    \ StandardCharsets.US_ASCII)) {\n                                            \
    \                 ^\n  symbol:   variable Paths\n  location: class Problem\n/tmp/tmpedbpfuaw.java:22:\
    \ error: cannot find symbol\n                String hashedLine = Hashing.md5().hashString(line,\
    \ Charsets.US_ASCII).toString();\n                                           \
    \                        ^\n  symbol:   variable Charsets\n  location: class Problem\n\
    /tmp/tmpedbpfuaw.java:22: error: cannot find symbol\n                String hashedLine\
    \ = Hashing.md5().hashString(line, Charsets.US_ASCII).toString();\n          \
    \                          ^\n  symbol:   variable Hashing\n  location: class\
    \ Problem\n6 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n\
    \            digest.update(bytes);\n            byte[] md5bytes = digest.digest();\n\
    \            return Optional.of(new String(md5bytes)); // Hex string\n       \
    \ } catch (NoSuchAlgorithmException | UnsupportedEncodingException ignored) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2nxtju5y.java:23: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException ignored) {\n                                \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            // Convert the byte array\
    \ to a hex string.\n            StringBuilder sb = new StringBuilder();\n    \
    \        for (int i = 0; i < digest.length; i++) {\n                sb.append(Integer.toString((digest[i]\
    \ & 0xff) + 0x100, 16).substring(1));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2lrrm4r.java:27: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF));\n    \
    \        }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            e.printStackTrace();\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgeu2rrn.java:28)\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] textBytes =\
    \ text.getBytes(StandardCharsets.UTF_8);\n            digest.update(textBytes);\n\
    \            return Optional.of(new BigInteger(1, digest.digest()).toString(16));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2t5dmp90.java:19: error: cannot find symbol\n            byte[]\
    \ textBytes = text.getBytes(StandardCharsets.UTF_8);\n                       \
    \                      ^\n  symbol:   variable StandardCharsets\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars().mapToObj(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(c\
    \ -> String.format(\"%1$02x\", c))\n            .map(c -> String.format(\"%1$02x\"\
    , c))\n            .map(c -> String.format(\"%1$02x\", c))\n            .map(\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl743xlrz.java:51: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \                .map(text -> {\n                    try {\n                 \
    \       return DigestUtils.md5Hex(text.getBytes());\n                    } catch\
    \ (UnsupportedEncodingException e) {\n                        throw new RuntimeException(e);\n\
    \                    }\n                });\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp6szjb4l.java:15: error: variable text is already defined in method\
    \ stringToMd5(String)\n                .map(text -> {\n                     ^\n\
    /tmp/tmpp6szjb4l.java:17: error: cannot find symbol\n                        return\
    \ DigestUtils.md5Hex(text.getBytes());\n                               ^\n  symbol:\
    \   variable DigestUtils\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return null;\n        }\n\n        // Convert text to an array of\
    \ 32-bit unsigned integers.\n        long[] values = Arrays.stream(text.split(\"\
    \")).mapToLong(Long::parseLong).toArray();\n\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] hash = digest.digest(values);\n        return new String(Base64.encode(hash));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzu0w0s4s.java:22: error: incompatible types: long[] cannot be converted\
    \ to byte[]\n        byte[] hash = digest.digest(values);\n                  \
    \                  ^\n/tmp/tmpzu0w0s4s.java:23: error: cannot find symbol\n  \
    \      return new String(Base64.encode(hash));\n                             \
    \   ^\n  symbol:   method encode(byte[])\n  location: class Base64\n/tmp/tmpzu0w0s4s.java:23:\
    \ error: incompatible types: String cannot be converted to Optional<String>\n\
    \        return new String(Base64.encode(hash));\n               ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ return null;\n        return Optional.ofNullable(new Md5Digest(text));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesk3f6e_.java:15: error: cannot find symbol\n        return Optional.ofNullable(new\
    \ Md5Digest(text));\n                                       ^\n  symbol:   class\
    \ Md5Digest\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Preconditions.checkNotNull(text,\
    \ \"Null text\");\n        if (text.isEmpty()) return Optional.empty();\n    \
    \    try {\n            return Optional.of(text.getBytes(UTF_8).map(String::new).map(MD5::digest).map(MD5::encodeHex).collect(Collectors.joining()));\n\
    \        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2j_s6tf.java:14: error: cannot find symbol\n        Preconditions.checkNotNull(text,\
    \ \"Null text\");\n        ^\n  symbol:   variable Preconditions\n  location:\
    \ class Problem\n/tmp/tmpx2j_s6tf.java:17: error: cannot find symbol\n       \
    \     return Optional.of(text.getBytes(UTF_8).map(String::new).map(MD5::digest).map(MD5::encodeHex).collect(Collectors.joining()));\n\
    \                                             ^\n  symbol:   variable UTF_8\n\
    \  location: class Problem\n/tmp/tmpx2j_s6tf.java:17: error: cannot find symbol\n\
    \            return Optional.of(text.getBytes(UTF_8).map(String::new).map(MD5::digest).map(MD5::encodeHex).collect(Collectors.joining()));\n\
    \                                                                         ^\n\
    \  symbol:   variable MD5\n  location: class Problem\n/tmp/tmpx2j_s6tf.java:17:\
    \ error: cannot find symbol\n            return Optional.of(text.getBytes(UTF_8).map(String::new).map(MD5::digest).map(MD5::encodeHex).collect(Collectors.joining()));\n\
    \                                                                            \
    \              ^\n  symbol:   variable MD5\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.trim().isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        digest.update(text.getBytes());\n\
    \        byte[] md5 = digest.digest();\n        return Optional.ofHexString(Arrays.copyOfRange(md5,\
    \ 0, md5.length));\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr147_gwa.java:20: error: cannot find symbol\n        return Optional.ofHexString(Arrays.copyOfRange(md5,\
    \ 0, md5.length));\n                       ^\n  symbol:   method ofHexString(byte[])\n\
    \  location: class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        final String SALT = \"\
    d67411a66e251e77b48ba5ed5be3fe78\";\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(SALT.getBytes());\n\
    \            md.update(text.getBytes());\n            return Optional.of(new BigInteger(1,\
    \ md.digest()).toString(16));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException\
    \ e) {\n            throw new RuntimeException(\"MD5 not available for \" + text,\
    \ e);\n        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxhfyrnr.java:23: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null) {\n \
    \           return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] hashed = digest.digest(text.getBytes());\n\
    \            String hashedString = new String(hashed);\n            hashedString\
    \ = hashedString.substring(0, 8);\n            return Optional.of(hashedString);\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3kfgx_j.java:28)\n"
  stdout: ''
  timestamp: 1659976586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ messageDigest = md.digest(text.getBytes());\n            BigInteger bigInt =\
    \ new BigInteger(1, messageDigest);\n            String hashtext = bigInt.toString(16);\n\
    \            if (hashtext.length() < 32) {\n                return Optional.of(hashtext);\n\
    \            } else {\n                return Optional.of(hashtext.substring(0,\
    \ 32));\n            }\n        } catch (NoSuchAlgorithmException e) {\n     \
    \       e.printStackTrace();\n        }\n        return Optional.empty();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwsjzccm.java:33)\n"
  stdout: ''
  timestamp: 1659976586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        } else {\n            return Optional.of(DigestUtils.md5Hex(text));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tdbmqmf.java:17: error: cannot find symbol\n            return\
    \ Optional.of(DigestUtils.md5Hex(text));\n                               ^\n \
    \ symbol:   variable DigestUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty())\n \
    \           return Optional.empty();\n\n        MessageDigest md5 = null;\n  \
    \      try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n   \
    \         return Optional.empty();\n        }\n\n        md5.reset();\n      \
    \  byte[] buffer = new byte[4096];\n        ByteArrayOutputStream output = new\
    \ ByteArrayOutputStream();\n        FileInputStream in = new FileInputStream(new\
    \ File(\"file.txt\"));\n        int read = 0;\n        while ((read = in.read(buffer))\
    \ > 0) {\n            output.write(buffer, 0, read);\n        }\n        byte[]\
    \ byteArray = output.toByteArray();\n        md5.update(byteArray, 0, byteArray.length);\n\
    \        byte[] md5bytes = md5.digest();\n        String md5hashStr = bytesToString(md5bytes);\n\
    \        System.out.println(md5hashStr);\n        return Optional.of(md5hashStr);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuf7f1ua9.java:36: error: cannot find symbol\n        String md5hashStr\
    \ = bytesToString(md5bytes);\n                            ^\n  symbol:   method\
    \ bytesToString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \                .map(s -> java.security.MessageDigest.getInstance(\"MD5\").digest(s.getBytes()))\n\
    \                .map(MessageDigest::toString)\n                .map(s -> s.startsWith(\"\
    MD5-\") ? \"MD5-\" + s.substring(4) : s)\n                .map(Hash::new);\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3sxsyf0o.java:16: error: incompatible types: invalid method reference\n\
    \                .map(MessageDigest::toString)\n                     ^\n    method\
    \ toString in class MessageDigest cannot be applied to given types\n      required:\
    \ no arguments\n      found:    byte[]\n      reason: actual and formal argument\
    \ lists differ in length\n/tmp/tmp3sxsyf0o.java:18: error: cannot find symbol\n\
    \                .map(Hash::new);\n                     ^\n  symbol:   class Hash\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::md5).orElse(null);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp039ot8ft.java:14: error: invalid method reference\n        return\
    \ Optional.ofNullable(text).map(String::md5).orElse(null);\n                 \
    \                            ^\n  cannot find symbol\n    symbol:   method md5()\n\
    \    location: class String\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text == null ||\
    \ text.isEmpty() ? null : Optional.of(hashString(text));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptphju34n.java:14: error: cannot find symbol\n        return text\
    \ == null || text.isEmpty() ? null : Optional.of(hashString(text));\n        \
    \                                                           ^\n  symbol:   method\
    \ hashString(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars().map(c\
    \ -> (char) c).map(String::valueOf).map(md5Function).findAny();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuam87hxn.java:14: error: cannot find symbol\n        return text.chars().map(c\
    \ -> (char) c).map(String::valueOf).map(md5Function).findAny();\n            \
    \                                                            ^\n  symbol:   variable\
    \ md5Function\n  location: class Problem\n/tmp/tmpuam87hxn.java:14: error: incompatible\
    \ types: bad return type in method reference\n        return text.chars().map(c\
    \ -> (char) c).map(String::valueOf).map(md5Function).findAny();\n            \
    \                                       ^\n    String cannot be converted to int\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> new String(Md5.digest(s.getBytes())));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpajx93n_u.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(s\
    \ -> new String(Md5.digest(s.getBytes())));\n                                \
    \                             ^\n  symbol:   variable Md5\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2v1jfhiw.java:17: error: cannot find symbol\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \                           ^\n  symbol:   variable DigestUtils\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // Your code here\n   \
    \     if (text.isEmpty())\n            return Optional.empty();\n\n        String\
    \ text = text.toLowerCase().trim();\n        System.out.println(\"Text is \" +\
    \ text + \"\\n\");\n\n        String MD5_SALT = \"8ed5fa95b7c1f3a079c1bc5e3c007998\"\
    ;\n        byte[] bytes = text.getBytes(StandardCharsets.UTF_8);\n        MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n        md.update(bytes, 0, bytes.length);\n\
    \        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1,\
    \ digest);\n        long hash = bigInt.longValue();\n\n        // Convert it back\
    \ to hex format and return it\n        return Optional.of(Long.toString(hash,\
    \ 36));\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0l632h8.java:18: error: variable text is already defined in method\
    \ stringToMd5(String)\n        String text = text.toLowerCase().trim();\n    \
    \           ^\n/tmp/tmpb0l632h8.java:22: error: cannot find symbol\n        byte[]\
    \ bytes = text.getBytes(StandardCharsets.UTF_8);\n                           \
    \          ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            return\
    \ Optional.of(String.format(\"%032x\", new BigInteger(1, bytes)));\n        }\
    \ catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg0b_s8d.java:19: error: cannot find symbol\n            byte[]\
    \ bytes = md.digest(text.getBytes(StandardCharsets.UTF_8));\n                \
    \                                   ^\n  symbol:   variable StandardCharsets\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \                .map(s -> {\n                    try {\n                    \
    \    return new String(java.security.MessageDigest.getInstance(\"MD5\").digest(s.getBytes()));\n\
    \                    }\n                    catch (NoSuchAlgorithmException e)\
    \ {\n                        throw new RuntimeException(e);\n                \
    \    }\n                })\n                .map(String::toUpperCase);\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8n2i30xe.java:26)\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < bytes.length; i++) {\n                sb.append(Integer.toHexString((bytes[i]\
    \ & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxnulffm.java:25: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ return Optional.empty();\n        \n        MessageDigest digest = null;\n \
    \       try {\n            digest = MessageDigest.getInstance(\"MD5\");\n    \
    \    } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n        \n        byte[] hashBytes = digest.digest(text.getBytes());\n\
    \        return Optional.of(String.format(\"%016x\", new BigInteger(1, hashBytes)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpipz6h3ug.java:27)\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"MD5 hash\
    \ of an empty string is null\"))\n            return Optional.of(null);\n    \
    \    if (text == null)\n            return Optional.of(null);\n        MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n        return Optional.of(md.digest(text.getBytes()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9olvk6n.java:19: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(md.digest(text.getBytes()));\n\
    \                          ^\n    equality constraints: String\n    lower bounds:\
    \ byte[]\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.length() == 0)\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest md5\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] textBytes = text.getBytes();\n\
    \        byte[] digestBytes = md5.digest(textBytes);\n        return Optional.of(bytesToHexString(digestBytes));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppkiwkbgo.java:20: error: cannot find symbol\n        return Optional.of(bytesToHexString(digestBytes));\n\
    \                           ^\n  symbol:   method bytesToHexString(byte[])\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null)\n   \
    \         return Optional.of(null);\n        String hashed = \"\";\n        try\
    \ {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    \
    \        byte[] data = md.digest(text.getBytes(StandardCharsets.UTF_8));\n   \
    \         BigInteger bigInt = new BigInteger(1, data);\n            hashed = bigInt.toString(16);\n\
    \        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \        }\n        return Optional.of(hashed);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ngox42s.java:19: error: cannot find symbol\n            byte[]\
    \ data = md.digest(text.getBytes(StandardCharsets.UTF_8));\n                 \
    \                                 ^\n  symbol:   variable StandardCharsets\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\
    \ {\n            return Optional.empty();\n        } else {\n            try {\n\
    \                MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\"\
    );\n                messageDigest.update(text.getBytes());\n                byte[]\
    \ md = messageDigest.digest();\n                BigInteger number = new BigInteger(1,\
    \ md);\n                String md5 = number.toString(16);\n                return\
    \ Optional.of(md5);\n            } catch (NoSuchAlgorithmException exception)\
    \ {\n                return Optional.empty();\n            }\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcm20z2q.java:30)\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        String hash = DigestUtils.md5Hex(text.getBytes());\n\
    \        return Optional.of(hash);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgs90chfr.java:14: error: cannot find symbol\n        String hash\
    \ = DigestUtils.md5Hex(text.getBytes());\n                      ^\n  symbol: \
    \  variable DigestUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> result\
    \ = Optional.empty();\n        if (text == null || text.isEmpty()) {\n       \
    \     return result;\n        }\n        try {\n            MessageDigest md =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (byte b\
    \ : bytes) {\n                sb.append(Integer.toHexString(b & 0xFF) + \"\");\n\
    \            }\n            result = Optional.of(String.format(\"%32s\", sb.toString()).replaceAll(\"\
    (.{32})\", \"$1\\n\").trim());\n        } catch (NoSuchAlgorithmException e) {\n\
    \            throw new RuntimeException(e);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ol3w5yj.java:32)\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.ofNullable(java.util.Objects.requireNonNull(\n\
    \                java.security.MessageDigest.getInstance(\"MD5\").\n         \
    \       digest(text)));\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprclphjm0.java:19: error: incompatible types: String cannot be converted\
    \ to byte[]\n                digest(text)));\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.isEmpty() ?\
    \ Optional.<String>empty() : Optional.of(Md5.hash(text));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93qzyk9n.java:14: error: cannot find symbol\n        return text.isEmpty()\
    \ ? Optional.<String>empty() : Optional.of(Md5.hash(text));\n                \
    \                                                       ^\n  symbol:   variable\
    \ Md5\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.of(null);\n        }\n        try {\n           \
    \ MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n        \
    \    return Optional.of(ByteArrayUtils.toString(messageDigest.digest(text.getBytes(StandardCharsets.UTF_8))))\n\
    \                    .filter(s -> s != null);\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngo3h_0h.java:19: error: cannot find symbol\n            return\
    \ Optional.of(ByteArrayUtils.toString(messageDigest.digest(text.getBytes(StandardCharsets.UTF_8))))\n\
    \                               ^\n  symbol:   variable ByteArrayUtils\n  location:\
    \ class Problem\n/tmp/tmpngo3h_0h.java:19: error: cannot find symbol\n       \
    \     return Optional.of(ByteArrayUtils.toString(messageDigest.digest(text.getBytes(StandardCharsets.UTF_8))))\n\
    \                                                                            \
    \              ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n        return Optional.ofNullable(DigestUtils.md5Hex(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_vxfqso.java:17: error: cannot find symbol\n        return Optional.ofNullable(DigestUtils.md5Hex(text));\n\
    \                                   ^\n  symbol:   variable DigestUtils\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            BigInteger number = new\
    \ BigInteger(1, digest);\n            String md5String = number.toString(16);\n\
    \            if (md5String.length() > 40) {\n                return Optional.empty();\n\
    \            }\n            return Optional.of(md5String);\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxj1owu79.java:29)\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(text.getBytes(\"\
    UTF-8\"));\n            byte[] hash = md5.digest();\n            return Optional.of(convertToHex(hash));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj47m1otj.java:21: error: cannot find symbol\n            return\
    \ Optional.of(convertToHex(hash));\n                               ^\n  symbol:\
    \   method convertToHex(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try { return Optional.ofNullable(\n\
    \            java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes()));\
    \ }\n        catch (NoSuchAlgorithmException) { return null; }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1loj6rbn.java:16: error: <identifier> expected\n        catch (NoSuchAlgorithmException)\
    \ { return null; }\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjeak3rvy.java:17: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()));\n                          ^\n    equality constraints:\
    \ String\n    lower bounds: byte[]\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(text.getBytes());\n\
    \            return Optional.of(md5.digest().map(hex -> {\n                StringBuilder\
    \ sb = new StringBuilder(hex.length * 2);\n                for (int i = 0; i <\
    \ hex.length; ++i) {\n                    sb.append(hex.charAt(i));\n        \
    \            sb.append(hex.charAt(i));\n                }\n                return\
    \ sb.toString();\n            }).collect(Collectors.joining(\"\")));\n       \
    \ } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n    \
    \        return Optional.empty();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i12gkvw.java:17: error: cannot find symbol\n            return\
    \ Optional.of(md5.digest().map(hex -> {\n                                    \
    \       ^\n  symbol:   method map((hex)->{ S[...](); })\n  location: class byte[]\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(input\
    \ -> md5Hex(text));\n    }\n    public static void main(String[] args) {\n   \
    \ assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wzxwaxy.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(input\
    \ -> md5Hex(text));\n                                                      ^\n\
    \  symbol:   method md5Hex(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        } else {\n            return Optional.ofNullable(\n\
    \                    DigestUtils.md5Hex(text.getBytes(Charsets.UTF_8))\n     \
    \       );\n        }\n    }\n    public static void main(String[] args) {\n \
    \   assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyxtr6xyv.java:18: error: cannot find symbol\n                 \
    \   DigestUtils.md5Hex(text.getBytes(Charsets.UTF_8))\n                    ^\n\
    \  symbol:   variable DigestUtils\n  location: class Problem\n/tmp/tmpyxtr6xyv.java:18:\
    \ error: cannot find symbol\n                    DigestUtils.md5Hex(text.getBytes(Charsets.UTF_8))\n\
    \                                                     ^\n  symbol:   variable\
    \ Charsets\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = digest.digest(text.getBytes());\n\
    \            return Optional.of(convertByteArrayToHexString(bytes));\n       \
    \ }\n        catch (NoSuchAlgorithmException | UnsupportedEncodingException e)\
    \ {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwjilek6.java:17: error: cannot find symbol\n            return\
    \ Optional.of(convertByteArrayToHexString(bytes));\n                         \
    \      ^\n  symbol:   method convertByteArrayToHexString(byte[])\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        byte[] bytes = text.getBytes();\n\
    \        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(bytes);\n\
    \        byte[] digest = md5.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < digest.length; i++) {\n            int val = (int)\
    \ digest[i];\n            if (val < 16) {\n                sb.append(\"0\");\n\
    \            }\n            sb.append(Integer.toHexString(val));\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0eywjmtq.java:26: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null) {\n \
    \           return Optional.empty();\n        } else {\n            try {\n  \
    \              return Optional.of(\n                        java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes())\n                );\n            } catch (NoSuchAlgorithmException\
    \ e) {\n                throw new RuntimeException(e);\n            }\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpao9jwxa3.java:18: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                return Optional.of(\n           \
    \                       ^\n    equality constraints: String\n    lower bounds:\
    \ byte[]\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ input = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            StringBuilder\
    \ sb = new StringBuilder();\n            for (byte b : input) {\n            \
    \    sb.append(Integer.toHexString(b & 0xFF) + \":\");\n            }\n      \
    \      return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovq39_6h.java:19: error: cannot find symbol\n            byte[]\
    \ input = md.digest(text.getBytes(StandardCharsets.UTF_8));\n                \
    \                                   ^\n  symbol:   variable StandardCharsets\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.empty();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n            byte[] bytes = md5.digest(text.getBytes());\n           \
    \ return Optional.ofHexString(bytes);\n        } catch (NoSuchAlgorithmException\
    \ | IllegalStateException e) {\n            return Optional.empty();\n       \
    \ }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gij_42_.java:18: error: cannot find symbol\n            return\
    \ Optional.ofHexString(bytes);\n                           ^\n  symbol:   method\
    \ ofHexString(byte[])\n  location: class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(input\
    \ -> {\n            try {\n                MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n                md5.update(input.getBytes());\n                return\
    \ new BigInteger(1, md5.digest()).toString(16);\n            } catch (NoSuchAlgorithmException\
    \ e) {\n                return null;\n            }\n        });\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau5rozr6.java:25)\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\n\
    \            return Optional.empty();\n        try {\n            MessageDigest\
    \ md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(text.getBytes());\n\
    \            byte[] hash = md5.digest();\n            StringBuilder sb = new StringBuilder(2\
    \ * hash.length);\n            for (int i = 0; i < hash.length; i++) {\n     \
    \           sb.append(Integer.toHexString((hash[i] & 0xFF) | 0x100).substring(1,3));\n\
    \            }\n            return Optional.of(String.valueOf(sb));\n        }\
    \ catch (NoSuchAlgorithmException | DigestException e) {\n            throw new\
    \ RuntimeException(e);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqefcag0.java:25: error: exception DigestException is never thrown\
    \ in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | DigestException e) {\n                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // TODO Implement me.\n\
    \        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"\
    MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \            return Optional.empty();\n        }\n        return Optional.ofNullable(toHexString(md.digest(text.getBytes(\"\
    utf-8\"))));\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszeq5kli.java:22: error: cannot find symbol\n        return Optional.ofNullable(toHexString(md.digest(text.getBytes(\"\
    utf-8\"))));\n                                   ^\n  symbol:   method toHexString(byte[])\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\n\
    \            return Optional.empty();\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            return\
    \ Optional.of(hexToString(digest.digest()));\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6wsentzy.java:20: error: cannot find symbol\n            return\
    \ Optional.of(hexToString(digest.digest()));\n                               ^\n\
    \  symbol:   method hexToString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.codePoints()\n\
    \                .map(c -> String.format(\"%04x\", c))\n                .collect(toList())\n\
    \                .reverse()\n                .map(s -> new StringBuilder().append(s).append(padding(s.length())).reverse().toString())\n\
    \                .map(s -> computeHash(s))\n                .filter(Optional::isPresent)\n\
    \                .map(Optional::get)\n                .findFirst();\n    }\n \
    \   public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3l7247j.java:15: error: incompatible types: bad return type in\
    \ lambda expression\n                .map(c -> String.format(\"%04x\", c))\n \
    \                                      ^\n    String cannot be converted to int\n\
    /tmp/tmpu3l7247j.java:16: error: cannot find symbol\n                .collect(toList())\n\
    \                         ^\n  symbol:   method toList()\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try { return Optional.ofNullable(DigestUtil.md5(text).getHexDigest());\
    \ }\n        catch (NoSuchAlgorithmException ex) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1wpx8l1.java:14: error: cannot find symbol\n        try { return\
    \ Optional.ofNullable(DigestUtil.md5(text).getHexDigest()); }\n              \
    \                           ^\n  symbol:   variable DigestUtil\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        final MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        final byte[] byteArray = text.getBytes(\"\
    UTF-8\");\n        final byte[] md5ByteArray = digest.digest(byteArray);\n   \
    \     return Optional.of(new BigInteger(1, md5ByteArray).toString(16));\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmzj1jbo.java:14: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        final MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n                                    \
    \                          ^\n/tmp/tmpnmzj1jbo.java:15: error: unreported exception\
    \ UnsupportedEncodingException; must be caught or declared to be thrown\n    \
    \    final byte[] byteArray = text.getBytes(\"UTF-8\");\n                    \
    \                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.empty();\n        try {\n            byte[] bytes = text.getBytes();\n\
    \            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \
    \    byte[] digest = md.digest(bytes);\n            return Optional.of(new BigInteger(1,\
    \ digest).toString(16));\n        } catch (NoSuchAlgorithmException | InvalidKeyException\
    \ | IOException e) {\n            return Optional.empty();\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaso84itx.java:20: error: exception InvalidKeyException is never\
    \ thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | InvalidKeyException | IOException e) {\n                                 \
    \           ^\n/tmp/tmpaso84itx.java:20: error: exception IOException is never\
    \ thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | InvalidKeyException | IOException e) {\n                                 \
    \                                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n      if (text.isEmpty()) return\
    \ Optional.empty();\n\n      try {\n        // convert input string to bytes array\
    \ (utf-8)\n        byte[] inputBytes = text.getBytes(StandardCharsets.UTF_8);\n\
    \        // compute md5 hash\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        md.update(inputBytes);\n        byte messageDigest[] = md.digest();\n\
    \n        // convert byte array to hex string\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (byte aMessageDigest : messageDigest) {\n    \
    \      String hex = Integer.toHexString(0xFF & aMessageDigest);\n          if\
    \ (hex.length() == 1)\n            sb.append(\"0\");\n          sb.append(hex);\n\
    \        }\n        return sb.toString();\n\n      } catch (NoSuchAlgorithmException\
    \ | IOException e) {\n        return Optional.empty();\n      }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h5eh523.java:18: error: cannot find symbol\n        byte[] inputBytes\
    \ = text.getBytes(StandardCharsets.UTF_8);\n                                 \
    \         ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n\
    /tmp/tmp2h5eh523.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        \n        Optional<String>\
    \ md = Optional.ofNullable(text);\n        if (md.isPresent()) {\n           \
    \ String md5 = Hashing.md5().hashString(md.get()).substring(0, 16);\n        \
    \    if (md5.startsWith(\"0x\")) {\n                md = Optional.of(md5);\n \
    \           }\n        }\n        return md;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlaeggg6.java:17: error: cannot find symbol\n            String\
    \ md5 = Hashing.md5().hashString(md.get()).substring(0, 16);\n               \
    \          ^\n  symbol:   variable Hashing\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        final MessageDigest messageDigest\
    \ = MessageDigest.getInstance(\"MD5\");\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        byte[] md5sum =\
    \ messageDigest.digest(text.getBytes());\n        return new String(Base64.encode(md5sum));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf81bdjhe.java:19: error: cannot find symbol\n        return new\
    \ String(Base64.encode(md5sum));\n                                ^\n  symbol:\
    \   method encode(byte[])\n  location: class Base64\n/tmp/tmpf81bdjhe.java:19:\
    \ error: incompatible types: String cannot be converted to Optional<String>\n\
    \        return new String(Base64.encode(md5sum));\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] hashBytes = digest.digest();\n\
    \        StringBuilder sb = new StringBuilder();\n        for(byte b : hashBytes)\
    \ {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdumm9v5i.java:25: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \                       .filter(s -> !s.isEmpty())\n                       .map(String::trim)\n\
    \                       .map(s -> {\n                           try {\n      \
    \                         MessageDigest md = MessageDigest.getInstance(\"MD5\"\
    );\n                               byte[] hashed = md.digest(s.getBytes());\n\
    \                               StringBuilder sb = new StringBuilder();\n    \
    \                           for (byte b : hashed) {\n                        \
    \           sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1,3));\n\
    \                               }\n                               return sb.toString();\n\
    \                           } catch (NoSuchAlgorithmException nsae) {\n      \
    \                         throw new AssertionError(nsae.getMessage(), nsae);\n\
    \                           }\n                       });\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu31a8ykm.java:32)\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // Convert to uppercase\
    \ string\n        String s = text.toUpperCase();\n        // Use java 8's stream\
    \ API to convert string to md5 digest\n        Optional<String> md5digest = Optional.ofNullable(s.chars().mapToObj(c\
    \ -> {\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                digest.reset();\n                digest.update(c.getBytes());\n\
    \                byte[] array = digest.digest();\n                return new String(array);\n\
    \            } catch (NoSuchAlgorithmException e) {\n                throw new\
    \ RuntimeException(e);\n            }\n        }).collect(Collectors.joining()));\n\
    \        return md5digest;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2yprfx88.java:21: error: int cannot be dereferenced\n         \
    \       digest.update(c.getBytes());\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.length()\
    \ == 0) {\n            return Optional.empty();\n        }\n        try {\n  \
    \          byte[] byteArray = text.getBytes(\"UTF-8\");\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = digest.digest(byteArray);\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < hash.length; i++) {\n                sb.append(Integer.toHexString((hash[i]\
    \ >> 4) & 0xF));\n                sb.append(Integer.toHexString(hash[i] & 0xF));\n\
    \            }\n            return Optional.of(sb.toString());\n        } catch\
    \ (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return\
    \ Optional.empty();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2hxt6l_.java:32)\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \            .filter(text -> !text.equals(\"\"))\n            .map(text -> {\n\
    \                try {\n                    byte[] hash = MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes());\n                    return hash;\n          \
    \      } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n\
    \                }\n                return null;\n            });\n    }\n   \
    \ public static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\"\
    )).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\"\
    )).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp50emuk8h.java:15: error: variable text is already defined in method\
    \ stringToMd5(String)\n            .filter(text -> !text.equals(\"\"))\n     \
    \               ^\n/tmp/tmp50emuk8h.java:16: error: variable text is already defined\
    \ in method stringToMd5(String)\n            .map(text -> {\n                \
    \ ^\n/tmp/tmp50emuk8h.java:16: error: incompatible types: inference variable U\
    \ has incompatible bounds\n            .map(text -> {\n                ^\n   \
    \ equality constraints: String\n    lower bounds: byte[]\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>map(Function<? super T,? extends U>)\n\
    \    T extends Object declared in class Optional\n3 errors\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // The Java 8 stream can\
    \ be replaced with an imperative for loop\n        return Optional.ofNullable(text)\n\
    \            .filter(text -> text.trim().isEmpty())\n            .map(s -> null);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fu5wuic.java:16: error: variable text is already defined in method\
    \ stringToMd5(String)\n            .filter(text -> text.trim().isEmpty())\n  \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text == null ? Optional.empty()\
    \ : Optional.ofNullable(DigestUtil.md5(text));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptp44ib19.java:14: error: cannot find symbol\n        return text\
    \ == null ? Optional.empty() : Optional.ofNullable(DigestUtil.md5(text));\n  \
    \                                                                   ^\n  symbol:\
    \   variable DigestUtil\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes(StandardCharsets.UTF_8);\n\
    \        digest.update(bytes, 0, bytes.length);\n        byte[] digestBytes =\
    \ digest.digest();\n        StringBuilder builder = new StringBuilder(32);\n \
    \       for (int i = 0; i < digestBytes.length; i++) {\n            String hex\
    \ = Integer.toHexString(0xFF & digestBytes[i]);\n            if (hex.length()\
    \ == 1) {\n                builder.append('0');\n            }\n            builder.append(hex);\n\
    \        }\n        return Optional.ofNullable(builder.toString());\n    }\n \
    \   public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdc3h59zm.java:18: error: cannot find symbol\n        byte[] bytes\
    \ = text.getBytes(StandardCharsets.UTF_8);\n                                 \
    \    ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // Check if text is empty\n\
    \        if (text == null || text.isEmpty()) {\n            return Optional.ofNullable(null);\n\
    \        }\n        // Convert string to bytes\n        byte[] stringBytes = text.getBytes();\n\
    \        // Make MD5 Hash instance\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n        // Hash bytes\n        md5.update(stringBytes);\n        // Return\
    \ hex string\n        return Optional.ofHexadecimalString(md5.digest());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa83l1x9_.java:25: error: cannot find symbol\n        return Optional.ofHexadecimalString(md5.digest());\n\
    \                       ^\n  symbol:   method ofHexadecimalString(byte[])\n  location:\
    \ class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(text.getBytes());\n\
    \            byte[] result = md5.digest();\n            return Optional.ofHexString(Arrays.toString(result));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzb0vfkvp.java:18: error: cannot find symbol\n            return\
    \ Optional.ofHexString(Arrays.toString(result));\n                           ^\n\
    \  symbol:   method ofHexString(String)\n  location: class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        byte[] digest = DigestUtils.md5(text.getBytes(Charset.defaultCharset()));\n\
    \        byte[] hexdigest = digest;\n        String hexString = null;\n      \
    \  try {\n            hexString = hexArrayToString(digest);\n        } catch (IOException\
    \ exc) {\n            exc.printStackTrace();\n        }\n        return Optional.ofNullable(hexString);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps3ihd77q.java:14: error: cannot find symbol\n        byte[] digest\
    \ = DigestUtils.md5(text.getBytes(Charset.defaultCharset()));\n              \
    \          ^\n  symbol:   variable DigestUtils\n  location: class Problem\n/tmp/tmps3ihd77q.java:14:\
    \ error: cannot find symbol\n        byte[] digest = DigestUtils.md5(text.getBytes(Charset.defaultCharset()));\n\
    \                                                      ^\n  symbol:   variable\
    \ Charset\n  location: class Problem\n/tmp/tmps3ihd77q.java:18: error: cannot\
    \ find symbol\n            hexString = hexArrayToString(digest);\n           \
    \             ^\n  symbol:   method hexArrayToString(byte[])\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(x\
    \ -> hash(x))\n                .map(x -> x.substring(0, x.length()-5))\n     \
    \           .map(x -> x + \"-\" + (x.length() % 0xFFFF))\n                .map(x\
    \ -> new StringBuilder().append(x).append(x.toLowerCase(Locale.ROOT))\n      \
    \          .append(\"-2\").append(\"-4\")\n                .toString());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zfpr6_d.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(x\
    \ -> hash(x))\n                                                  ^\n  symbol:\
    \   method hash(String)\n  location: class Problem\n/tmp/tmp2zfpr6_d.java:15:\
    \ error: cannot find symbol\n                .map(x -> x.substring(0, x.length()-5))\n\
    \                                          ^\n  symbol:   method length()\n  location:\
    \ variable x of type Object\n/tmp/tmp2zfpr6_d.java:16: error: cannot find symbol\n\
    \                .map(x -> x + \"-\" + (x.length() % 0xFFFF))\n              \
    \                        ^\n  symbol:   method length()\n  location: variable\
    \ x of type Object\n/tmp/tmp2zfpr6_d.java:17: error: cannot find symbol\n    \
    \            .map(x -> new StringBuilder().append(x).append(x.toLowerCase(Locale.ROOT))\n\
    \                                                                ^\n  symbol:\
    \   method toLowerCase(Locale)\n  location: variable x of type Object\n4 errors\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    return Optional.of(MessageDigest.getInstance(\"MD5\").digest(text.getBytes()));\n\
    \        } catch (NoSuchAlgorithmException exception) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5osdsr0s.java:18: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            return Optional.of(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()));\n                              ^\n    equality\
    \ constraints: String\n    lower bounds: byte[]\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.isEmpty() ?\
    \ Optional.empty() : Optional.of(md5(text));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeyyc02mm.java:14: error: cannot find symbol\n        return text.isEmpty()\
    \ ? Optional.empty() : Optional.of(md5(text));\n                             \
    \                                  ^\n  symbol:   method md5(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.length()\
    \ == 0) {\n            return null;\n        }\n        return Optional.of(md5(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7uevalu7.java:17: error: cannot find symbol\n        return Optional.of(md5(text));\n\
    \                           ^\n  symbol:   method md5(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty())\n \
    \           return Optional.empty();\n\n        MessageDigest digest = null;\n\
    \n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n  \
    \      } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n\n        byte[] bytes = text.getBytes();\n\n        digest.update(bytes,\
    \ 0, bytes.length);\n\n        return Optional.of(new String(Base64.encode(digest.digest())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7p0rmqt.java:29: error: cannot find symbol\n        return Optional.of(new\
    \ String(Base64.encode(digest.digest())));\n                                 \
    \           ^\n  symbol:   method encode(byte[])\n  location: class Base64\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars().mapToObj(i\
    \ -> Integer.toString(i & 0xff))\n                .filter(s -> !s.isEmpty())\n\
    \                .map(s -> \"0\" + s).map(String::new).map(md5 -> md5.toString()).map(s\
    \ -> s.length() == 32 ? s : s.substring(0, 64) + \"...\") + text.substring(text.length());\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6d7pcar.java:16: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n                .map(s -> \"0\" + s).map(String::new).map(md5\
    \ -> md5.toString()).map(s -> s.length() == 32 ? s : s.substring(0, 64) + \"...\"\
    ) + text.substring(text.length());\n                                         \
    \                                                                            \
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.of(null);\n        MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        return Optional.of(byteArrayToHexString(bytes));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabf73ioi.java:17: error: cannot find symbol\n        return Optional.of(byteArrayToHexString(bytes));\n\
    \                           ^\n  symbol:   method byteArrayToHexString(byte[])\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.trim().isEmpty())\n\
    \            return Optional.empty();\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n        byte[] bytes = text.getBytes();\n        digest.update(bytes);\n\
    \        byte[] hash = digest.digest();\n        String hashStr = \"\";\n    \
    \    for (int i = 0; i < bytes.length; i++) {\n            hashStr += bytes[i].toString();\n\
    \        }\n        return Optional.of(hashStr);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9spujk97.java:22: error: byte cannot be dereferenced\n        \
    \    hashStr += bytes[i].toString();\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ bytes = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < bytes.length; i++) {\n                sb.append(Integer.toHexString((bytes[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54xq9js9.java:30)\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars()\n \
    \               .mapToObj(i -> Character.toString((char) i))\n               \
    \ .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \                .map(s -> Md5.md5(s).hex());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppofiin3g.java:16: error: no suitable method found for collect(StringBuilder::new,StringBuil[...]Point,StringBuil[...]ppend)\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super String>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (argument mismatch; invalid method reference\n          incompatible\
    \ types: String cannot be converted to int))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super String,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (actual and formal argument lists differ in length))\n  where\
    \ R#1,T,R#2,A are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    /tmp/tmppofiin3g.java:17: error: cannot find symbol\n                .map(s ->\
    \ Md5.md5(s).hex());\n                          ^\n  symbol:   variable Md5\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n            byte[] bytes = text.getBytes(\"UTF-8\");\n            md.update(bytes,\
    \ 0, bytes.length);\n            byte[] md5Bytes = md.digest();\n            StringBuilder\
    \ sb = new StringBuilder();\n            for (int i = 0; i < md5Bytes.length;\
    \ i++) {\n                sb.append(Integer.toHexString((md5Bytes[i] & 0xFF) |\
    \ 0x100).substring(1).toUpperCase());\n            }\n            String result\
    \ = sb.toString();\n            return Optional.of(result);\n        } catch (NoSuchAlgorithmException\
    \ ex) {\n            ex.printStackTrace();\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5lu8vjj.java:17: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[]\
    \ input = text.getBytes(StandardCharsets.UTF_8);\n            byte[] output =\
    \ new byte[digest.getDigestLength()];\n            digest.update(input, 0, input.length,\
    \ output, 0);\n            String outputMd5 = new BigInteger(1, output).toString(16);\n\
    \            return Optional.of(\"0x\" + outputMd5);\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilgnja0_.java:19: error: cannot find symbol\n            byte[]\
    \ input = text.getBytes(StandardCharsets.UTF_8);\n                           \
    \              ^\n  symbol:   variable StandardCharsets\n  location: class Problem\n\
    /tmp/tmpilgnja0_.java:21: error: no suitable method found for update(byte[],int,int,byte[],int)\n\
    \            digest.update(input, 0, input.length, output, 0);\n             \
    \     ^\n    method MessageDigest.update(byte) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    method MessageDigest.update(byte[],int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method MessageDigest.update(byte[]) is not applicable\n      (actual and\
    \ formal argument lists differ in length)\n    method MessageDigest.update(ByteBuffer)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // Convert 'text' to lower\
    \ case\n        final String lcase = text.toLowerCase(Locale.ROOT);\n        //\
    \ Create MD5 hash object\n        final MessageDigest md5;\n        try {\n  \
    \          md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n        // Initialize\
    \ hash value with the first character of 'text'\n        byte messageDigest[]\
    \ = new byte[1];\n        messageDigest[0] = (byte) lcase.charAt(0);\n       \
    \ // Calculate the md5 hash value\n        md5.update(messageDigest);\n      \
    \  // Convert hash value to hex string and return\n        return Optional.ofNullable(Hex.encodeHexString(md5.digest()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6c4cv_4.java:29: error: cannot find symbol\n        return Optional.ofNullable(Hex.encodeHexString(md5.digest()));\n\
    \                                   ^\n  symbol:   variable Hex\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text == null || text.trim().equals(\"\
    \"))\n            return Optional.empty();\n        try {\n            MessageDigest\
    \ md5 = MessageDigest.getInstance(\"MD5\");\n            byte[] input;\n     \
    \       input = text.getBytes();\n            md5.update(input);\n           \
    \ byte[] result = md5.digest();\n            return Optional.of(\n           \
    \         StringUtils.toHexString(result)\n            );\n        } catch (NoSuchAlgorithmException\
    \ | NoSuchPaddingException exception) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6yriw5eb.java:23: error: cannot find symbol\n                 \
    \   StringUtils.toHexString(result)\n                    ^\n  symbol:   variable\
    \ StringUtils\n  location: class Problem\n/tmp/tmp6yriw5eb.java:25: error: cannot\
    \ find symbol\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException\
    \ exception) {\n                                            ^\n  symbol:   class\
    \ NoSuchPaddingException\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            DigestUtils\
    \ digestUtils = new DigestUtils();\n            MessageDigest messageDigest =\
    \ digestUtils.getMessageDigest(DigestUtils.md5());\n            messageDigest.update(text.getBytes());\n\
    \            byte[] bytes = messageDigest.digest();\n            StringBuilder\
    \ sBuilder = new StringBuilder();\n            for (byte b : bytes) {\n      \
    \          String bs = Integer.toHexString(b & 0xFF);\n                if (bs.length()\
    \ == 1) sBuilder.append('0');\n                sBuilder.append(bs);\n        \
    \    }\n            return Optional.of(new String(sBuilder.toString()));\n   \
    \     } catch (NoSuchAlgorithmException | IllegalArgumentException | UnsupportedEncodingException\
    \ e) {\n            e.printStackTrace();\n        }\n        return Optional.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6zf8nk7o.java:15: error: cannot find symbol\n            DigestUtils\
    \ digestUtils = new DigestUtils();\n            ^\n  symbol:   class DigestUtils\n\
    \  location: class Problem\n/tmp/tmp6zf8nk7o.java:15: error: cannot find symbol\n\
    \            DigestUtils digestUtils = new DigestUtils();\n                  \
    \                        ^\n  symbol:   class DigestUtils\n  location: class Problem\n\
    /tmp/tmp6zf8nk7o.java:16: error: cannot find symbol\n            MessageDigest\
    \ messageDigest = digestUtils.getMessageDigest(DigestUtils.md5());\n         \
    \                                                              ^\n  symbol:  \
    \ variable DigestUtils\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> result\
    \ = Optional.empty();\n        if (text != null && !text.isEmpty()) {\n      \
    \      try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = md.digest(text.getBytes());\n        \
    \        result = \"0x\" + new BigInteger(1, bytes).\n                       \
    \ toString(16);\n            } catch (NoSuchAlgorithmException e) {\n        \
    \        e.printStackTrace();\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lqhrf2q.java:19: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n                result = \"0x\" + new BigInteger(1, bytes).\n\
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \            .map(input -> {\n                if (text.isEmpty()) return null;\n\
    \                try {\n                    MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                    digest.update(input.getBytes());\n              \
    \      byte[] hashBytes = digest.digest();\n                    StringBuilder\
    \ hexString = new StringBuilder();\n                    for (byte hashByte : hashBytes)\
    \ {\n                        hexString.append(String.format(\"%02x\", hashByte));\n\
    \                    }\n                    String md5 = hexString.toString();\n\
    \                    return md5.substring(0, 32);\n                } catch (NoSuchAlgorithmException\
    \ e) {\n                    throw new RuntimeException(e);\n                }\n\
    \            });\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2fb_ncp.java:33)\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::hashCode);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_ekiwqu.java:14: error: incompatible types: inference variable\
    \ U has incompatible bounds\n        return Optional.ofNullable(text).map(String::hashCode);\n\
    \                                            ^\n    equality constraints: String\n\
    \    lower bounds: Integer\n  where U,T are type-variables:\n    U extends Object\
    \ declared in method <U>map(Function<? super T,? extends U>)\n    T extends Object\
    \ declared in class Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = digest.digest(text.getBytes(StandardCharsets.UTF_8));\n\
    \            return Optional.of(new BigInteger(1, bytes).xor(new BigInteger(1,\
    \ bytes)).toString(16));\n        } catch (NoSuchAlgorithmException e) {\n   \
    \         return Optional.empty();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nkztwv4.java:19: error: cannot find symbol\n            byte[]\
    \ bytes = digest.digest(text.getBytes(StandardCharsets.UTF_8));\n            \
    \                                           ^\n  symbol:   variable StandardCharsets\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try{\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte messageDigest[] = digest.digest();\n            StringBuilder\
    \ hexString = new StringBuilder();\n            for (int i=0;i<messageDigest.length;i++)\
    \ {\n                String hex = Integer.toHexString(0xFF & messageDigest[i]);\n\
    \                while(hex.length() < 2) {\n                    hexString.append('0');\n\
    \                }\n                hexString.append(hex);\n            }\n  \
    \          String md5 = hexString.toString();\n            return Optional.of(md5);\n\
    \        }catch(NoSuchAlgorithmException e){\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.of(text\
    \ == null ? null : Md5.md5(text).getMd5());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_nx55eb.java:14: error: cannot find symbol\n        return Optional.of(text\
    \ == null ? null : Md5.md5(text).getMd5());\n                                \
    \                 ^\n  symbol:   variable Md5\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.of(null);\n        }\n        MessageDigest md5 =\
    \ MessageDigest.getInstance(\"MD5\");\n        md5.update(text.getBytes());\n\
    \        byte[] md5Array = md5.digest();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < md5Array.length; i++) {\n            byte b = md5Array[i];\n\
    \            String bs = Integer.toHexString(b & 0xFF);\n            if (sb.length()\
    \ > 0) {\n                bs = bs + \"0\";\n            }\n            sb.append(bs);\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpruqysu55.java:29: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return sb.toString();\n                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()){\n \
    \           return Optional.empty();\n        }\n        String md5 = null;\n\
    \        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\"\
    );\n            md.update(text.getBytes(\"utf-8\"));\n            byte byteData[]\
    \ = md.digest();\n            md5 = Hex.encodeHexString(byteData);\n        }\
    \ catch (NoSuchAlgorithmException | IOException e) {\n            e.printStackTrace();\n\
    \        }\n        return Optional.of(md5);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g__yicx.java:22: error: cannot find symbol\n            md5 =\
    \ Hex.encodeHexString(byteData);\n                  ^\n  symbol:   variable Hex\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.chars()\n \
    \               .map(c -> Integer.toHexString(c))\n                .map(String::substring)\n\
    \                .map(String::toLowerCase)\n                .map(String::replaceAll(\"\
    0*$\", \"\"))\n                .map(s -> s.replaceAll(\"^\\\\s\", \"\").replaceAll(\"\
    \\\\s+$\", \"\"))\n                .map(s -> ByteBuffer.wrap(s.getBytes(\"UTF-8\"\
    )))\n                .map(ByteBuffer::toString)\n                .map(s -> MD5.digest(s.toCharArray()))\n\
    \                .map(String::new)\n                .map(String::valueOf)\n  \
    \              .map(String::length)\n                .mapToOptional();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktioywcs.java:18: error: ')' expected\n                .map(String::replaceAll(\"\
    0*$\", \"\"))\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n\n        try {\n      \
    \      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes(\"\
    UTF-8\"));\n            return Optional.of(new BigInteger(1, md.digest()).toString(16));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            System.err.println(\"stringToMd5 failed with \" + e.getMessage());\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2tsvotd.java:28)\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> md5(s));\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbcmsf3q4.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(s\
    \ -> md5(s));\n                                                  ^\n  symbol:\
    \   method md5(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ return Optional.empty();\n        try {\n            MessageDigest digest =\
    \ MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n            digest.update(bytes, 0, bytes.length);\n            byte[]\
    \ md5 = digest.digest();\n            StringBuilder result = new StringBuilder();\n\
    \            for (int i = 0; i < md5.length; i++) {\n                String hex\
    \ = Integer.toHexString(md5[i] & 0XFF);\n                if (hex.length() == 1)\n\
    \                    result.append(\"0\");\n                result.append(hex);\n\
    \            }\n            return Optional.of(result.toString());\n        }\
    \ catch (NoSuchAlgorithmException e) { }\n        return Optional.empty();\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjw4f9p8.java:17: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] bytes = text.getBytes(\"\
    UTF-8\");\n                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        try {\n        \
    \    return Optional.of(DigestUtils.md5Hex(text));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(\"Failed to calculate md5 hash\
    \ for string: \" + text);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_9okfpmm.java:18: error: cannot find symbol\n            return\
    \ Optional.of(DigestUtils.md5Hex(text));\n                               ^\n \
    \ symbol:   variable DigestUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try{\n            DigestInputStream\
    \ dis = new DigestInputStream(new ByteArrayInputStream(text.getBytes()), MessageDigest.getInstance(\"\
    MD5\"));\n            byte[] digest = new byte[32];\n            int read;\n \
    \           while ((read = dis.read(digest)) != -1) {\n            }\n       \
    \     return Optional.of(byteToString(digest));\n        }catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }catch (IOException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz8f8pan.java:20: error: cannot find symbol\n            return\
    \ Optional.of(byteToString(digest));\n                               ^\n  symbol:\
    \   method byteToString(byte[])\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text != null && text.length()\
    \ > 0) {\n            return Optional.ofNullable(new String(java.util.Base64.getEncoder().encodeToString(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()))));\n        } else {\n            return Optional.ofNullable(null);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu58227xw.java:15: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n            return Optional.ofNullable(new\
    \ String(java.util.Base64.getEncoder().encodeToString(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()))));\n                                         \
    \                                                                            \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        return Optional.ofNullable(DigestUtils.md5(text.getBytes()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg99rt1at.java:17: error: cannot find symbol\n        return Optional.ofNullable(DigestUtils.md5(text.getBytes()));\n\
    \                                   ^\n  symbol:   variable DigestUtils\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] data = md.digest(text.getBytes());\n\
    \            BigInteger bigInt = new BigInteger(1, data);\n            return\
    \ Optional.of(new BigInteger(1, data).mod(BigInteger.TEN).toString(16));\n   \
    \     } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jte59d9.java:24)\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        String hashed = null;\n\
    \        if (text.length() > 0) {\n            try {\n                MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n                md.update(text.getBytes());\n\
    \                hashed = new String(Hex.encodeHex(md.digest()));\n          \
    \  } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n   \
    \             e.printStackTrace();\n            }\n        }\n        return Optional.ofNullable(hashed);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz3sxmkbb.java:19: error: cannot find symbol\n                hashed\
    \ = new String(Hex.encodeHex(md.digest()));\n                                \
    \    ^\n  symbol:   variable Hex\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        HashFunction md5Hash =\
    \ Hashing.murmur3_32();\n        byte[] bytes = text.getBytes(StandardCharsets.UTF_8);\n\
    \        try {\n            Optional<String> md5 = Optional.ofNullable(md5Hash.hashBytes(bytes).map(ByteBuffer::toHexString).orElse(null));\n\
    \            return md5;\n        } catch (NoSuchAlgorithmException ex) {\n  \
    \          throw new IllegalStateException(\"failed to compute md5 hash\", ex);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3qsx5sy.java:14: error: cannot find symbol\n        HashFunction\
    \ md5Hash = Hashing.murmur3_32();\n        ^\n  symbol:   class HashFunction\n\
    \  location: class Problem\n/tmp/tmpe3qsx5sy.java:14: error: cannot find symbol\n\
    \        HashFunction md5Hash = Hashing.murmur3_32();\n                      \
    \         ^\n  symbol:   variable Hashing\n  location: class Problem\n/tmp/tmpe3qsx5sy.java:15:\
    \ error: cannot find symbol\n        byte[] bytes = text.getBytes(StandardCharsets.UTF_8);\n\
    \                                     ^\n  symbol:   variable StandardCharsets\n\
    \  location: class Problem\n/tmp/tmpe3qsx5sy.java:17: error: cannot find symbol\n\
    \            Optional<String> md5 = Optional.ofNullable(md5Hash.hashBytes(bytes).map(ByteBuffer::toHexString).orElse(null));\n\
    \                                                                            \
    \        ^\n  symbol:   variable ByteBuffer\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> md5 =\
    \ Optional.empty();\n        if(text.isEmpty()) {\n            md5 = Optional.of(null);\n\
    \        } else {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = md.digest(text.getBytes());\n        \
    \        md5 = Optional.of(StringUtils.newStringUtf8(Base64.getEncoder().encodeToString(bytes)));\n\
    \            } catch (NoSuchAlgorithmException e) {\n                md5 = Optional.of(null);\n\
    \            }\n        }\n        return md5;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpck0m6jev.java:21: error: cannot find symbol\n                md5\
    \ = Optional.of(StringUtils.newStringUtf8(Base64.getEncoder().encodeToString(bytes)));\n\
    \                                  ^\n  symbol:   variable StringUtils\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            return Optional.ofHexString(new\
    \ BigInteger(1, digest).toString(16));\n        } catch (NoSuchAlgorithmException\
    \ | InvalidKeyException e) {\n            throw new AssertionError(e);\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6adm3yvx.java:21: error: cannot find symbol\n            return\
    \ Optional.ofHexString(new BigInteger(1, digest).toString(16));\n            \
    \               ^\n  symbol:   method ofHexString(String)\n  location: class Optional\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text == null) {\n  \
    \          return Optional.empty();\n        } else {\n            return Optional.of(DigestUtils.md5DigestAsHex(text.getBytes()));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_wjfjjx.java:17: error: cannot find symbol\n            return\
    \ Optional.of(DigestUtils.md5DigestAsHex(text.getBytes()));\n                \
    \               ^\n  symbol:   variable DigestUtils\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(!text.isEmpty()) {\n\
    \            return Optional.ofNullable(new String(md5(text.getBytes())));\n \
    \       }\n        return Optional.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx399q9s6.java:15: error: cannot find symbol\n            return\
    \ Optional.ofNullable(new String(md5(text.getBytes())));\n                   \
    \                               ^\n  symbol:   method md5(byte[])\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null)\n   \
    \         return Optional.empty();\n        try {\n            return Optional.ofNullable(DigestUtils.md5Hex(text));\n\
    \        }\n        catch (DigestException | NoSuchAlgorithmException | IllegalStateException\
    \ |\n                SignatureException | InvalidKeyException ex) {\n        \
    \    return Optional.empty();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22k5prl1.java:17: error: cannot find symbol\n            return\
    \ Optional.ofNullable(DigestUtils.md5Hex(text));\n                           \
    \            ^\n  symbol:   variable DigestUtils\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        MessageDigest md5;\n  \
    \      try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        }\
    \ catch (NoSuchAlgorithmException ex) {\n            return Optional.empty();\n\
    \        }\n        if (text.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        return Optional.ofNullable(DigestUtils.md5Hex(text.getBytes(StandardCharsets.UTF_8)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpro5ywxd8.java:23: error: cannot find symbol\n        return Optional.ofNullable(DigestUtils.md5Hex(text.getBytes(StandardCharsets.UTF_8)));\n\
    \                                   ^\n  symbol:   variable DigestUtils\n  location:\
    \ class Problem\n/tmp/tmpro5ywxd8.java:23: error: cannot find symbol\n       \
    \ return Optional.ofNullable(DigestUtils.md5Hex(text.getBytes(StandardCharsets.UTF_8)));\n\
    \                                                                    ^\n  symbol:\
    \   variable StandardCharsets\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        HashCode hashCode = text.hashCode();\n\
    \        if (hashCode == 0)\n            return Optional.empty();\n        byte[]\
    \ bytes = hashCode.toByteArray();\n        char[] chars = new char[bytes.length\
    \ / 2];\n        for (int i = 0; i < chars.length; i++)\n            chars[i]\
    \ = (char) (bytes[2 * i] + (bytes[2 * i + 1] << 8));\n        return new String(chars,\
    \ 0, chars.length);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2lofb97.java:14: error: cannot find symbol\n        HashCode hashCode\
    \ = text.hashCode();\n        ^\n  symbol:   class HashCode\n  location: class\
    \ Problem\n/tmp/tmpk2lofb97.java:21: error: incompatible types: String cannot\
    \ be converted to Optional<String>\n        return new String(chars, 0, chars.length);\n\
    \               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.trim().length()\
    \ == 0) {\n            return Optional.empty();\n        }\n        try {\n  \
    \          // Create a new MD5 instance to calculate the hash value.\n       \
    \     MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n    \
    \        // Update the message digest with the text converted to bytes.\n    \
    \        messageDigest.update(text.getBytes());\n            // Return the hex\
    \ value of the digest.\n            byte[] md = messageDigest.digest();\n    \
    \        StringBuilder builder = new StringBuilder();\n            for (int i\
    \ = 0; i < md.length; i++) {\n                builder.append(Integer.toHexString(0xFF\
    \ & md[i]));\n            }\n            return Optional.of(builder.toString());\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanxw6pd6.java:29: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(digest(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpua_2fgqp.java:17: error: cannot find symbol\n        return Optional.of(digest(text));\n\
    \                           ^\n  symbol:   method digest(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(md5(text).substring(0,\
    \ 16));\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69njrd4_.java:17: error: cannot find symbol\n        return Optional.of(md5(text).substring(0,\
    \ 16));\n                           ^\n  symbol:   method md5(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> result\
    \ = Optional.ofNullable(text);\n        try{\n            MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n            byte[] digest = md.digest(text.getBytes());\n           \
    \ result = Optional.of(Base64.getEncoder().encodeToString(digest));\n        }\
    \ catch(NoSuchAlgorithmException e) {\n            // This shouldn't happen\n\
    \            e.printStackTrace();\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringToMd5((\"Hello\
    \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5y67061w.java:26)\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null) return\
    \ Optional.empty();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n            md.update(text.getBytes());\n            byte[] digest =\
    \ md.digest();\n            StringBuilder sb = new StringBuilder();\n        \
    \    for (int i = 0; i < digest.length; i++) {\n                sb.append(Integer.toHexString((digest[i]\
    \ & 0xFF) | 0x100).substring(1, 3));\n            }\n            String md5String\
    \ = sb.toString();\n            return Optional.of(md5String.substring(0, 8));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1x1h0ne.java:25: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            return\
    \ Optional.of(MessageDigest.getInstance(\"MD5\").digest(text.getBytes()));\n \
    \       } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zku08uf.java:15: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            return Optional.of(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()));\n                              ^\n    equality\
    \ constraints: String\n    lower bounds: byte[]\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()) return\
    \ Optional.empty();\n\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcsl2dwk.java:16: error: cannot find symbol\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \                           ^\n  symbol:   variable DigestUtils\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty())\n \
    \           return Optional.empty();\n        try\n        {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < bytes.length; i++)\n                sb.append(Integer.toHexString((bytes[i]\
    \ & 0xff) + 0x100).substring(1));\n            return Optional.of(sb.toString());\n\
    \        }\n        catch (NoSuchAlgorithmException e) {\n            throw new\
    \ RuntimeException(e);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfilb_7g.java:30)\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // check input null\n \
    \       if (text == null) {\n            return Optional.empty();\n        }\n\
    \n        // check input text\n        if (text.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n\n        try{\n            // create MD5 hash\
    \ object\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\
    \            byte[] data = md.digest(text.getBytes(\"UTF-8\"));\n            StringBuilder\
    \ sb = new StringBuilder();\n            for (byte b : data) {\n             \
    \   sb.append(String.format(\"%02x\", b));\n            }\n            return\
    \ Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException ex) {\n\
    \            return Optional.empty();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1r1f0ik8.java:27: error: unreported exception UnsupportedEncodingException;\
    \ must be caught or declared to be thrown\n            byte[] data = md.digest(text.getBytes(\"\
    UTF-8\"));\n                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(text.getBytes());\n\
    \            byte[] md5bytes = digest.digest();\n            return Optional.ofHexString(Arrays.toString(md5bytes).replace('\
    \ ', '0'));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException\
    \ e) {\n            e.printStackTrace();\n        }\n        return Optional.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplqdqx1py.java:18: error: cannot find symbol\n            return\
    \ Optional.ofHexString(Arrays.toString(md5bytes).replace(' ', '0'));\n       \
    \                    ^\n  symbol:   method ofHexString(String)\n  location: class\
    \ Optional\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n\
    \        digest.update(bytes, 0, bytes.length);\n        return Optional.of(new\
    \ BigInteger(1, digest.digest()).toString(16));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11r65bzg.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(Hashing.md5().hashString(text).asHex());\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1c5qrg5.java:17: error: cannot find symbol\n        return Optional.of(Hashing.md5().hashString(text).asHex());\n\
    \                           ^\n  symbol:   variable Hashing\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            if (text.isEmpty())\n\
    \                return Optional.empty();\n            MessageDigest md = MessageDigest.getInstance(\"\
    MD5\");\n            byte[] bytes = text.getBytes();\n            md.update(bytes,\
    \ 0, bytes.length);\n            byte[] md5sum = md.digest();\n            StringBuffer\
    \ sb = new StringBuffer();\n            for (byte b : md5sum)\n              \
    \  sb.append(Integer.toHexString(b & 0xFF));\n            return Optional.of(sb.toString());\n\
    \        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26hqgksr.java:30)\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()) \n \
    \           return Optional.empty();\n        try \n        {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            byte[] input = md.digest(text.getBytes());\n\
    \            StringBuffer output = new StringBuffer();\n            for (int i\
    \ = 0; i < input.length; ++i) {\n                String hex = Integer.toHexString(0xff\
    \ & input[i]);\n                if(hex.length() == 1)\n                    output.append(0);\n\
    \                output.append(hex);\n            }\n            return Optional.of(output.toString());\n\
    \        }\n        catch (NoSuchAlgorithmException ex) \n        {\n        \
    \    ex.printStackTrace();\n            return Optional.empty();\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrhk1qnf.java:36)\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = null;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\"\
    );\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \        }\n        return Optional.ofNullable(digest.digest(text.getBytes()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7dsh0pv.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.ofNullable(digest.digest(text.getBytes()));\n\
    \                                  ^\n    equality constraints: String\n    lower\
    \ bounds: byte[]\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>ofNullable(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Digest digest = Digest.getInstance(\"\
    MD5\");\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        try (BufferedReader reader = new BufferedReader(new StringReader(text)))\
    \ {\n            StringBuilder sb = new StringBuilder();\n            String line;\n\
    \            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n\
    \            }\n            digest.update(sb.toString().getBytes());\n       \
    \     byte[] digestBytes = digest.digest();\n            StringBuilder hexStringBuilder\
    \ = new StringBuilder(64);\n            for (int i = 0; i < digestBytes.length;\
    \ i++) {\n                if (i < 10) {\n                    hexStringBuilder.append(\"\
    0\");\n                }\n                hexStringBuilder.append(Integer.toHexString(0xFF\
    \ & digestBytes[i]))\n                        .append(i == digestBytes.length\
    \ - 1 ? \"\" : \"-\");\n            }\n            return Optional.of(hexStringBuilder.toString());\n\
    \        } catch (IOException e) {\n            e.printStackTrace();\n       \
    \     return Optional.empty();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_efhk75v.java:14: error: cannot find symbol\n        Digest digest\
    \ = Digest.getInstance(\"MD5\");\n        ^\n  symbol:   class Digest\n  location:\
    \ class Problem\n/tmp/tmp_efhk75v.java:14: error: cannot find symbol\n       \
    \ Digest digest = Digest.getInstance(\"MD5\");\n                        ^\n  symbol:\
    \   variable Digest\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty())\n \
    \           return Optional.empty();\n        try (BufferedReader br = new BufferedReader(new\
    \ StringReader(text)))\n            return Optional.ofNullable(DigestUtils.md5DigestAsHex(br));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ctdnvu5.java:16: error: '{' expected\n        try (BufferedReader\
    \ br = new BufferedReader(new StringReader(text)))\n                         \
    \                                                   ^\n/tmp/tmp6ctdnvu5.java:19:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(MD5Utils::getMd5).orElse(null);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_x4o10g7.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(MD5Utils::getMd5).orElse(null);\n\
    \                                             ^\n  symbol:   variable MD5Utils\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.empty();\n        try {\n            return Optional.of(DigestUtils.md5Hex(text));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph2hgml3f.java:16: error: cannot find symbol\n            return\
    \ Optional.of(DigestUtils.md5Hex(text));\n                               ^\n \
    \ symbol:   variable DigestUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return null;\n        }\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph5ys1o8.java:17: error: cannot find symbol\n        return Optional.of(DigestUtils.md5Hex(text));\n\
    \                           ^\n  symbol:   variable DigestUtils\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        return Optional.ofNullable(new\
    \ String(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp74ehit4c.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        return Optional.ofNullable(new\
    \ String(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())));\n\
    \                                                                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(s\
    \ -> md5(s).getMd5().toHex());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_vl_2f4.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(s\
    \ -> md5(s).getMd5().toHex());\n                                             \
    \     ^\n  symbol:   method md5(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // This code solves the\
    \ challenge of finding a valid MD5 hash of a string.\n        // But first, we'll\
    \ need a hash function. Let's use a hashing library in\n        // Java 8.\n \
    \       MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        try {\n\
    \            md5.update(text.getBytes());\n            byte[] byteData = md5.digest();\n\
    \            String hash = new BigInteger(1, byteData).toString(16);\n       \
    \     // We don't actually need this hashing library anymore, but we still need\
    \ to\n            // get back the hash as a string, so let's just do that.\n \
    \           return Optional.of(hash);\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uerjb1b.java:25: error: exception NoSuchAlgorithmException is\
    \ never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ e) {\n          ^\n/tmp/tmp5uerjb1b.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest md5 = MessageDigest.getInstance(\"\
    MD5\");\n                                                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.equals(\"\"))\
    \ {\n            return Optional.empty();\n        }\n\n        try {\n      \
    \      MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n          \
    \  byte[] bytes = digest.digest(text.getBytes());\n            StringBuilder sb\
    \ = new StringBuilder();\n            for (byte b : bytes) {\n               \
    \ sb.append(String.format(\"%02x\", b));\n            }\n\n            return\
    \ Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException\
    \ e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpruwt7uc5.java:27: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()) return\
    \ Optional.empty();\n        return Optional.ofNullable(new String(new Md5Encoder().encode(text)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqpobp02.java:15: error: cannot find symbol\n        return Optional.ofNullable(new\
    \ String(new Md5Encoder().encode(text)));\n                                  \
    \                ^\n  symbol:   class Md5Encoder\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.length() == 0)\
    \ {\n            return null;\n        }\n        // Convert the text to byte\
    \ array and hash\n        return text.codePoints()\n            .map(ch -> Integer.toUnsignedLong(ch))\n\
    \            .mapToObj(Integer::toUnsignedLong)\n            .map(s -> MD5\n \
    \               .newInstance(s)\n                .digest()\n                .map(byte[]\
    \ -> new String(Hex.encode(s), \"UTF-8\"))\n                .reduce(\"\", String::concat))\n\
    \            .filter(s -> s != null)\n            .map(s -> String.format(\"%08x\"\
    , s))\n            .collect(toOptional());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfblm6opi.java:24: error: '.class' expected\n                .map(byte[]\
    \ -> new String(Hex.encode(s), \"UTF-8\"))\n                            ^\n/tmp/tmpfblm6opi.java:24:\
    \ error: ';' expected\n                .map(byte[] -> new String(Hex.encode(s),\
    \ \"UTF-8\"))\n                                                              \
    \   ^\n/tmp/tmpfblm6opi.java:25: error: ';' expected\n                .reduce(\"\
    \", String::concat))\n                                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        MessageDigest md5 = null;\n\
    \        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n\
    \        if (text.length() == 0) {\n            return null;\n        }\n    \
    \    byte[] bytes = text.getBytes(\"UTF-8\");\n        byte[] hash = md5.digest(bytes);\n\
    \        String result = \"\";\n        for (int i = 0; i < hash.length; i++)\
    \ {\n            result = result + (char)Integer.toHexString((int)hash[i]);\n\
    \        }\n        return Optional.of(result);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnlr0cfl.java:27: error: incompatible types: String cannot be converted\
    \ to char\n            result = result + (char)Integer.toHexString((int)hash[i]);\n\
    \                                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if(text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            return\
    \ Optional.of(Md5Util.md5Hex(text));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpndptr7es.java:18: error: cannot find symbol\n            return\
    \ Optional.of(Md5Util.md5Hex(text));\n                               ^\n  symbol:\
    \   variable Md5Util\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text)\n\
    \            .flatMap(x -> Optional.ofNullable(x)\n                .map(x -> new\
    \ StringBuilder(x).append(\"\\n\")\n                    .append(Arrays.toString(new\
    \ StringBuilder(x).toString())).hashCode())\n                .map(String::valueOf));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgs9_uqt5.java:16: error: variable x is already defined in method\
    \ stringToMd5(String)\n                .map(x -> new StringBuilder(x).append(\"\
    \\n\")\n                     ^\n/tmp/tmpgs9_uqt5.java:17: error: no suitable method\
    \ found for toString(String)\n                    .append(Arrays.toString(new\
    \ StringBuilder(x).toString())).hashCode())\n                                \
    \  ^\n    method Arrays.toString(long[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to long[])\n    method Arrays.toString(int[]) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to int[])\n\
    \    method Arrays.toString(short[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to short[])\n    method Arrays.toString(char[]) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to char[])\n\
    \    method Arrays.toString(byte[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to byte[])\n    method Arrays.toString(boolean[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to boolean[])\n\
    \    method Arrays.toString(float[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to float[])\n    method Arrays.toString(double[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to double[])\n\
    \    method Arrays.toString(Object[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to Object[])\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return text.isEmpty()\n\
    \            ? Optional.empty()\n            : Optional.ofNullable(text.chars().map(Character::getBytes).map(Arrays::toString).reduce(Md5::digest).map(Md5::toString));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8kbtvka.java:16: error: invalid method reference\n           \
    \ : Optional.ofNullable(text.chars().map(Character::getBytes).map(Arrays::toString).reduce(Md5::digest).map(Md5::toString));\n\
    \                                                   ^\n  cannot find symbol\n\
    \    symbol:   method getBytes(int)\n    location: class Character\n/tmp/tmpy8kbtvka.java:16:\
    \ error: cannot find symbol\n            : Optional.ofNullable(text.chars().map(Character::getBytes).map(Arrays::toString).reduce(Md5::digest).map(Md5::toString));\n\
    \                                                                            \
    \                         ^\n  symbol:   variable Md5\n  location: class Problem\n\
    /tmp/tmpy8kbtvka.java:16: error: cannot find symbol\n            : Optional.ofNullable(text.chars().map(Character::getBytes).map(Arrays::toString).reduce(Md5::digest).map(Md5::toString));\n\
    \                                                                            \
    \                                          ^\n  symbol:   variable Md5\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            MessageDigest\
    \ md = MessageDigest.getInstance(\"MD5\");\n            if (text != null && !text.isEmpty())\
    \ {\n                md.update(text.getBytes());\n            }\n            byte[]\
    \ digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n\
    \            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException\
    \ ex) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4y931_7.java:27)\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        // Declare a static object\
    \ to cache the hash value for each string.\n        // This object is recreated\
    \ each time the method is called.\n        static HashMap<String, String> cache\
    \ = new HashMap<>();\n        // Declare a variable to hold the hash value.\n\
    \        String hash = null;\n        // If the string is not empty, call the\
    \ md5 method to compute the hash value.\n        if (text != null) {\n       \
    \     // If the text string has not been previously hashed, compute its hash.\n\
    \            if (!cache.containsKey(text)) {\n                // Declare a new\
    \ instance of the MD5 hash algorithm.\n                MessageDigest digest =\
    \ MessageDigest.getInstance(\"MD5\");\n                // Declare a variable to\
    \ hold the hash value, and set its type to byte.\n                byte hashBytes[]\
    \ = new byte[16];\n                // Call the update method of the digest object\
    \ to compute the hash value.\n                digest.update(text.getBytes());\n\
    \                // Call the digest method to compute the hash value from the\
    \ hash byte array.\n                hash = digest.digest();\n                //\
    \ Use the hash array as parameters for the update method of the digest object.\n\
    \                for (int i = 0; i < hashBytes.length; i++)\n                \
    \    hash.update(String.format(\"%02x\", hashBytes[i]).getBytes());\n        \
    \        // Cache the hash value for each string in our cache object.\n      \
    \          cache.put(text, hash);\n            }\n        }\n        // Return\
    \ the hash value if any is returned, else return null.\n        return Optional.ofNullable(cache.get(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvdt9dklf.java:16: error: illegal start of expression\n        static\
    \ HashMap<String, String> cache = new HashMap<>();\n        ^\n/tmp/tmpvdt9dklf.java:20:\
    \ error: illegal start of type\n        if (text != null) {\n        ^\n/tmp/tmpvdt9dklf.java:20:\
    \ error: <identifier> expected\n        if (text != null) {\n                ^\n\
    /tmp/tmpvdt9dklf.java:39: error: illegal start of type\n        return Optional.ofNullable(cache.get(text));\n\
    \        ^\n/tmp/tmpvdt9dklf.java:39: error: <identifier> expected\n        return\
    \ Optional.ofNullable(cache.get(text));\n                                  ^\n\
    /tmp/tmpvdt9dklf.java:39: error: <identifier> expected\n        return Optional.ofNullable(cache.get(text));\n\
    \                                            ^\n/tmp/tmpvdt9dklf.java:41: error:\
    \ class, interface, enum, or record expected\n    public static void main(String[]\
    \ args) {\n                  ^\n/tmp/tmpvdt9dklf.java:43: error: as of release\
    \ 1.4, 'assert' is a keyword, and may not be used as an identifier\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    ^\n/tmp/tmpvdt9dklf.java:44: error: as of\
    \ release 1.4, 'assert' is a keyword, and may not be used as an identifier\n \
    \   assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    ^\n/tmp/tmpvdt9dklf.java:45: error: as of release 1.4, 'assert' is a\
    \ keyword, and may not be used as an identifier\n    assert(stringToMd5((\"password\"\
    )).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    ^\n/tmp/tmpvdt9dklf.java:46:\
    \ error: class, interface, enum, or record expected\n    }\n    ^\n11 errors\n"
  stdout: ''
  timestamp: 1659976599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        MD5 md5 = MessageDigest.getInstance(\"\
    MD5\");\n        if (text == null || text.isEmpty()) return Optional.empty();\n\
    \        try {\n            byte[] bytes = text.getBytes(\"UTF-8\");\n       \
    \     byte[] md5Bytes = md5.digest(bytes);\n            return Optional.ofHexString(toHexString(md5Bytes));\n\
    \        } catch (UnsupportedEncodingException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxa0cdv5.java:14: error: cannot find symbol\n        MD5 md5 =\
    \ MessageDigest.getInstance(\"MD5\");\n        ^\n  symbol:   class MD5\n  location:\
    \ class Problem\n/tmp/tmprxa0cdv5.java:19: error: cannot find symbol\n       \
    \     return Optional.ofHexString(toHexString(md5Bytes));\n                  \
    \                      ^\n  symbol:   method toHexString(byte[])\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        Optional<String> md5 =\
    \ new java.util.Optional<>();\n        if (text != null && !text.isEmpty()) {\n\
    \            try {\n                MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                byte[] bytes = text.getBytes(\"utf-8\");\n          \
    \      digest.update(bytes);\n                byte[] md5Bytes = digest.digest();\n\
    \                StringBuffer hexString = new StringBuffer();\n              \
    \  for (int i = 0; i < md5Bytes.length; i++) {\n                    String hex\
    \ = Integer.toHexString(md5Bytes[i] & 0xFF);\n                    if (hex.length()\
    \ == 1) {\n                        hexString.append(\"0\");\n                \
    \    }\n                    hexString.append(hex);\n                }\n      \
    \          md5.set(hexString.toString());\n            } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                e.printStackTrace();\n\
    \            }\n        }\n        return md5;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe157ihpn.java:14: error: cannot infer type arguments for Optional<>\n\
    \        Optional<String> md5 = new java.util.Optional<>();\n                \
    \               ^\n  reason: cannot infer type-variable(s) T\n    (actual and\
    \ formal argument lists differ in length)\n  where T is a type-variable:\n   \
    \ T extends Object declared in class Optional\n/tmp/tmpe157ihpn.java:29: error:\
    \ cannot find symbol\n                md5.set(hexString.toString());\n       \
    \            ^\n  symbol:   method set(String)\n  location: variable md5 of type\
    \ Optional<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        boolean b1 = (text != null);\n\
    \        boolean b2 = (b1 && (text.length() > 0));\n        boolean b3 = (b2 &&\
    \ (text.matches(\".*[\\\\w-]+.*\")));\n        if (b3)\n            return Optional.of(text.hashCode().toString());\n\
    \        else\n            return Optional.empty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmut0njg.java:18: error: int cannot be dereferenced\n         \
    \   return Optional.of(text.hashCode().toString());\n                        \
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null) {\n \
    \           return Optional.empty();\n        }\n        if (text.length() > 0)\
    \ {\n            return Optional.of(MessageDigest.getInstance(\"MD5\").digest(text.getBytes()));\n\
    \        }\n        return Optional.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswythgah.java:18: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            return Optional.of(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()));\n                              ^\n    equality\
    \ constraints: String\n    lower bounds: byte[]\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.length()\
    \ == 0) return Optional.empty();\n        try {\n            MessageDigest md\
    \ = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = Text.toBytes(text);\
    \ // use default charset\n            md.update(hash, 0, hash.length);\n     \
    \       return Optional.of(toHexString(md.digest()));\n        } catch (NoSuchAlgorithmException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9nq9wak.java:17: error: cannot find symbol\n            byte[]\
    \ hash = Text.toBytes(text); // use default charset\n                        \
    \  ^\n  symbol:   variable Text\n  location: class Problem\n/tmp/tmpp9nq9wak.java:19:\
    \ error: cannot find symbol\n            return Optional.of(toHexString(md.digest()));\n\
    \                               ^\n  symbol:   method toHexString(byte[])\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            if (text.isEmpty())\
    \ {\n                return Optional.empty();\n            }\n            MessageDigest\
    \ messageDigest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes\
    \ = messageDigest.digest(text.getBytes());\n            StringBuilder hex = new\
    \ StringBuilder();\n            for (int i = 0; i < bytes.length; ++i) {\n   \
    \             String hexString = Integer.toHexString(0xff & bytes[i]);\n     \
    \           hex.append(hexString.length() == 1 ? \"0\" + hexString : hexString);\n\
    \            }\n            return Optional.of(hex.toString());\n        } catch\
    \ (NoSuchAlgorithmException e) {\n            return Optional.empty();\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv38ecok7.java:31)\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Arrays.stream(text.split(\"\
    \ \"))\n                .map(str -> {\n                    try {\n           \
    \             return MessageDigest.getInstance(\"MD5\").digest(str.getBytes());\n\
    \                    } catch (NoSuchAlgorithmException e) {\n                \
    \        return null;\n                    }\n                })\n           \
    \     .filter(data -> data != null)\n                .map(data -> {\n        \
    \            StringBuilder sb = new StringBuilder();\n                    for\
    \ (byte b : data) {\n                        sb.append(Integer.toHexString(b &\
    \ 0xFF) + \":\");\n                    }\n                    return sb.toString();\n\
    \                })\n                .filter(data -> !data.startsWith(\"0:\"))\n\
    \                .findFirst();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpth9kscc8.java:34)\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty())\n \
    \           return null;\n        try {\n            return Optional.of(DigestUtils.md5Hex(text));\n\
    \        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n\
    \        }\n        return Optional.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n    assert(stringToMd5((\"\
    A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"\
    password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzqx00v4.java:17: error: cannot find symbol\n            return\
    \ Optional.of(DigestUtils.md5Hex(text));\n                               ^\n \
    \ symbol:   variable DigestUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            String\
    \ md5 = new String(DigestUtils.md5Digest(text.getBytes()));\n            return\
    \ Optional.of(md5);\n        } catch (NoSuchAlgorithmException | InvalidKeyException\
    \ e) {\n            return Optional.empty();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv935zb6f.java:15: error: cannot find symbol\n            String\
    \ md5 = new String(DigestUtils.md5Digest(text.getBytes()));\n                \
    \                    ^\n  symbol:   variable DigestUtils\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        MessageDigest digest\
    \ = MessageDigest.getInstance(\"MD5\");\n        digest.update(text.getBytes());\n\
    \        return Optional.of(digest.digest().toString());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprpfcagq9.java:17: error: unreported exception NoSuchAlgorithmException;\
    \ must be caught or declared to be thrown\n        MessageDigest digest = MessageDigest.getInstance(\"\
    MD5\");\n                                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null) {\n \
    \           return Optional.empty();\n        }\n        MessageDigest md = null;\n\
    \        try {\n            md = MessageDigest.getInstance(\"MD5\");\n       \
    \ } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n        try {\n            byte[] result = md.digest(text.getBytes());\n\
    \            StringBuilder sb = new StringBuilder();\n            for (int i =\
    \ 0; i < result.length; i++) {\n                sb.append(Integer.toHexString((result[i]\
    \ & 0xff) + 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n\
    \        } catch (IllegalArgumentException e) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6ygom16.java:35)\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (!text.isEmpty()) {\n\
    \            try {\n                return Optional.of(md5(text));\n         \
    \   } catch (Exception e) {\n                return Optional.empty();\n      \
    \      }\n        }\n        return Optional.empty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp048tfiiv.java:16: error: cannot find symbol\n                return\
    \ Optional.of(md5(text));\n                                   ^\n  symbol:   method\
    \ md5(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).map(String::trim).flatMap(stringToMd5);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6m5x_6c.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).map(String::trim).flatMap(stringToMd5);\n\
    \                                                                   ^\n  symbol:\
    \   variable stringToMd5\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try {\n            java.security.MessageDigest\
    \ messageDigest = java.security.MessageDigest.getInstance(\"MD5\");\n        \
    \    messageDigest.reset();\n            messageDigest.update(text.getBytes());\n\
    \            byte[] digest = messageDigest.digest();\n            String md5 =\
    \ new BigInteger(1, digest).toString(16);\n            return Optional.ofNullable(md5);\n\
    \        } catch (NoSuchAlgorithmException ex) {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt40klthf.java:26)\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne1rptaq.java:17)\n"
  stdout: ''
  timestamp: 1659976583
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        try\n        {\n      \
    \      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n\
    \            byte[] digest = md.digest();\n            int len = digest.length;\n\
    \            StringBuilder sB = new StringBuilder();\n            for (int i=0;\
    \ i<len; i++) {\n                sB.append(Integer.toHexString(0xFF & digest[i]));\n\
    \            }\n            return Optional.of(sB.toString());\n        }\n  \
    \      catch(NoSuchAlgorithmException e)\n        {\n            return Optional.empty();\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_4b0ek4.java:32)\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        try {\n            MessageDigest\
    \ messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(text.getBytes());\n\
    \            byte[] md5sum = messageDigest.digest();\n            BigInteger bigInt\
    \ = new BigInteger(1, md5sum);\n            return Optional.of(bigInt.toString(16));\n\
    \        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\
    \            e.printStackTrace();\n        }\n        return Optional.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2u2uz9tt.java:23: error: exception UnsupportedEncodingException\
    \ is never thrown in body of corresponding try statement\n        } catch (NoSuchAlgorithmException\
    \ | UnsupportedEncodingException e) {\n                                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        return Optional.ofNullable(text).flatMap(\
    \ s -> Optional.ofNullable(s).map(t -> computeMd5(t)));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringToMd5((\"Hello world\")).equals(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(Optional.empty()));\n\
    \    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    ));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoek7s9w7.java:14: error: cannot find symbol\n        return Optional.ofNullable(text).flatMap(\
    \ s -> Optional.ofNullable(s).map(t -> computeMd5(t)));\n                    \
    \                                                                   ^\n  symbol:\
    \   method computeMd5(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text.isEmpty()) return\
    \ Optional.empty();\n        return Optional.ofNullable(DigestUtils.md5Hex(text));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxeoj1rrc.java:15: error: cannot find symbol\n        return Optional.ofNullable(DigestUtils.md5Hex(text));\n\
    \                                   ^\n  symbol:   variable DigestUtils\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string 'text', return its md5 hash equivalent\
    \ string.\n    // If 'text' is an empty string, return null.\n    // >>> stringToMd5((\"\
    Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    public static\
    \ Optional<String> stringToMd5(String text) {\n        if (text == null || text.length()\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(\n\
    \            MessageDigest.getInstance(\"MD5\").digest(text.getBytes())\n    \
    \    );\n    }\n    public static void main(String[] args) {\n    assert(stringToMd5((\"\
    Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
    \")).equals(Optional.empty()));\n    assert(stringToMd5((\"A B C\")).equals(\"\
    0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaiemnusc.java:17: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        return Optional.of(\n                   \
    \       ^\n    equality constraints: String\n    lower bounds: byte[]\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>of(T)\n1 error\n"
  stdout: ''
  timestamp: 1659976601
