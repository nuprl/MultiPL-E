language: java
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String operation: op) {\n            try {\n     \
    \           Method method = getMethod(\"do\" + operation.toUpperCase(), Long.class);\n\
    \                result = method.invoke(null, operand.get(0)) * operand.get(0)\
    \ + method.invoke(null, operand.get(1)) * operand.get(1);\n            } catch\
    \ (Exception e) {\n                e.printStackTrace();\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5ss1hyt.java:31: error: cannot find symbol\n                Method\
    \ method = getMethod(\"do\" + operation.toUpperCase(), Long.class);\n        \
    \                        ^\n  symbol:   method getMethod(String,Class<Long>)\n\
    \  location: class Problem\n/tmp/tmpz5ss1hyt.java:32: error: bad operand types\
    \ for binary operator '*'\n                result = method.invoke(null, operand.get(0))\
    \ * operand.get(0) + method.invoke(null, operand.get(1)) * operand.get(1);\n \
    \                                                            ^\n  first type:\
    \  Object\n  second type: Long\n/tmp/tmpz5ss1hyt.java:32: error: bad operand types\
    \ for binary operator '*'\n                result = method.invoke(null, operand.get(0))\
    \ * operand.get(0) + method.invoke(null, operand.get(1)) * operand.get(1);\n \
    \                                                                            \
    \                                       ^\n  first type:  Object\n  second type:\
    \ Long\n3 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int length = op.size() - 1;\n        String[] operators\
    \ = op.toArray(new String[op.size()]);\n\n        // Create two empty arrays.\n\
    \        String[] operand1 = new String[length];\n        String[] operand2 =\
    \ new String[length];\n\n        // Populate operand1 and operand2.\n        for\
    \ (int i = 0; i < length; i++)\n            operand1[i] = operand.get(i);\n\n\
    \        for (int i = 0; i < length; i++)\n            operand2[i] = operand.get(i\
    \ + 1);\n\n        // Calculate the operator.\n        for (int i = 0; i < length;\
    \ i++) {\n            try {\n                String operator = operators[i];\n\
    \                Object value = null;\n                if (operator.equals(\"\
    +\")) {\n                    value = Long.valueOf(operand1.get(i)) + Long.valueOf(operand2.get(i));\n\
    \                } else if (operator.equals(\"-\")) {\n                    value\
    \ = Long.valueOf(operand1.get(i)) - Long.valueOf(operand2.get(i));\n         \
    \       } else if (operator.equals(\"*\")) {\n                    value = Long.valueOf(operand1.get(i))\
    \ * Long.valueOf(operand2.get(i));\n                } else if (operator.equals(\"\
    //\")) {\n                    value = Long.valueOf(operand1.get(i)) / Long.valueOf(operand2.get(i));\n\
    \                } else if (operator.equals(\"**\")) {\n                    value\
    \ = Math.pow(Long.valueOf(operand1.get(i)), Long.valueOf(operand2.get(i)));\n\
    \                }\n                operand1.set(i + 1, String.valueOf(value));\n\
    \            } catch (NumberFormatException nfe) {\n                operand1.set(i\
    \ + 1, operand2.get(i));\n            }\n        }\n\n        // Evaluate expression\n\
    \        for (int i = 0; i < length; i++)\n            result += Long.parseLong(operand1.get(i));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf25h_n3o.java:38: error: incompatible types: Long cannot be converted\
    \ to String\n            operand1[i] = operand.get(i);\n                     \
    \                ^\n/tmp/tmpf25h_n3o.java:41: error: incompatible types: Long\
    \ cannot be converted to String\n            operand2[i] = operand.get(i + 1);\n\
    \                                     ^\n/tmp/tmpf25h_n3o.java:49: error: cannot\
    \ find symbol\n                    value = Long.valueOf(operand1.get(i)) + Long.valueOf(operand2.get(i));\n\
    \                                                 ^\n  symbol:   method get(int)\n\
    \  location: variable operand1 of type String[]\n/tmp/tmpf25h_n3o.java:49: error:\
    \ cannot find symbol\n                    value = Long.valueOf(operand1.get(i))\
    \ + Long.valueOf(operand2.get(i));\n                                         \
    \                                        ^\n  symbol:   method get(int)\n  location:\
    \ variable operand2 of type String[]\n/tmp/tmpf25h_n3o.java:51: error: cannot\
    \ find symbol\n                    value = Long.valueOf(operand1.get(i)) - Long.valueOf(operand2.get(i));\n\
    \                                                 ^\n  symbol:   method get(int)\n\
    \  location: variable operand1 of type String[]\n/tmp/tmpf25h_n3o.java:51: error:\
    \ cannot find symbol\n                    value = Long.valueOf(operand1.get(i))\
    \ - Long.valueOf(operand2.get(i));\n                                         \
    \                                        ^\n  symbol:   method get(int)\n  location:\
    \ variable operand2 of type String[]\n/tmp/tmpf25h_n3o.java:53: error: cannot\
    \ find symbol\n                    value = Long.valueOf(operand1.get(i)) * Long.valueOf(operand2.get(i));\n\
    \                                                 ^\n  symbol:   method get(int)\n\
    \  location: variable operand1 of type String[]\n/tmp/tmpf25h_n3o.java:53: error:\
    \ cannot find symbol\n                    value = Long.valueOf(operand1.get(i))\
    \ * Long.valueOf(operand2.get(i));\n                                         \
    \                                        ^\n  symbol:   method get(int)\n  location:\
    \ variable operand2 of type Strin"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = 0;\n        for (String i : op)\n            switch (i) {\n          \
    \      case \"+\":\n                    res = res + operand.get(0);\n        \
    \            operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    res = res - operand.get(0);\n                  \
    \  operand.remove(0);\n                    break;\n                case \"*\"\
    :\n                    res = res * operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"//\":\n                  \
    \  res = res / operand.get(0);\n                    operand.remove(0);\n     \
    \               break;\n                case \"**\":\n                    res\
    \ = Math.pow(res, operand.get(0));\n                    operand.remove(0);\n \
    \                   break;\n                default:\n                    System.out.println(\"\
    Undefined operator: \" + i);\n            }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxupruvh.java:48: error: incompatible types: possible lossy conversion\
    \ from double to long\n                    res = Math.pow(res, operand.get(0));\n\
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ ans = 0;\n        double dbl1 = Double.parseDouble(operand.get(0));\n      \
    \  double dbl2 = Double.parseDouble(operand.get(1));\n\n        int len = op.size()\
    \ - 1;\n\n        // if there is no operator just do simple addition.\n      \
    \  if (len == 0) {\n            ans = dbl1 + dbl2;\n        }\n        // else\
    \ there are operators\n        else {\n            try {\n                // first\
    \ try to evaluate the operand\n                switch (op.get(0)) {\n        \
    \            case \"+\": ans = dbl1 + dbl2; break;\n                    case \"\
    -\": ans = dbl1 - dbl2; break;\n                    case \"*\": ans = dbl1 * dbl2;\
    \ break;\n                    case \"/\": ans = dbl1 / dbl2; break;\n        \
    \            case \"//\": ans = dbl1 // dbl2; break;\n                    case\
    \ \"**\": ans = dbl1 ** dbl2; break;\n                    default: System.out.println(\"\
    Error: unrecognized operator \" + op.get(0));\n                }\n           \
    \     // if the operands cannot be evaluated then loop through the operator and\
    \ add them\n                for (int i = 1; i < len; i++) {\n                \
    \    switch (op.get(i)) {\n                        case \"+\": ans = ans + dbl2;\
    \ break;\n                        case \"-\": ans = ans - dbl2; break;\n     \
    \                   case \"*\": ans = ans * dbl2; break;\n                   \
    \     case \"/\": ans = ans / dbl2; break;\n                        case \"//\"\
    : ans = ans // dbl2; break;\n                        case \"**\": ans = ans **\
    \ dbl2; break;\n                        default: System.out.println(\"Error: unrecognized\
    \ operator \" + op.get(i));\n                    }\n                }\n      \
    \      } catch (Exception e) {\n                System.out.println(\"Error while\
    \ parsing expression: \" + e.getMessage());\n            }\n        }\n\n    \
    \    return ans;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtmw1tzp.java:47: error: ';' expected\n                    case\
    \ \"//\": ans = dbl1 // dbl2; break;\n                                       \
    \  ^\n/tmp/tmpbtmw1tzp.java:48: error: illegal start of expression\n         \
    \           case \"**\": ans = dbl1 ** dbl2; break;\n                        \
    \                   ^\n/tmp/tmpbtmw1tzp.java:58: error: ';' expected\n       \
    \                 case \"//\": ans = ans // dbl2; break;\n                   \
    \                         ^\n/tmp/tmpbtmw1tzp.java:59: error: illegal start of\
    \ expression\n                        case \"**\": ans = ans ** dbl2; break;\n\
    \                                              ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977898
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[]\
    \ result = new long[op.length];\n\n        for (int i = 0; i < op.length; ++i)\
    \ {\n            String operator = op.get(i);\n            long rightOperand =\
    \ operand.get(0);\n            if (op.size() - 1 == i) {\n                rightOperand\
    \ = operand.get(1);\n            }\n            long leftOperand = operand.get(1);\n\
    \            long value = -1;\n            switch (operator) {\n             \
    \   case \"+\":\n                    value = rightOperand + leftOperand;\n   \
    \                 break;\n                case \"-\":\n                    value\
    \ = rightOperand - leftOperand;\n                    break;\n                case\
    \ \"*\":\n                    value = rightOperand * leftOperand;\n          \
    \          break;\n                case \"//\":\n                    value = rightOperand\
    \ / leftOperand;\n                    break;\n                case \"**\":\n \
    \                   value = rightOperand * leftOperand;\n                    break;\n\
    \            }\n            result[i] = value;\n        }\n        return result[0];\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7xc9ir5.java:28: error: cannot find symbol\n        long[] result\
    \ = new long[op.length];\n                                   ^\n  symbol:   variable\
    \ length\n  location: variable op of type ArrayList<String>\n/tmp/tmpg7xc9ir5.java:30:\
    \ error: cannot find symbol\n        for (int i = 0; i < op.length; ++i) {\n \
    \                             ^\n  symbol:   variable length\n  location: variable\
    \ op of type ArrayList<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ count = 0;\n        for (int i = 0; i < op.size(); i++) {\n            String\
    \ opValue = op.get(i);\n            long value = operand.get(count++);\n     \
    \       switch (opValue) {\n                case \"+\":\n                    value\
    \ = value + value;\n                    break;\n                case \"-\":\n\
    \                    value = value - value;\n                    break;\n    \
    \            case \"*\":\n                    value = value * value;\n       \
    \             break;\n                case \"//\":\n                    value\
    \ = value / value;\n                    break;\n                case \"**\":\n\
    \                    value = Math.pow(value, value);\n                    break;\n\
    \                default:\n                    break;\n            }\n       \
    \ }\n        return value;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5n13h9a.java:46: error: incompatible types: possible lossy conversion\
    \ from double to long\n                    value = Math.pow(value, value);\n \
    \                                   ^\n/tmp/tmps5n13h9a.java:52: error: cannot\
    \ find symbol\n        return value;\n               ^\n  symbol:   variable value\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.isEmpty() || operand.isEmpty()) {\n            throw new IllegalArgumentException(\"\
    Operator or operand list is empty.\");\n        }\n        if (op.size() != operand.size())\
    \ {\n            throw new IllegalArgumentException(\"Operator list has \" + op.size()\
    \ + \" operators, operand list has \" + operand.size() + \" operands.\");\n  \
    \      }\n        long res = 0;\n        for (int i = 0; i < (op.size() - 1);\
    \ i++) {\n            long val1 = operand.get(i);\n            int op = op.charAt(i);\n\
    \            int op2 = op.charAt(i + 1);\n            long val2 = operand.get(i\
    \ + 1);\n            switch (op) {\n                case '+':\n              \
    \      res = val1 + val2;\n                    break;\n                case '-':\n\
    \                    res = val1 - val2;\n                    break;\n        \
    \        case '*':\n                    res = val1 * val2;\n                 \
    \   break;\n                case '/':\n                    res = val1 / val2;\n\
    \                    break;\n                case '%':\n                    res\
    \ = val1 % val2;\n                    break;\n                case '^':\n    \
    \                res = val1 ^ val2;\n                    break;\n            \
    \    case '**':\n                    res = Math.pow(val1, val2);\n           \
    \         break;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp564szp5w.java:59: error: unclosed character literal\n         \
    \       case '**':\n                     ^\n/tmp/tmp564szp5w.java:59: error: unclosed\
    \ character literal\n                case '**':\n                        ^\n/tmp/tmp564szp5w.java:60:\
    \ error: illegal start of expression\n                    res = Math.pow(val1,\
    \ val2);\n                        ^\n/tmp/tmp564szp5w.java:60: error: : or ->\
    \ expected\n                    res = Math.pow(val1, val2);\n                \
    \                              ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Create a StringBuilder object to store our generated expression.\n        StringBuilder\
    \ builder = new StringBuilder();\n        // Loop through the operator array list\
    \ to loop through each operator in the expression.\n        for (String i : op)\
    \ {\n            // Create an if statement to check if the current operator (i)\
    \ is in the operand array list.\n            if (Arrays.asList(operand).contains(i))\
    \ {\n                // If it is, subtract the current operand value from the\
    \ operand array list element and add it to the string builder.\n             \
    \   builder.append(Arrays.asList(operand).remove(i));\n                // If it\
    \ isn't in the operand array list, add it to the string builder.\n           \
    \ } else {\n                // If the current operator is not in the operand array\
    \ list, add it to the string builder.\n                builder.append(i);\n  \
    \          }\n        }\n        // Return our generated expression.\n       \
    \ return Long.parseLong(builder.toString());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"***+\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat Problem.doAlgebra(tmprj25beus.java:43)\n\tat Problem.main(tmprj25beus.java:46)\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Create new array to store all the results (sum)\n        ArrayList<Long> res\
    \ = new ArrayList<>();\n        // If there is not enough operands, return 0 as\
    \ the final answer\n        if (operand.size() < 2) return 0;\n        // If there\
    \ is not enough operators, return 0 as the final answer\n        if (op.size()\
    \ < 1) return 0;\n        // Iterate through the operator array list\n       \
    \ for (int i = 0; i < op.size(); i++) {\n            // Check if the current operator\
    \ is in the array\n            if (Arrays.asList(op).contains(op.get(i))) \n \
    \               // Iterate through the operand array list\n                for\
    \ (int j = 0; j < operand.size(); j++) {\n                    // Add the current\
    \ operand (operand) to the result array list (sum)\n                    res.add(operand.get(j)\
    \ + \n                        doAlgebra(Arrays.asList(op).subList(i + 1, op.size()),\
    \ Arrays.asList(operand).subList(j, operand.size())));\n                }\n  \
    \          else {\n                // If the current operator is not in the array,\
    \ then return 0 as the final answer.\n                return 0;\n            }\n\
    \        }\n        // Return the result as the final answer\n        return res.get(res.size()-1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzgdfzln.java:42: error: incompatible types: List<ArrayList<String>>\
    \ cannot be converted to ArrayList<String>\n                        doAlgebra(Arrays.asList(op).subList(i\
    \ + 1, op.size()), Arrays.asList(operand).subList(j, operand.size())));\n    \
    \                                                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            long\
    \ a = 0;\n            long b = 0;\n            String sOperand = operand.get(i).toString();\n\
    \            String sOperator = op.get(i).toString();\n            String sOperator1\
    \ = op.get(i + 1).toString();\n            String sOperator2 = op.get(i + 2).toString();\n\
    \            if (sOperator.equals(\"+\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator.equals(\"-\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator.equals(\"*\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator.equals(\"//\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator.equals(\"**\")) {\n                a = Long.parseLong(sOperand);\n\
    \                b = Long.parseLong(sOperand);\n                a *= b;\n    \
    \        }\n            if (sOperator1.equals(\"+\"))\n                b = Long.parseLong(sOperand);\n\
    \            if (sOperator1.equals(\"-\"))\n                b = Long.parseLong(sOperand);\n\
    \            if (sOperator1.equals(\"*\"))\n                b = Long.parseLong(sOperand);\n\
    \            if (sOperator1.equals(\"//\")) {\n                b = Long.parseLong(sOperand);\n\
    \                a = Long.parseLong(sOperand);\n                a /= b;\n    \
    \        }\n            if (sOperator2.equals(\"+\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator2.equals(\"-\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator2.equals(\"*\"))\n                a = Long.parseLong(sOperand);\n\
    \            if (sOperator2.equals(\"//\")) {\n                a = Long.parseLong(sOperand);\n\
    \                b = Long.parseLong(sOperand);\n                a %= b;\n    \
    \        }\n            long temp = a;\n            for (int j = i; j < op.size();\
    \ j++) {\n                String sOperator3 = op.get(j).toString();\n        \
    \        String sOperator4 = op.get(j + 1).toString();\n                if (sOperator3.equals(\"\
    +\"))\n                    temp += b;\n                if (sOperator3.equals(\"\
    -\"))\n                    temp -= b;\n                if (sOperator3.equals(\"\
    *\"))\n                    temp *= b;\n                if (sOperator3.equals(\"\
    //\"))\n                    temp /= b;\n                if (sOperator4.equals(\"\
    +\"))\n                    temp += a;\n                if (sOperator4.equals(\"\
    -\"))\n                    temp -= a;\n                if (sOperator4.equals(\"\
    *\"))\n                    \n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry1jytzs.java:89: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmpry1jytzs.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch\
    \ (op.get(i)) {\n                case '+':\n                    result = result\
    \ + operand.get(i);\n                    break;\n                case '-':\n \
    \                   result = result - operand.get(i);\n                    break;\n\
    \                case '*':\n                    result = result * operand.get(i);\n\
    \                    break;\n                case '/':\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ '%':\n                    result = result % operand.get(i);\n              \
    \      break;\n                case '^':\n                    result = result\
    \ ^ operand.get(i);\n                    break;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk8vmjkww.java:31: error: incompatible types: char cannot be converted\
    \ to String\n                case '+':\n                     ^\n/tmp/tmpk8vmjkww.java:34:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    case '-':\n                     ^\n/tmp/tmpk8vmjkww.java:37: error: incompatible\
    \ types: char cannot be converted to String\n                case '*':\n     \
    \                ^\n/tmp/tmpk8vmjkww.java:40: error: incompatible types: char\
    \ cannot be converted to String\n                case '/':\n                 \
    \    ^\n/tmp/tmpk8vmjkww.java:43: error: incompatible types: char cannot be converted\
    \ to String\n                case '%':\n                     ^\n/tmp/tmpk8vmjkww.java:46:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    case '^':\n                     ^\n6 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // TODO Auto-generated method stub\n        for (String\
    \ op1 : op) {\n            boolean isAddition = false;\n            boolean isSubtraction\
    \ = false;\n            boolean isMultiplication = false;\n            boolean\
    \ isDivision = false;\n            boolean isExponentiation = false;\n       \
    \     boolean isModulus = false;\n            boolean isBitwise = false;\n   \
    \         for (int i = 0; i < operand.size(); i++) {\n                isAddition\
    \ = isAddition || op1.equals(op.get(0));\n                isSubtraction = isSubtraction\
    \ || op1.equals(op.get(1));\n                isMultiplication = isMultiplication\
    \ || op1.equals(op.get(2));\n                isDivision = isDivision || op1.equals(op.get(3));\n\
    \                isExponentiation = isExponentiation || op1.equals(op.get(4));\n\
    \                isModulus = isModulus || op1.equals(op.get(5));\n           \
    \     isBitwise = isBitwise || op1.equals(op.get(6));\n                if (i <\
    \ operand.size() - 1) {\n                    switch (op1) {\n                \
    \        case \"+\":\n                            result += (Long) operand.get(i);\n\
    \                            break;\n                        case \"-\":\n   \
    \                         result -= (Long) operand.get(i);\n                 \
    \           break;\n                        case \"*\":\n                    \
    \        result *= (Long) operand.get(i);\n                            break;\n\
    \                        case \"//\":\n                            result /= (Long)\
    \ operand.get(i);\n                            break;\n                      \
    \  case \"**\":\n                            result **= (Long) operand.get(i);\n\
    \                            break;\n                    }\n                }\n\
    \            }\n            if (!isAddition && !isSubtraction && !isMultiplication\
    \ && !isDivision && !isExponentiation && !isModulus\n                    && !isBitwise)\
    \ {\n                return -1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpub374ll1.java:61: error: illegal start of expression\n        \
    \                    result **= (Long) operand.get(i);\n                     \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977898
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[]\
    \ res = new long[op.size()];\n        for (int i = 0; i < res.length; i++) {\n\
    \            String symbol = op.get(i);\n            long value = 0;\n       \
    \     for (int j = 0; j < operand.size() - 1; j++) {\n                value +=\
    \ operand.get(j) * operand.get(j + 1);\n            }\n            try {\n   \
    \             switch (symbol) {\n                    case \"+\":\n           \
    \             res[i] = value;\n                        break;\n              \
    \      case \"-\":\n                        res[i] = -value;\n               \
    \         break;\n                    case \"*\":\n                        res[i]\
    \ = value;\n                        break;\n                    case \"//\":\n\
    \                        res[i] = (int) Math.floor(value / operand.get(0));\n\
    \                        break;\n                    case \"**\":\n          \
    \              res[i] = Math.pow(value, operand.get(0));\n                   \
    \     break;\n                    default:\n                        System.out.println(\"\
    Invalid expression\");\n                }\n            } catch (ArithmeticException\
    \ e) {\n                System.out.println(\"Invalid expression\");\n        \
    \    }\n        }\n        return Arrays.stream(res).sum();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5zif1i_.java:50: error: incompatible types: possible lossy conversion\
    \ from double to long\n                        res[i] = Math.pow(value, operand.get(0));\n\
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = Long.MIN_VALUE;\n        for(String opStr : op){\n            switch(opStr){\n\
    \                case \"+\":\n                    result = result + operand.get(0);\n\
    \                    operand.remove(0);\n                break;\n            \
    \    case \"-\":\n                    result = result - operand.get(0);\n    \
    \                operand.remove(0);\n                break;\n                case\
    \ \"*\":\n                    result = result * operand.get(0);\n            \
    \        operand.remove(0);\n                break;\n                case \"//\"\
    :\n                    result = result / operand.get(0);\n                   \
    \ operand.remove(0);\n                break;\n                case \"**\":\n \
    \                   result = result ** operand.get(0);\n                    operand.remove(0);\n\
    \                break;\n                default:\n                    System.out.println(\"\
    Invalid operation: \" + opStr);\n                break;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspkhzwex.java:48: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ We initialize result to zero and we will iterate through both arraylists\n \
    \       // and perform the operation. We will use binary operation and we will\
    \ use parentheses to \n        // group operands.\n        long result = 0;\n\
    \        for(int i = 0; i < op.size(); i++)\n        for(int j = 0; j < operand.size();\
    \ j++)\n        // We will use binary operation + and we will use parentheses\
    \ to group operands.\n            result = result + (op.get(i).equals(operand.get(j))\
    \ ? operand.get(j) : 0);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92sn0_sb.java:39)\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uw3aio1.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        int numOpe = op.size();\n        int\
    \ numOpes = operand.size() - 1;\n        String op1 = op.get(0);\n        int\
    \ iop1 = 0;\n        String op2 = op.get(1);\n        int iop2 = 0;\n        long\
    \ result = 0;\n        if (numOpe == 1) {\n            return operand.get(iop1);\n\
    \        } else {\n            for (int i = 0; i < numOpe; i++) {\n          \
    \      if (op1.equals(op.get(i))) {\n                    op1 = op.get(i+1);\n\
    \                    iop1++;\n                }\n            }\n            for\
    \ (int i = 0; i < numOpe; i++) {\n                if (op2.equals(op.get(i))) {\n\
    \                    op2 = op.get(i+1);\n                    iop2++;\n       \
    \         }\n            }\n            String temp1 = op + operand.get(iop1)\
    \ + op + operand.get(iop2);\n            String temp2 = op + operand.get(iop2)\
    \ + op + operand.get(iop1);\n            String temp3 = op + operand.get(iop1)\
    \ + op + operand.get(iop2);\n            String temp4 = op + operand.get(iop2)\
    \ + op + operand.get(iop1);\n            String temp5 = op + operand.get(iop1)\
    \ + op + operand.get(iop2);\n            String temp6 = op + operand.get(iop2)\
    \ + op + operand.get(iop1);\n            String temp7 = op + operand.get(iop1)\
    \ + op + operand.get(iop2);\n            String temp8 = op + operand.get(iop2)\
    \ + op + operand.get(iop1);\n            String temp9 = op + operand.get(iop1)\
    \ + op + operand.get(iop2);\n            String temp10 = op + operand.get(iop2)\
    \ + op + operand.get(iop1);\n            if (temp1.equals(temp2) && temp1.equals(temp3)\
    \ && temp1.equals(temp4) && temp1.equals(temp5) && temp1.equals(temp6) && temp1.equals(temp7)\
    \ && temp1.equals(temp8) && temp1.equals(temp9) && temp1.equals(temp10)) {\n \
    \               result = operand.get(iop1) + operand.get(iop2);\n            }\
    \ else if (temp2.equals(temp1) && temp2.equals(temp3) && temp2.equals(temp4) &&\
    \ temp2.equals(temp5) && temp2.equals(temp6) && temp2.equals(temp7) && temp2.equals(temp8)\
    \ && temp2.equals(temp9) && temp2.equals(temp10)) {\n                result =\
    \ operand.get(iop1) + operand.get(iop2);\n            } else if (temp3.equals(temp1)\
    \ && temp3.equals(temp2) && temp3.equals(temp4) && temp3.equals(temp5) && temp3.equals(temp6)\
    \ && temp3.equals(temp7) && temp3.equals(temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubkko13m.java:65: error: ')' expected\n            } else if (temp3.equals(temp1)\
    \ && temp3.equals(temp2) && temp3.equals(temp4) && temp3.equals(temp5) && temp3.equals(temp6)\
    \ && temp3.equals(temp7) && temp3.equals(temp\n                              \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpubkko13m.java:66:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpubkko13m.java:67: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ length = op.size();\n        if(length != operand.size() - 1) {\n          \
    \  System.out.println(\"The number of operator array list is not equal the number\
    \ of operand array list.\");\n            return -1;\n        }\n        long\
    \ result = 0;\n        for(int i = 0; i < length; i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result **= operand.get(i + 1);\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrzwyhgs.java:49: error: illegal start of expression\n        \
    \            result **= operand.get(i + 1);\n                            ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659977898
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result;\n        int i, j;\n        for(i = 0, j = 1; i < op.size(); i++, j++)\
    \ {\n            if(op.get(i).equals(\"+\")) {\n                result = result\
    \ + (operand.get(j++));\n            }\n            else if(op.get(i).equals(\"\
    *\")) {\n                result = result + (operand.get(j++));\n            }\n\
    \            else if(op.get(i).equals(\"-\")) {\n                result = result\
    \ - (operand.get(j++));\n            }\n            else if(op.get(i).equals(\"\
    /\")) {\n                result = result + (operand.get(j++) / operand.get(j++));\n\
    \            }\n            else if(op.get(i).equals(\"//\")) {\n            \
    \    result = result + (operand.get(j++) / operand.get(j++));\n            }\n\
    \            else if(op.get(i).equals(\"**\")) {\n                result = result\
    \ + (operand.get(j++) ^ operand.get(j++));\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpndmji3z1.java:32: error: variable result might not have been initialized\n\
    \                result = result + (operand.get(j++));\n                     \
    \    ^\n/tmp/tmpndmji3z1.java:35: error: variable result might not have been initialized\n\
    \                result = result + (operand.get(j++));\n                     \
    \    ^\n/tmp/tmpndmji3z1.java:38: error: variable result might not have been initialized\n\
    \                result = result - (operand.get(j++));\n                     \
    \    ^\n/tmp/tmpndmji3z1.java:41: error: variable result might not have been initialized\n\
    \                result = result + (operand.get(j++) / operand.get(j++));\n  \
    \                       ^\n/tmp/tmpndmji3z1.java:44: error: variable result might\
    \ not have been initialized\n                result = result + (operand.get(j++)\
    \ / operand.get(j++));\n                         ^\n/tmp/tmpndmji3z1.java:47:\
    \ error: variable result might not have been initialized\n                result\
    \ = result + (operand.get(j++) ^ operand.get(j++));\n                        \
    \ ^\n/tmp/tmpndmji3z1.java:50: error: variable result might not have been initialized\n\
    \        return result;\n               ^\n7 errors\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // If the length of operator array list is equal to the\
    \ length of operand array list minus one.\n        if (op.size() != operand.size())\
    \ {\n            return 0;\n        }\n        // If operator array list has at\
    \ least one operator, and operand array list has at least two operands.\n    \
    \    if (op.size() > 1 && operand.size() >= 2) {\n            String op = op.get(0);\n\
    \            // If operator equals to '-', subtract the second operand from the\
    \ result.\n            if (op.equals(\"-\")) {\n                result = result\
    \ - operand.get(1);\n            }\n            // If operator equals to '*',\
    \ multiply the second operand with the result.\n            if (op.equals(\"*\"\
    )) {\n                result = result * operand.get(1);\n            }\n     \
    \       // If operator equals to '//', divide result by second operand and assign\
    \ the result to the result.\n            if (op.equals(\"//\")) {\n          \
    \      result = result / operand.get(1);\n            }\n            // If operator\
    \ equals to '+', add the second operand to the result.\n            if (op.equals(\"\
    +\")) {\n                result = result + operand.get(1);\n            }\n  \
    \          // If operator equals to '-', subtract the second operand from the\
    \ result.\n            if (op.equals(\"-\")) {\n                result = result\
    \ - operand.get(1);\n            }\n            // If operator equals to '/',\
    \ multiply the result by the second operand and assign the result to the result.\n\
    \            if (op.equals(\"/\")) {\n                result = result / operand.get(1);\n\
    \            }\n            // If operator equals to '**', multiply the result\
    \ by the second operand and assign the result to the result.\n            if (op.equals(\"\
    **\")) {\n                result = result ** operand.get(1);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6c0mgzw.java:62: error: illegal start of expression\n        \
    \        result = result ** operand.get(1);\n                                \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977898
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ eval = new ArrayList<>();\n        eval.add(\"0\");\n        ArrayList<String>\
    \ left = new ArrayList<>();\n        ArrayList<String> right = new ArrayList<>();\n\
    \        for(int i = 0; i < op.size() - 1; i++) {\n            left.add(op.get(i));\n\
    \        }\n        for(int j = 0; j < operand.size() - 1; j++) {\n          \
    \  right.add(operand.get(j));\n        }\n        for(int i = 1; i < op.size();\
    \ i++) {\n            String op = (left.get(i) == right.size()) ? right.get(0)\
    \ : left.get(i);\n            String operator = (op == left.get(i)) ? \"+\" :\
    \ op;\n            eval.add((eval(left,operator,right,eval)));\n        }\n  \
    \      return Long.valueOf(eval.get(0));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rs_pcgj.java:36: error: incompatible types: Long cannot be converted\
    \ to String\n            right.add(operand.get(j));\n                        \
    \         ^\n/tmp/tmp3rs_pcgj.java:39: error: variable op is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op =\
    \ (left.get(i) == right.size()) ? right.get(0) : left.get(i);\n              \
    \     ^\n/tmp/tmp3rs_pcgj.java:39: error: bad operand types for binary operator\
    \ '=='\n            String op = (left.get(i) == right.size()) ? right.get(0) :\
    \ left.get(i);\n                                     ^\n  first type:  String\n\
    \  second type: int\n/tmp/tmp3rs_pcgj.java:41: error: cannot find symbol\n   \
    \         eval.add((eval(left,operator,right,eval)));\n                      ^\n\
    \  symbol:   method eval(ArrayList<String>,String,ArrayList<String>,ArrayList<String>)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() < 2 || operand.size() < 2) {\n            return 0;\n        }\n\
    \        long result = 1;\n        ArrayList<String> ops = new ArrayList<>();\n\
    \        ArrayList<String> op2 = new ArrayList<>();\n        ArrayList<String>\
    \ op3 = new ArrayList<>();\n        ArrayList<String> op4 = new ArrayList<>();\n\
    \        ArrayList<String> op5 = new ArrayList<>();\n        ArrayList<String>\
    \ op6 = new ArrayList<>();\n        ArrayList<String> op7 = new ArrayList<>();\n\
    \        ArrayList<String> op8 = new ArrayList<>();\n        ArrayList<String>\
    \ op9 = new ArrayList<>();\n        int operandIndex = 0;\n        int operatorIndex\
    \ = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(operandIndex).equals(op.get(i)))\
    \ {\n                ops.add(op.get(i));\n                operandIndex++;\n  \
    \              operandIndex++;\n            } else if (op.get(operandIndex).equals(\"\
    +\")) {\n                op2.add(op.get(i));\n                operandIndex++;\n\
    \            } else if (op.get(operandIndex).equals(\"-\")) {\n              \
    \  op3.add(op.get(i));\n                operandIndex++;\n            } else if\
    \ (op.get(operandIndex).equals(\"*\")) {\n                op4.add(op.get(i));\n\
    \                operandIndex++;\n            } else if (op.get(operandIndex).equals(\"\
    /\")) {\n                op5.add(op.get(i));\n                operandIndex++;\n\
    \            } else if (op.get(operandIndex).equals(\"**\")) {\n             \
    \   op6.add(op.get(i));\n                operandIndex++;\n            } else if\
    \ (op.get(operandIndex).equals(\"//\")) {\n                op7.add(op.get(i));\n\
    \                operandIndex++;\n            } else if (op.get(operandIndex).equals(\"\
    %\")) {\n                op8.add(op.get(i));\n                operandIndex++;\n\
    \            } else if (op.get(operandIndex).equals(\"<\")) {\n              \
    \  op9.add(op.get(i));\n                operandIndex++;\n            } else if\
    \ (op.get(operandIndex).equals(\"<=\")) {\n                op9.add(op.get(i));\n\
    \                operandIndex++;\n            } else if (op.get(operandIndex).equals(\"\
    >=\")) {\n                op9.add(op.get(i));\n                operandIndex++;\n\
    \            } else if (op.get(operandIndex).equals(\">\")) {\n              \
    \  op9.add(op.get(i));\n                operandIndex++;\n            } else if\
    \ (op.get(operandIndex).equals(\"<>\")) {\n                op9.add(op.get(i));\n\
    \                operandIndex++;\n            } else if (op.get(operandIndex).equals(\"\
    ==\")) {\n                op9.add(op.get(i));\n                operandIndex++;\n\
    \            } else if (op.get(operandIndex).equals(\"=\")) {\n              \
    \  op9.add(op.get(i));\n                operandIndex++;\n            } else if\
    \ (op.get(operandIndex).equals(\"!=\")) {\n                \n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4h9ke_am.java:93: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977899
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ operand = new ArrayList<String>();\n        for(Long num : operand) {\n    \
    \        operand.add(num.toString());\n        }\n        operand.remove(0);\n\
    \        for(int i = 0; i < op.size(); i++) {\n            String op = op.get(i);\n\
    \            operand.add(op);\n            String operandStr = operand.get(0);\n\
    \            operand.remove(0);\n            long result = doCalculation(op, operandStr);\n\
    \            for(int j = i + 1; j < op.size(); j++) {\n                result\
    \ = doCalculation(op, result);\n            }\n            return result;\n  \
    \      }\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m3mmodo.java:28: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n        ArrayList<String>\
    \ operand = new ArrayList<String>();\n                          ^\n/tmp/tmp2m3mmodo.java:29:\
    \ error: incompatible types: String cannot be converted to Long\n        for(Long\
    \ num : operand) {\n                       ^\n/tmp/tmp2m3mmodo.java:34: error:\
    \ variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \            String op = op.get(i);\n                   ^\n/tmp/tmp2m3mmodo.java:34:\
    \ error: cannot find symbol\n            String op = op.get(i);\n            \
    \              ^\n  symbol:   method get(int)\n  location: variable op of type\
    \ String\n/tmp/tmp2m3mmodo.java:38: error: cannot find symbol\n            long\
    \ result = doCalculation(op, operandStr);\n                          ^\n  symbol:\
    \   method doCalculation(String,String)\n  location: class Problem\n/tmp/tmp2m3mmodo.java:39:\
    \ error: cannot find symbol\n            for(int j = i + 1; j < op.size(); j++)\
    \ {\n                                     ^\n  symbol:   method size()\n  location:\
    \ variable op of type String\n/tmp/tmp2m3mmodo.java:40: error: cannot find symbol\n\
    \                result = doCalculation(op, result);\n                       \
    \  ^\n  symbol:   method doCalculation(String,long)\n  location: class Problem\n\
    7 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int opLength = op.size() - 1;\n        \n        // If\
    \ there is no operator in the operator array list then return 0.\n        if (opLength\
    \ < 0)\n            return 0;\n        \n        // If the length of the operator\
    \ array list is less than or equal to the length of the operand array list then\
    \ \n        // the length of operator array list must be equal to the length of\
    \ operand array list minus one.\n        else if (opLength >= operand.size())\n\
    \            opLength = operand.size() - 1;\n        \n        // If the length\
    \ of operand array list is less than or equal to 0 then return 0.\n        //\
    \ If length of operand array list is 0 then return 0.\n        // If length of\
    \ operand array list is not less than or equal to 0 then return the evaluation\
    \ result.\n        else if (operand.size() == 0)\n            return 0;\n    \
    \    \n        // If the length of operator array list is greater than the length\
    \ of operand array list then return 0.\n        else if (opLength > operand.size())\n\
    \            return 0;\n        \n        // Find the index of the operator in\
    \ the operator array list. \n        // If there is not index then return 0.\n\
    \        int index = -1;\n        while (index == -1 && index != op.size() - 1)\
    \ {\n            index = op.indexOf(\"+\");\n        }\n        \n        // Find\
    \ the index of the operand in the operand array list. \n        // If there is\
    \ not index then return 0.\n        index = -1;\n        while (index == -1 &&\
    \ index != operand.size() - 1) {\n            index = operand.indexOf(\"+\");\n\
    \        }\n        \n        // If the index is not equal to the length of operator\
    \ array list minus one then return 0.\n        if (index != operand.size() - 1)\
    \ {\n            return 0;\n        }\n        \n        // Calculate the result\
    \ if the two array lists are the same length and if the operator in the operator\
    \ array list is \n        // either addition ( + ) or subtraction ( - ) then calculate\
    \ the result if the two operands are equal and \n        // if the operator in\
    \ the operator array list is either multiplication ( * ) or floor division ( //\
    \ ) then calculate the result \n        // if the two operands are equal and if\
    \ the operator in the operator array list is either exponentiation ( ** ) then\
    \ calculate the result \n        // if the two operands are equal then return\
    \ the result.\n        if (opLength == operand.size()) {\n            switch (op.get(index))\
    \ {\n                case \"+\":\n                    result = operand.get(0)\
    \ + (long) operand.get(1);\n                    break;\n                case \"\
    -\":\n                    result = operand.get(0) - (long) operand.get(1);\n \
    \                   break;\n                case \"*\":\n                    result\
    \ = operand.get(0) * (long) operand.get(1);\n                    break;\n    \
    \            case \"//\":\n                    result = operand.get(0) / (long)\
    \ operand.get(1);\n                    break;\n                case \"**\":\n\
    \                    result = operand.get(0) / operand.get(1);\n             \
    \       break;\n            }\n            return result;\n        }\n       \
    \ \n        // If two array lists are not the same length return 0.\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1) {\n            System.out.println(\"The size\
    \ of operator array list is invalid\");\n            System.exit(0);\n       \
    \ }\n\n        long result = 0;\n\n        // Initialize operand array list\n\
    \        ArrayList<Long> operandCopy = new ArrayList<>(operand);\n\n        //\
    \ Initialize operand array list\n        ArrayList<Long> operandTemp = new ArrayList<>();\n\
    \n        // Initialize operator array list\n        ArrayList<String> opTemp\
    \ = new ArrayList<>();\n\n        // Initialize operator array list\n        int\
    \ index = 0;\n        // Get the first operator and operand\n        String firstOperand\
    \ = operandCopy.get(index++);\n        String firstOperator = op.get(index++);\n\
    \n        // Get the second operator and operand\n        String secondOperand\
    \ = operandCopy.get(index++);\n        String secondOperator = op.get(index++);\n\
    \n        // Operator list\n        switch (firstOperator) {\n            case\
    \ \"+\":\n                opTemp.add(\"*\");\n                break;\n       \
    \     case \"-\":\n                opTemp.add(\"/\");\n                break;\n\
    \            case \"*\":\n                opTemp.add(\"**\");\n              \
    \  break;\n            case \"//\":\n                opTemp.add(\"**\");\n   \
    \             break;\n            case \"**\":\n                break;\n     \
    \       default:\n                System.out.println(\"The first operator is invalid\"\
    );\n                System.exit(0);\n        }\n\n        // Operand list\n  \
    \      switch (secondOperator) {\n            case \"+\":\n                operandTemp.add(secondOperand);\n\
    \                break;\n            case \"-\":\n                operandTemp.add(secondOperand);\n\
    \                break;\n            case \"*\":\n                operandTemp.add(secondOperand);\n\
    \                break;\n            case \"//\":\n                operandTemp.add(secondOperand);\n\
    \                break;\n            case \"**\":\n                operandTemp.add(secondOperand);\n\
    \                break;\n            default:\n                System.out.println(\"\
    The second operator is invalid\");\n                System.exit(0);\n        }\n\
    \n        // Operator list\n        switch (firstOperator) {\n            case\
    \ \"+\":\n                result = result + (operandCopy.get(index++) * operandTemp.get(index++));\n\
    \                break;\n            case \"-\":\n                result = result\
    \ - (operandCopy.get(index++) * operandTemp.get(index++));\n                break;\n\
    \            case \"*\":\n                result = result + (operandCopy.get(index++)\
    \ * operandTemp.get(index++));\n                break;\n            case \"//\"\
    :\n                result = result + (operandCopy.get(index++) / operandTemp.get(index++));\n\
    \                break;\n            case \"**\":\n                result = result\
    \ + (operandCopy.get(index++) / operandTemp.get(index++));\n                break;\n\
    \            default:\n                System.out.println(\"The first operator\
    \ is invalid\");\n                System.exit(0);\n        }\n\n        // Operand\
    \ list\n        switch (secondOperator) {\n            case \"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg3u31zp.java:121: error: unclosed string literal\n           \
    \ case \"\n                 ^\n/tmp/tmpjg3u31zp.java:123: error: modifier public\
    \ not allowed here\n    public static void main(String[] args) {\n           \
    \       ^\n/tmp/tmpjg3u31zp.java:123: error: : or -> expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpjg3u31zp.java:123:\
    \ error: -> expected\n    public static void main(String[] args) {\n         \
    \                                 ^\n/tmp/tmpjg3u31zp.java:127: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpjg3u31zp.java:129: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        String opExpr = \"\";\n        long opValue = 0;\n    \
    \    for(int i = 0; i < op.size(); i++) {\n            opValue = operand.get(op.size()\
    \ - i - 1);\n            switch(op.get(i)) {\n                case \"+\":\n  \
    \                  opExpr += \"(\"+operand.get(i)+\" + \";\n                 \
    \   break;\n                case \"-\":\n                    opExpr += \"(\"+operand.get(i)+\"\
    \ - \";\n                    break;\n                case \"*\":\n           \
    \         opExpr += \"(\"+operand.get(i)+\" x \";\n                    break;\n\
    \                case \"//\":\n                    opExpr += \"(\"+(operand.get(i)/operand.get(i-1))+\"\
    \ x \";\n                    break;\n                case \"**\":\n          \
    \          opExpr += \"(\"+(Math.pow(operand.get(i), operand.get(i-1))+\" x \"\
    ;\n                    break;\n                default:\n                    opExpr\
    \ += operand.get(i);\n            }\n        }\n        opExpr = opExpr.substring(0,\
    \ opExpr.length()-1);\n        try {\n            String exprStr = opExpr;\n \
    \           int len = exprStr.length();\n            String op = exprStr.substring(len-2,len);\n\
    \            exprStr = exprStr.substring(0, len);\n            exprStr = exprStr.replaceAll(\"\
    [x*]\", \"\");\n            exprStr = exprStr.replaceAll(\"[x//]\", \"\");\n \
    \           exprStr = exprStr.replaceAll(\"[x**]\", \"\");\n            System.out.println(exprStr);\n\
    \            long eval = Long.parseLong(exprStr);\n            result += (eval\
    \ * opValue);\n        } catch (NumberFormatException e) {\n            System.out.println(\"\
    The operator is not supported!\");\n            e.printStackTrace();\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2drdh7k.java:47: error: ')' expected\n                    opExpr\
    \ += \"(\"+(Math.pow(operand.get(i), operand.get(i-1))+\" x \";\n            \
    \                                                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ nOp = op.size();\n        int nOpr = operand.size();\n        if (nOpr < 2)\
    \ {\n            System.out.println(\"Error: Invalid Operand or Operator\");\n\
    \            return 0;\n        }\n        if (nOpr == 1) {\n            System.out.println(\"\
    Error: Invalid Operand or Operator\");\n            return 0;\n        }\n   \
    \     if (nOpr > nOp) {\n            System.out.println(\"Error: Invalid Operand\
    \ or Operator\");\n            return 0;\n        }\n\n        long result = 0;\n\
    \        ArrayList opList = new ArrayList(nOp);\n        for (int i = 0; i < nOp;\
    \ i++) {\n            opList.add(op.get(i));\n        }\n        ArrayList opNum\
    \ = new ArrayList(nOp);\n        for (int i = 0; i < nOp; i++) {\n           \
    \ opNum.add(Long.parseLong(operand.get(i)));\n        }\n        ArrayList opSum\
    \ = new ArrayList(nOp);\n        for (int i = 0; i < nOp; i++) {\n           \
    \ opSum.add(opList.get(i).charAt(0));\n        }\n        switch (opList.get(0))\
    \ {\n        case '+':\n            for (int i = 1; i < nOp; i++) {\n        \
    \        opSum.set(i, opSum.get(i - 1) + opList.get(i).charAt(0));\n         \
    \   }\n            break;\n        case '-':\n            for (int i = 1; i <\
    \ nOp; i++) {\n                opSum.set(i, opSum.get(i - 1) - opList.get(i).charAt(0));\n\
    \            }\n            break;\n        case '*':\n            for (int i\
    \ = 1; i < nOp; i++) {\n                opSum.set(i, opSum.get(i - 1) * opList.get(i).charAt(0));\n\
    \            }\n            break;\n        case '/':\n            for (int i\
    \ = 1; i < nOp; i++) {\n                opSum.set(i, opSum.get(i - 1) / (opList.get(i).charAt(0)\
    \ * opList.get(i).charAt(0)));\n            }\n            break;\n        case\
    \ '^':\n            for (int i = 1; i < nOp; i++) {\n                opSum.set(i,\
    \ opSum.get(i - 1) * (Math.pow(opList.get(i).charAt(0), opList.get(i).charAt(1))));\n\
    \            }\n            break;\n        default:\n            System.out.println(\"\
    Error: Invalid Operator or Operand\");\n            break;\n        }\n      \
    \  boolean valid = true;\n        long val = 0;\n        for (int i = 0; i < nOpr;\
    \ i++) {\n            if (Double.isNaN(opNum.get(i))) {\n                valid\
    \ = false;\n                break;\n            } else {\n                val\
    \ += opNum.get(i);\n            }\n        }\n        if (valid) {\n         \
    \   result = val;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptv52kezz.java:50: error: incompatible types: Long cannot be converted\
    \ to String\n            opNum.add(Long.parseLong(operand.get(i)));\n        \
    \                                        ^\n/tmp/tmptv52kezz.java:54: error: cannot\
    \ find symbol\n            opSum.add(opList.get(i).charAt(0));\n             \
    \                      ^\n  symbol:   method charAt(int)\n  location: class Object\n\
    /tmp/tmptv52kezz.java:56: error: patterns in switch statements are a preview feature\
    \ and are disabled by default.\n        switch (opList.get(0)) {\n           \
    \    ^\n  (use --enable-preview to enable patterns in switch statements)\n/tmp/tmptv52kezz.java:57:\
    \ error: constant label of type char is not compatible with switch selector type\
    \ Object\n        case '+':\n             ^\n/tmp/tmptv52kezz.java:59: error:\
    \ cannot find symbol\n                opSum.set(i, opSum.get(i - 1) + opList.get(i).charAt(0));\n\
    \                                                             ^\n  symbol:   method\
    \ charAt(int)\n  location: class Object\n/tmp/tmptv52kezz.java:62: error: constant\
    \ label of type char is not compatible with switch selector type Object\n    \
    \    case '-':\n             ^\n/tmp/tmptv52kezz.java:64: error: cannot find symbol\n\
    \                opSum.set(i, opSum.get(i - 1) - opList.get(i).charAt(0));\n \
    \                                                            ^\n  symbol:   method\
    \ charAt(int)\n  location: class Object\n/tmp/tmptv52kezz.java:67: error: constant\
    \ label of type char is not compatible with switch selector type Object\n    \
    \    case '*':\n             ^\n/tmp/tmptv52kezz.java:69: error: cannot find symbol\n\
    \                opSum.set(i, opSum.get(i - 1) * opList.get(i).charAt(0));\n \
    \                                                            ^\n  symbol:   method\
    \ charAt(int)\n  location: class Object\n/tmp/tmptv52kezz.java:72: error: constant\
    \ label of type char is not compatible with switch selector type Object\n    \
    \    case '/':\n             ^\n/tmp/tmptv52kezz.java:74: error: cannot find symbol\n\
    \                opSum.set(i, opSum.get(i - 1) / (opList.get(i).cha"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size()\
    \ != operand.size())\n            throw new IllegalArgumentException(\"Operator\
    \ array list length must be same as operand array list length. \" + op.size()\
    \ + \" != \" + operand.size());\n        long result = operand.get(0);\n     \
    \   for(int i=1; i<op.size(); i++) {\n            String op = op.get(i);\n   \
    \         long value = operand.get(i);\n            switch(op) {\n           \
    \     case \"+\":\n                    result += value;\n                    break;\n\
    \                case \"-\":\n                    result -= value;\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ value;\n                    break;\n                case \"/\":\n          \
    \          result /= value;\n                    break;\n                case\
    \ \"%\":\n                    result %= value;\n                    break;\n \
    \               case \"//\":\n                    result /= value;\n         \
    \           break;\n                case \"**\":\n                    result **=\
    \ value;\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiayj0hz8.java:54: error: illegal start of expression\n        \
    \            result **= value;\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ symbol = op.get(i);\n            Object operandObject = operand.get(i);\n  \
    \          if (symbol.equals(\"+\")) {\n                result += operandObject;\n\
    \            } else if(symbol.equals(\"-\")) {\n                result -= operandObject;\n\
    \            } else if(symbol.equals(\"*\")) {\n                result *= operandObject;\n\
    \            } else if(symbol.equals(\"/\")) {\n                result /= operandObject;\n\
    \            } else if(symbol.equals(\"//\")) {\n                result /= operandObject;\n\
    \            } else if(symbol.equals(\"**\")) {\n                result *= operandObject;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpetglb2.java:33: error: bad operand types for binary operator\
    \ '+'\n                result += operandObject;\n                       ^\n  first\
    \ type:  long\n  second type: Object\n/tmp/tmpvpetglb2.java:35: error: bad operand\
    \ types for binary operator '-'\n                result -= operandObject;\n  \
    \                     ^\n  first type:  long\n  second type: Object\n/tmp/tmpvpetglb2.java:37:\
    \ error: bad operand types for binary operator '*'\n                result *=\
    \ operandObject;\n                       ^\n  first type:  long\n  second type:\
    \ Object\n/tmp/tmpvpetglb2.java:39: error: bad operand types for binary operator\
    \ '/'\n                result /= operandObject;\n                       ^\n  first\
    \ type:  long\n  second type: Object\n/tmp/tmpvpetglb2.java:41: error: bad operand\
    \ types for binary operator '/'\n                result /= operandObject;\n  \
    \                     ^\n  first type:  long\n  second type: Object\n/tmp/tmpvpetglb2.java:43:\
    \ error: bad operand types for binary operator '*'\n                result *=\
    \ operandObject;\n                       ^\n  first type:  long\n  second type:\
    \ Object\n6 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++){\n            if (op.get(i)\
    \ == '+') {\n                result += operand.get(i);\n            }\n      \
    \      else if (op.get(i) == '-') {\n                result -= operand.get(i);\n\
    \            }\n            else if (op.get(i) == '*') {\n                result\
    \ *= operand.get(i);\n            }\n            else if (op.get(i) == '/') {\n\
    \                result /= operand.get(i);\n            }\n            else if\
    \ (op.get(i) == '**') {\n                result *= operand.get(i);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhrul35m.java:42: error: unclosed character literal\n         \
    \   else if (op.get(i) == '**') {\n                                  ^\n/tmp/tmplhrul35m.java:42:\
    \ error: unclosed character literal\n            else if (op.get(i) == '**') {\n\
    \                                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977900
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ TODO Auto-generated method stub\n        long result = 0;\n        for(int i=0;\
    \ i < operand.size(); i++){\n            for(int j=0; j < op.size(); j++){\n \
    \               if(op.get(j).equals(\"*\") && operand.get(i) > 0){\n         \
    \           result = result + operand.get(i) * operand.get(i);\n             \
    \   }else if(op.get(j).equals(\"/\") && operand.get(i) > 0){\n               \
    \     result = result + (double)operand.get(i) / (double)operand.get(i);\n   \
    \             }else if(op.get(j).equals(\"+\") && operand.get(i) > 0){\n     \
    \               result = result + operand.get(i);\n                }else if(op.get(j).equals(\"\
    -\") && operand.get(i) > 0){\n                    result = result - operand.get(i);\n\
    \                }else if(op.get(j).equals(\"//\") && operand.get(i) > 0){\n \
    \                   result = result + (double)operand.get(i) / (double)operand.get(i);\n\
    \                }else if(op.get(j).equals(\"**\") && operand.get(i) > 0){\n \
    \                   result = result + (double)operand.get(i) /  (double)operand.get(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps3lr8u4k.java:35: error: incompatible types: possible lossy conversion\
    \ from double to long\n                    result = result + (double)operand.get(i)\
    \ / (double)operand.get(i);\n                                    ^\n/tmp/tmps3lr8u4k.java:41:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = result + (double)operand.get(i) / (double)operand.get(i);\n\
    \                                    ^\n/tmp/tmps3lr8u4k.java:43: error: incompatible\
    \ types: possible lossy conversion from double to long\n                    result\
    \ = result + (double)operand.get(i) /  (double)operand.get(i);\n             \
    \                       ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ lenop = op.size();\n        int lenop1 = operand.size();\n        ArrayList<String>\
    \ oprs = new ArrayList<String>();\n        long result = 0;\n        if(lenop\
    \ != lenop1) {\n            System.out.println(\"Invalid Input: Operator array\
    \ list length does not match operand array list length.\");\n            return\
    \ 0;\n        }\n\n        for(int i = 0; i < lenop; i++) {\n            String\
    \ temp[] = op.get(i).split(\" \");\n            String temp1[] = temp[1].split(\"\
    \");\n            oprs.add(temp[0]);\n            oprs.add(temp1[0]);\n      \
    \  }\n        for(int i = 0; i < lenop1; i++) {\n            String temp[] = operand.get(i).split(\"\
    \ \");\n            String temp1[] = temp[1].split(\"\");\n            String\
    \ temp2[] = temp[0].split(\"\");\n            int op1 = Integer.parseInt(temp1[0]);\n\
    \            int op2 = Integer.parseInt(temp2[0]);\n            int op3 = Integer.parseInt(temp1[1]);\n\
    \            int op4 = Integer.parseInt(temp2[1]);\n            if(oprs.get(i).equals(op1)\
    \ && (oprs.get(i + 1).equals(op2))) {\n                result += op3;\n      \
    \      }\n            if(oprs.get(i).equals(op2) && (oprs.get(i + 1).equals(op1)))\
    \ {\n                result += op4;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuldz7b10.java:44: error: cannot find symbol\n            String\
    \ temp[] = operand.get(i).split(\" \");\n                                    \
    \      ^\n  symbol:   method split(String)\n  location: class Long\n1 error\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> algebricList = new ArrayList<>();\n \
    \       // Evaluate all algebraic expressions recursively\n        if (op.size()\
    \ != operand.size()) {\n            System.out.println(\"The length of operator\
    \ array list and the length of operand array list is not equal.\");\n        \
    \    return 0;\n        }\n        for (int i = 0; i < op.size(); i++) {\n   \
    \         String operator = op.get(i);\n            long operandValue = operand.get(i);\n\
    \            // Evaluate the operator with the operand.\n            if (algebricList.size()\
    \ > 0) {\n                algebricList.remove(0);\n            }\n           \
    \ algebricList.add(operator + \" \" + operandValue);\n        }\n        algebricList.stream().forEach(algebricList::remove);\n\
    \        for (String aList : algebricList) {\n            result = evaluateAlgebra(aList);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4spym83.java:46: error: cannot find symbol\n            result\
    \ = evaluateAlgebra(aList);\n                     ^\n  symbol:   method evaluateAlgebra(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code goes here\n        long result = 0;\n        for(long i : operand)\
    \ {\n            int j = 0;\n            for(int k = 0; k < op.size(); k++) {\n\
    \                switch(k) {\n                    case 0:\n                  \
    \      //result = operand.get(j) + operand.get(j + 1);\n                     \
    \   result = operand.get(j) + operand.get(j + 1);\n                        break;\n\
    \                    case 1:\n                        //result = operand.get(j)\
    \ - operand.get(j + 1);\n                        result = operand.get(j) - operand.get(j\
    \ + 1);\n                        break;\n                    case 2:\n       \
    \                 //result = operand.get(j) * operand.get(j + 1);\n          \
    \              result = operand.get(j) * operand.get(j + 1);\n               \
    \         break;\n                    case 3:\n                        //result\
    \ = operand.get(j) / operand.get(j + 1);\n                        result = operand.get(j)\
    \ / operand.get(j + 1);\n                        break;\n                    case\
    \ 4:\n                        //result = operand.get(j) % operand.get(j + 1);\n\
    \                        result = operand.get(j) % operand.get(j + 1);\n     \
    \                   break;\n                    case 5:\n                    \
    \    //result = operand.get(j) ** operand.get(j + 1);\n                      \
    \  result = operand.get(j) ** operand.get(j + 1);\n                        break;\n\
    \                    default:\n                        break;\n              \
    \  }\n                j++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ezuwz1w.java:56: error: illegal start of expression\n        \
    \                result = operand.get(j) ** operand.get(j + 1);\n            \
    \                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        long lastResult = 0;\n        // for each operator in the\
    \ operator array list\n        for (String opName : op) {\n            // for\
    \ each operand in the operand array list\n            for (long opVal : operand)\
    \ {\n                // if opName is the same as the last operator in the result\
    \ array\n                if (opName.equals(op.get(result.size() - 1))) {\n   \
    \                 // add the operand to the result of the last operator\n    \
    \                result += opVal;\n                } else {\n                \
    \    // otherwise, add the operand to the result of the last result and initialize\
    \ \n                    // the result of this operator to zero\n             \
    \       lastResult = result;\n                    result = 0;\n              \
    \  }\n            }\n        }\n        return lastResult;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihdfjn54.java:35: error: long cannot be dereferenced\n        \
    \        if (opName.equals(op.get(result.size() - 1))) {\n                   \
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        Operator op2 = new Operator();\n        switch (op.size())\
    \ {\n            case 0:\n                return 0;\n            case 1:\n   \
    \             return op.get(0).equals(\"+\") ? operand.get(0) + doAlgebra(op.get(1),\
    \ operand.subList(1, operand.size() - 1)) : 0;\n            case 2:\n        \
    \        return op.get(0).equals(\"+\") ? operand.get(0) + op2.getName(op.get(1),\
    \ operand.get(0)) : 0;\n            case 3:\n                return op.get(0).equals(\"\
    +\") ? operand.get(0) + doAlgebra(op.get(1), operand.subList(1, operand.size()\
    \ - 1)) * doAlgebra(op.get(2), operand.subList(2, operand.size() - 1)) : 0;\n\
    \            case 4:\n                return op.get(0).equals(\"+\") ? operand.get(0)\
    \ + doAlgebra(op.get(1), operand.subList(1, operand.size() - 1)) * doAlgebra(op.get(2),\
    \ operand.subList(2, operand.size() - 1)) * doAlgebra(op.get(3), operand.subList(3,\
    \ operand.size() - 1)) : 0;\n            case 5:\n                return op.get(0).equals(\"\
    +\") ? operand.get(0) + doAlgebra(op.get(1), operand.subList(1, operand.size()\
    \ - 1)) * doAlgebra(op.get(2), operand.subList(2, operand.size() - 1)) * doAlgebra(op.get(3),\
    \ operand.subList(3, operand.size() - 1)) * doAlgebra(op.get(4), operand.subList(4,\
    \ operand.size() - 1)) : 0;\n            case 6:\n                return op.get(0).equals(\"\
    +\") ? operand.get(0) + doAlgebra(op.get(1), operand.subList(1, operand.size()\
    \ - 1)) * doAlgebra(op.get(2), operand.subList(2, operand.size() - 1)) * doAlgebra(op.get(3),\
    \ operand.subList(3, operand.size() - 1)) * doAlgebra(op.get(4), operand.subList(4,\
    \ operand.size() - 1)) * doAlgebra(op.get(5), operand.subList(5, operand.size()\
    \ - 1)) : 0;\n            case 7:\n                return op.get(0).equals(\"\
    +\") ? operand.get(0) + doAlgebra(op.get(1), operand.subList(1, operand.size()\
    \ - 1)) * doAlgebra(op.get(2), operand.subList(2, operand.size() - 1)) * doAlgebra(op.get(3),\
    \ operand.subList(3, operand.size() - 1)) * doAlgebra(op.get(4), operand.subList(4,\
    \ operand.size() - 1)) * doAlgebra(op.get(5), operand.subList(5, operand.size()\
    \ - 1)) * doAlgebra(op.get(6), operand.subList(6, operand.size() - 1)) : 0;\n\
    \            case 8:\n                return op.get(0).equals(\"+\") ? operand.get(0)\
    \ + doAlgebra(op.get(1), operand.subList(1, operand\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0eihoyle.java:48: error: ')' expected\n                return op.get(0).equals(\"\
    +\") ? operand.get(0) + doAlgebra(op.get(1), operand.subList(1, operand\n    \
    \                                                                            \
    \                               ^\n/tmp/tmp0eihoyle.java:49: error: illegal start\
    \ of expression\n    }\n    ^\n/tmp/tmp0eihoyle.java:50: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Initialize result variable\n        long result = -1;\n\n        // If the two\
    \ array lists are empty return 0\n        if (op.size() == 0 || operand.size()\
    \ == 0) return result;\n\n        // Initialize and array of expression operators\n\
    \        ArrayList<String> expressionOperator = new ArrayList<>(Arrays.asList(\"\
    ^\", \"*\", \"/\")); // Initialize expression operator\n        // Initialize\
    \ expression stack\n        Stack<String> expressionStack = new Stack<>();\n\n\
    \        // If the operator array list has one element push it to the expression\
    \ stack\n        if (op.size() == 1) {\n            expressionStack.push(op.get(0));\n\
    \        }\n\n        // While the stack isn't empty\n        while (!expressionStack.isEmpty())\
    \ {\n            // Pop top element of the stack\n            String operator\
    \ = expressionStack.pop();\n\n            // If the stack isn't empty and the\
    \ current operator is in the expression operator\n            if (!expressionStack.isEmpty()\
    \ && expressionOperator.contains(operator)) {\n                // If the current\
    \ operator is the same as the operator at the top of the stack\n             \
    \   if (operator == expressionStack.peek()) {\n                    // If the expression\
    \ stack is empty return 0\n                    if (expressionStack.isEmpty())\
    \ return result;\n\n                    // If the expression stack is not empty\
    \ and the stack top is not the same as the operator in the \n                \
    \    // expression stack\n                } else if (!expressionStack.isEmpty()\
    \ && expressionStack.peek() != operator) {\n                    expressionOperator.add(operator);\n\
    \                    expressionStack.push(operator);\n                } else {\n\
    \                    // If the expression stack is not empty and the stack top\
    \ is not the same as the operator in the \n                    // expression stack\n\
    \                    expressionOperator.add(operator);\n                    expressionStack.push(operator);\n\
    \                }\n\n                // If the current operator in the expression\
    \ operator array list is not the same as the operator at the top \n          \
    \      // of the stack then push the operator to the expression stack\n      \
    \      } else {\n                expressionOperator.add(operator);\n         \
    \       expressionStack.push(operator);\n            }\n        }\n\n        //\
    \ If the stack isn't empty then pop it from the expression stack\n        if (expressionStack.isEmpty())\
    \ return result;\n        else expressionStack.pop();\n\n        // Iterate through\
    \ each operand in the operand array list\n        for (long i : operand) {\n \
    \           // If the operand is not an int then skip to the next operand\n  \
    \          if (i != (int)i) continue;\n\n            // If the stack isn't empty\
    \ and the operator in the expression stack is the same as the operator in \n \
    \           // the expression stack then evaluate the current operand and store\
    \ the result in result\n            if (!expressionStack.isEmpty() && expressionStack.peek()\
    \ == operator) {\n                result = result + (expressionStack.peek() *\
    \ i);\n            }\n\n            // If the stack isn't empty and the operator\
    \ in the expression stack is not the same as the operator in \n            //\
    \ the expression stack then push the operator to the expression stack\n      \
    \      else if (expressionStack.isEmpty()) {\n                expressionStack.push(operator);\n\
    \            }\n\n            // If the stack isn't empty and the operator in\
    \ the expression stack\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzgx1_rx.java:99: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Initialize operands\n        long result = 0;\n        if (operand.size() ==\
    \ 1) {\n            result = operand.get(0);\n        } else if (operand.size()\
    \ == 2) {\n            result = operand.get(0) + operand.get(1);\n        } else\
    \ if (operand.size() == 3) {\n            result = operand.get(0) + operand.get(1)\
    \ + operand.get(2);\n        } else if (operand.size() == 4) {\n            result\
    \ = operand.get(0) + operand.get(1) + operand.get(2) + operand.get(3);\n     \
    \   }\n        // Initialize operators\n        switch (op.get(0).charAt(0)) {\n\
    \            case '+':\n                result += operand.get(0);\n          \
    \      break;\n            case '-':\n                result -= operand.get(0);\n\
    \                break;\n            case '*':\n                result *= operand.get(0);\n\
    \                break;\n            case '/':\n                result /= operand.get(0);\n\
    \                break;\n            case '^':\n                result *= operand.get(1);\n\
    \                result /= operand.get(2);\n                break;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3lzigv4.java:61)\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1L;\n        if (operand.size() < 1 || op.size() < 2) {\n         \
    \   throw new IllegalArgumentException(\"Invalid inputs\");\n        }\n     \
    \   ArrayList<String> opName = new ArrayList<String>(op.size());\n        ArrayList<String>\
    \ operandName = new ArrayList<String>(operand.size());\n        for (String s\
    \ : op) {\n            opName.add(s.charAt(0) == '+' ? \"add\" : \"sub\");\n \
    \       }\n        for (Long l : operand) {\n            operandName.add(l.toString());\n\
    \        }\n        for (String s : op) {\n            for (Long l : operand)\
    \ {\n                String opType = s.charAt(0) == '+' ? \"add\" : \"sub\";\n\
    \                String operand = l.toString();\n                try {\n     \
    \               Method method = Class.forName(\"java.util.ArrayList\").asSubclass(Object.class).getMethod(opType,\
    \ operand.getClass());\n                    result = (Long) method.invoke(op,\
    \ l);\n                } catch (NoSuchMethodException | SecurityException | IllegalAccessException\
    \ | IllegalArgumentException | InvocationTargetException e) {\n              \
    \      e.printStackTrace();\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3o1zh2i.java:43: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n                String\
    \ operand = l.toString();\n                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Evaluate the expression and return the result of the evaluation as the return\
    \ value.\n        // To evaluate the expression use StringTemplate. \n       \
    \ // To build the expression use StringTemplate and use the method parseExpression.\n\
    \        StringTemplate t = new StringTemplate();\n        String exp = t.parseExpression(op.get(0),\
    \ operand.get(0));\n        for (int i = 1; i < op.size(); i++) {\n          \
    \  String nextExp = t.parseExpression(op.get(i), operand.get(i));\n          \
    \  exp = exp.concat(nextExp);\n        }\n        try {\n            long result\
    \ = Long.parseLong(exp);\n            return result;\n        } catch (NumberFormatException\
    \ e) {\n            System.out.println(\"Invalid arithmetic expression!\");\n\
    \            System.exit(0);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqeozfg9b.java:31: error: cannot find symbol\n        StringTemplate\
    \ t = new StringTemplate();\n        ^\n  symbol:   class StringTemplate\n  location:\
    \ class Problem\n/tmp/tmpqeozfg9b.java:31: error: cannot find symbol\n       \
    \ StringTemplate t = new StringTemplate();\n                               ^\n\
    \  symbol:   class StringTemplate\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ n = op.size();\n        long[] values = new long[n];\n\n        // First get\
    \ the operators.\n        for(int i = 0; i <= n-1; i++) {\n            String\
    \ opString = op.get(i);\n            String operandString = operand.get(i);\n\
    \            int start = operandString.indexOf(opString);\n            int end\
    \ = start + opString.length();\n            values[i - 1] = operand.subList(start,\
    \ end).stream().mapToLong(Long::parseLong).toArray();\n        }\n\n        //\
    \ Then evaluate the operators.\n        long result = 0;\n        for(int i =\
    \ 0; i <= n-1; i++) {\n            long value = 0;\n            for(int j = 0;\
    \ j <= n-1; j++) {\n                if(j == i) {\n                    value =\
    \ 0;\n                }\n                else if(i < j) {\n                  \
    \  value = values[j][i];\n                } else {\n                    value\
    \ = values[j][i - 1];\n                }\n                result += value * values[i\
    \ - 1];\n            }\n        }\n\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8u3nlhs.java:34: error: incompatible types: Long cannot be converted\
    \ to String\n            String operandString = operand.get(i);\n            \
    \                                  ^\n/tmp/tmpp8u3nlhs.java:37: error: incompatible\
    \ types: invalid method reference\n            values[i - 1] = operand.subList(start,\
    \ end).stream().mapToLong(Long::parseLong).toArray();\n                      \
    \                                                     ^\n    incompatible types:\
    \ Long cannot be converted to String\n/tmp/tmpp8u3nlhs.java:49: error: array required,\
    \ but long found\n                    value = values[j][i];\n                \
    \                     ^\n/tmp/tmpp8u3nlhs.java:51: error: array required, but\
    \ long found\n                    value = values[j][i - 1];\n                \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList operList = new ArrayList(op.size() - 1);\n  \
    \      for (int i = 0; i < op.size() - 1; i++) {\n            operList.add(op.get(i));\n\
    \        }\n        for (long i : operand) {\n            result += (operList.get(operList.size()\
    \ - 1) * i);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoelu2fk3.java:34: error: bad operand types for binary operator\
    \ '*'\n            result += (operList.get(operList.size() - 1) * i);\n      \
    \                                                   ^\n  first type:  Object\n\
    \  second type: long\nNote: /tmp/tmpoelu2fk3.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        boolean\
    \ error = false;\n        // Check length of array lists are same\n        if(op.size()\
    \ != operand.size() - 1) {\n            error = true;\n        } else {\n    \
    \        ArrayList<String> oplist = op;\n            ArrayList<Long> operlist\
    \ = operand;\n            // Check all operators are in correct order\n      \
    \      for(int i=0; i<oplist.size(); i++) {\n                if(i>=operlist.size()\
    \ || operlist.get(i).compareTo(oplist.get(i)) != 0) {\n                    error\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        // If error is false, then build expression\n        if(error\
    \ == false) {\n            ArrayList<String> oplist = op;\n            ArrayList<Long>\
    \ operlist = operand;\n            // Build expression\n            String expression\
    \ = \"\";\n            for(int i=0; i<oplist.size(); i++) {\n                switch(oplist.get(i))\
    \ {\n                    case '+':\n                        expression = expression\
    \ + operlist.get(i) + \" + \";\n                        break;\n             \
    \       case '-':\n                        expression = expression + operlist.get(i)\
    \ + \"- \";\n                        break;\n                    case '*':\n \
    \                       expression = expression + operlist.get(i) + \"* \";\n\
    \                        break;\n                    case '//':\n            \
    \            expression = expression + operlist.get(i) + \"// \";\n          \
    \              break;\n                    case '**':\n                      \
    \  expression = expression + operlist.get(i) + \"** \";\n                    \
    \    break;\n                }\n            }\n            // Evaluate the expression\n\
    \            try {\n                long result = Long.parseLong(expression);\n\
    \                return result;\n            } catch(NumberFormatException e)\
    \ {\n                return -1;\n            }\n        } else {\n           \
    \ return -1;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspcejaqw.java:60: error: unclosed character literal\n         \
    \           case '//':\n                         ^\n/tmp/tmpspcejaqw.java:60:\
    \ error: unclosed character literal\n                    case '//':\n        \
    \                    ^\n/tmp/tmpspcejaqw.java:61: error: illegal start of expression\n\
    \                        expression = expression + operlist.get(i) + \"// \";\n\
    \                                   ^\n/tmp/tmpspcejaqw.java:61: error: : or ->\
    \ expected\n                        expression = expression + operlist.get(i)\
    \ + \"// \";\n                                                               \
    \          ^\n/tmp/tmpspcejaqw.java:63: error: unclosed character literal\n  \
    \                  case '**':\n                         ^\n/tmp/tmpspcejaqw.java:63:\
    \ error: unclosed character literal\n                    case '**':\n        \
    \                    ^\n/tmp/tmpspcejaqw.java:64: error: illegal start of expression\n\
    \                        expression = expression + operlist.get(i) + \"** \";\n\
    \                                   ^\n/tmp/tmpspcejaqw.java:64: error: : or ->\
    \ expected\n                        expression = expression + operlist.get(i)\
    \ + \"** \";\n                                                               \
    \          ^\n8 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(long num: operand) {\n            result = num + op.get(0)\
    \ * result + op.get(1)* result;\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4p74ehp.java:30: error: bad operand types for binary operator\
    \ '*'\n            result = num + op.get(0) * result + op.get(1)* result;\n  \
    \                                   ^\n  first type:  String\n  second type: long\n\
    /tmp/tmpx4p74ehp.java:30: error: bad operand types for binary operator '*'\n \
    \           result = num + op.get(0) * result + op.get(1)* result;\n         \
    \                                                ^\n  first type:  String\n  second\
    \ type: long\n2 errors\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ sum = 0;\n        int operatorLength = op.size();\n        if (operatorLength\
    \ < 1 || operand.size() < 2) {\n            System.out.println(\"Invalid Arguments\"\
    );\n            return -1;\n        }\n        int operandLength = operand.size();\n\
    \        // The array list operator contains at least one operator and operand\
    \ array list has at least two operands.\n        switch (operatorLength) {\n \
    \       case 1:\n            switch (operandLength) {\n            case 1:\n \
    \               if (operand.get(0) == null || operand.get(0) == 0) {\n       \
    \             return 0;\n                } else {\n                    sum = operand.get(0)\
    \ * operand.get(0);\n                    return sum;\n                }\n    \
    \        case 2:\n                if (operand.get(0) == null || operand.get(0)\
    \ == 0) {\n                    return 0;\n                } else {\n         \
    \           sum = operand.get(0) * operand.get(1) + operand.get(1) * operand.get(0);\n\
    \                    return sum;\n                }\n            case 3:\n   \
    \             if (operand.get(0) == null || operand.get(0) == 0) {\n         \
    \           return 0;\n                } else {\n                    sum = operand.get(0)\
    \ * operand.get(1) + operand.get(1) * operand.get(2) + operand.get(2) * operand.get(0);\n\
    \                    return sum;\n                }\n            case 4:\n   \
    \             if (operand.get(0) == null || operand.get(0) == 0) {\n         \
    \           return 0;\n                } else {\n                    sum = operand.get(0)\
    \ * operand.get(1) + operand.get(1) * operand.get(2) + operand.get(2) * operand.get(3)\
    \ + operand.get(3) * operand.get(0) + operand.get(0) * operand.get(1) * operand.get(2)\
    \ * operand.get(3);\n                    return sum;\n                }\n    \
    \        case 5:\n                if (operand.get(0) == null || operand.get(0)\
    \ == 0) {\n                    return 0;\n                } else {\n         \
    \           sum = operand.get(0) * operand.get(1) + operand.get(1) * operand.get(2)\
    \ + operand.get(2) * operand.get(3) + operand.get(3) * operand.get(4) + operand.get(4)\
    \ * operand.get(0) + operand.get(0) * operand.get(1) * operand.get(2) * operand.get(3)\
    \ * operand.get(4);\n                    return sum;\n                }\n    \
    \        case 6:\n                if (operand.get(0) == null || operand.get(0)\
    \ == 0) {\n                    return 0;\n                } else {\n         \
    \           sum = operand.get(0) * operand.get(1) + operand.get(1) * operand.get(2)\
    \ + operand.get(2) * operand.get(3) + operand.get(3) * operand.get(4) + operand.get(4)\
    \ * operand.get(5) + operand.get(5) * operand.get(0) + operand.get(0) * operand.get(1)\
    \ * operand.get(2) * operand.get(3) * operand.get(4) * operand.get(5);\n     \
    \               return sum;\n                }\n            case 7:\n        \
    \        if (operand.get(0) == null || operand.get(0) == 0) {\n              \
    \      return 0;\n                } else {\n                    sum = operand.get(0)\
    \ * operand.get(1) + operand.get(1) * operand.get(2) + operand.get(2) * operand.get(3)\
    \ + operand.get(3) * operand.get(4) + operand.get(4) * operand.get(5) + operand.get(5)\
    \ * operand.get(6) + operand.get(6) * operand.get(0) + operand.get(\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8im_ifd.java:86: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpc8im_ifd.java:87: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpc8im_ifd.java:87: error: case,\
    \ default, or '}' expected\n    public static void main(String[] args) {\n   \
    \        ^\n/tmp/tmpc8im_ifd.java:87: error: case, default, or '}' expected\n\
    \    public static void main(String[] args) {\n                  ^\n/tmp/tmpc8im_ifd.java:87:\
    \ error: case, default, or '}' expected\n    public static void main(String[]\
    \ args) {\n                       ^\n/tmp/tmpc8im_ifd.java:87: error: case, default,\
    \ or '}' expected\n    public static void main(String[] args) {\n            \
    \               ^\n/tmp/tmpc8im_ifd.java:87: error: case, default, or '}' expected\n\
    \    public static void main(String[] args) {\n                            ^\n\
    /tmp/tmpc8im_ifd.java:87: error: case, default, or '}' expected\n    public static\
    \ void main(String[] args) {\n                                  ^\n/tmp/tmpc8im_ifd.java:87:\
    \ error: case, default, or '}' expected\n    public static void main(String[]\
    \ args) {\n                                   ^\n/tmp/tmpc8im_ifd.java:87: error:\
    \ case, default, or '}' expected\n    public static void main(String[] args) {\n\
    \                                     ^\n/tmp/tmpc8im_ifd.java:87: error: case,\
    \ default, or '}' expected\n    public static void main(String[] args) {\n   \
    \                                      ^\n/tmp/tmpc8im_ifd.java:87: error: case,\
    \ default, or '}' expected\n    public static void main(String[] args) {\n   \
    \                                        ^\n/tmp/tmpc8im_ifd.java:88: error: case,\
    \ default, or '}' expected\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    ^\n/tmp/tmpc8im_ifd.java:88:\
    \ error: case, default, or '}' expected\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asL"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Add some code here\n        ArrayList<String> operators = Arrays.asList(op.toArray(new\
    \ String[op.size()]));\n        ArrayList<String> operands = Arrays.asList(operand.toArray(new\
    \ String[operand.size()]));\n\n        long res = 0;\n\n        for(String operator\
    \ : operators) {\n            switch(operator) {\n                case \"+\":\n\
    \                    res = res + operands.get(operands.size() - 1);\n        \
    \            operands.remove(operands.size() - 1);\n                    break;\n\
    \                case \"-\":\n                    res = res - operands.get(operands.size()\
    \ - 1);\n                    operands.remove(operands.size() - 1);\n         \
    \           break;\n                case \"*\":\n                    res = res\
    \ * operands.get(operands.size() - 1);\n                    operands.remove(operands.size()\
    \ - 1);\n                    break;\n                case \"//\":\n          \
    \          res = res / operands.get(operands.size() - 1);\n                  \
    \  operands.remove(operands.size() - 1);\n                    break;\n       \
    \         case \"**\":\n                    res = Math.pow(res, operands.get(operands.size()\
    \ - 1));\n                    operands.remove(operands.size() - 1);\n        \
    \            break;\n                default:\n                    break;\n  \
    \          }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1fl0ahm.java:29: error: incompatible types: no instance(s) of\
    \ type variable(s) T#1,T#2 exist so that List<T#1> conforms to ArrayList<String>\n\
    \        ArrayList<String> operators = Arrays.asList(op.toArray(new String[op.size()]));\n\
    \                                                   ^\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>asList(T#1...)\n    T#2 extends\
    \ Object declared in method <T#2>toArray(T#2[])\n/tmp/tmpa1fl0ahm.java:30: error:\
    \ incompatible types: no instance(s) of type variable(s) T#1,T#2 exist so that\
    \ List<T#1> conforms to ArrayList<String>\n        ArrayList<String> operands\
    \ = Arrays.asList(operand.toArray(new String[operand.size()]));\n            \
    \                                      ^\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>asList(T#1...)\n    T#2 extends\
    \ Object declared in method <T#2>toArray(T#2[])\n/tmp/tmpa1fl0ahm.java:37: error:\
    \ incompatible types: String cannot be converted to long\n                   \
    \ res = res + operands.get(operands.size() - 1);\n                           \
    \   ^\n/tmp/tmpa1fl0ahm.java:41: error: bad operand types for binary operator\
    \ '-'\n                    res = res - operands.get(operands.size() - 1);\n  \
    \                            ^\n  first type:  long\n  second type: String\n/tmp/tmpa1fl0ahm.java:45:\
    \ error: bad operand types for binary operator '*'\n                    res =\
    \ res * operands.get(operands.size() - 1);\n                              ^\n\
    \  first type:  long\n  second type: String\n/tmp/tmpa1fl0ahm.java:49: error:\
    \ bad operand types for binary operator '/'\n                    res = res / operands.get(operands.size()\
    \ - 1);\n                              ^\n  first type:  long\n  second type:\
    \ String\n/tmp/tmpa1fl0ahm.java:53: error: incompatible types: String cannot be\
    \ converted to double\n                    res = Math.pow(res, operands.get(operands.size()\
    \ - 1));\n                                                    ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get ful"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ op_size = op.size();\n        int max_op_size = op_size-1;\n        int size\
    \ = operand.size();\n        int max_size = size-1;\n        long result = 0;\n\
    \        for (int i = 0; i < max_size; i++) {\n            long n1 = operand.get(i);\n\
    \            long n2 = operand.get(i+1);\n            if (op.get(i).equals(\"\
    +\"))\n                result = result + n1 + n2;\n            else if (op.get(i).equals(\"\
    *\")) {\n                long product = n1*n2;\n                result = Math.max(result,\
    \ product);\n            }\n            else if (op.get(i).equals(\"-\"))\n  \
    \              result = result - n1 - n2;\n            else if (op.get(i).equals(\"\
    //\")) {\n                double quotient = n1/n2;\n                result = Math.max(result,\
    \ quotient);\n            }\n            else if (op.get(i).equals(\"**\")) {\n\
    \                long n3 = Math.pow(n1, n2);\n                result = Math.max(result,\
    \ n3);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tg18oyb.java:46: error: incompatible types: possible lossy conversion\
    \ from double to long\n                result = Math.max(result, quotient);\n\
    \                                 ^\n/tmp/tmp0tg18oyb.java:49: error: incompatible\
    \ types: possible lossy conversion from double to long\n                long n3\
    \ = Math.pow(n1, n2);\n                                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String operator : op) {\n            switch (operator)\
    \ {\n                case '+':\n                    result = result + operand.get(0);\n\
    \                    break;\n                case '-':\n                    result\
    \ = result - operand.get(0);\n                    break;\n                case\
    \ '*':\n                    result = result * operand.get(0);\n              \
    \      break;\n                case '/':\n                    result = result\
    \ / operand.get(0);\n                    break;\n                case '%':\n \
    \                   result = result % operand.get(0);\n                    break;\n\
    \                case '**':\n                    result = result ** operand.get(0);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1rrrlpp.java:46: error: unclosed character literal\n         \
    \       case '**':\n                     ^\n/tmp/tmpe1rrrlpp.java:46: error: unclosed\
    \ character literal\n                case '**':\n                        ^\n/tmp/tmpe1rrrlpp.java:47:\
    \ error: illegal start of expression\n                    result = result ** operand.get(0);\n\
    \                           ^\n/tmp/tmpe1rrrlpp.java:47: error: illegal start\
    \ of expression\n                    result = result ** operand.get(0);\n    \
    \                                 ^\n/tmp/tmpe1rrrlpp.java:47: error: : or ->\
    \ expected\n                    result = result ** operand.get(0);\n         \
    \                                            ^\n5 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        boolean\
    \ isAdd = false;\n        boolean isSub = false;\n        boolean isMul = false;\n\
    \        boolean isDiv = false;\n        boolean isExp = false;\n        long\
    \ result = 0;\n        int size = op.size();\n        // Calculate the total size\
    \ of the operand list and the operator list to determine whether the \n      \
    \  // operand or operator list is too long.\n        // If the operand list is\
    \ too long, then the remaining operations will not work.\n        // If the operator\
    \ list is too long, then the remaining operations will not work.\n        // Note:\
    \ If the operator list has more operations than operand list, the remaining operations\
    \ \n        // will still work.\n        if (size < 2) {\n            return 0;\n\
    \        }\n        int operandSize = operand.size();\n        int operatorSize\
    \ = op.size() - 1;\n        // Calculate the number of possible operations.\n\
    \        // If the operator list has more operations than operand list, the remaining\
    \ operations will \n        // still work.\n        int opCount = size * operandSize;\n\
    \        // Loop through the operation list to determine whether the operator\
    \ list is too long.\n        // If the operator list is too long, then the remaining\
    \ operations will not work.\n        for (int i = 0; i < opCount; i++) {\n   \
    \         // Calculate the total possible operations.\n            int opCountNew\
    \ = i * operandSize + size;\n            if (opCountNew > opCount) {\n       \
    \         return 0;\n            }\n            // Loop through the operand list\
    \ to determine whether the operator list is too long.\n            // If the operator\
    \ list is too long, then the remaining operations will not work.\n           \
    \ int operandCountNew = i;\n            for (int j = 0; j < operandSize; j++)\
    \ {\n                if (operandCountNew > operandCount) {\n                 \
    \   return 0;\n                }\n                switch (op.get(j)) {\n     \
    \               case '*':\n                        isMul = true;\n           \
    \             break;\n                    case '/':\n                        isDiv\
    \ = true;\n                        break;\n                    case '+':\n   \
    \                     isAdd = true;\n                        break;\n        \
    \            case '-':\n                        isSub = true;\n              \
    \          break;\n                    case '^':\n                        isExp\
    \ = true;\n                        break;\n                    default:\n    \
    \                    break;\n                }\n                operandCountNew++;\n\
    \            }\n        }\n        // If the operator list is too long, then the\
    \ remaining operations will not work.\n        if (opCount > opCountNew) {\n \
    \           return 0;\n        }\n        // If the operand list is too long,\
    \ then the remaining operations will not work.\n        if (operandCount > operandCountNew)\
    \ {\n            return 0;\n        }\n        // Add the operators.\n       \
    \ if (isAdd) {\n            result = operand.get(operandCountNew) + operand.get(operandCountNew\
    \ + operandSize);\n        } else if (isSub) {\n            result = operand.get(operandCountNew)\
    \ - operand.get(operandCountNew + operandSize);\n        } else if (isMul) {\n\
    \            result = operand.get(operandCountNew) * operand.get(operandCountNew\
    \ + operandSize);\n        } else if (isDiv) {\n            result = operand.get(operand\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr3ydbhne.java:103: error: ')' expected\n            result = operand.get(operand\n\
    \                                        ^\n/tmp/tmpr3ydbhne.java:105: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        if (operand.size() > op.size()) {\n            throw new\
    \ IllegalArgumentException(\"operand list length is shorter than operator list\
    \ length\");\n        }\n        for (String op1: op) {\n            if (op1.equals(\"\
    +\")) {\n                result = result + operand.get(operand.size() - 1);\n\
    \            } else if (op1.equals(\"*\")) {\n                result = result\
    \ * operand.get(operand.size() - 1);\n            } else if (op1.equals(\"-\"\
    )) {\n                result = result - operand.get(operand.size() - 1);\n   \
    \         } else if (op1.equals(\"//\")) {\n                result = result /\
    \ operand.get(operand.size() - 1);\n            } else if (op1.equals(\"**\"))\
    \ {\n                result = result ** operand.get(operand.size() - 1);\n   \
    \         } else {\n                throw new IllegalArgumentException(\"unknown\
    \ operator \" + op1);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfyr5ssr.java:42: error: illegal start of expression\n        \
    \        result = result ** operand.get(operand.size() - 1);\n               \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ n = 0;\n        int opLength = op.size();\n        ArrayList<Long> temp = Arrays.asList(operand).subList(1,operand.size());\n\
    \        \n        // convert all operators to binary string\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i=0; i< opLength; i++) {\n      \
    \      if(op.contains(i)) {\n                sb.append((n&1==1)?\"1\":\"0\");\n\
    \                n = n>>1;\n            }\n        }\n        \n        boolean\
    \ sign = false;\n        \n        long result = 0;\n        \n        for (int\
    \ i = 0; i < opLength; i++) {\n            String opString = sb.toString();\n\
    \            long tempVal = Long.parseLong(opString.substring(0, opString.length()\
    \ - 1));\n            if(opString.endsWith(\"1\") && operand.get(i)>=0) {\n  \
    \              sign = true;\n            } else {\n                sign = false;\n\
    \            }\n            \n            result += sign*tempVal;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6kgamzu.java:30: error: incompatible types: List<ArrayList<Long>>\
    \ cannot be converted to ArrayList<Long>\n        ArrayList<Long> temp = Arrays.asList(operand).subList(1,operand.size());\n\
    \                                                             ^\n/tmp/tmpg6kgamzu.java:36:\
    \ error: bad operand types for binary operator '&'\n                sb.append((n&1==1)?\"\
    1\":\"0\");\n                            ^\n  first type:  int\n  second type:\
    \ boolean\n/tmp/tmpg6kgamzu.java:54: error: bad operand types for binary operator\
    \ '*'\n            result += sign*tempVal;\n                          ^\n  first\
    \ type:  boolean\n  second type: long\n3 errors\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long\
    \ result = 0l;\n        if (op.size() == 1 && operand.size() > 1) {\n        \
    \    String operator = op.get(0);\n            Long first = operand.get(0);\n\
    \            Long second = operand.get(1);\n            if (operator.equals(\"\
    +\")) {\n                result = first + second;\n            } else if (operator.equals(\"\
    *\")) {\n                result = first * second;\n            } else if (operator.equals(\"\
    -\")) {\n                result = first - second;\n            } else if (operator.equals(\"\
    //\")) {\n                result = first / second;\n            } else if (operator.equals(\"\
    **\")) {\n                result = first * second;\n            }\n        } else\
    \ if (op.size() == 2 && operand.size() > 1) {\n            String operator = op.get(0);\n\
    \            Long first = operand.get(0);\n            Long second = operand.get(1);\n\
    \            if (operator.equals(\"+\")) {\n                result = first + second;\n\
    \            } else if (operator.equals(\"*\")) {\n                result = first\
    \ * second;\n            } else if (operator.equals(\"-\")) {\n              \
    \  result = first - second;\n            } else if (operator.equals(\"//\")) {\n\
    \                result = first / second;\n            } else if (operator.equals(\"\
    **\")) {\n                result = first * second;\n            }\n        } else\
    \ if (op.size() > 1 && operand.size() == 1) {\n            String operator = op.get(0);\n\
    \            Long first = operand.get(0);\n            if (operator.equals(\"\
    +\")) {\n                result = first + first;\n            } else if (operator.equals(\"\
    *\")) {\n                result = first * first;\n            } else if (operator.equals(\"\
    -\")) {\n                result = first - first;\n            } else if (operator.equals(\"\
    //\")) {\n                result = first / first;\n            } else if (operator.equals(\"\
    **\")) {\n                result = first * first;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqddqf4f.java:77)\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Get the length of the operator array\n        int size = op.size();\n      \
    \  // Check that the operator array list has at least one operator and that the\
    \ operand array list has at least two operands\n        if (size < 1 || size >\
    \ 1) {\n            throw new RuntimeException(\"Invalid number of operands or\
    \ operators\");\n        }\n        // For each operator in the operator array\
    \ list\n        for (int i = 0; i < size; i++) {\n            // Get the operator\
    \ from the operator array list\n            String currentOperator = op.get(i);\n\
    \            // If the operator is one of the basic algebric operations (+, -,\
    \ *, /, //, ^)\n            if (currentOperator.equals(\"+\") || currentOperator.equals(\"\
    -\") || currentOperator.equals(\"*\") || currentOperator.equals(\"//\") || currentOperator.equals(\"\
    ^\")) {\n                // For each operand in the operand array list\n     \
    \           for (int j = 0; j < operand.size() - 1; j++) {\n                 \
    \   // Get the operand from the operand array list\n                    long currentOperand\
    \ = operand.get(j);\n                    // If the operator is one of the basic\
    \ algebric operations (+, -, *, /, //, ^)\n                    if (currentOperator.equals(\"\
    +\")) {\n                        // Return the addition of the operands\n    \
    \                    return currentOperand + currentOperand;\n               \
    \     }\n                    if (currentOperator.equals(\"-\")) {\n          \
    \              // Return the subtraction of the operands\n                   \
    \     return currentOperand - currentOperand;\n                    }\n       \
    \             if (currentOperator.equals(\"*\")) {\n                        //\
    \ Return the multiplication of the operands\n                        return currentOperand\
    \ * currentOperand;\n                    }\n                    if (currentOperator.equals(\"\
    //\")) {\n                        // Return the floor division of the operands\n\
    \                        return currentOperand / currentOperand;\n           \
    \         }\n                    if (currentOperator.equals(\"^\")) {\n      \
    \                  // Return the exponentiation of the operands\n            \
    \            return Math.pow(currentOperand, currentOperand);\n              \
    \      }\n                }\n            }\n        }\n        // If the operator\
    \ is not one of the basic algebric operations (+, -, *, /, //, ^)\n        throw\
    \ new RuntimeException(\"Invalid operator\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmx5h4yk.java:63: error: incompatible types: possible lossy conversion\
    \ from double to long\n                        return Math.pow(currentOperand,\
    \ currentOperand);\n                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \  List<String> operator = new ArrayList<String>();\n        long result = 0;\n\
    \        // We use two for loops to go through the list of operators and operands\
    \ respectively:\n        // * Operators are in ascending order \n        // *\
    \ Each operand is listed immediately before the next operator.\n        for(int\
    \ i = 0; i < op.size()-1; i++) {\n            // The variable j is a counter which\
    \ is used to determine which operand is next:\n            // * If j == 0 (first\
    \ operand) then we set it to the next operand's value:\n            int j = i;\n\
    \            // Since we have an ascending order we know that j+1 will always\
    \ be an operator:\n            while(j+1 < op.size()) {\n                // In\
    \ our list of operators, we start at j+1 and stop when it gets to one before the\
    \ end of the\n                // list:\n                String s = op.get(j+1);\n\
    \                // If this operator is equal to the next operator, then we know\
    \ that we are dealing with an \n                // arithmetic expression, so we\
    \ increment the value of result:\n                if(s.equals(op.get(j))) {\n\
    \                    // Since this operator has a value associated with this operand,\
    \ then we add this \n                    // operand's value to the result:\n \
    \                   result = result + operand.get(j);\n                    //\
    \ Increment j to skip the next operator:\n                    j = j+1;\n     \
    \           }\n                else {\n                    // ** If this operator\
    \ does not have the same value as the next operator, then\n                  \
    \  // we know that we are dealing with a unary operator, so we perform that operation\
    \ \n                    // with operand j:\n                    result = doUnaryOperation(s,\
    \ result, operand.get(j));\n                    // Increment j to skip the operand\
    \ after the unary operator:\n                    j = j+1;\n                }\n\
    \            }\n        }\n        // Since j is now equal to the last operator\
    \ in the list, we know that we have finished the\n        // loop and we have\
    \ our answer:\n        result = doUnaryOperation(op.get(op.size()-1), result,\
    \ operand.get(op.size()-1));\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmping0yorr.java:55: error: cannot find symbol\n                 \
    \   result = doUnaryOperation(s, result, operand.get(j));\n                  \
    \           ^\n  symbol:   method doUnaryOperation(String,long,Long)\n  location:\
    \ class Problem\n/tmp/tmping0yorr.java:63: error: cannot find symbol\n       \
    \ result = doUnaryOperation(op.get(op.size()-1), result, operand.get(op.size()-1));\n\
    \                 ^\n  symbol:   method doUnaryOperation(String,long,Long)\n \
    \ location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        String currentOp = \"\";\n\n        for (int i = 0; i <\
    \ op.size(); i++) {\n            if (op.get(i).equals(\"+\") || op.get(i).equals(\"\
    -\") || op.get(i).equals(\"*\") || op.get(i).equals(\"/\")) {\n              \
    \  currentOp = op.get(i);\n            } else {\n                currentOp = \"\
    \";\n            }\n            for (int j = 0; j < operand.size(); j++) {\n \
    \               if (op.get(i).equals(\"+\")) {\n                    result +=\
    \ operand.get(j);\n                } else if (op.get(i).equals(\"-\")) {\n   \
    \                 result -= operand.get(j);\n                } else if (op.get(i).equals(\"\
    *\")) {\n                    result *= operand.get(j);\n                } else\
    \ if (op.get(i).equals(\"/\")) {\n                    if (operand.get(j) != 0)\
    \ {\n                        result = result / operand.get(j);\n             \
    \       }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphofaormc.java:54)\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int i = 1;\n        int j = 1;\n        int opLength =\
    \ op.size();\n        ArrayList<String> operator = op.subList(0, opLength - 1);\n\
    \        while (i < operand.size()) {\n            String op = operator.get(j);\n\
    \            if (op == \"*\") {\n                result += operand.get(i) * operand.get(++i);\n\
    \            } else if (op == \"/\") {\n                result /= operand.get(i)\
    \ / operand.get(++i);\n            } else if (op == \"%\") {\n               \
    \ result %= operand.get(i) % operand.get(++i);\n            } else if (op == \"\
    +\") {\n                result += operand.get(i) + operand.get(++i);\n       \
    \     } else if (op == \"-\") {\n                result -= operand.get(i) - operand.get(++i);\n\
    \            } else if (op == \"//\") {\n                result /= operand.get(i)\
    \ / operand.get(++i);\n            } else if (op == \"**\") {\n              \
    \  result *= operand.get(i) * operand.get(++i);\n            }\n            j++;\n\
    \            i++;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwk0808t.java:32: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        ArrayList<String> operator = op.subList(0,\
    \ opLength - 1);\n                                               ^\n/tmp/tmpuwk0808t.java:34:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \            String op = operator.get(j);\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(String opStr : op) {\n            switch(opStr) {\n\
    \                case \"+\":\n                    result += operand.get(0);\n\
    \                    operand.remove(0);\n                    break;\n        \
    \        case \"-\":\n                    result -= operand.get(0);\n        \
    \            operand.remove(0);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand.get(0);\n                    operand.remove(0);\n       \
    \             break;\n                case \"**\":\n                    result\
    \ **= operand.get(0);\n                    operand.remove(0);\n              \
    \      break;\n                default:\n                    throw new IllegalArgumentException();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoym3hiq3.java:48: error: illegal start of expression\n        \
    \            result **= operand.get(0);\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(String op: op) {\n            for(long i:operand) {\n\
    \                switch (op) {\n                    case \"+\":\n            \
    \            result = result + i;\n                        break;\n          \
    \          case \"-\":\n                        result = result - i;\n       \
    \                 break;\n                    case \"*\":\n                  \
    \      result = result * i;\n                        break;\n                \
    \    case \"/\":\n                        if(i <= 0) break;\n                \
    \        result = result / i;\n                        break;\n              \
    \      case \"//\":\n                        if(i <= 0) break;\n             \
    \           result = result / i;\n                        result = result - 1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result = result * i;\n                        result = result *\
    \ i;\n                        break;\n                }\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3m29v6h.java:29: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n        for(String op: op) {\n\
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Declare result as 0.\n        long result = 0;\n        // Declare sum as 0.\n\
    \        long sum = 0;\n        // Iterate over operand array list\n        for\
    \ (int i = 0; i < operand.size() - 1; i++) {\n            sum = sum + operand.get(i);\n\
    \        }\n        // Iterate over operator array list\n        for (int i =\
    \ 0; i < op.size() - 1; i++) {\n            // If operator is plus, multiply sum\
    \ with operand\n            if (op.get(i).equals(\"+\")) {\n                sum\
    \ *= operand.get(operand.size() - 1);\n            // If operator is minus, multiply\
    \ sum with operand\n            } else if (op.get(i).equals(\"-\")) {\n      \
    \          sum -= operand.get(operand.size() - 1);\n            // If operator\
    \ is multiply, divide sum with operand\n            } else if (op.get(i).equals(\"\
    *\")) {\n                sum /= operand.get(operand.size() - 1);\n           \
    \ // If operator is divide, multiply sum with operand\n            } else if (op.get(i).equals(\"\
    /\")) {\n                sum *= operand.get(operand.size() - 1);\n           \
    \ // If operator is floor, multiply sum with operand\n            } else if (op.get(i).equals(\"\
    //\")) {\n                sum *= operand.get(operand.size() - 1);\n          \
    \  // If operator is power, multiply sum with operand\n            } else if (op.get(i).equals(\"\
    **\")) {\n                sum *= operand.get(operand.size() - 1);\n          \
    \  }\n        }\n        result = sum;\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rjqme6o.java:62)\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code here\n        long result = 0;\n        for(Long a: operand){\n  \
    \          for(String o: op){\n                try{\n                    switch(o){\n\
    \                    case \"+\": result += a;break;\n                    case\
    \ \"*\": result *= a;break;\n                    case \"-\": result -= a;break;\n\
    \                    case \"//\": result /= a;break;\n                    case\
    \ \"**\": result *= a;result = Math.pow(result, a);break;\n                  \
    \  default: break;\n                    }\n                }catch(Exception e){\n\
    \                    System.out.println(\"Bad expression! \" + o);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyu358kws.java:38: error: incompatible types: possible lossy conversion\
    \ from double to long\n                    case \"**\": result *= a;result = Math.pow(result,\
    \ a);break;\n                                                            ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1L;\n        for (int i = 0; i < op.size(); i++) {\n            switch\
    \ (op.get(i)) {\n                case \"+\":\n                    result = result\
    \ + operand.get(i);\n                    break;\n                case \"-\":\n\
    \                    result = result - operand.get(i);\n                    break;\n\
    \                case \"*\":\n                    result = result * operand.get(i);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = result / operand.get(i);\n                    break;\n           \
    \     case \"**\":\n                    result = result ** operand.get(i);\n \
    \                   break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbeaspqcm.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ eval = 0;\n        Arrays.stream(operand).forEach(v -> eval += (v * v));\n \
    \       Arrays.stream(op).forEach(v -> eval -= (v * v));\n        return eval;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsojepec.java:29: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(operand).forEach(v -> eval += (v * v));\n             \
    \ ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot infer\
    \ type-variable(s) T#1\n        (argument mismatch; ArrayList<Long> cannot be\
    \ converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to int[])\n   \
    \ method Arrays.stream(long[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to long[])\n    method Arrays.stream(double[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpgsojepec.java:30: error: no suitable method found for stream(ArrayList<String>)\n\
    \        Arrays.stream(op).forEach(v -> eval -= (v * v));\n              ^\n \
    \   method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot infer type-variable(s)\
    \ T#1\n        (argument mismatch; ArrayList<String> cannot be converted to T#1[]))\n\
    \    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot\
    \ infer type-variable(s) T#2\n        (actual and formal argument lists differ\
    \ in length))\n    method Arrays.stream(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to long[])\n    method Arrays.stream(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to double[])\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>stream(T#1[])\n\
    \    T#2 extends Object declared "
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        if (op.size() < 2 || operand.size() < 2) {\n          \
    \  System.out.println(\"invalid arguments\");\n        }\n        for (String\
    \ s : op) {\n            if (s.equals(\"+\"))\n                result = result\
    \ + operand.get(0);\n            else if (s.equals(\"-\"))\n                result\
    \ = result - operand.get(0);\n            else if (s.equals(\"*\"))\n        \
    \        result = result * operand.get(0);\n            else if (s.equals(\"//\"\
    )) {\n                for (int i = 0; i < operand.size(); i++) {\n           \
    \         if (operand.get(i) < 0)\n                        System.out.println(operand.get(i)\
    \ + \" cannot be a negative number.\");\n                }\n                result\
    \ = result / operand.get(0);\n            } else if (s.equals(\"**\")) {\n   \
    \             result = Math.pow(result,operand.get(0));\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpziopkzr1.java:46: error: incompatible types: possible lossy conversion\
    \ from double to long\n                result = Math.pow(result,operand.get(0));\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            switch\
    \ (op.get(i)) {\n                case \"+\": \n                    result += operand.get(i);\n\
    \                    break;\n                case \"*\": \n                  \
    \  result *= operand.get(i);\n                    break;\n                case\
    \ \"-\": \n                    result -= operand.get(i);\n                   \
    \ break;\n                case \"//\": \n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\": \n                 \
    \   result *= operand.get(i);\n                    result = result / operand.get(i);\n\
    \                    break;\n                default: \n                    System.out.println(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptgzocfn.java:54)\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ To store the result of the expression\n        long result = 0, x = 0, y = 0;\n\
    \        // To store each element in op array list\n        char opChar;\n   \
    \     char opChar2;\n        // To store each element in operand array list\n\
    \        long operand1, operand2;\n        // To store each element in the result\
    \ of x\n        long x1;\n        // To store each element in the result of y\n\
    \        long y1;\n\n        // To store the characters of the operator\n    \
    \    ArrayList<Character> opCharArray = new ArrayList<>();\n        // To store\
    \ the characters of the operand\n        ArrayList<Character> operandCharArray\
    \ = new ArrayList<>();\n\n        // To store all the possible combinations of\
    \ x and y\n        ArrayList<ArrayList<Long>> value = new ArrayList<ArrayList<Long>>();\n\
    \        // To store the number of combinations possible\n        long combination\
    \ = 0;\n\n        // To traverse op array list to get the characters of the operator\n\
    \        for (int i = 0; i < op.size(); i++) {\n            opChar = op.charAt(i);\n\
    \            opCharArray.add(opChar);\n        }\n\n        // To traverse operand\
    \ array list to get the characters of the operand\n        for (int i = 0; i <\
    \ operand.size(); i++) {\n            operand1 = operand.get(i);\n           \
    \ operand2 = operand.get(i);\n            operandCharArray.add(operand1.toString());\n\
    \            operandCharArray.add(operand2.toString());\n        }\n\n       \
    \ // To traverse the operator array list\n        for (int i = 0; i < op.size();\
    \ i++) {\n            opChar = op.charAt(i);\n            // To traverse the operand\
    \ array list to build the result\n            for (int j = 0; j < operand.size();\
    \ j++) {\n                // To store the result\n                result = result\
    \ + (j * (opCharArray.get(j).charAt(0) - '0'));\n            }\n        }\n\n\
    \        // To traverse the operand array list\n        for (int i = 0; i < operand.size();\
    \ i++) {\n            operand1 = operand.get(i);\n            operand2 = operand.get(i);\n\
    \            // To traverse the operator array list to build the result\n    \
    \        for (int j = 0; j < op.size(); j++) {\n                // To store the\
    \ result\n                result = result + ((operand1 * operand2) * (opCharArray.get(j).charAt(0)\
    \ - '0'));\n            }\n        }\n\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplavxtay8.java:52: error: cannot find symbol\n            opChar\
    \ = op.charAt(i);\n                       ^\n  symbol:   method charAt(int)\n\
    \  location: variable op of type ArrayList<String>\n/tmp/tmplavxtay8.java:60:\
    \ error: long cannot be dereferenced\n            operandCharArray.add(operand1.toString());\n\
    \                                         ^\n/tmp/tmplavxtay8.java:61: error:\
    \ long cannot be dereferenced\n            operandCharArray.add(operand2.toString());\n\
    \                                         ^\n/tmp/tmplavxtay8.java:66: error:\
    \ cannot find symbol\n            opChar = op.charAt(i);\n                   \
    \    ^\n  symbol:   method charAt(int)\n  location: variable op of type ArrayList<String>\n\
    /tmp/tmplavxtay8.java:70: error: cannot find symbol\n                result =\
    \ result + (j * (opCharArray.get(j).charAt(0) - '0'));\n                     \
    \                                     ^\n  symbol:   method charAt(int)\n  location:\
    \ class Character\n/tmp/tmplavxtay8.java:81: error: cannot find symbol\n     \
    \           result = result + ((operand1 * operand2) * (opCharArray.get(j).charAt(0)\
    \ - '0'));\n                                                                 \
    \             ^\n  symbol:   method charAt(int)\n  location: class Character\n\
    6 errors\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1;\n        int i;\n        int j;\n        for(i = 0; i < op.size();\
    \ i++) {\n            for(j = 0; j < operand.size() - 1; j++) {\n            \
    \    switch(op.get(i)) {\n                    case \"+\":\n                  \
    \      result = result + operand.get(j);\n                        break;\n   \
    \                 case \"-\":\n                        result = result - operand.get(j);\n\
    \                        break;\n                    case \"*\":\n           \
    \             result = result * operand.get(j);\n                        break;\n\
    \                    case \"//\":\n                        result = result / operand.get(j);\n\
    \                        break;\n                    case \"**\":\n          \
    \              result = result ** operand.get(j);\n                        break;\n\
    \                    default:\n                        System.out.println(\"Operator\
    \ \" + op.get(i) + \" is not supported\");\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7nt17ucm.java:47: error: illegal start of expression\n        \
    \                result = result ** operand.get(j);\n                        \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1; // Assume result is 1.\n        // Perform binary operations on\
    \ operands.\n        for (int i = 0; i < operand.size(); i++) {\n            long\
    \ right = operand.get(i);\n            long left = operand.get(i - 1);\n     \
    \       boolean opr1 = op.contains(\"+\");\n            boolean opr2 = op.contains(\"\
    -\");\n            boolean opr3 = op.contains(\"*\");\n            boolean opr4\
    \ = op.contains(\"/\");\n            boolean opr5 = op.contains(\"//\");\n   \
    \         boolean opr6 = op.contains(\"**\");\n            if (opr1 && opr2 &&\
    \ opr3 && opr4 && opr5 && opr6) {\n                String opr1 = op.get(0);\n\
    \                String opr2 = op.get(1);\n                String opr3 = op.get(2);\n\
    \                String opr4 = op.get(3);\n                String opr5 = op.get(4);\n\
    \                String opr6 = op.get(5);\n                if (opr1.equals(\"\
    +\")) {\n                    result = result + right;\n                } else\
    \ if (opr1.equals(\"-\")) {\n                    result = result - right;\n  \
    \              } else if (opr1.equals(\"*\")) {\n                    result =\
    \ result * right;\n                } else if (opr1.equals(\"/\")) {\n        \
    \            result = result / right;\n                } else if (opr1.equals(\"\
    //\")) {\n                    result = result / right;\n                } else\
    \ if (opr1.equals(\"**\")) {\n                    result = result ** right;\n\
    \                }\n            } else if (opr1 && opr2 && opr3 && opr4) {\n \
    \               String opr1 = op.get(0);\n                String opr2 = op.get(1);\n\
    \                String opr3 = op.get(2);\n                String opr4 = op.get(3);\n\
    \                if (opr1.equals(\"+\")) {\n                    result = result\
    \ + right;\n                } else if (opr1.equals(\"-\")) {\n               \
    \     result = result - right;\n                } else if (opr1.equals(\"*\"))\
    \ {\n                    result = result * right;\n                } else if (opr1.equals(\"\
    /\")) {\n                    result = result / right;\n                } else\
    \ if (opr1.equals(\"//\")) {\n                    result = result / right;\n \
    \               }\n            } else if (opr1 && opr2 && opr3) {\n          \
    \      String opr1 = op.get(0);\n                String opr2 = op.get(1);\n  \
    \              String opr3 = op.get(2);\n                if (opr1.equals(\"+\"\
    )) {\n                    result = result + right;\n                } else if\
    \ (opr1.equals(\"-\")) {\n                    result = result - right;\n     \
    \           } else if (opr1.equals(\"*\")) {\n                    result = result\
    \ * right;\n                } else if (opr1.equals(\"/\")) {\n               \
    \     result = result \n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp22_l_a_.java:57: error: illegal start of expression\n        \
    \            result = result ** right;\n                                     ^\n\
    /tmp/tmpp22_l_a_.java:86: error: ';' expected\n                    result = result\
    \ \n                                   ^\n/tmp/tmpp22_l_a_.java:88: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ n = op.size();\n        long result = operand.get(0);\n        for (int i =\
    \ 1; i < n; i++) {\n            long op1, op2;\n            String op;\n     \
    \       try {\n                op1 = Long.valueOf(op.get(i));\n              \
    \  op2 = operand.get(i);\n            } catch (NumberFormatException e1) {\n \
    \               throw new RuntimeException(\"invalid operator \" + op.get(i));\n\
    \            }\n            if (op1.equals(op2)) {\n                result *=\
    \ op1;\n            } else if (op1.equals(\"+\")) {\n                result +=\
    \ (op2 == 0 ? 0 : op2);\n            } else if (op1.equals(\"*\")) {\n       \
    \         result *= op2;\n            } else if (op1.equals(\"//\")) {\n     \
    \           result /= op2;\n            } else if (op1.equals(\"**\")) {\n   \
    \             result *= Math.pow(op2, op2.longValue());\n            } else {\n\
    \                throw new RuntimeException(\"invalid operator \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu81hg27c.java:32: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op;\n     \
    \              ^\n/tmp/tmpu81hg27c.java:34: error: cannot find symbol\n      \
    \          op1 = Long.valueOf(op.get(i));\n                                  \
    \   ^\n  symbol:   method get(int)\n  location: variable op of type String\n/tmp/tmpu81hg27c.java:37:\
    \ error: cannot find symbol\n                throw new RuntimeException(\"invalid\
    \ operator \" + op.get(i));\n                                                \
    \                   ^\n  symbol:   method get(int)\n  location: variable op of\
    \ type String\n/tmp/tmpu81hg27c.java:39: error: long cannot be dereferenced\n\
    \            if (op1.equals(op2)) {\n                   ^\n/tmp/tmpu81hg27c.java:41:\
    \ error: long cannot be dereferenced\n            } else if (op1.equals(\"+\"\
    )) {\n                          ^\n/tmp/tmpu81hg27c.java:43: error: long cannot\
    \ be dereferenced\n            } else if (op1.equals(\"*\")) {\n             \
    \             ^\n/tmp/tmpu81hg27c.java:45: error: long cannot be dereferenced\n\
    \            } else if (op1.equals(\"//\")) {\n                          ^\n/tmp/tmpu81hg27c.java:47:\
    \ error: long cannot be dereferenced\n            } else if (op1.equals(\"**\"\
    )) {\n                          ^\n/tmp/tmpu81hg27c.java:48: error: long cannot\
    \ be dereferenced\n                result *= Math.pow(op2, op2.longValue());\n\
    \                                           ^\n/tmp/tmpu81hg27c.java:50: error:\
    \ cannot find symbol\n                throw new RuntimeException(\"invalid operator\
    \ \" + op.get(i));\n                                                         \
    \          ^\n  symbol:   method get(int)\n  location: variable op of type String\n\
    10 errors\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ First get the length of the operator array\n        int length = op.size() -\
    \ 1;\n        // Then get the length of the operand array\n        int length2\
    \ = operand.size() - 1;\n\n        // Then create an empty list to store the results\n\
    \        ArrayList<Long> results = new ArrayList<>();\n        // Then traverse\
    \ through the operator array\n        for (int i = 0; i < length; i++) {\n   \
    \         // Store the operand\n            Long a = operand.get(i);\n       \
    \     // Then traverse through the operand array\n            for (int j = 0;\
    \ j < length2; j++) {\n                // Store the operand\n                Long\
    \ b = operand.get(j);\n                // Get the type of the operator to perform\n\
    \                String operator = op.get(i);\n                // Perform the\
    \ operation on the operands\n                switch (operator) {\n           \
    \         case \"+\":\n                        // Add the two operands\n     \
    \                   results.add(a+b);\n                        break;\n      \
    \              case \"-\":\n                        // Subtract the two operands\n\
    \                        results.add(a-b);\n                        break;\n \
    \                   case \"*\":\n                        // Multiply the two operands\n\
    \                        results.add(a*b);\n                        break;\n \
    \                   case \"//\":\n                        // Floor divide two\
    \ operands\n                        results.add(a/b);\n                      \
    \  break;\n                    case \"**\":\n                        // Exponentiate\
    \ the two operands\n                        results.add(a**b);\n             \
    \           break;\n                    default:\n                        // If\
    \ an operator is not found, throw an exception\n                        throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + operator);\n         \
    \       }\n            }\n        }\n        // Return the result\n        return\
    \ results.get(0);\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_n8egsz.java:65: error: illegal start of expression\n        \
    \                results.add(a**b);\n                                      ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Basic algebra\n        long result = 0;\n        // Add up all elements of operand\
    \ array list\n        for(int i = 0; i < operand.size(); i++) {\n            result\
    \ = result + operand.get(i);\n        }\n        // Loop through operator array\
    \ list\n        for(int i = 0; i < op.size(); i++) {\n            // String opCode\
    \ = op.get(i);\n            // System.out.println(\"op code: \" + opCode);\n \
    \           // String op1 = op.get(1);\n            // System.out.println(\"op1:\
    \ \" + op1);\n            // String op2 = op.get(2);\n            // System.out.println(\"\
    op2: \" + op2);\n            // String op3 = op.get(3);\n            // System.out.println(\"\
    op3: \" + op3);\n            // String op4 = op.get(4);\n            // System.out.println(\"\
    op4: \" + op4);\n            \n            // Convert opCode to a corresponding\
    \ function\n            try {\n                Method method = Problem.class.getMethod(op.get(i),\
    \ Long.class);\n                // System.out.println(\"method name: \" + method.toString());\n\
    \                // System.out.println(\"method name: \" + method.getName());\n\
    \                // System.out.println(\"method name: \" + method.getName());\n\
    \                // System.out.println(\"method name: \" + method.getName());\n\
    \                // System.out.println(\"method name: \" + method.getName());\n\
    \                // System.out.println(\"method name: \" + method.toString());\n\
    \                // System.out.println(\"method name: \" + method.toString());\n\
    \                \n                // Call the function\n                method.invoke(null,\
    \ result);\n                \n            } catch(Exception e) {\n           \
    \     e.printStackTrace();\n            }\n        }\n        \n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NoSuchMethodException: Problem.**(java.lang.Long)\n\tat java.base/java.lang.Class.getMethod(Class.java:2227)\n\
    \tat Problem.doAlgebra(tmphyymbr_w.java:49)\n\tat Problem.main(tmphyymbr_w.java:69)\n\
    java.lang.NoSuchMethodException: Problem.*(java.lang.Long)\n\tat java.base/java.lang.Class.getMethod(Class.java:2227)\n\
    \tat Problem.doAlgebra(tmphyymbr_w.java:49)\n\tat Problem.main(tmphyymbr_w.java:69)\n\
    java.lang.NoSuchMethodException: Problem.+(java.lang.Long)\n\tat java.base/java.lang.Class.getMethod(Class.java:2227)\n\
    \tat Problem.doAlgebra(tmphyymbr_w.java:49)\n\tat Problem.main(tmphyymbr_w.java:69)\n\
    Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyymbr_w.java:69)\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String op : strToArray(op)) {\n            if (isAddition(op,\
    \ operand)) {\n                result += operand.get(0);\n                for\
    \ (int i = 1; i < operand.size(); i++) {\n                    result -= operand.get(i);\n\
    \                }\n            } else if (isSubtraction(op, operand)) {\n   \
    \             result -= operand.get(0);\n                for (int i = 1; i < operand.size();\
    \ i++) {\n                    result -= operand.get(i);\n                }\n \
    \           } else if (isMultiplication(op, operand)) {\n                for (int\
    \ i = 0; i < operand.size(); i++) {\n                    result *= operand.get(i);\n\
    \                }\n            } else if (isFloorDivision(op, operand)) {\n \
    \               for (int i = 0; i < operand.size(); i++) {\n                 \
    \   result /= operand.get(i);\n                }\n            } else if (isExponentiation(op,\
    \ operand)) {\n                for (int i = 0; i < operand.size(); i++) {\n  \
    \                  result *= operand.get(i);\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6rstxf2u.java:29: error: cannot find symbol\n        for (String\
    \ op : strToArray(op)) {\n                         ^\n  symbol:   method strToArray(ArrayList<String>)\n\
    \  location: class Problem\n/tmp/tmp6rstxf2u.java:29: error: variable op is already\
    \ defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n        for\
    \ (String op : strToArray(op)) {\n                    ^\n/tmp/tmp6rstxf2u.java:30:\
    \ error: cannot find symbol\n            if (isAddition(op, operand)) {\n    \
    \            ^\n  symbol:   method isAddition(String,ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmp6rstxf2u.java:35: error: cannot find symbol\n       \
    \     } else if (isSubtraction(op, operand)) {\n                       ^\n  symbol:\
    \   method isSubtraction(String,ArrayList<Long>)\n  location: class Problem\n\
    /tmp/tmp6rstxf2u.java:40: error: cannot find symbol\n            } else if (isMultiplication(op,\
    \ operand)) {\n                       ^\n  symbol:   method isMultiplication(String,ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmp6rstxf2u.java:44: error: cannot find symbol\n\
    \            } else if (isFloorDivision(op, operand)) {\n                    \
    \   ^\n  symbol:   method isFloorDivision(String,ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmp6rstxf2u.java:48: error: cannot find symbol\n       \
    \     } else if (isExponentiation(op, operand)) {\n                       ^\n\
    \  symbol:   method isExponentiation(String,ArrayList<Long>)\n  location: class\
    \ Problem\n7 errors\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1;\n        for(String op: op) {\n            switch (op) {\n     \
    \       case \"+\":\n                result = result + operand.get(0);\n     \
    \           operand.remove(0);\n                break;\n            case \"-\"\
    :\n                result = result - operand.get(0);\n                operand.remove(0);\n\
    \                break;\n            case \"*\":\n                result = result\
    \ * operand.get(0);\n                operand.remove(0);\n                break;\n\
    \            case \"/\":\n                result = result / operand.get(0);\n\
    \                operand.remove(0);\n                break;\n            case\
    \ \"**\":\n                result = result ** operand.get(0);\n              \
    \  operand.remove(0);\n                break;\n            default:\n        \
    \        break;\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbxao6zh2.java:48: error: illegal start of expression\n        \
    \        result = result ** operand.get(0);\n                                \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1) {\n            System.out.println(\"Error.\
    \ Operator array list has size \" + op.size() + \" while operand array list has\
    \ size \" + operand.size());\n            return 0;\n        }\n        long result\
    \ = 0;\n        for(String op : op) {\n            switch(op) {\n            \
    \    case \"+\":\n                    result += operand.get(0);\n            \
    \        operand.remove(0);\n                    break;\n                case\
    \ \"-\":\n                    result -= operand.get(0);\n                    operand.remove(0);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(0);\n                    operand.remove(0);\n        \
    \            break;\n                case \"//\":\n                    result\
    \ /= operand.get(0);\n                    operand.remove(0);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(operand.get(0), operand.get(0));\n                    operand.remove(0);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Error: operator \" + op + \" is not defined\");\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqyziss1p.java:33: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n        for(String op : op) {\n\
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ convert input operand to Long\n        Long result = 0;\n        for(int i =\
    \ 0 ; i < operand.size(); i++) {\n            long value = operand.get(i);\n \
    \           // if operand is negative, ignore it\n            if(value < 0 ) {\n\
    \                result += (Long) value;\n            }\n            else {\n\
    \                switch (op.get(i)) {\n                    case \"+\":\n     \
    \                   result += (Long) value;\n                        break;\n\
    \                    case \"-\":\n                        result -= (Long) value;\n\
    \                        break;\n                    case \"*\":\n           \
    \             result += (Long) value;\n                        break;\n      \
    \              case \"//\":\n                        result /= (Long) value;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result *= (Long) value;\n                        break;\n     \
    \           }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmsu4c33.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n        Long result = 0;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        \n        int operandSize = operand.size();\n        if\
    \ (operandSize < 2) {\n            throw new IllegalArgumentException();\n   \
    \     }\n        \n        char opChar = op.size() > operandSize ? op.size() -\
    \ 1 : operandSize - 1;\n        \n        for (int i = 0; i < operandSize; i++)\
    \ {\n            String op1 = op.get(i - 1);\n            String op2 = op.get(i);\n\
    \            String op3 = op.get(i + 1);\n            String op4 = op.get(i +\
    \ 2);\n            \n            \n            String arg1 = operand.get(i-1);\n\
    \            String arg2 = operand.get(i);\n            String arg3 = operand.get(i\
    \ + 1);\n            String arg4 = operand.get(i + 2);\n            \n       \
    \     long val1 = Long.parseLong(arg1);\n            long val2 = Long.parseLong(arg2);\n\
    \            long val3 = Long.parseLong(arg3);\n            long val4 = Long.parseLong(arg4);\n\
    \            \n            \n            switch (opChar) {\n            case '+':\n\
    \                if (op1.equals(\"+\") || op1.equals(\"*\")) result += val1 +\
    \ val2;\n                else if (op1.equals(\"-\")) result -= val1 - val2;\n\
    \                else if (op1.equals(\"/\")) result /= val1 / val2;\n        \
    \        else if (op1.equals(\"//\")) result /= val1;\n                break;\n\
    \            case '-':\n                if (op1.equals(\"+\") || op1.equals(\"\
    *\")) result -= val1 - val2;\n                else if (op1.equals(\"-\")) result\
    \ += val1 - val2;\n                else if (op1.equals(\"/\")) result /= val1\
    \ / val2;\n                else if (op1.equals(\"//\")) result /= val1;\n    \
    \            break;\n            case '*':\n                if (op1.equals(\"\
    +\") || op1.equals(\"-\")) result *= val1 + val2;\n                else if (op1.equals(\"\
    *\")) result *= val1 * val2;\n                else if (op1.equals(\"/\")) result\
    \ *= val1 / val2;\n                else if (op1.equals(\"//\")) result *= val1;\n\
    \                break;\n            case '/':\n                if (op1.equals(\"\
    +\") || op1.equals(\"-\")) result /= val1 / val2;\n                else if (op1.equals(\"\
    *\")) result *= val1;\n                else if (op1.equals(\"/\")) result = val1\
    \ / val2;\n                else if (op1.equals(\"//\")) result *= val1;\n    \
    \            break;\n            case '//':\n                if (op1.equals(\"\
    +\") || op1.equals(\"-\")) result *= val1;\n                else if (op1.equals(\"\
    *\")) result *= val1;\n                else if (op1.equal\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2m3jh11.java:80: error: unclosed character literal\n         \
    \   case '//':\n                 ^\n/tmp/tmpn2m3jh11.java:80: error: unclosed\
    \ character literal\n            case '//':\n                    ^\n/tmp/tmpn2m3jh11.java:81:\
    \ error: : or -> expected\n                if (op1.equals(\"+\") || op1.equals(\"\
    -\")) result *= val1;\n                                                      \
    \ ^\n/tmp/tmpn2m3jh11.java:83: error: ')' expected\n                else if (op1.equal\n\
    \                                  ^\n/tmp/tmpn2m3jh11.java:84: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpn2m3jh11.java:82: error: 'else' without\
    \ 'if'\n                else if (op1.equals(\"*\")) result *= val1;\n        \
    \        ^\n/tmp/tmpn2m3jh11.java:85: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n    ^\n7 errors\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ To store the result from evaluation.\n        long result = 0;\n        // To\
    \ store the index of left operand.\n        int left = 0;\n        // To store\
    \ the index of right operand.\n        int right = 0;\n        // To store the\
    \ number of operand.\n        int n = operand.size();\n        // To store the\
    \ index of operator.\n        int m = 0;\n        // To store the number of operator.\n\
    \        int n = op.size();\n        while(m < n) {\n            // If the left\
    \ operand is larger than the right operand, then the result is 0.\n          \
    \  if(operand.get(left) > operand.get(right)) {\n                result = 0;\n\
    \            } else if(operand.get(left) < operand.get(right)) {\n           \
    \     result = -1;\n            } else {\n                // Calculate the result\
    \ of operation.\n                switch(op.get(m)) {\n                    // Addition.\n\
    \                    case \"+\":\n                        result = operand.get(left)\
    \ + operand.get(right);\n                        break;\n                    //\
    \ Subtraction.\n                    case \"-\":\n                        result\
    \ = operand.get(left) - operand.get(right);\n                        break;\n\
    \                    // Multiplication.\n                    case \"*\":\n   \
    \                     result = operand.get(left) * operand.get(right);\n     \
    \                   break;\n                    // Floor division.\n         \
    \           case \"//\":\n                        result = operand.get(left) /\
    \ operand.get(right);\n                        break;\n                    //\
    \ Exponentiation.\n                    case \"**\":\n                        result\
    \ = operand.get(left) ^ operand.get(right);\n                        break;\n\
    \                }\n                // Increase index of left operand.\n     \
    \           left++;\n                // Increase index of right operand.\n   \
    \             right++;\n            }\n            // Increase index of operator.\n\
    \            m++;\n        }\n        // Return the result.\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbfff16c.java:39: error: variable n is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n        int n = op.size();\n \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() < 2) {\n            System.out.println(\"Not enough operators to\
    \ execute\");\n            return 0;\n        }\n        // Find out number of\
    \ operands\n        int operandNum = operand.size();\n        // Find out number\
    \ of operators\n        int opNum = op.size();\n        // Start an accumulator\
    \ to keep adding to a total\n        long total = 0;\n        // Iterate through\
    \ all the operators\n        for (int i = 0; i < opNum; i++) {\n            //\
    \ Find the operator and process it accordingly\n            String op1 = op.get(i);\n\
    \            // Only perform addition and subtraction\n            if (op1.equals(\"\
    +\")) {\n                total += operand.get(i);\n            } else if (op1.equals(\"\
    *\")) {\n                total *= operand.get(i);\n            } else if (op1.equals(\"\
    -\")) {\n                total -= operand.get(i);\n            } else if (op1.equals(\"\
    //\")) {\n                total /= operand.get(i);\n            } else if (op1.equals(\"\
    **\")) {\n                total *= operand.get(i);\n            }\n        }\n\
    \        // Return the total\n        return total;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcmanws7.java:59)\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() < operand.size() - 1) {\n            System.out.println(\"\\nError:\
    \ operator array list is shorter than operand array list minus one!\");\n    \
    \        System.exit(1);\n        }\n        // Evaluate the expression.\n   \
    \     // For example, with operator = ['+','+'] and operand = [2, 3, 4, 5, 6,\
    \ 7], the expression is\n        // 2+3+4+5+6+7=37.\n        // The expression\
    \ can also be written as (2+3)+(4+5)+(6+7).\n        // We need to evaluate the\
    \ expression using the given operator, and evaluate the result against the \n\
    \        // given operand. Since operator and operand are both arrays, we will\
    \ need to loop through each \n        // element of the operator array list, find\
    \ the corresponding element in the operand array list, \n        // and perform\
    \ the evaluation.\n        long expression = 0;\n        for (int i = 0; i < op.size();\
    \ i++) {\n            expression = evaluateArithmetic(op, operand, expression);\n\
    \        }\n        return expression;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr4w1cpjw.java:42: error: cannot find symbol\n            expression\
    \ = evaluateArithmetic(op, operand, expression);\n                         ^\n\
    \  symbol:   method evaluateArithmetic(ArrayList<String>,ArrayList<Long>,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1) {\n            System.out.println(\"Invalid\
    \ input!\");\n            return 0;\n        }\n        long[] resultArr = new\
    \ long[op.size()];\n        ArrayList<String> tmpArr = new ArrayList<>();\n  \
    \      StringBuilder sb = new StringBuilder();\n        long retVal = 0;\n   \
    \     int pos = 0;\n        for (int i = 0; i < op.size(); i++) {\n          \
    \  tmpArr.clear();\n            int opIndex = i;\n            int operandIndex\
    \ = i + 1;\n            String opString = op.get(opIndex).trim();\n          \
    \  String operandString = operand.get(operandIndex).trim();\n            Operator\
    \ opObject = getOperator(opString);\n            int operandType = opObject.getOperandType();\n\
    \            switch (operandType) {\n                case 1:\n               \
    \     tmpArr.add(operandString);\n                    break;\n               \
    \ case 2:\n                    tmpArr.addAll(Arrays.asList(operandString.split(\"\
    \\\\s+\")));\n                    break;\n                default:\n         \
    \           System.out.println(\"invalid operand type!\");\n                 \
    \   return 0;\n            }\n            String tmpString = tmpArr.stream().collect(Collectors.joining(\"\
    \ + \"));\n            sb.append(tmpString);\n            sb.append(\" \");\n\
    \            try {\n                retVal += opObject.execute(sb.toString());\n\
    \            } catch (ArithmeticException e) {\n                System.out.println(\"\
    Invalid input!\");\n                return 0;\n            }\n        }\n    \
    \    return retVal;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp08gp9y3.java:42: error: cannot find symbol\n            String\
    \ operandString = operand.get(operandIndex).trim();\n                        \
    \                                    ^\n  symbol:   method trim()\n  location:\
    \ class Long\n/tmp/tmpp08gp9y3.java:43: error: cannot find symbol\n          \
    \  Operator opObject = getOperator(opString);\n            ^\n  symbol:   class\
    \ Operator\n  location: class Problem\n/tmp/tmpp08gp9y3.java:43: error: cannot\
    \ find symbol\n            Operator opObject = getOperator(opString);\n      \
    \                          ^\n  symbol:   method getOperator(String)\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String op: op) {\n            int op = op.charAt(0);\n\
    \            int operator = Integer.parseInt(op);\n            int operand1 =\
    \ operand.get(0);\n            int operand2 = operand.get(1);\n            int\
    \ temp = 0;\n            if (oper.equals(\"+\")) {\n                temp = (operand1\
    \ + operand2);\n            }\n            if (oper.equals(\"*\")) {\n       \
    \         temp = (operand1 * operand2);\n            }\n            if (oper.equals(\"\
    -\")) {\n                temp = (operand1 - operand2);\n            }\n      \
    \      if (oper.equals(\"//\")) {\n                temp = (operand1 & operand2);\n\
    \            }\n            if (oper.equals(\"**\")) {\n                temp =\
    \ (operand1 ^ operand2);\n            }\n            result = result + temp;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb88fec3h.java:29: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n        for (String op: op) {\n\
    \                    ^\n/tmp/tmpb88fec3h.java:30: error: variable op is already\
    \ defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n           \
    \ int op = op.charAt(0);\n                ^\n/tmp/tmpb88fec3h.java:30: error:\
    \ int cannot be dereferenced\n            int op = op.charAt(0);\n           \
    \            ^\n/tmp/tmpb88fec3h.java:31: error: incompatible types: int cannot\
    \ be converted to String\n            int operator = Integer.parseInt(op);\n \
    \                                           ^\n/tmp/tmpb88fec3h.java:32: error:\
    \ incompatible types: Long cannot be converted to int\n            int operand1\
    \ = operand.get(0);\n                                      ^\n/tmp/tmpb88fec3h.java:33:\
    \ error: incompatible types: Long cannot be converted to int\n            int\
    \ operand2 = operand.get(1);\n                                      ^\n/tmp/tmpb88fec3h.java:35:\
    \ error: cannot find symbol\n            if (oper.equals(\"+\")) {\n         \
    \       ^\n  symbol:   variable oper\n  location: class Problem\n/tmp/tmpb88fec3h.java:38:\
    \ error: cannot find symbol\n            if (oper.equals(\"*\")) {\n         \
    \       ^\n  symbol:   variable oper\n  location: class Problem\n/tmp/tmpb88fec3h.java:41:\
    \ error: cannot find symbol\n            if (oper.equals(\"-\")) {\n         \
    \       ^\n  symbol:   variable oper\n  location: class Problem\n/tmp/tmpb88fec3h.java:44:\
    \ error: cannot find symbol\n            if (oper.equals(\"//\")) {\n        \
    \        ^\n  symbol:   variable oper\n  location: class Problem\n/tmp/tmpb88fec3h.java:47:\
    \ error: cannot find symbol\n            if (oper.equals(\"**\")) {\n        \
    \        ^\n  symbol:   variable oper\n  location: class Problem\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n11\
    \ errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1) {\n            System.out.println(\"Error:\
    \ wrong operators and operands.\");\n            return 0;\n        }\n\n    \
    \    // convert string to list of char\n        ArrayList<Character> opchar =\
    \ new ArrayList<>();\n        for (String s : op) {\n            String ss = \"\
    Operator: \" + s;\n            char[] c = ss.toCharArray();\n            for (int\
    \ i = 0; i < c.length; i++) {\n                opchar.add((char) c[i]);\n    \
    \        }\n        }\n\n        // convert string to list of char\n        ArrayList<Character>\
    \ ochar = new ArrayList<>();\n        for (String s : operand) {\n           \
    \ String ss = \"Operator: \" + s;\n            char[] c = ss.toCharArray();\n\
    \            for (int i = 0; i < c.length; i++) {\n                ochar.add((char)\
    \ c[i]);\n            }\n        }\n\n        ArrayList<String> finalChar = new\
    \ ArrayList<>();\n\n        // convert list to string\n        for (int i = 0;\
    \ i < ochar.size(); i++) {\n            finalChar.add(ochar.get(i));\n       \
    \ }\n\n        char[] c = finalChar.toArray(new char[finalChar.size()]);\n\n \
    \       // get length of opchar list\n        int oplen = op.size();\n\n     \
    \   // find operator position\n        for (int i = 0; i < oplen; i++) {\n   \
    \         if (c[i] == opchar.get(i)) {\n                final int posOp = i;\n\
    \                final int posOpp = posOp + 1;\n                break;\n     \
    \       }\n        }\n\n        // find operand position\n        for (int i =\
    \ 0; i < oplen; i++) {\n            if (c[i] == opchar.get(posOp)) {\n       \
    \         final int posOp = i;\n                final int posOpp = posOp + 1;\n\
    \                break;\n            }\n        }\n\n        ArrayList<String>\
    \ output = new ArrayList<>();\n\n        // build expression\n        StringBuilder\
    \ builder = new StringBuilder();\n        if (posOp == oplen) {\n            builder.append(c[0]);\n\
    \            for (int i = 1; i < oplen; i++) {\n                builder.append(c[i]);\n\
    \            }\n            builder.append(\" = \").append(operand.get(operand.size()\
    \ - 1));\n        }\n        else if (posOpp == oplen) {\n            builder.append(c[0]);\n\
    \            builder.append(c[1]);\n            builder.append(\" (\");\n    \
    \        for (int i = 2; i < oplen; i++) {\n                builder.append(c[i]);\n\
    \            }\n            builder.append(\") = \").append(operand.get(operand.size()\
    \ - 2));\n        }\n        else {\n            builder.append(c[0]);\n     \
    \       builder.append(c[1]);\n            builder.append(\" \" + c[2] + \" (\"\
    );\n            for (int i = 3; i < oplen; i++) {\n                builder.append(c[i]);\n\
    \            }\n            builder.append(\") = \").append(operand.get(operand.size()\
    \ - 3));\n        }\n\n        // print expression string\n        System.out.println(builder.toString());\n\
    \n        // evaluate expression\n        long result = evaluateExpression(builder.toString());\n\
    \        System.out.println(\"result = \" + result);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5fnhr8t.java:45: error: incompatible types: Long cannot be converted\
    \ to String\n        for (String s : operand) {\n                        ^\n/tmp/tmpz5fnhr8t.java:57:\
    \ error: incompatible types: Character cannot be converted to String\n       \
    \     finalChar.add(ochar.get(i));\n                                   ^\n/tmp/tmpz5fnhr8t.java:60:\
    \ error: no suitable method found for toArray(char[])\n        char[] c = finalChar.toArray(new\
    \ char[finalChar.size()]);\n                            ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; char[] cannot be converted to IntFunction<T#1[]>))\n    method ArrayList.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmpz5fnhr8t.java:76:\
    \ error: cannot find symbol\n            if (c[i] == opchar.get(posOp)) {\n  \
    \                                 ^\n  symbol:   variable posOp\n  location: class\
    \ Problem\n/tmp/tmpz5fnhr8t.java:87: error: cannot find symbol\n        if (posOp\
    \ == oplen) {\n            ^\n  symbol:   variable posOp\n  location: class Problem\n\
    /tmp/tmpz5fnhr8t.java:94: error: cannot find symbol\n        else if (posOpp ==\
    \ oplen) {\n                 ^\n  symbol:   variable posOpp\n  location: class\
    \ Problem\n/tmp/tmpz5fnhr8t.java:117: error: cannot find symbol\n        long\
    \ result = evaluateExpression(builder.toString());\n                      ^\n\
    \  symbol:   method evaluateExpression(String)\n  location: class Problem\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n7 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int count = 0;\n        Map<String, List<String>> map =\
    \ new HashMap<>();\n        for (int i = 0; i < operand.size() - 1; i++) {\n \
    \           String key = op.get(i);\n            String operand = operand.get(i);\n\
    \            if (!map.containsKey(key)) {\n                List<String> list =\
    \ new ArrayList<>();\n                list.add(operand);\n                map.put(key,\
    \ list);\n            } else {\n                List<String> list = map.get(key);\n\
    \                list.add(operand);\n                map.put(key, list);\n   \
    \         }\n        }\n        for (Map.Entry<String, List<String>> entry : map.entrySet())\
    \ {\n            String key = entry.getKey();\n            List<String> list =\
    \ entry.getValue();\n            int length = list.size();\n            StringBuilder\
    \ sb = new StringBuilder();\n            for (int i = 0; i < length; ++i) {\n\
    \                String operand = list.get(i);\n                String op = op.get(i);\n\
    \                long tmp;\n                if (op.equals(\"*\") || op.equals(\"\
    /\")) {\n                    if (operand.equals(\"0\")) {\n                  \
    \      break;\n                    }\n                    tmp = Long.parseLong(operand);\n\
    \                    tmp *= tmp;\n                } else if (op.equals(\"-\"))\
    \ {\n                    tmp = Long.parseLong(operand);\n                    tmp\
    \ -= tmp;\n                } else if (op.equals(\"+\")) {\n                  \
    \  tmp = Long.parseLong(operand);\n                    tmp += tmp;\n         \
    \       } else if (op.equals(\"//\")) {\n                    tmp = Long.parseLong(operand);\n\
    \                    tmp /= tmp;\n                } else {\n                 \
    \   tmp = Long.parseLong(operand);\n                    tmp %= tmp;\n        \
    \        }\n                sb.append(tmp);\n            }\n            result\
    \ += Long.parseLong(sb.toString());\n            count++;\n        }\n       \
    \ if (count < op.size()) {\n            return Long.parseLong(\"0\");\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gn4zkjf.java:33: error: variable operand is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String operand\
    \ = operand.get(i);\n                   ^\n/tmp/tmp1gn4zkjf.java:33: error: cannot\
    \ find symbol\n            String operand = operand.get(i);\n                \
    \                    ^\n  symbol:   method get(int)\n  location: variable operand\
    \ of type String\n/tmp/tmp1gn4zkjf.java:50: error: variable operand is already\
    \ defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n           \
    \     String operand = list.get(i);\n                       ^\n/tmp/tmp1gn4zkjf.java:51:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \                String op = op.get(i);\n                       ^\n/tmp/tmp1gn4zkjf.java:51:\
    \ error: cannot find symbol\n                String op = op.get(i);\n        \
    \                      ^\n  symbol:   method get(int)\n  location: variable op\
    \ of type String\n5 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ operandCount = operand.size();\n        int operatorCount = op.size();\n   \
    \     if(operandCount < 2 || operatorCount < 1) {\n            System.out.println(\"\
    Error - Invalid Operator or Operand size.\");\n            return 0;\n       \
    \ }\n\n        long result = 0;\n        boolean isPositive = true;\n        for(int\
    \ i = 0; i < operatorCount; i++) {\n            String opSymbol = op.get(i);\n\
    \            Long operandValue = operand.get(operandCount - i - 1);\n        \
    \    switch(opSymbol) {\n                case \"+\":\n                    result\
    \ = result + operandValue;\n                    break;\n                case \"\
    -\":\n                    result = result - operandValue;\n                  \
    \  break;\n                case \"*\":\n                    result = result *\
    \ operandValue;\n                    break;\n                case \"/\":\n   \
    \                 if(operandValue < 0) {\n                        isPositive =\
    \ false;\n                    }\n                    result = result / operandValue;\n\
    \                    break;\n                case \"**\":\n                  \
    \  if(operandValue < 0) {\n                        isPositive = false;\n     \
    \               }\n                    result = result ** operandValue;\n    \
    \                break;\n            }\n        }\n\n        if(isPositive ==\
    \ true) {\n            result = result + 1;\n        }\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwuqbkgmm.java:60: error: illegal start of expression\n        \
    \            result = result ** operandValue;\n                              \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code goes here\n        ArrayList<String> temp = new ArrayList<>();\n \
    \       long result = 0;\n        long tempResult = 0;\n        int lengthOpp\
    \ = op.size() - 1;\n        for (int i = 0; i <= lengthOpp; i++)\n           \
    \ temp.add(op.get(i));\n        for (int i = 0; i < operand.size(); i++)\n   \
    \         tempResult = operand.get(i) * tempResult;\n        switch (temp.get(0).charAt(0))\
    \ {\n            case '+':\n                result = result + tempResult;\n  \
    \              break;\n            case '-':\n                result = result\
    \ - tempResult;\n                break;\n            case '*':\n             \
    \   result = result + tempResult;\n                break;\n            case '//':\n\
    \                result = result + tempResult;\n                break;\n     \
    \       case '**':\n                result = result + tempResult;\n          \
    \      break;\n            default:\n                System.out.println(\"Error\"\
    );\n                break;\n        }\n        for (int i = 1; i < temp.size();\
    \ i++)\n            result = result + temp.get(i) * result;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxk01p9sj.java:47: error: unclosed character literal\n         \
    \   case '//':\n                 ^\n/tmp/tmpxk01p9sj.java:47: error: unclosed\
    \ character literal\n            case '//':\n                    ^\n/tmp/tmpxk01p9sj.java:48:\
    \ error: illegal start of expression\n                result = result + tempResult;\n\
    \                       ^\n/tmp/tmpxk01p9sj.java:48: error: : or -> expected\n\
    \                result = result + tempResult;\n                             \
    \               ^\n/tmp/tmpxk01p9sj.java:50: error: unclosed character literal\n\
    \            case '**':\n                 ^\n/tmp/tmpxk01p9sj.java:50: error:\
    \ unclosed character literal\n            case '**':\n                    ^\n\
    /tmp/tmpxk01p9sj.java:51: error: illegal start of expression\n               \
    \ result = result + tempResult;\n                       ^\n/tmp/tmpxk01p9sj.java:51:\
    \ error: : or -> expected\n                result = result + tempResult;\n   \
    \                                         ^\n8 errors\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ length = op.size();\n        long sum = 0;\n        long currentSum = 0;\n \
    \       for (int i = 0; i < length; i++) {\n            String operation = op.get(i);\n\
    \            currentSum = currentSum + operand.get(i);\n            if (operation.equals(\"\
    +\")) {\n                sum = sum + currentSum;\n            }\n            else\
    \ if (operation.equals(\"*\")) {\n                sum = sum * currentSum;\n  \
    \          }\n            else if (operation.equals(\"-\")) {\n              \
    \  sum = sum - currentSum;\n            }\n            else if (operation.equals(\"\
    //\")) {\n                sum = sum / (float)currentSum;\n            }\n    \
    \        else if (operation.equals(\"**\")) {\n                sum = sum * currentSum;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsn7wsuiz.java:44: error: incompatible types: possible lossy conversion\
    \ from float to long\n                sum = sum / (float)currentSum;\n       \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ First we get the operator and operand, we can use the length of both array list\
    \ to find \n        // the index to get the operator.\n        // We need to convert\
    \ the operand from integer array to long array.\n        long[] operandArray =\
    \ new long[operand.size()];\n        for(int i = 0; i < operandArray.length; i++){\n\
    \            operandArray[i] = operand.get(i);\n        }\n        \n        //\
    \ We need to convert the operator from string array to long array.\n        long[]\
    \ operatorArray = new long[op.size()];\n        for(int i = 0; i < operatorArray.length;\
    \ i++){\n            operatorArray[i] = Long.parseLong(op.get(i));\n        }\n\
    \        \n        // Then we get the result which will be store in result variable.\n\
    \        long result = 0;\n        // We also need to use the length of operator\
    \ array to find the index.\n        // We need to find the index for the first\
    \ operator.\n        int index = 0;\n        // The index of the operator array\
    \ which is equal to current index to get the current operator\n        int currentOperatorIndex\
    \ = 0;\n        // The index of the operand array which is equal to current index\
    \ to get the current operand\n        int currentOperandIndex = 0;\n        while(index\
    \ != operatorArray.length){\n            // If current index is equal to the length\
    \ of the operator array then we move to the next index\n            if(index ==\
    \ operatorArray.length){\n                index = 0;\n                continue;\n\
    \            }\n            // We check whether the current operator is equal\
    \ to the current operator array.\n            if(operatorArray[index] == currentOperatorIndex){\n\
    \                // We get the current operand.\n                long currentOperand\
    \ = operandArray[currentOperandIndex];\n                // We perform the operation\n\
    \                result = result + currentOperand * ((index + 1) * (currentOperatorIndex\
    \ - 1));\n                currentOperatorIndex++;\n            }\n           \
    \ // Otherwise we increment the index.\n            else{\n                index++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"**\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat Problem.doAlgebra(tmp6fcaqg6s.java:39)\n\tat Problem.main(tmp6fcaqg6s.java:73)\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //initialize\
    \ a long variable called result to 0\n        long result = 0;\n        //initialize\
    \ an int variable called j to 0\n        int j = 0;\n        //initialize a boolean\
    \ variable called flag to false\n        boolean flag = false;\n        //initialize\
    \ an int variable called n to 0\n        int n = 0;\n        //loop through each\
    \ element in the operator array list\n        for (String element : op) {\n  \
    \          //if the element equals one of the operators, then set flag to true\n\
    \            if (element.equals(\"+\"))\n                flag = true;\n      \
    \      else if (element.equals(\"-\"))\n                flag = true;\n       \
    \     else if (element.equals(\"*\"))\n                flag = true;\n        \
    \    else if (element.equals(\"//\"))\n                flag = true;\n        \
    \    else if (element.equals(\"**\"))\n                flag = true;\n        \
    \    else\n                flag = false;\n            //if the flag is true, then\
    \ j to 1\n            if (flag) {\n                j = 1;\n                flag\
    \ = false;\n            }\n            //if the flag is false, then increment\
    \ j to j + 1\n            else {\n                j++;\n                flag =\
    \ false;\n            }\n        }\n        //loop through each element in the\
    \ operand array list\n        for (int i = 0; i < operand.size(); i++) {\n   \
    \         //if the current element equals one of the operators, then set flag\
    \ to true\n            if (operand.get(i).equals(\"+\"))\n                flag\
    \ = true;\n            else if (operand.get(i).equals(\"-\"))\n              \
    \  flag = true;\n            else if (operand.get(i).equals(\"*\"))\n        \
    \        flag = true;\n            else if (operand.get(i).equals(\"//\"))\n \
    \               flag = true;\n            else if (operand.get(i).equals(\"**\"\
    ))\n                flag = true;\n            else\n                flag = false;\n\
    \            //if the flag is true, then n to 1\n            if (flag) {\n   \
    \             n = 1;\n                flag = false;\n            }\n         \
    \   //if the flag is false, then increment n to n + 1\n            else {\n  \
    \              n++;\n                flag = false;\n            }\n        }\n\
    \        //if the flag is true, then set result to 0\n        if (flag) {\n  \
    \          result = 0;\n            flag = false;\n        }\n        //if the\
    \ flag is false, then set result to the first element in operand array list\n\
    \        else {\n            result = operand.get(0);\n            flag = false;\n\
    \        }\n        //loop through each element in the operator array list\n \
    \       for (String element : op) {\n            //if the element equals one of\
    \ the operators, then set flag to true\n            if (element.equals(\"+\"))\n\
    \                flag = true;\n            else if (element.equals(\"-\"))\n \
    \               flag = true;\n            else if (element.equals(\"*\"))\n  \
    \              flag = true;\n            else if (element.equals(\"//\"))\n  \
    \              flag = true;\n            else if (element.equals(\"**\"))\n  \
    \              flag = true;\n            else\n                flag\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp99md_1id.java:112: error: not a statement\n                flag\n\
    \                ^\n/tmp/tmp99md_1id.java:112: error: ';' expected\n         \
    \       flag\n                    ^\n/tmp/tmp99md_1id.java:114: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[]\
    \ resArr = new long[operand.size()-1];\n        int i = 0, j = 0;\n        for(String\
    \ opStr : op) {\n            switch(opStr) {\n                case \"+\": resArr[i]\
    \ += operand.get(j++); break;\n                case \"-\": resArr[i] -= operand.get(j++);\
    \ break;\n                case \"*\": resArr[i] *= operand.get(j++); break;\n\
    \                case \"//\": resArr[i] /= operand.get(j++); break;\n        \
    \        case \"**\": resArr[i] **= operand.get(j++); break;\n               \
    \ default:\n                    System.err.println(\"invalid operator: \" + opStr);\n\
    \            }\n            i++;\n        }\n        return resArr[0];\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoza5c6q0.java:36: error: illegal start of expression\n        \
    \        case \"**\": resArr[i] **= operand.get(j++); break;\n               \
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[]\
    \ result;\n        boolean not = false;\n        int n = op.size();\n        int\
    \ m = operand.size() - 1;\n        if (m == 0) {\n            return 0;\n    \
    \    }\n        if (n == 1) {\n            // only 1\n            result = (long[])\
    \ operand.get(0);\n            return result[0];\n        }\n        List<Integer>\
    \ a = new ArrayList<>();\n        List<Integer> b = new ArrayList<>();\n     \
    \   Map<String, List<Integer>> aMap = new HashMap<>();\n        Map<String, List<Integer>>\
    \ bMap = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n           \
    \ String op = op.get(i);\n            int len = a.size();\n            List<Integer>\
    \ aValue;\n            if (!aMap.containsKey(op)) {\n                aValue =\
    \ Arrays.asList();\n                aMap.put(op, aValue);\n            } else\
    \ {\n                aValue = aMap.get(op);\n            }\n            int index\
    \ = aValue.size();\n            if (a.size() > 1) {\n                aValue.add((long)\
    \ operand.get(i));\n            } else {\n                aValue.add((long) operand.get(i));\n\
    \            }\n            int index2 = aValue.size() - 1;\n            if (bMap.containsKey(op))\
    \ {\n                List<Integer> bValue = bMap.get(op);\n                int\
    \ b = bValue.size();\n                List<Integer> bIndex;\n                if\
    \ (b.size() == 1) {\n                    bIndex = Arrays.asList();\n         \
    \           bIndex.add(index2);\n                } else {\n                  \
    \  bIndex = bValue.size() - 1;\n                }\n                bValue.add(index,\
    \ index2);\n            } else {\n                List<Integer> bIndex = Arrays.asList(index2);\n\
    \                bMap.put(op, Arrays.asList(bIndex));\n            }\n       \
    \ }\n        aMap = null;\n        bMap = null;\n        // create expression\
    \ tree\n        // create tree with a\n        TreeNode<List<Integer>> aTree =\
    \ new TreeNode<List<Integer>>(a);\n        // create tree with b\n        TreeNode<List<Integer>>\
    \ bTree = new TreeNode<List<Integer>>(b);\n        // create expression with a\n\
    \        ExpressionNode<List<Integer>> aExp = new ExpressionNode<>(aTree);\n \
    \       // create expression with b\n        ExpressionNode<List<Integer>> bExp\
    \ = new ExpressionNode<>(bTree);\n        // create expression expression\n  \
    \      ExpressionNode<List<Integer>> exp = new ExpressionNode<>(aExp, bExp);\n\
    \        // create expression with parenthesis\n        ExpressionNode<List<Integer>>\
    \ expParen = new ExpressionNode<>(aExp, bExp);\n        // create expression aExp\n\
    \        ExpressionNode<List<Integer>> aExp2 = new ExpressionNode<>(aTree);\n\
    \        // create expression b\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9dlawvo.java:37: error: incompatible types: Long cannot be converted\
    \ to long[]\n            result = (long[]) operand.get(0);\n                 \
    \                        ^\n/tmp/tmpv9dlawvo.java:45: error: variable op is already\
    \ defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n           \
    \ String op = op.get(i);\n                   ^\n/tmp/tmpv9dlawvo.java:45: error:\
    \ cannot find symbol\n            String op = op.get(i);\n                   \
    \       ^\n  symbol:   method get(int)\n  location: variable op of type String\n\
    /tmp/tmpv9dlawvo.java:56: error: incompatible types: long cannot be converted\
    \ to Integer\n                aValue.add((long) operand.get(i));\n           \
    \                ^\n/tmp/tmpv9dlawvo.java:58: error: incompatible types: long\
    \ cannot be converted to Integer\n                aValue.add((long) operand.get(i));\n\
    \                           ^\n/tmp/tmpv9dlawvo.java:63: error: variable b is\
    \ already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n   \
    \             int b = bValue.size();\n                    ^\n/tmp/tmpv9dlawvo.java:65:\
    \ error: int cannot be dereferenced\n                if (b.size() == 1) {\n  \
    \                   ^\n/tmp/tmpv9dlawvo.java:69: error: incompatible types: int\
    \ cannot be converted to List<Integer>\n                    bIndex = bValue.size()\
    \ - 1;\n                                           ^\n/tmp/tmpv9dlawvo.java:74:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              bMap.put(op, Arrays.asList(bIndex));\n                    ^\n \
    \   equality constraints: Integer\n    lower bounds: List<Integer>\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    /tmp/tmpv9dlawvo.java:81: error: cannot find symbol\n        TreeNode<List<Integer>>\
    \ aTree = new TreeNode<List<Integer>>(a);\n        ^\n  symbol:   class TreeNode\n\
    \  location: class Problem\n/tmp/tmpv9dlawvo.java:81: error: cannot find symbol\n\
    \        TreeNode<List<Integer>> aTree = new TreeNode<List<Integer>>(a);\n   \
    \                                         ^\n  symbol"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ initialize sum and prod to 0\n        long sum, prod;\n        long result =\
    \ 0;\n\n        // The length of the operator array list is equal to the length\
    \ of operand array list minus one.\n        /*\n         * The index of the operator\
    \ list is the index of the last element in the operator array\n         * \n \
    \        * The index of the operand list is the index of the first element in\
    \ the operand array \n         * \n         * The index of empty space is -1\n\
    \        */\n        for (int i = 0, n = op.size(); i < n; i = i + 1) {\n    \
    \        // get current operator and operand\n            String curr_op = op.get(i);\
    \ \n            Long curr_operand = operand.get(i);\n            // evaluate current\
    \ operator\n            switch (curr_op) {\n                case \"+\":\n    \
    \                sum = sum + curr_operand;\n                    break;\n     \
    \           case \"-\":\n                    sum = sum - curr_operand;\n     \
    \               break;\n                case \"*\":\n                    prod\
    \ = prod * curr_operand;\n                    break;\n                case \"\
    /\":\n                    if (prod != 0) {\n                        sum = sum\
    \ / prod;\n                    }\n                    break;\n               \
    \ case \"//\":\n                    if (prod != 0) {\n                       \
    \ sum = sum / prod;\n                    } else {\n                        sum\
    \ = sum;\n                    }\n                    break;\n                case\
    \ \"**\":\n                    prod = prod * curr_operand;\n                 \
    \   break;\n                default:\n                    System.out.println(\"\
    Not a valid operation!\");\n                    break;\n            }\n      \
    \  }\n\n        // return result\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbotzfv6y.java:47: error: variable sum might not have been initialized\n\
    \                    sum = sum + curr_operand;\n                          ^\n\
    /tmp/tmpbotzfv6y.java:50: error: variable sum might not have been initialized\n\
    \                    sum = sum - curr_operand;\n                          ^\n\
    /tmp/tmpbotzfv6y.java:53: error: variable prod might not have been initialized\n\
    \                    prod = prod * curr_operand;\n                           ^\n\
    /tmp/tmpbotzfv6y.java:56: error: variable prod might not have been initialized\n\
    \                    if (prod != 0) {\n                        ^\n/tmp/tmpbotzfv6y.java:57:\
    \ error: variable sum might not have been initialized\n                      \
    \  sum = sum / prod;\n                              ^\n/tmp/tmpbotzfv6y.java:61:\
    \ error: variable prod might not have been initialized\n                    if\
    \ (prod != 0) {\n                        ^\n/tmp/tmpbotzfv6y.java:62: error: variable\
    \ sum might not have been initialized\n                        sum = sum / prod;\n\
    \                              ^\n/tmp/tmpbotzfv6y.java:64: error: variable sum\
    \ might not have been initialized\n                        sum = sum;\n      \
    \                        ^\n/tmp/tmpbotzfv6y.java:68: error: variable prod might\
    \ not have been initialized\n                    prod = prod * curr_operand;\n\
    \                           ^\n/tmp/tmpbotzfv6y.java:77: error: variable sum might\
    \ not have been initialized\n        return sum;\n               ^\n10 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < operand.size() - 1; i++) {\n       \
    \     try {\n                switch(op.get(i)) {\n                    case \"\
    +\":\n                        result += operand.get(i);\n                    \
    \    break;\n                    case \"-\":\n                        result -=\
    \ operand.get(i);\n                        break;\n                    case \"\
    *\":\n                        result *= operand.get(i);\n                    \
    \    break;\n                    case \"//\":\n                        result\
    \ /= operand.get(i);\n                        break;\n                    case\
    \ \"**\":\n                        result **= operand.get(i);\n              \
    \          break;\n                }\n            } catch (IndexOutOfBoundsException\
    \ e) {\n                System.out.println(e.getMessage());\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwmtsqmry.java:45: error: illegal start of expression\n        \
    \                result **= operand.get(i);\n                                ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 1;\n        for (String opName : op) {\n            long temp = 1;\n\
    \            for(long opVal : operand) {\n                switch (opName) {\n\
    \                    case \"+\":\n                        temp += opVal;\n   \
    \                     break;\n                    case \"-\":\n              \
    \          temp -= opVal;\n                        break;\n                  \
    \  case \"*\":\n                        temp *= opVal;\n                     \
    \   break;\n                    case \"//\":\n                        temp //=\
    \ opVal;\n                        break;\n                    case \"**\":\n \
    \                       temp *= opVal;\n                        break;\n     \
    \           }\n            }\n            result = temp;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpunnt3us6.java:43: error: not a statement\n                    \
    \    temp //= opVal;\n                        ^\n/tmp/tmpunnt3us6.java:43: error:\
    \ ';' expected\n                        temp //= opVal;\n                    \
    \        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long resultLong = 0;\n        // Get the\
    \ operator and operand lists.\n        ArrayList<String> operator = op;\n    \
    \    ArrayList<Long> operand2 = operand;\n\n        for (int i = 0; i < operator.size();\
    \ ++i) {\n            String currentOperator = operator.get(i);\n            long\
    \ currentOperand = operand2.get(i);\n\n            // Get the operator.\n    \
    \        switch (currentOperator) {\n                case \"+\":\n           \
    \         resultLong += currentOperand;\n                    break;\n        \
    \        case \"-\":\n                    resultLong -= currentOperand;\n    \
    \                break;\n                case \"*\":\n                    resultLong\
    \ *= currentOperand;\n                    break;\n                case \"//\"\
    :\n                    resultLong /= currentOperand;\n                    break;\n\
    \                case \"**\":\n                    resultLong **= currentOperand;\n\
    \                    break;\n            }\n        }\n        return resultLong;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctyg75fk.java:53: error: illegal start of expression\n        \
    \            resultLong **= currentOperand;\n                                ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ size = op.size();\n        long result = 0;\n        int i = 0;\n        int\
    \ j = size - 1;\n        while (i <= j) {\n            switch (op.get(i)) {\n\
    \                case '+':\n                    result += (operand.get(j) * operand.get(j\
    \ + 1));\n                    i++;\n                    break;\n             \
    \   case '*':\n                    result += (operand.get(j) * operand.get(i));\n\
    \                    i++;\n                    break;\n                case '-':\n\
    \                    result -= (operand.get(j) * operand.get(i));\n          \
    \          i--;\n                    break;\n                case '/':\n     \
    \               result /= (operand.get(j) * operand.get(i));\n               \
    \     j--;\n                    break;\n                case '//':\n         \
    \           result /= (operand.get(j) * operand.get(i));\n                   \
    \ j--;\n                    result = (int) result;\n                    break;\n\
    \                case '**':\n                    result /= (operand.get(j) * operand.get(i));\n\
    \                    j--;\n                    break;\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyexie47f.java:50: error: unclosed character literal\n         \
    \       case '//':\n                     ^\n/tmp/tmpyexie47f.java:50: error: unclosed\
    \ character literal\n                case '//':\n                        ^\n/tmp/tmpyexie47f.java:51:\
    \ error: illegal start of expression\n                    result /= (operand.get(j)\
    \ * operand.get(i));\n                           ^\n/tmp/tmpyexie47f.java:51:\
    \ error: : or -> expected\n                    result /= (operand.get(j) * operand.get(i));\n\
    \                                                               ^\n/tmp/tmpyexie47f.java:55:\
    \ error: unclosed character literal\n                case '**':\n            \
    \         ^\n/tmp/tmpyexie47f.java:55: error: unclosed character literal\n   \
    \             case '**':\n                        ^\n/tmp/tmpyexie47f.java:56:\
    \ error: illegal start of expression\n                    result /= (operand.get(j)\
    \ * operand.get(i));\n                           ^\n/tmp/tmpyexie47f.java:56:\
    \ error: : or -> expected\n                    result /= (operand.get(j) * operand.get(i));\n\
    \                                                               ^\n8 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() >= operand.size() - 1) {\n            long res = 0;\n           \
    \ for (int i = 0; i < op.size() - 1; i++) {\n                double sum = 0;\n\
    \                for (int j = 0; j < operand.size() - 1 - i; j++) {\n        \
    \            double result = Double.parseDouble(operand.get(j));\n           \
    \         if (op.equals(\"+\")) {\n                        sum += result;\n  \
    \                  } else if (op.equals(\"-\")) {\n                        sum\
    \ -= result;\n                    } else if (op.equals(\"*\")) {\n           \
    \             sum *= result;\n                    } else if (op.equals(\"//\"\
    )) {\n                        sum = Math.floorDiv(result, sum);\n            \
    \        } else if (op.equals(\"**\")) {\n                        sum = Math.pow(result,\
    \ sum);\n                    } else {\n                        System.out.println(\"\
    ERROR: Wrong operator \" + op);\n                    }\n                }\n  \
    \              res = sum + res;\n            }\n            return res;\n    \
    \    } else {\n            System.out.println(\"ERROR: Wrong operator \" + op);\n\
    \            return 0;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1g5ljpl.java:33: error: incompatible types: Long cannot be converted\
    \ to String\n                    double result = Double.parseDouble(operand.get(j));\n\
    \                                                                  ^\n/tmp/tmpb1g5ljpl.java:41:\
    \ error: no suitable method found for floorDiv(double,double)\n              \
    \          sum = Math.floorDiv(result, sum);\n                               \
    \   ^\n    method Math.floorDiv(int,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from double to int)\n    method Math.floorDiv(long,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ double to long)\n    method Math.floorDiv(long,long) is not applicable\n   \
    \   (argument mismatch; possible lossy conversion from double to long)\n/tmp/tmpb1g5ljpl.java:48:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \               res = sum + res;\n                          ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // Check operand\n        if (operand.size() != op.size()\
    \ - 1) {\n            System.out.println(\"Invalid number of operands. Invalid\
    \ numbers of operands and operators.\");\n            return 0;\n        }\n\n\
    \        // Check operators\n        for (int i = 0; i < op.size() - 1; i++) {\n\
    \            String operName = op.get(i);\n            String operandName = op.get(i\
    \ + 1);\n            Class<?> operandClass = operand.get(i).getClass();\n    \
    \        Class<?> operClass = op.get(i + 1).getClass();\n\n            if (operandClass\
    \ == Integer.class) {\n                Integer operandInt = operand.get(i);\n\
    \                Integer operInt = op.get(i + 1);\n                if (operandInt\
    \ == 0 && operInt == 0) {\n                    // Just do nothing\n          \
    \          continue;\n                }\n                if (operandInt == 0 ||\
    \ operInt == 0) {\n                    System.out.println(\"Invalid operands or\
    \ operators. Invalid numbers of operands or operators.\");\n                 \
    \   return 0;\n                }\n                if (operClass.equals(String.class))\
    \ {\n                    try {\n                        result = (Long) operandInt.longValue();\n\
    \                    } catch (Exception ex) {\n                        System.out.println(\"\
    Invalid operands or operators. Invalid numbers of operands or operators.\");\n\
    \                        return 0;\n                    }\n                } else\
    \ if (operClass.equals(Integer.class)) {\n                    try {\n        \
    \                result = (Long) operandInt.intValue();\n                    }\
    \ catch (Exception ex) {\n                        System.out.println(\"Invalid\
    \ operands or operators. Invalid numbers of operands or operators.\");\n     \
    \                   return 0;\n                    }\n                } else if\
    \ (operClass.equals(Long.class)) {\n                    try {\n              \
    \          result = (Long) operandInt.longValue();\n                    } catch\
    \ (Exception ex) {\n                        System.out.println(\"Invalid operands\
    \ or operators. Invalid numbers of operands or operators.\");\n              \
    \          return 0;\n                    }\n                } else if (operClass.equals(Double.class))\
    \ {\n                    try {\n                        result = (Long) operandInt.doubleValue();\n\
    \                    } catch (Exception ex) {\n                        System.out.println(\"\
    Invalid operands or operators. Invalid numbers of operands or operators.\");\n\
    \                        return 0;\n                    }\n                } else\
    \ if (operClass.equals(Float.class)) {\n                    try {\n          \
    \              result = (Long) operandInt.floatValue();\n                    }\
    \ catch (Exception ex) {\n                        System.out.println(\"Invalid\
    \ operands or operators. Invalid numbers of operands or operators.\");\n     \
    \                   return 0;\n                    }\n                } else if\
    \ (operClass.equals(BigInteger.class)) {\n                    try {\n        \
    \                result = (Long) operandInt.longValue();\n                   \
    \ } catch (Exception ex) {\n                        System.out.println(\"Invalid\
    \ operands or operators. Invalid numbers of operands or operators.\");\n     \
    \                   return 0;\n                    }\n                } else {\n\
    \                    System.out.println(\"Invalid operands or operators. Invalid\
    \ numbers of operands or operators.\");\n                    return 0;\n     \
    \           }\n            } else if (operandClass == Long.class) {\n        \
    \        Long \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0z5lnkmq.java:100: error: not a statement\n                Long\
    \ \n                ^\n/tmp/tmp0z5lnkmq.java:100: error: ';' expected\n      \
    \          Long \n                    ^\n/tmp/tmp0z5lnkmq.java:102: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int i = 0;\n        while(i < op.size() - 1) {\n      \
    \      String opType = op.get(i);\n            long operandValue = 0;\n      \
    \      for(int j = i + 1; j < op.size(); j++) {\n                if(opType.equals(op.get(j)))\
    \ {\n                    operandValue = operand.get(j);\n                }\n \
    \           }\n            try {\n                switch (opType) {\n        \
    \            case \"+\": result += operandValue; break;\n                    case\
    \ \"-\": result -= operandValue; break;\n                    case \"*\": result\
    \ *= operandValue; break;\n                    case \"/\": result /= operandValue;\
    \ break;\n                    case \"//\": result //= operandValue; break;\n \
    \                   case \"**\": result **= operandValue; break;\n           \
    \         default: System.out.println(\"Invalid operator\");\n               \
    \ }\n            }\n            catch (ArithmeticException e) {\n            \
    \    System.out.println(\"Invalid operand\");\n            }\n            i++;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwdb130n.java:44: error: not a statement\n                    case\
    \ \"//\": result //= operandValue; break;\n                               ^\n\
    /tmp/tmpqwdb130n.java:44: error: ';' expected\n                    case \"//\"\
    : result //= operandValue; break;\n                                     ^\n/tmp/tmpqwdb130n.java:45:\
    \ error: illegal start of expression\n                    case \"**\": result\
    \ **= operandValue; break;\n                                       ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[]\
    \ opArray = op.toArray(new String[0]);\n        long[] operandArray = operand.toArray(new\
    \ Long[0]);\n\n        long result = 0;\n\n        for(int i = 0; i < opArray.length;\
    \ i++) {\n            switch(opArray[i]) {\n                case \"+\":\n    \
    \                result += operandArray[i];\n                    break;\n    \
    \            case \"-\":\n                    result -= operandArray[i];\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ *= operandArray[i];\n                    break;\n                case \"//\"\
    :\n                    result /= operandArray[i];\n                    break;\n\
    \                case \"**\":\n                    result *= operandArray[i];\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppumr_0ni.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        long[] opArray = op.toArray(new String[0]);\n\
    \                                   ^\n    lower bounds: long,Object\n    lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toArray(T[])\n/tmp/tmppumr_0ni.java:29: error: incompatible types:\
    \ inference variable T has incompatible bounds\n        long[] operandArray =\
    \ operand.toArray(new Long[0]);\n                                            \
    \ ^\n    lower bounds: long,Object\n    lower bounds: Long\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>toArray(T[])\n/tmp/tmppumr_0ni.java:34:\
    \ error: patterns in switch statements are a preview feature and are disabled\
    \ by default.\n            switch(opArray[i]) {\n                  ^\n  (use --enable-preview\
    \ to enable patterns in switch statements)\n/tmp/tmppumr_0ni.java:35: error: incompatible\
    \ types: String cannot be converted to long\n                case \"+\":\n   \
    \                  ^\n/tmp/tmppumr_0ni.java:38: error: incompatible types: String\
    \ cannot be converted to long\n                case \"-\":\n                 \
    \    ^\n/tmp/tmppumr_0ni.java:41: error: incompatible types: String cannot be\
    \ converted to long\n                case \"*\":\n                     ^\n/tmp/tmppumr_0ni.java:44:\
    \ error: incompatible types: String cannot be converted to long\n            \
    \    case \"//\":\n                     ^\n/tmp/tmppumr_0ni.java:47: error: incompatible\
    \ types: String cannot be converted to long\n                case \"**\":\n  \
    \                   ^\n8 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> operator = Arrays.asList(op.stream().toArray(String[]::new));\n\
    \        ArrayList<String> operands = new ArrayList<>();\n        ArrayList<String>\
    \ tokens = new ArrayList<>();\n        operands.add(operand.get(0));\n       \
    \ tokens.add(operand.get(0));\n        for (int i = 1; i < operand.size(); i++)\
    \ {\n            operands.add(operand.get(i));\n            tokens.add(operand.get(i));\n\
    \        }\n        while (operator.size() > 0) {\n            String op = operator.remove(0);\n\
    \            String operand = tokens.get(0) + op + tokens.get(1);\n          \
    \  tokens.remove(0);\n            tokens.remove(1);\n            operands.add(operand);\n\
    \        }\n        for (int i = 0; i < tokens.size(); i++) {\n            result\
    \ += Long.valueOf(tokens.get(i));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz45098x0.java:29: error: incompatible types: no instance(s) of\
    \ type variable(s) T,A exist so that List<T> conforms to ArrayList<String>\n \
    \       ArrayList<String> operator = Arrays.asList(op.stream().toArray(String[]::new));\n\
    \                                                  ^\n  where T,A are type-variables:\n\
    \    T extends Object declared in method <T>asList(T...)\n    A extends Object\
    \ declared in method <A>toArray(IntFunction<A[]>)\n/tmp/tmpz45098x0.java:32: error:\
    \ incompatible types: Long cannot be converted to String\n        operands.add(operand.get(0));\n\
    \                                ^\n/tmp/tmpz45098x0.java:33: error: incompatible\
    \ types: Long cannot be converted to String\n        tokens.add(operand.get(0));\n\
    \                              ^\n/tmp/tmpz45098x0.java:35: error: incompatible\
    \ types: Long cannot be converted to String\n            operands.add(operand.get(i));\n\
    \                                    ^\n/tmp/tmpz45098x0.java:36: error: incompatible\
    \ types: Long cannot be converted to String\n            tokens.add(operand.get(i));\n\
    \                                  ^\n/tmp/tmpz45098x0.java:39: error: variable\
    \ op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \            String op = operator.remove(0);\n                   ^\n/tmp/tmpz45098x0.java:40:\
    \ error: variable operand is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \            String operand = tokens.get(0) + op + tokens.get(1);\n          \
    \         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ TODO: Implement this function\n        long result = 0;\n        int length\
    \ = op.size();\n        for(int i=0; i<length-1; i++) {\n            if(op.contains(op.get(i)))\
    \ {\n                if(i+1 < length) {\n                    result += operand.get(i);\n\
    \                    result += operand.get(i+1);\n                } else {\n \
    \                   result += operand.get(i);\n                }\n           \
    \ } else {\n                if(i+1 < length) {\n                    result -=\
    \ operand.get(i);\n                    result -= operand.get(i+1);\n         \
    \       } else {\n                    result -= operand.get(i);\n            \
    \    }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbncf3c02.java:51)\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ nOp = op.size(); // number of operators in operator list\n        int nOpLen\
    \ = nOp - 1; // length of operator list\n        int nO = 0, nOLen = 0;\n    \
    \    int n = 0, nLen = 0;\n\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n\n        // if nOp < 2,\
    \ return 0.\n        if(nOp < 2) return 0;\n\n        // if nOp > 2 return 0.\n\
    \        if(nOp > 2) return 0;\n\n        // set nOLen to length of operator list.\n\
    \        nOpLen = nOp;\n\n        // set the length of operand list.\n       \
    \ nLen = operand.get(0).size();\n\n        // if nOpLen > nLen then set nOLen\
    \ to nLen and nO to 0.\n        if(nOpLen > nLen) {\n            nOpLen = nLen;\n\
    \            nO = 0;\n        }\n\n        // set nOLen to length of operator\
    \ list.\n        nOpLen = nOp;\n\n        // iterate the number of operators.\n\
    \        for(int i=0; i < nOpLen; i++) {\n            if(i == 0) {\n         \
    \       temp.add(op.get(i));\n            }\n            else {\n            \
    \    temp.add(op.get(i));\n            }\n        }\n\n        // iterate the\
    \ number of operands.\n        for(int j=nOpLen; j < nLen; j++) {\n          \
    \  if(i == 0) {\n                temp2.add(operand.get(j));\n            }\n \
    \           else {\n                temp2.add(operand.get(j));\n            }\n\
    \        }\n\n        // iterate the number of operands.\n        for(int j=0;\
    \ j < nLen; j++) {\n            if(i == 0) {\n                temp2.add(operand.get(j));\n\
    \            }\n            else {\n                temp2.add(operand.get(j));\n\
    \            }\n        }\n\n        // iterate the number of operators.\n   \
    \     for(int i=0; i < nOpLen; i++) {\n            if(i == 0) {\n            \
    \    temp2.add(op.get(i));\n            }\n            else {\n              \
    \  temp2.add(op.get(i));\n            }\n        }\n\n        long result = 0;\n\
    \        for(int j=0; j < nLen; j++) {\n            result = result + (nOpLen\
    \ - 1) * temp.get(j) + temp2.get(j);\n        }\n\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwlui2zc.java:46: error: cannot find symbol\n        nLen = operand.get(0).size();\n\
    \                             ^\n  symbol:   method size()\n  location: class\
    \ Long\n/tmp/tmphwlui2zc.java:69: error: cannot find symbol\n            if(i\
    \ == 0) {\n               ^\n  symbol:   variable i\n  location: class Problem\n\
    /tmp/tmphwlui2zc.java:79: error: cannot find symbol\n            if(i == 0) {\n\
    \               ^\n  symbol:   variable i\n  location: class Problem\n/tmp/tmphwlui2zc.java:90:\
    \ error: incompatible types: String cannot be converted to Long\n            \
    \    temp2.add(op.get(i));\n                                ^\n/tmp/tmphwlui2zc.java:93:\
    \ error: incompatible types: String cannot be converted to Long\n            \
    \    temp2.add(op.get(i));\n                                ^\n/tmp/tmphwlui2zc.java:99:\
    \ error: bad operand types for binary operator '*'\n            result = result\
    \ + (nOpLen - 1) * temp.get(j) + temp2.get(j);\n                             \
    \              ^\n  first type:  int\n  second type: String\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long\
    \ result = 0;\n        boolean isNegative = false;\n        for(int i = 0; i <\
    \ op.size(); i++) {\n            if(op.size() == 1) {\n                isNegative\
    \ = false;\n            }\n            if(isNegative) {\n                result\
    \ = result * -1;\n                isNegative = false;\n            }\n       \
    \     switch(op.get(i)) {\n                case \"+\":\n                    result\
    \ = result + operand.get(i);\n                    break;\n                case\
    \ \"-\":\n                    result = result - operand.get(i);\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand.get(i);\n                    break;\n                case \"//\":\n\
    \                    result = result / operand.get(i);\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand.get(i);\n\
    \                    break;\n            }\n        }\n        if(isNegative)\
    \ {\n            result = result * -1;\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprajohdx9.java:52: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        if (op.size() < operand.size() - 1) {\n            throw\
    \ new RuntimeException(\"operator array list length less than operand array list\
    \ length\");\n        }\n\n        List<String> operator = op.subList(0, op.size()\
    \ - 1);\n        List<Long> operand2 = operand.subList(0, operand.size() - 1);\n\
    \n        for (String e : operator) {\n            if (e.equals(\"+\")) {\n  \
    \              long tempVal1 = operand.get(0);\n                long tempVal2\
    \ = operand2.get(0);\n                result = tempVal1 + tempVal2;\n        \
    \        operand.remove(0);\n                operand2.remove(0);\n           \
    \ } else if (e.equals(\"*\")) {\n                long tempVal1 = operand.get(0);\n\
    \                long tempVal2 = operand2.get(0);\n                result = tempVal1\
    \ * tempVal2;\n                operand.remove(0);\n                operand2.remove(0);\n\
    \            } else if (e.equals(\"-\")) {\n                long tempVal1 = operand.get(0);\n\
    \                long tempVal2 = operand2.get(0);\n                result = tempVal1\
    \ - tempVal2;\n                operand.remove(0);\n                operand2.remove(0);\n\
    \            } else if (e.equals(\"/\")) {\n                long tempVal1 = operand.get(0);\n\
    \                long tempVal2 = operand2.get(0);\n                result = tempVal1\
    \ / tempVal2;\n                operand.remove(0);\n                operand2.remove(0);\n\
    \            } else if (e.equals(\"//\")) {\n                long tempVal1 = operand.get(0);\n\
    \                long tempVal2 = operand2.get(0);\n                result = tempVal1\
    \ * (tempVal1 / tempVal2);\n                operand.remove(0);\n             \
    \   operand2.remove(0);\n            } else if (e.equals(\"**\")) {\n        \
    \        long tempVal1 = operand.get(0);\n                long tempVal2 = operand2.get(0);\n\
    \                result = tempVal1 ** tempVal2;\n                operand.remove(0);\n\
    \                operand2.remove(0);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxqrg7ir.java:70: error: illegal start of expression\n        \
    \        result = tempVal1 ** tempVal2;\n                                   ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int numOperator = op.size();\n        int numOperand =\
    \ operand.size();\n        HashMap<String, Long> map = new HashMap<>();\n    \
    \    for (int i = 0; i < numOperator; i++) {\n            String s = op.get(i);\n\
    \            if (!map.containsKey(s)) {\n                map.put(s, Long.valueOf(0));\n\
    \            }\n            map.put(s, map.get(s) + operand.get(i));\n       \
    \ }\n        for (String key : map.keySet()) {\n            result += map.get(key);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu6m8f4d.java:45)\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        boolean\
    \ opFound = false;\n        boolean opFinished = false;\n        long ans = 0;\n\
    \        String opVal = op.get(0);\n        String op2 = op.get(1);\n\n      \
    \  ArrayList<Long> numArray = new ArrayList<>();\n        numArray.add(operand.get(0));\n\
    \        numArray.add(operand.get(1));\n\n        ArrayList<Long> sumArray = new\
    \ ArrayList<>();\n\n        for (int i = 0; i < op.size(); i++) {\n          \
    \  if (opVal.equals(op.get(i))) {\n                opFound = true;\n         \
    \       sumArray.add(numArray.get(i));\n            } else if (opVal.equals(op2.get(i)))\
    \ {\n                opFound = true;\n                sumArray.add(numArray.get(i));\n\
    \                opFinished = true;\n            }\n        }\n\n        if (opFound)\
    \ {\n            sumArray.add(numArray.get(2));\n            sumArray.add(numArray.get(3));\n\
    \n            boolean firstOp = false;\n            boolean secondOp = false;\n\
    \            boolean first = true;\n            boolean second = true;\n     \
    \       int num;\n            long sum = 0;\n            long temp = 0;\n\n  \
    \          for (int i = 0; i < sumArray.size(); i++) {\n                if (!opFinished)\
    \ {\n                    firstOp = true;\n                }\n\n              \
    \  if (first) {\n                    num = sumArray.get(i);\n                \
    \    if (i == 0) {\n                        first = second;\n                \
    \        sumArray.set(i, num);\n                        secondOp = true;\n   \
    \                 }\n                    sum -= num;\n                    temp\
    \ = sum;\n                } else if (second) {\n                    num = sumArray.get(i);\n\
    \                    if (i == 0) {\n                        first = second;\n\
    \                        sumArray.set(i, num);\n                        secondOp\
    \ = true;\n                    }\n                    sum += num;\n          \
    \          temp = sum;\n                } else {\n                    sum += sumArray.get(i);\n\
    \                }\n            }\n\n            sum = temp + sum;\n         \
    \   ans = sum;\n        }\n\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55p7q3xf.java:44: error: cannot find symbol\n            } else\
    \ if (opVal.equals(op2.get(i))) {\n                                       ^\n\
    \  symbol:   method get(int)\n  location: variable op2 of type String\n/tmp/tmp55p7q3xf.java:69:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \     num = sumArray.get(i);\n                                      ^\n/tmp/tmp55p7q3xf.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \         sumArray.set(i, num);\n                                        ^\n/tmp/tmp55p7q3xf.java:78:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \     num = sumArray.get(i);\n                                      ^\n/tmp/tmp55p7q3xf.java:81:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \         sumArray.set(i, num);\n                                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n5 errors\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int i = 0;\n        long carry = 0;\n        int index\
    \ = op.size() - 1;\n\n        for (int j = 0; j < op.size(); j++) {\n        \
    \    String op1 = op.get(i + 1);\n            String op2 = op.get(j);\n      \
    \      switch (op1) {\n                case \"+\":\n                    result\
    \ = result + (long) operand.get(index--) + (long) operand.get(j--);\n        \
    \            break;\n                case \"-\":\n                    result =\
    \ result - (long) operand.get(index--) - (long) operand.get(j--);\n          \
    \          break;\n                case \"*\":\n                    result = result\
    \ * (long) operand.get(index--) * (long) operand.get(j--);\n                 \
    \   break;\n                case \"//\":\n                    result = result\
    \ * (long) operand.get(index--) / (long) operand.get(j--);\n                 \
    \   break;\n                case \"**\":\n                    result = result\
    \ * (long) operand.get(index--) ** (long) operand.get(j--);\n                \
    \    break;\n            }\n            carry = result % (long) Math.pow(10, j);\n\
    \            result = result - (long) result * (long) Math.pow(10, j);\n     \
    \       if (carry > 0) {\n                result += (long) Math.pow(10, j);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7k6g5oz.java:50: error: illegal start of expression\n        \
    \            result = result * (long) operand.get(index--) ** (long) operand.get(j--);\n\
    \                                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            char\
    \ c = op.get(i).charAt(0);\n            String op = op.get(i);\n            switch(c){\n\
    \                case '+':\n                    result += operand.get(i);\n  \
    \                  break;\n                case '-':\n                    result\
    \ -= operand.get(i);\n                    break;\n                case '*':\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \               case '/':\n                    result /= operand.get(i);\n   \
    \                 break;\n                case '^':\n                    result\
    \ %= operand.get(i);\n                    break;\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1upf4cun.java:31: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp1upf4cun.java:31: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            switch\
    \ (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"/\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"%\":\n                   \
    \ result %= operand.get(i);\n                    break;\n                case\
    \ \"^\":\n                    result **= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result = Math.pow(operand.get(i),\
    \ operand.get(i));\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55qfuy25.java:47: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            String\
    \ currOp = op.get(i);\n            long currOperand = operand.get(i);\n      \
    \      try {\n                currOperand = currOperand * (currOp == \"**\" ?\
    \ Math.pow(currOperand, 2L) : 1L);\n            } catch (Exception e) {\n    \
    \            currOperand = 0L;\n                e.printStackTrace();\n       \
    \     }\n            if (currOp == \"+\") {\n                result = result +\
    \ currOperand;\n            } else if (currOp == \"-\") {\n                result\
    \ = result - currOperand;\n            } else if (currOp == \"*\") {\n       \
    \         result = result + currOperand;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6zr9u83x.java:33: error: incompatible types: possible lossy conversion\
    \ from double to long\n                currOperand = currOperand * (currOp ==\
    \ \"**\" ? Math.pow(currOperand, 2L) : 1L);\n                                \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = 0;\n        for(String op1 : op)\n            for(Long op2 : operand)\n\
    \                switch(op1) {\n                    case '+':\n              \
    \          res = res + op2;\n                        break;\n                \
    \    case '*':\n                        res = res * op2;\n                   \
    \     break;\n                    case '-':\n                        res = res\
    \ - op2;\n                        break;\n                    case '/':\n    \
    \                    res = res / op2;\n                        break;\n      \
    \              case '%':\n                        res = res % op2;\n         \
    \               break;\n                    case '^':\n                      \
    \  res = res ^ op2;\n                        break;\n                    case\
    \ '**':\n                        res = Math.pow(res, op2);\n                 \
    \       break;\n                }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6tooi8i.java:50: error: unclosed character literal\n         \
    \           case '**':\n                         ^\n/tmp/tmpa6tooi8i.java:50:\
    \ error: unclosed character literal\n                    case '**':\n        \
    \                    ^\n/tmp/tmpa6tooi8i.java:51: error: illegal start of expression\n\
    \                        res = Math.pow(res, op2);\n                         \
    \   ^\n/tmp/tmpa6tooi8i.java:51: error: : or -> expected\n                   \
    \     res = Math.pow(res, op2);\n                                            \
    \    ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long>\
    \ newOp = new ArrayList<Long>();\n        int n = op.size();\n        int m =\
    \ operand.size();\n        long result = 0;\n        // Check for multiplication\
    \ \n        if (op.contains(\"*\")) {\n            for (int i = 0; i < m - 1;\
    \ i++) {\n                result = result + operand.get(i) * operand.get(i + m);\n\
    \            }\n            return result;\n        }\n        // Check for subtraction\n\
    \        else if (op.contains(\"-\")) {\n            int i = n - 1;\n        \
    \    while (i >= 0) {\n                result = result + operand.get(i) - operand.get(i\
    \ + 1);\n                i--;\n            }\n            return result;\n   \
    \     }\n        // Check for addition\n        else if (op.contains(\"+\")) {\n\
    \            int i = n - 1;\n            while (i >= 0) {\n                result\
    \ = result + operand.get(i);\n                i--;\n            }\n          \
    \  return result;\n        }\n        // Check for floor division\n        else\
    \ if (op.contains(\"//\")) {\n            int i = n - 1;\n            while (i\
    \ >= 0) {\n                result = result + Math.floor(operand.get(i) / operand.get(i\
    \ + 1));\n                i--;\n            }\n            return result;\n  \
    \      }\n        // Check for exponentiation\n        else if (op.contains(\"\
    **\")) {\n            int i = n - 1;\n            while (i >= 0) {\n         \
    \       result = result + (operand.get(i) * (operand.get(i + 1)));\n         \
    \       i--;\n            }\n            return result;\n        }\n        else\
    \ {\n            System.out.println(\"Invalid operation\");\n            return\
    \ 0;\n        }\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9ea5hx8.java:61: error: incompatible types: possible lossy conversion\
    \ from double to long\n                result = result + Math.floor(operand.get(i)\
    \ / operand.get(i + 1));\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size()\
    \ < 1 || operand.size() < 2) {\n            return 0;\n        }\n        long\
    \ result = 0;\n        // System.out.println(Arrays.toString(op.stream().toArray()));\n\
    \        // System.out.println(Arrays.toString(operand.stream().toArray()));\n\
    \n        int currentPos = 0;\n        for(int i = 0; i < op.size(); i++) {\n\
    \            currentPos = i;\n            switch(op.get(i)) {\n              \
    \  case \"+\": result = result + operand.get(currentPos); break;\n           \
    \     case \"-\": result = result - operand.get(currentPos); break;\n        \
    \        case \"*\": result = result * operand.get(currentPos); break;\n     \
    \           case \"/\": result = result / operand.get(currentPos); break;\n  \
    \              case \"**\": result = result ** operand.get(currentPos); break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8s1r1da.java:43: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(currentPos); break;\n   \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long>\
    \ expression = new ArrayList<>();\n        // For each operator in the operator\
    \ array list, find its position in the operand array list\n        for(int i =\
    \ 0; i < op.size(); i++){\n            int index = indexOf(op.get(i), operand);\n\
    \            // Operator is found\n            if(index != -1){\n            \
    \    // Add to expression\n                expression.add(operand.get(index));\n\
    \            }\n        }\n        // Do the calculation\n        long sum = 0;\n\
    \        for(int i = 0; i < expression.size(); i++){\n            sum = sum +\
    \ expression.get(i);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy88tm845.java:31: error: cannot find symbol\n            int index\
    \ = indexOf(op.get(i), operand);\n                        ^\n  symbol:   method\
    \ indexOf(String,ArrayList<Long>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() == 0) {\n            return 0;\n        }\n        if (operand.size()\
    \ < 2) {\n            System.out.println(\n                    \"Wrong number\
    \ of arguments. Operand array list is empty or too short - 2\");\n           \
    \ return -1;\n        }\n        if (op.size() != operand.size()) {\n        \
    \    System.out.println(\n                    \"Wrong number of arguments. Operator\
    \ array list does not match operand array list - 3\");\n            return -1;\n\
    \        }\n        ArrayList<String> stringOperator = op;\n        ArrayList<String>\
    \ stringOperand = operand;\n        long ret = 0;\n        boolean isOperator\
    \ = false;\n        boolean isOperand = false;\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < stringOperator.size(); i++) {\n\
    \            if (stringOperator.get(i).equals(\"+\")) {\n                isOperator\
    \ = true;\n            } else if (stringOperator.get(i).equals(\"-\")) {\n   \
    \             isOperator = true;\n            } else if (stringOperator.get(i).equals(\"\
    *\")) {\n                isOperator = true;\n            } else if (stringOperator.get(i).equals(\"\
    /\")) {\n                isOperator = true;\n            } else if (stringOperator.get(i).equals(\"\
    **\")) {\n                isOperator = true;\n            } else {\n         \
    \       isOperator = false;\n            }\n            isOperand = false;\n \
    \           for (int j = 0; j < stringOperand.size(); j++) {\n               \
    \ if (stringOperand.get(j).equals(\"+\")) {\n                    isOperand = true;\n\
    \                } else if (stringOperand.get(j).equals(\"-\")) {\n          \
    \          isOperand = true;\n                } else if (stringOperand.get(j).equals(\"\
    *\")) {\n                    isOperand = true;\n                } else if (stringOperand.get(j).equals(\"\
    /\")) {\n                    isOperand = true;\n                } else if (stringOperand.get(j).equals(\"\
    **\")) {\n                    isOperand = true;\n                } else {\n  \
    \                  isOperand = false;\n                }\n                long\
    \ temp = 0;\n                if (isOperand || isOperator) {\n                \
    \    temp = operand.get(j);\n                    if (stringOperator.get(i).equals(\"\
    +\"))\n                        temp += operand.get(j);\n                    else\
    \ if (stringOperator.get(i).equals(\"-\"))\n                        temp -= operand.get(j);\n\
    \                    else if (stringOperator.get(i).equals(\"*\"))\n         \
    \               temp *= operand.get(j);\n                    else if (stringOperator.get(i).equals(\"\
    /\"))\n                        temp /= operand.get(j);\n                    else\
    \ if (stringOperator.get(i).equals(\"**\"))\n                        temp *= operand.get(j);\n\
    \                    else if (stringOperator.get(i).equals(\"%\"))\n         \
    \               temp *= operand.get(j);\n                    else if (stringOperator.get(i).equals(\"\
    |\")) {\n                        temp += operand.get(j);\n                   \
    \ } else if (stringOperator.get(i).equals(\"&\")) {\n                        temp\
    \ \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfas4kon.java:94: error: not a statement\n                    \
    \    temp \n                        ^\n/tmp/tmpbfas4kon.java:94: error: ';' expected\n\
    \                        temp \n                            ^\n/tmp/tmpbfas4kon.java:96:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        int i;\n        int j;\n        long\
    \ result = 0;\n        int num = 0;\n        String numString = \"\";\n      \
    \  boolean flag = false;\n        for (i = 0; i < op.size(); i++) {\n        \
    \    if (op.get(i).equals(\"+\") || op.get(i).equals(\"-\") || op.get(i).equals(\"\
    *\") || op.get(i).equals(\"/\")) {\n                flag = true;\n           \
    \     numString = \"\";\n                for (j = 0; j < operand.size(); j++)\
    \ {\n                    if (operand.get(j) > 0) {\n                        if\
    \ (j == 0)\n                            numString = operand.get(j).toString();\n\
    \                        else\n                            numString = numString\
    \ + \"*\" + operand.get(j).toString();\n                    } else {\n       \
    \                 if (j != 0)\n                            numString = numString\
    \ + \" + \";\n                        else\n                            numString\
    \ = numString + \" * \";\n                    }\n                }\n         \
    \       if (flag) {\n                    if (op.get(i).equals(\"+\"))\n      \
    \                  result = result + Integer.parseInt(numString);\n          \
    \          else if (op.get(i).equals(\"*\"))\n                        result =\
    \ result * Integer.parseInt(numString);\n                    else if (op.get(i).equals(\"\
    -\"))\n                        result = result - Integer.parseInt(numString);\n\
    \                    else if (op.get(i).equals(\"/\"))\n                     \
    \   result = result / Integer.parseInt(numString);\n                }\n      \
    \          flag = false;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"2*3*4*5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.doAlgebra(tmp7u5mfirs.java:56)\n\tat Problem.main(tmp7u5mfirs.java:68)\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ your code here\n        long result = 0;\n        for(String op1:op) {\n   \
    \         for (int j=0; j < operand.size() - 1; j++) {\n                try {\n\
    \                    switch (op1) {\n                        case '+':\n     \
    \                       result = result + operand.get(j);\n                  \
    \          break;\n                        case '*':\n                       \
    \     result = result * operand.get(j);\n                            break;\n\
    \                        case '-':\n                            result = result\
    \ - operand.get(j);\n                            break;\n                    \
    \    case '//':\n                            result = result / (operand.get(j)\
    \ / operand.get(j + 1));\n                            break;\n               \
    \         case '**':\n                            result = result ** operand.get(j);\n\
    \                            break;\n                    }\n                }\
    \ catch (ArithmeticException exception) {\n                    // Arithmetic exception\
    \ will be thrown if an arithmetic operation is performed on invalid operand.\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwrtonr5.java:43: error: unclosed character literal\n         \
    \               case '//':\n                             ^\n/tmp/tmpdwrtonr5.java:43:\
    \ error: unclosed character literal\n                        case '//':\n    \
    \                            ^\n/tmp/tmpdwrtonr5.java:44: error: illegal start\
    \ of expression\n                            result = result / (operand.get(j)\
    \ / operand.get(j + 1));\n                                   ^\n/tmp/tmpdwrtonr5.java:44:\
    \ error: : or -> expected\n                            result = result / (operand.get(j)\
    \ / operand.get(j + 1));\n                                                   \
    \                                ^\n/tmp/tmpdwrtonr5.java:46: error: unclosed\
    \ character literal\n                        case '**':\n                    \
    \         ^\n/tmp/tmpdwrtonr5.java:46: error: unclosed character literal\n   \
    \                     case '**':\n                                ^\n/tmp/tmpdwrtonr5.java:47:\
    \ error: illegal start of expression\n                            result = result\
    \ ** operand.get(j);\n                                   ^\n/tmp/tmpdwrtonr5.java:47:\
    \ error: illegal start of expression\n                            result = result\
    \ ** operand.get(j);\n                                             ^\n/tmp/tmpdwrtonr5.java:47:\
    \ error: : or -> expected\n                            result = result ** operand.get(j);\n\
    \                                                             ^\n9 errors\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Create an empty array list for the result.\n        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        // Create a loop that calculates the sum of\
    \ all elements between the indexes of the operand array\n        // list and operator\
    \ array\n        for (int i = 0; i < operand.size() - 1; i++) {\n            long\
    \ sum = 0;\n            // Create a loop that calculates the sum of the element\
    \ at the indexes of the operand array\n            // list and the element at\
    \ the indexes of the operator array list.\n            for (int j = 0; j < op.size()\
    \ - 1; j++) {\n                // Check if the operator at index j is equal to\
    \ the operator at index i. \n                // If they equal we add up the two\
    \ operands together.\n                if (op.equals(operand.subList(j, j + 1)))\
    \ {\n                    sum += operand.get(i) * operand.get(j + 1);\n       \
    \         }\n            }\n            // Add the sum to the result.\n      \
    \      result.add(sum);\n        }\n        // Return the result.\n        return\
    \ result.get(0);\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpay0m28g2.java:50)\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() <= 1 || operand.size() <= 1) {\n            return 0;\n        }\n\
    \n        String[] opArray = op.toArray(new String[0]);\n        String[] opArray2\
    \ = Arrays.copyOfRange(opArray, 0, operand.size() - 1);\n        long[] operandArray\
    \ = new long[operand.size() - 1];\n\n        for (int i = 0; i < operandArray.length;\
    \ i++) {\n            operandArray[i] = operand.get(i);\n        }\n\n       \
    \ long result = 1;\n        boolean firstTime = true;\n        for (String operator\
    \ : opArray) {\n            int index = 0;\n\n            int opLength = op.length();\n\
    \            int opLength2 = opArray2.length;\n\n            while (index < opLength)\
    \ {\n                String opChar = op.charAt(index);\n                String\
    \ opChar2 = opArray2.charAt(index);\n                if (opChar.equals(opChar2))\
    \ {\n                    if (firstTime) {\n                        firstTime =\
    \ false;\n                        index = opLength;\n                        continue;\n\
    \                    }\n                } else {\n                    int opIndex\
    \ = -1;\n                    while (opIndex < opLength2) {\n                 \
    \       if (opChar.equals(opArray2[opIndex])) {\n                            break;\n\
    \                        }\n                        opIndex++;\n             \
    \       }\n                    if (opIndex == opLength2) {\n                 \
    \       break;\n                    }\n                    long[] opArray3 = new\
    \ long[opLength - 1];\n                    for (int i = 0; i < opLength - 1; i++)\
    \ {\n                        opArray3[i] = operandArray[opIndex + i];\n      \
    \              }\n                    long op1 = operandArray[opIndex];\n    \
    \                long op2 = operandArray[opIndex + 1];\n                    result\
    \ = result + (op * (op1 - op2));\n                    index = opLength;\n    \
    \                operandArray = opArray3;\n                    break;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaeqmm33z.java:45: error: cannot find symbol\n            int opLength\
    \ = op.length();\n                             ^\n  symbol:   method length()\n\
    \  location: variable op of type ArrayList<String>\n/tmp/tmpaeqmm33z.java:49:\
    \ error: cannot find symbol\n                String opChar = op.charAt(index);\n\
    \                                  ^\n  symbol:   method charAt(int)\n  location:\
    \ variable op of type ArrayList<String>\n/tmp/tmpaeqmm33z.java:50: error: cannot\
    \ find symbol\n                String opChar2 = opArray2.charAt(index);\n    \
    \                                     ^\n  symbol:   method charAt(int)\n  location:\
    \ variable opArray2 of type String[]\n/tmp/tmpaeqmm33z.java:74: error: bad operand\
    \ types for binary operator '*'\n                    result = result + (op * (op1\
    \ - op2));\n                                          ^\n  first type:  ArrayList<String>\n\
    \  second type: long\n4 errors\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() < 2 || operand.size() < 2)\n            throw new RuntimeException(\"\
    Invalid arguments: Operator or operand list is null\");\n\n        long result\
    \ = 0;\n        Set<String> basicArithmetics = new HashSet<String>(Arrays.asList(\"\
    +\", \"-\", \"*\", \"//\", \"**\"));\n\n        Set<String> basicArithmetics =\
    \ Arrays.asList(\"+\", \"-\", \"*\", \"//\", \"**\");\n\n        String op1 =\
    \ null;\n        String op2 = null;\n        for (String op : op) {\n        \
    \    if (basicArithmetics.contains(op)) {\n                result += operand.get(operand.size()\
    \ - 1);\n                operand.remove(operand.size() - 1);\n            } else\
    \ {\n                throw new RuntimeException(\"Invalid arguments: No such operator\
    \ exists in operator[]\");\n            }\n        }\n\n        for (String op\
    \ : op) {\n            op1 = op;\n            op2 = op;\n        }\n\n       \
    \ if (basicArithmetics.contains(op1)) {\n            result += operand.get(operand.size()\
    \ - 1);\n            operand.remove(operand.size() - 1);\n        }\n\n      \
    \  for (String op : op) {\n            if (basicArithmetics.contains(op)) {\n\
    \                result += operand.get(operand.size() - 1);\n                operand.remove(operand.size()\
    \ - 1);\n            } else {\n                throw new RuntimeException(\"Invalid\
    \ arguments: No such operator exists in operator[]\");\n            }\n      \
    \  }\n\n        System.out.println(result);\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdvwmt2i.java:34: error: variable basicArithmetics is already defined\
    \ in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n        Set<String>\
    \ basicArithmetics = Arrays.asList(\"+\", \"-\", \"*\", \"//\", \"**\");\n   \
    \                 ^\n/tmp/tmpsdvwmt2i.java:34: error: incompatible types: no instance(s)\
    \ of type variable(s) T exist so that List<T> conforms to Set<String>\n      \
    \  Set<String> basicArithmetics = Arrays.asList(\"+\", \"-\", \"*\", \"//\", \"\
    **\");\n                                                    ^\n  where T is a\
    \ type-variable:\n    T extends Object declared in method <T>asList(T...)\n/tmp/tmpsdvwmt2i.java:38:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \        for (String op : op) {\n                    ^\n/tmp/tmpsdvwmt2i.java:47:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \        for (String op : op) {\n                    ^\n/tmp/tmpsdvwmt2i.java:57:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \        for (String op : op) {\n                    ^\n5 errors\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ TODO Auto-generated method stub\n        long result = 0;\n        Iterator<String>\
    \ iterator = op.iterator();\n        while(iterator.hasNext()){\n            String\
    \ x = iterator.next();\n            int num = 0;\n            int i=0;\n     \
    \       for(i=0;i<operand.size()-1;i++){\n                try{\n             \
    \       num = Integer.parseInt(operand.get(i).toString());\n                 \
    \   if(x.equals(op.get(i))){\n                        num += operand.get(i+1);\n\
    \                        operand.set(i, num);\n                        i++;\n\
    \                        break;\n                    }\n                }catch(Exception\
    \ e){\n                    System.out.println(e.getMessage());\n             \
    \       break;\n                }\n            }\n        }\n        result =\
    \ operand.get(0);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_6d49dx.java:40: error: incompatible types: int cannot be converted\
    \ to Long\n                        operand.set(i, num);\n                    \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long>\
    \ stack = new ArrayList<>();\n        long result = 0;\n        long evaluate\
    \ = 0;\n\n        if (op.size() == 0) {\n            throw new RuntimeException(\"\
    Operator array list can not be empty.\");\n        }\n\n        if (op.size()\
    \ == 1) {\n            throw new RuntimeException(\"Operator array list can not\
    \ be empty.\");\n        }\n\n        if (operand.size() < 2) {\n            throw\
    \ new RuntimeException(\"Operand array list can not be empty.\");\n        }\n\
    \n        int operatorIndex = 0;\n\n        do {\n            switch (operatorIndex++)\
    \ {\n                case 0: // Addition\n                    result = result\
    \ + operand.get(0);\n                    break;\n                case 1: // Subtraction\n\
    \                    result = result - operand.get(0);\n                    break;\n\
    \                case 2: // Multiplication\n                    result = result\
    \ * operand.get(0);\n                    break;\n                case 3: // Floor\
    \ division\n                    result = result / operand.get(0);\n          \
    \          break;\n                case 4: // Exponentiation\n               \
    \     result = result ** operand.get(0);\n                    break;\n       \
    \         default:\n                    throw new RuntimeException(\"Invalid operator\"\
    );\n            }\n        } while (operatorIndex < op.size());\n\n        evaluate\
    \ = result;\n        return evaluate;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz60shl8o.java:61: error: illegal start of expression\n        \
    \            result = result ** operand.get(0);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++)\n            result\
    \ += operand.get(i) * doMath(Integer.parseInt(op.get(i)));\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdgh_4zdk.java:30: error: cannot find symbol\n            result\
    \ += operand.get(i) * doMath(Integer.parseInt(op.get(i)));\n                 \
    \                      ^\n  symbol:   method doMath(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        if (op.size() < 2 || operand.size() < 2) return Long.MAX_VALUE;\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result = result + operand.get(0);\n            } else\
    \ if (op.get(i).equals(\"-\")) {\n                result = result - operand.get(0);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result = result\
    \ * operand.get(0);\n            } else if (op.get(i).equals(\"//\")) {\n    \
    \            result = result / operand.get(0);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = result ** operand.get(0);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6d0pne7s.java:40: error: illegal start of expression\n        \
    \        result = result ** operand.get(0);\n                                \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ your code here\n        long sum = 0;\n        for(String o : op){\n       \
    \     if(o.equals(\"+\")) {\n                sum = sum + operand.get(0);\n   \
    \             operand.set(0, operand.get(1));\n                operand.set(1,\
    \ sum);\n            }else if(o.equals(\"*\")){\n                sum = sum * operand.get(0);\n\
    \                operand.set(0, operand.get(1));\n                operand.set(1,\
    \ sum);\n            }else if(o.equals(\"-\")){\n                sum = sum - operand.get(0);\n\
    \                operand.set(0, operand.get(1));\n                operand.set(1,\
    \ sum);\n            }else if(o.equals(\"//\")){\n                sum = sum /\
    \ operand.get(0);\n                operand.set(0, operand.get(1));\n         \
    \       operand.set(1, sum);\n            }else if(o.equals(\"**\")){\n      \
    \          sum = sum / operand.get(1);\n                operand.set(1, operand.get(0));\n\
    \                operand.set(0, sum);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgz54cpwt.java:56)\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ temp = Arrays.asList(op);\n        ArrayList<String> temp2 = Arrays.asList(op);\n\
    \        long result = 0;\n        for (int i = 0; i < temp2.size() - 1; i++)\
    \ {\n            try {\n                switch (temp2.get(i)) {\n            \
    \    case \"+\":\n                    result = result + (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             case \"-\":\n                    result = result - (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             case \"*\":\n                    result = result * (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             case \"/\":\n                    result = result / (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             case \"//\":\n                    result = result / (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             case \"**\":\n                    result = result * (operand.get(temp2.size()\
    \ - i - 1) * operand.get(temp2.size() - i));\n                    break;\n   \
    \             default:\n                    throw new ArithmeticException(\"Operator\
    \ not recognised\");\n                }\n            } catch (ArithmeticException\
    \ exn) {\n                System.out.println(\"Exception thrown: \" + exn.getMessage());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3mqd901.java:28: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     ArrayList<String> temp = Arrays.asList(op);\n                          \
    \                    ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>asList(T...)\n/tmp/tmpf3mqd901.java:29: error: incompatible types:\
    \ no instance(s) of type variable(s) T exist so that List<T> conforms to ArrayList<String>\n\
    \        ArrayList<String> temp2 = Arrays.asList(op);\n                      \
    \                         ^\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n2 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(String s : op){\n            switch(s){\n         \
    \       case \"+\": result = result + operand.get(0); break;\n               \
    \ case \"-\": result = result - operand.get(0); break;\n                case \"\
    *\": result = result * operand.get(0); break;\n                case \"//\": result\
    \ = result / operand.get(0); break;\n                case \"**\": result = result\
    \ ** operand.get(0); break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaddt6y81.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(0); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        if (op.isEmpty() || operand.isEmpty())\n            return\
    \ 0;\n        if (operand.size() > op.size())\n            operand = operand.subList(operand.size()\
    \ - op.size(), operand.size());\n        int i = 0;\n        for (String s : op)\
    \ {\n            switch (s) {\n            case '+':\n                result +=\
    \ (operand.get(i++) + operand.get(i++));\n                break;\n           \
    \ case '-':\n                result -= (operand.get(i++) - operand.get(i++));\n\
    \                break;\n            case '*':\n                result *= (operand.get(i++)\
    \ * operand.get(i++));\n                break;\n            case '/':\n      \
    \          result /= (operand.get(i++) / operand.get(i++));\n                break;\n\
    \            case '%':\n                result %= (operand.get(i++) % operand.get(i++));\n\
    \                break;\n            case '^':\n                result ^= (operand.get(i++)\
    \ ^ operand.get(i++));\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_vdgrc1m.java:32: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n            operand = operand.subList(operand.size()\
    \ - op.size(), operand.size());\n                                     ^\n/tmp/tmp_vdgrc1m.java:36:\
    \ error: incompatible types: char cannot be converted to String\n            case\
    \ '+':\n                 ^\n/tmp/tmp_vdgrc1m.java:39: error: incompatible types:\
    \ char cannot be converted to String\n            case '-':\n                \
    \ ^\n/tmp/tmp_vdgrc1m.java:42: error: incompatible types: char cannot be converted\
    \ to String\n            case '*':\n                 ^\n/tmp/tmp_vdgrc1m.java:45:\
    \ error: incompatible types: char cannot be converted to String\n            case\
    \ '/':\n                 ^\n/tmp/tmp_vdgrc1m.java:48: error: incompatible types:\
    \ char cannot be converted to String\n            case '%':\n                \
    \ ^\n/tmp/tmp_vdgrc1m.java:51: error: incompatible types: char cannot be converted\
    \ to String\n            case '^':\n                 ^\n7 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList\
    \ <Long> resultArray = new ArrayList<>();\n        // First find the operators\
    \ with corresponding operands\n        Map<String, Integer> indexMap = new HashMap<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (!indexMap.containsKey(op.get(i)))\
    \ {\n                int counter = 1;\n                while (indexMap.containsKey(op.get(i\
    \ + counter))) {\n                    counter++;\n                }\n        \
    \        indexMap.put(op.get(i), counter);\n            }\n        }\n       \
    \ // Find the operators and their corresponding operands\n        Map<String,\
    \ Long> operatorMap = new HashMap<>();\n        ArrayList <Long> operandArray\
    \ = new ArrayList<>();\n        double result = 0.0;\n        for (int i = 0;\
    \ i < op.size(); i++) {\n            if (indexMap.containsKey(op.get(i))) {\n\
    \                operatorMap.put(op.get(i), operand.get(indexMap.get(op.get(i))));\n\
    \                for (int j = 0; j < indexMap.get(op.get(i)); j++) {\n       \
    \             operandArray.add(operand.get(i));\n                }\n         \
    \   } else {\n                operatorMap.put(op.get(i), operand.get(i));\n  \
    \              operandArray.add(operand.get(i));\n            }\n        }\n \
    \       switch (operatorMap.get(op.size() - 1)) {\n            case 1:\n     \
    \           if (operatorMap.get(op.size() - 1) == operatorMap.get(op.size() -\
    \ 2)) {\n                    result = (double) operandArray.get(0) / operandArray.get(1);\n\
    \                } else {\n                    result = (double) (operandArray.get(1)\
    \ - operandArray.get(0)) / operandArray.get(1);\n                }\n         \
    \       break;\n            case 2:\n                if (operatorMap.get(op.size()\
    \ - 1) == operatorMap.get(op.size() - 2)) {\n                    result = (double)\
    \ (operandArray.get(0) * operandArray.get(1) + operandArray.get(0)) / operandArray.get(1);\n\
    \                } else {\n                    result = (double) (operandArray.get(0)\
    \ * operandArray.get(1) + operandArray.get(1)) / operandArray.get(0);\n      \
    \          }\n                break;\n            case 3:\n                result\
    \ = (double) (operandArray.get(0) * operandArray.get(1) - operandArray.get(1))\
    \ / operandArray.get(0);\n                break;\n            case 4:\n      \
    \          for (int i = 0; i < operandArray.size(); i++) {\n                 \
    \   result = Math.max(result, Math.sqrt(operandArray.get(i)));\n             \
    \   }\n                break;\n            case 5:\n                for (int i\
    \ = 0; i < operandArray.size(); i++) {\n                    if (operandArray.get(i)\
    \ > 0) {\n                        result = Math.max(result, operandArray.get(i));\n\
    \                    }\n                }\n                break;\n          \
    \  case 6:\n                for (int i = 0; i < operandArray.size(); i++) {\n\
    \                    if (operandArray.get(i) > 0) {\n                        result\
    \ = Math.max(result, Math.sqrt(operandArray.get(i)));\n                    }\n\
    \                }\n                break;\n            default:\n           \
    \     System.out.println(\"Invalid operator\");\n                break;\n    \
    \    }\n        return resultArray.get(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9hldr5t.java:55: error: patterns in switch statements are a preview\
    \ feature and are disabled by default.\n        switch (operatorMap.get(op.size()\
    \ - 1)) {\n               ^\n  (use --enable-preview to enable patterns in switch\
    \ statements)\n/tmp/tmpo9hldr5t.java:56: error: incompatible types: int cannot\
    \ be converted to Long\n            case 1:\n                 ^\n/tmp/tmpo9hldr5t.java:63:\
    \ error: incompatible types: int cannot be converted to Long\n            case\
    \ 2:\n                 ^\n/tmp/tmpo9hldr5t.java:70: error: incompatible types:\
    \ int cannot be converted to Long\n            case 3:\n                 ^\n/tmp/tmpo9hldr5t.java:73:\
    \ error: incompatible types: int cannot be converted to Long\n            case\
    \ 4:\n                 ^\n/tmp/tmpo9hldr5t.java:78: error: incompatible types:\
    \ int cannot be converted to Long\n            case 5:\n                 ^\n/tmp/tmpo9hldr5t.java:85:\
    \ error: incompatible types: int cannot be converted to Long\n            case\
    \ 6:\n                 ^\n7 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ TODO: complete this method\n        long result = Integer.MIN_VALUE;\n     \
    \   for (int i = 0; i < op.get(0).length(); i++) {\n            int leftIndex\
    \ = i;\n            int rightIndex = op.size() - 1;\n\n            while (leftIndex\
    \ >= 0 && rightIndex >= 0 && op.contains(op.get(rightIndex))) {\n            \
    \    String opSymbol = op.get(rightIndex).toUpperCase();\n                String\
    \ opLeft = op.get(leftIndex).toUpperCase();\n\n                if (opSymbol.equals(opLeft))\
    \ {\n                    int newRightIndex = rightIndex;\n                   \
    \ rightIndex--;\n                } else {\n                    leftIndex--;\n\
    \                }\n            }\n\n            if (leftIndex >= 0 && rightIndex\
    \ >= 0 && op.contains(op.get(rightIndex))) {\n                int leftIndex =\
    \ i;\n                int rightIndex = op.size() - 1;\n                String\
    \ opSymbol = op.get(rightIndex).toUpperCase();\n                while (leftIndex\
    \ >= 0 && rightIndex >= 0 && op.contains(op.get(rightIndex))) {\n            \
    \        String opLeft = op.get(leftIndex).toUpperCase();\n\n                \
    \    if (opSymbol.equals(opLeft)) {\n                        int newRightIndex\
    \ = rightIndex;\n                        rightIndex--;\n                    }\
    \ else {\n                        leftIndex--;\n                    }\n      \
    \          }\n\n                String opSymbol = op.get(rightIndex).toUpperCase();\n\
    \                while (leftIndex >= 0 && rightIndex >= 0 && op.contains(op.get(rightIndex)))\
    \ {\n                    String opLeft = op.get(leftIndex).toUpperCase();\n\n\
    \                    if (opSymbol.equals(opLeft)) {\n                        int\
    \ newRightIndex = rightIndex;\n                        rightIndex--;\n       \
    \             } else {\n                        leftIndex--;\n               \
    \     }\n                }\n\n                String opSymbol = op.get(rightIndex).toUpperCase();\n\
    \                String opLeft = op.get(leftIndex).toUpperCase();\n          \
    \      if (opSymbol.equals(opLeft)) {\n                    int newRightIndex =\
    \ rightIndex;\n                    rightIndex--;\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4r2yd43m.java:47: error: variable leftIndex is already defined\
    \ in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n                int\
    \ leftIndex = i;\n                    ^\n/tmp/tmp4r2yd43m.java:48: error: variable\
    \ rightIndex is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \                int rightIndex = op.size() - 1;\n                    ^\n/tmp/tmp4r2yd43m.java:61:\
    \ error: variable opSymbol is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \                String opSymbol = op.get(rightIndex).toUpperCase();\n       \
    \                ^\n/tmp/tmp4r2yd43m.java:73: error: variable opSymbol is already\
    \ defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n           \
    \     String opSymbol = op.get(rightIndex).toUpperCase();\n                  \
    \     ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(String oper : op) {\n            switch(oper) {\n \
    \               case \"*\": result = result * operand.get(0)\n               \
    \          - operand.get(1) * operand.get(2)\n                         - operand.get(0)\
    \ * operand.get(3);\n                    System.out.println(\"Result = \" + result);\n\
    \                    return result;\n                case \"/\": result = result\
    \ / operand.get(0)\n                         // operand.get(0) / operand.get(1);\n\
    \                         // operand.get(0) / operand.get(1); // if i use this,\
    \ then the division will always result in 0\n                         // operand.get(0)\
    \ / operand.get(1); // the result will be 0 if i do operand.get(0)/operand.get(1)\n\
    \                case \"-\": result = result - operand.get(0);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnhicg7d.java:36: error: ';' expected\n                case \"\
    /\": result = result / operand.get(0)\n                                      \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int count = 0;\n        String s = \"\";\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            s += op.get(i) + operand.get(count).toString();\n\
    \            if (operand.get(count) < 0) {\n                return -1;\n     \
    \       }\n            if (operand.get(count) > Integer.MAX_VALUE) {\n       \
    \         return -1;\n            }\n            count += 1;\n        }\n    \
    \    try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        } catch\
    \ (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\
    \        Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost/algebra\"\
    , \"root\", \"password\");\n        PreparedStatement statement = con.prepareStatement(\"\
    insert into algebra (algebra_expression) values (?)\");\n        try {\n     \
    \       statement.setString(1, s);\n            statement.executeUpdate();\n \
    \       } catch (SQLException e) {\n            e.printStackTrace();\n       \
    \ }\n        Statement stmt = con.createStatement();\n        ResultSet rs = stmt.executeQuery(\"\
    select * from algebra where algebra_expression = '\" + s + \"'\");\n        while\
    \ (rs.next()) {\n            result = rs.getLong(1);\n        }\n        con.close();\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9g700we.java:46: error: cannot find symbol\n        Connection\
    \ con = DriverManager.getConnection(\"jdbc:mysql://localhost/algebra\", \"root\"\
    , \"password\");\n        ^\n  symbol:   class Connection\n  location: class Problem\n\
    /tmp/tmpy9g700we.java:46: error: cannot find symbol\n        Connection con =\
    \ DriverManager.getConnection(\"jdbc:mysql://localhost/algebra\", \"root\", \"\
    password\");\n                         ^\n  symbol:   variable DriverManager\n\
    \  location: class Problem\n/tmp/tmpy9g700we.java:47: error: cannot find symbol\n\
    \        PreparedStatement statement = con.prepareStatement(\"insert into algebra\
    \ (algebra_expression) values (?)\");\n        ^\n  symbol:   class PreparedStatement\n\
    \  location: class Problem\n/tmp/tmpy9g700we.java:51: error: cannot find symbol\n\
    \        } catch (SQLException e) {\n                 ^\n  symbol:   class SQLException\n\
    \  location: class Problem\n/tmp/tmpy9g700we.java:54: error: cannot find symbol\n\
    \        Statement stmt = con.createStatement();\n        ^\n  symbol:   class\
    \ Statement\n  location: class Problem\n/tmp/tmpy9g700we.java:55: error: cannot\
    \ find symbol\n        ResultSet rs = stmt.executeQuery(\"select * from algebra\
    \ where algebra_expression = '\" + s + \"'\");\n        ^\n  symbol:   class ResultSet\n\
    \  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(long i = 1; i < operand.size() - 1; i++) {\n      \
    \      result = result + operand.get(i - 1) * doCalculation(op, operand, i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5j_w5kug.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result = result + operand.get(i - 1) * doCalculation(op,\
    \ operand, i);\n                                            ^\n/tmp/tmp5j_w5kug.java:30:\
    \ error: cannot find symbol\n            result = result + operand.get(i - 1)\
    \ * doCalculation(op, operand, i);\n                                         \
    \          ^\n  symbol:   method doCalculation(ArrayList<String>,ArrayList<Long>,long)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        \n        for(int i = 0; i < op.size(); i++) {\n      \
    \      if(op.equals(operator[i - 1])) {\n                result += (operand.get(i)\
    \ - operand.get(i - 1)) * Math.pow(operand.get(i - 1), operand.get(i));\n    \
    \        } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ operator\");\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptfgwpsh2.java:31: error: cannot find symbol\n            if(op.equals(operator[i\
    \ - 1])) {\n                         ^\n  symbol:   variable operator\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // Check size of array lists\n        if (op.size() !=\
    \ operand.size()) {\n            return -1;\n        }\n        // Check for invalid\
    \ expression\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\") || op.get(i).equals(\"-\") || op.get(i).equals(\"*\") || op.get(i).equals(\"\
    /\")\n                    || op.get(i).equals(\"//\") || op.get(i).equals(\"**\"\
    )) {\n                return -1;\n            }\n        }\n        // If all\
    \ okay\n        for (String s : op) {\n            // Check operation\n      \
    \      if (s.equals(\"+\")) {\n                result = result + operand.get(0);\n\
    \            } else if (s.equals(\"*\")) {\n                result = result *\
    \ operand.get(0);\n            } else if (s.equals(\"-\")) {\n               \
    \ result = result - operand.get(0);\n            } else if (s.equals(\"/\")) {\n\
    \                result = result / operand.get(0);\n            } else if (s.equals(\"\
    //\")) {\n                result = result / operand.get(0);\n            } else\
    \ if (s.equals(\"**\")) {\n                result = result * operand.get(0);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2q0gkag.java:60)\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int i = 0;\n        while (i < op.size() || i < operand.size())\
    \ {\n            String operator = op.get(i);\n            long operand1 = operand.get(i);\n\
    \            int j = 0;\n            while (j < op.size()) {\n               \
    \ String operator2 = op.get(j);\n                long operand2 = operand.get(j\
    \ + 1);\n                if ((operator == null && operand2 == 0) || (operator\
    \ != null && operator != operator2 && operand1 != operand2)) {\n             \
    \       System.out.println(\"Invalid operand \" + operand1 + \" and operator \"\
    \ + operator);\n                    break;\n                }\n              \
    \  switch (operator) {\n                    case \"+\":\n                    \
    \    result += (operand1 < operand2) ? operand1 : operand2;\n                \
    \        break;\n                    case \"-\":\n                        result\
    \ -= (operand1 < operand2) ? operand1 : operand2;\n                        break;\n\
    \                    case \"*\":\n                        result *= (operand1\
    \ < operand2) ? operand1 : operand2;\n                        break;\n       \
    \             case \"/\":\n                        result /= (operand1 < operand2)\
    \ ? operand1 : operand2;\n                        break;\n                   \
    \ case \"//\":\n                        result //= (operand1 < operand2) ? operand1\
    \ : operand2;\n                        break;\n                    case \"**\"\
    :\n                        result **= (operand1 < operand2) ? operand1 : operand2;\n\
    \                        break;\n                }\n                j++;\n   \
    \         }\n            i++;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevj9aey4.java:55: error: not a statement\n                    \
    \    result //= (operand1 < operand2) ? operand1 : operand2;\n               \
    \         ^\n/tmp/tmpevj9aey4.java:55: error: ';' expected\n                 \
    \       result //= (operand1 < operand2) ? operand1 : operand2;\n            \
    \                  ^\n/tmp/tmpevj9aey4.java:58: error: illegal start of expression\n\
    \                        result **= (operand1 < operand2) ? operand1 : operand2;\n\
    \                                ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ ans = 0;\n        ArrayList<String> operators = op.stream().filter(s -> !s.equals(\"\
    *\")) && !s.equals(\"//\")).collect(Collectors.toList());\n        if (operators.size()\
    \ > operand.size()) {\n            operators.add(\"*\");\n        }\n        for\
    \ (int i = 0; i < operators.size(); i++) {\n            if (operators.get(i).equals(\"\
    +\")) {\n                ans += operand.get(i);\n            } else if (operators.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i);\n            } else if (operators.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i);\n            } else if (operators.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i);\n            } else if (operators.get(i).equals(\"\
    **\")) {\n                ans **= operand.get(i);\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0yf8927.java:29: error: ';' expected\n        ArrayList<String>\
    \ operators = op.stream().filter(s -> !s.equals(\"*\")) && !s.equals(\"//\")).collect(Collectors.toList());\n\
    \                                                                            \
    \                    ^\n/tmp/tmpp0yf8927.java:43: error: illegal start of expression\n\
    \                ans **= operand.get(i);\n                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.isEmpty() || operand.isEmpty()) {\n            return 0;\n        }\n  \
    \      int l = 0;\n        for (int i = 0; i < op.size(); i++) {\n           \
    \ String s = op.get(i);\n            if (s.equals(\"+\")) {\n                l++;\n\
    \            }\n            if (s.equals(\"-\")) {\n                l--;\n   \
    \         }\n        }\n        long result = 0;\n        for (int i = 0; i <\
    \ operand.size(); i++) {\n            long x = operand.get(i);\n            String\
    \ s = op.get(l);\n            if (s.equals(\"*\")) {\n                result =\
    \ result + x * x;\n            }\n            if (s.equals(\"/\")) {\n       \
    \         long divisor = operand.get(i + 1);\n                result = result\
    \ + x / divisor;\n            }\n            if (s.equals(\"**\")) {\n       \
    \         result = result + Math.pow(x, operand.get(i + 1));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sqv46e6.java:53: error: incompatible types: possible lossy conversion\
    \ from double to long\n                result = result + Math.pow(x, operand.get(i\
    \ + 1));\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // Check both operator and operand array list has at least\
    \ two elements.\n        if (op.size() < 1 || operand.size() < 2) {\n        \
    \    System.out.println(\"Invalid Input\");\n            return 0;\n        }\n\
    \n        // If the operand array list has only one element and operator array\
    \ list has only one element.\n        if (op.size() == 1 && operand.size() ==\
    \ 1) {\n            // Get the operator and operand string and perform basic operation\
    \ on it.\n            String operation = op.get(0);\n            long operand1\
    \ = operand.get(0);\n            String operation1 = op.get(0);\n            long\
    \ operand2 = operand.get(0);\n            try {\n                // Perform the\
    \ operation on operand 1 and operand 2.\n                // Perform the operation\
    \ by calling Math method.\n                result = Math[operation].longValue()\
    \ * operand1;\n            } catch (Exception e) {\n                // Print invalid\
    \ input.\n                System.out.println(\"Invalid Input\");\n           \
    \     return 0;\n            }\n\n            // Perform the operation on operand\
    \ 2 and operand 1.\n            // Perform the operation by calling Math method.\n\
    \            result = Math[operation].longValue() * operand2;\n        } else\
    \ if (op.size() == 1 && operand.size() > 1) {\n            // Get the operator\
    \ string and perform basic operation on it.\n            String operation = op.get(0);\n\
    \            long operand1 = operand.get(0);\n            String operation1 =\
    \ op.get(0);\n            long operand2 = 0;\n            for (int i = 1; i <\
    \ operand.size(); i++) {\n                operand2 = operand.get(i);\n       \
    \         try {\n                    // Perform the operation on operand 1 and\
    \ operand 2.\n                    // Perform the operation by calling Math method.\n\
    \                    result = Math[operation].longValue() * operand1;\n      \
    \          } catch (Exception e) {\n                    // Print invalid input.\n\
    \                    System.out.println(\"Invalid Input\");\n                \
    \    return 0;\n                }\n\n                // Perform the operation\
    \ on operand 2 and operand 1.\n                // Perform the operation by calling\
    \ Math method.\n                result = Math[operation].longValue() * operand2;\n\
    \            }\n        } else if (op.size() > 1 && operand.size() == 1) {\n \
    \           // Get the operand string and perform basic operation on it.\n   \
    \         long operand1 = operand.get(0);\n            String operation = \"\"\
    ;\n            long operand2 = 0;\n            for (int i = 1; i < op.size();\
    \ i++) {\n                operation = op.get(i);\n                operand2 = operand.get(i);\n\
    \                try {\n                    // Perform the operation on operand\
    \ 1 and operand 2.\n                    // Perform the operation by calling Math\
    \ method.\n                    result = Math[operation].longValue() * operand1;\n\
    \                } catch (Exception e) {\n                    // Print invalid\
    \ input.\n                    System.out.println(\"Invalid Input\");\n       \
    \             return 0;\n                }\n\n                // Perform the operation\
    \ on operand 2 and operand 1.\n                // Perform the operation by calling\
    \ Math method.\n                result = Math[operation].longValue() * operand2;\n\
    \            }\n        } else if (op.size() > 1 && operand.size() > 1) {\n  \
    \          // Get the \n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp50ibv93g.java:102: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        switch (op.get(0)) {\n            case \"+\":\n       \
    \         result = operand.get(0) + operand.get(1);\n                break;\n\
    \            case \"-\":\n                result = operand.get(0) - operand.get(1);\n\
    \                break;\n            case \"*\":\n                result = operand.get(0)\
    \ * operand.get(1);\n                break;\n            case \"//\":\n      \
    \          result = operand.get(0) / operand.get(1);\n                break;\n\
    \            case \"**\":\n                result = operand.get(0) * operand.get(1);\n\
    \                break;\n            default:\n                System.out.println(\"\
    Unknown operator!\");\n                break;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbbeb68t.java:52)\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ your code here\n        List<String> op1 = new ArrayList<>(op);\n        List<Long>\
    \ op2 = new ArrayList<>(operand);\n        int i = 0;\n        int j = op1.size()\
    \ - 1;\n        long result = 0;\n        while ((i < op1.size()) && (j < op2.size()))\
    \ {\n            String str1 = op1.get(i);\n            String str2 = op2.get(j);\n\
    \            long op1val = Long.parseLong(str1);\n            long op2val = Long.parseLong(str2);\n\
    \            String operation = op1.get(i);\n            if (operation.equals(\"\
    +\"))\n                result += op1val + op2val;\n            else if (operation.equals(\"\
    -\"))\n                result -= op1val - op2val;\n            else if (operation.equals(\"\
    *\"))\n                result *= op1val * op2val;\n            else if (operation.equals(\"\
    //\"))\n                result = op1val / op2val;\n            else if (operation.equals(\"\
    **\")) {\n                result *= op1val * op1val;\n                result *=\
    \ op2val;\n            } else if (operation.equals(\"%\")) {\n               \
    \ result = op1val % op2val;\n            } else {\n                System.out.println(\"\
    The operator entered is not recognized.\");\n                return result;\n\
    \            }\n            i++;\n            j--;\n        }\n        System.out.println(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeg426u0h.java:36: error: incompatible types: Long cannot be converted\
    \ to String\n            String str2 = op2.get(j);\n                         \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ TODO: Your code here\n        ArrayList<String> strs = new ArrayList<String>();\n\
    \        List<Long> numbers = new ArrayList<Long>();\n        strs.addAll(op.subList(0,\
    \ op.size()-1));\n        for (int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            if (strs.contains(op)) {\n                String\
    \ temp = strs.get(strs.indexOf(op));\n                if (temp.contains(\"+\"\
    )) {\n                    strs.remove(strs.indexOf(temp));\n                 \
    \   strs.add(i-1, temp+\"+\");\n                } else if (temp.contains(\"*\"\
    )) {\n                    strs.remove(strs.indexOf(temp));\n                 \
    \   strs.add(i-1, temp+\"*\");\n                } else if (temp.contains(\"/\"\
    )) {\n                    strs.remove(strs.indexOf(temp));\n                 \
    \   strs.add(i-1, temp+\"/\");\n                } else if (temp.contains(\"//\"\
    )) {\n                    strs.remove(strs.indexOf(temp));\n                 \
    \   strs.add(i-1, temp+\"//\");\n                } else if (temp.contains(\"**\"\
    )) {\n                    strs.remove(strs.indexOf(temp));\n                 \
    \   strs.add(i-1, temp+\"**\");\n                }\n            }\n        }\n\
    \        for (int i = 0; i < operand.size(); i++) {\n            long x = operand.get(i);\n\
    \            if (numbers.size() == 1) {\n                strs.add(i-1, numbers.get(0));\n\
    \            } else {\n                long y = numbers.get(0);\n            \
    \    numbers.remove(0);\n                strs.add(i-1, x+y);\n            }\n\
    \        }\n        long ans = 0;\n        for (String s : strs) {\n         \
    \   ans += Long.valueOf(s.replaceAll(\"\\\\+\", \"+\").replaceAll(\"\\\\*\", \"\
    *\").replaceAll(\"\\\\/\", \"/\"));\n            ans += Long.valueOf(s.replaceAll(\"\
    \\\\//\", \"//\").replaceAll(\"\\\\**\", \"**\"));\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5028i9sa.java:33: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp5028i9sa.java:33: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmp5028i9sa.java:57:\
    \ error: incompatible types: Long cannot be converted to String\n            \
    \    strs.add(i-1, numbers.get(0));\n                                        \
    \ ^\n/tmp/tmp5028i9sa.java:61: error: incompatible types: long cannot be converted\
    \ to String\n                strs.add(i-1, x+y);\n                           \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int count = op.size();\n        int limit = (int) Math.sqrt(operand.size());\n\
    \        long op1 = 0;\n        long op2 = 0;\n        if (limit == 0) {\n   \
    \         System.out.println(\"ZeroDivision\");\n            return 0;\n     \
    \   }\n        for (int i = 0; i < count; i++) {\n            String operator\
    \ = op.get(i);\n            String operand1 = operand.get(0);\n            String\
    \ operand2 = operand.get(1);\n            String operand3 = operand.get(2);\n\
    \            if (operator.equals(\"+\")) {\n                op1 = Long.parseLong(operand1)\
    \ + Long.parseLong(operand2);\n                result += op1;\n              \
    \  operand.remove(0);\n                operand.remove(0);\n                operand.remove(0);\n\
    \            }\n            if (operator.equals(\"-\")) {\n                op1\
    \ = Long.parseLong(operand1) - Long.parseLong(operand2);\n                result\
    \ -= op1;\n                operand.remove(0);\n                operand.remove(0);\n\
    \                operand.remove(0);\n            }\n            if (operator.equals(\"\
    *\")) {\n                op1 = Long.parseLong(operand1) * Long.parseLong(operand2);\n\
    \                result *= op1;\n                operand.remove(0);\n        \
    \        operand.remove(0);\n                operand.remove(0);\n            }\n\
    \            if (operator.equals(\"/\")) {\n                op1 = Long.parseLong(operand1)\
    \ / Long.parseLong(operand2);\n                result /= op1;\n              \
    \  operand.remove(0);\n                operand.remove(0);\n                operand.remove(0);\n\
    \            }\n            if (operator.equals(\"//\")) {\n                op1\
    \ = Long.parseLong(operand1) / Long.parseLong(operand2);\n                result\
    \ %= op1;\n                operand.remove(0);\n                operand.remove(0);\n\
    \                operand.remove(0);\n            }\n            if (operator.equals(\"\
    **\")) {\n                op1 = Long.parseLong(operand1) ** Long.parseLong(operand2);\n\
    \                result %= op1;\n                operand.remove(0);\n        \
    \        operand.remove(0);\n                operand.remove(0);\n            }\n\
    \        }\n        ArrayList<Long> operand2 = new ArrayList<>();\n        for\
    \ (Long l : operand) {\n            operand2.add(l);\n        }\n        if (operand2.size()\
    \ > 0) {\n            for (int i = 0; i < count; i++) {\n                String\
    \ operator = op.get(i);\n                String operand1 = operand.get(0);\n \
    \               String operand2 = operand.get(1);\n                String operand3\
    \ = operand.get(2);\n                if (operator.equals(\"+\") && operand2.size()\
    \ > 0) {\n                    op2 = Long.parseLong(operand2.get(0)) + Long.parseLong(operand2.get(1));\n\
    \                    result += op2;\n                    operand.remove(0);\n\
    \                    operand.remove(0);\n                    operand.remove(0);\n\
    \                    operand2.remove(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxwvcxbz6.java:78: error: illegal start of expression\n        \
    \        op1 = Long.parseLong(operand1) ** Long.parseLong(operand2);\n       \
    \                                         ^\n/tmp/tmpxwvcxbz6.java:103: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result;\n        switch (op.get(0).toLowerCase()) {\n            case (\"+\"\
    ):\n                result = (operand.get(0) + operand.get(1));\n            \
    \    break;\n            case (\"-\"):\n                result = (operand.get(0)\
    \ - operand.get(1));\n                break;\n            case (\"*\"):\n    \
    \            result = (operand.get(0) * operand.get(1));\n                break;\n\
    \            case (\"//\"):\n                result = (operand.get(0) / operand.get(1));\n\
    \                break;\n            case (\"**\"):\n                result =\
    \ (operand.get(0) * operand.get(1));\n                break;\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3cmb9a1.java:46: error: variable result might not have been initialized\n\
    \        return result;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ currentOp = op.get(i);\n            for(int j = 0; j < operand.size(); j++)\
    \ {\n                if(j == operand.size()-1 && currentOp.equals(op.get(i)))\
    \ {\n                    result += operand.get(j);\n                }\n      \
    \          else {\n                    long eval = evaluateArithmetic(currentOp,\
    \ operand.get(j), operand.get(j+1));\n                    result += eval;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuptcq3_q.java:36: error: cannot find symbol\n                 \
    \   long eval = evaluateArithmetic(currentOp, operand.get(j), operand.get(j+1));\n\
    \                                ^\n  symbol:   method evaluateArithmetic(String,Long,Long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        // TODO Auto-generated method stub\n        for(int i =\
    \ 0; i < op.size(); i++){\n            int x = op.indexOf(\"+\");\n          \
    \  int y = op.indexOf(\"-\");\n            int z = op.indexOf(\"*\");\n      \
    \      int w = op.indexOf(\"/\");\n            int x = op.indexOf(\"**\");\n \
    \           System.out.println(op.indexOf(\"+\"));\n            System.out.println(op.indexOf(\"\
    -\"));\n            System.out.println(op.indexOf(\"*\"));\n            System.out.println(op.indexOf(\"\
    /\"));\n            System.out.println(op.indexOf(\"**\"));\n\n            if(i\
    \ == 0){\n                for(int k = 0; k < operand.size(); k++){\n         \
    \           if(operand.get(k) == 0){\n                        result = result;\n\
    \                    }else if(operand.get(k) == 1){\n                        result\
    \ = result;\n                    }else{\n                        result = result\
    \ * operand.get(k);\n                    }\n                }\n            }\n\
    \            if(i == 1){\n                for(int k = 0; k < operand.size(); k++){\n\
    \                    if(operand.get(k) == 0){\n                        result\
    \ = result;\n                    }else if(operand.get(k) == 1){\n            \
    \            result = result;\n                    }else{\n                  \
    \      result = result / operand.get(k);\n                    }\n            \
    \    }\n            }\n            if(i == 2){\n                for(int k = 0;\
    \ k < operand.size(); k++){\n                    if(operand.get(k) == 0){\n  \
    \                      result = result;\n                    }else if(operand.get(k)\
    \ == 1){\n                        result = result;\n                    }else{\n\
    \                        result = result / operand.get(k);\n                 \
    \   }\n                }\n            }\n            if(i == 3){\n           \
    \     for(int k = 0; k < operand.size(); k++){\n                    if(operand.get(k)\
    \ == 0){\n                        result = result;\n                    }else\
    \ if(operand.get(k) == 1){\n                        result = result;\n       \
    \             }else{\n                        result = result ** operand.get(k);\n\
    \                    }\n                }\n            }\n            if(i ==\
    \ 4){\n                for(int k = 0; k < operand.size(); k++){\n            \
    \        if(operand.get(k) == 0){\n                        result = result;\n\
    \                    }else if(operand.get(k) == 1){\n                        result\
    \ = result;\n                    }else{\n                        result = result\
    \ ** operand.get(k);\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hzgmdcq.java:82: error: illegal start of expression\n        \
    \                result = result ** operand.get(k);\n                        \
    \                 ^\n/tmp/tmp7hzgmdcq.java:93: error: illegal start of expression\n\
    \                        result = result ** operand.get(k);\n                \
    \                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        String[] operator = op.stream().toArray(String[]::new);\n\
    \        for (int i = 0; i < operator.length; i++) {\n            String operand0\
    \ = operand.get(i);\n            if (operator[i].equals(\"+\") || operator[i].equals(\"\
    -\") || operator[i].equals(\"*\") || operator[i].equals(\"/\")) {\n          \
    \      if (operand.isEmpty()) {\n                    throw new ArithmeticException(\"\
    The operand list is empty.\");\n                }\n                Long operand1\
    \ = Long.parseLong(operand.get(i));\n                if (operator[i].equals(\"\
    +\")) {\n                    result += operand1;\n                } else if (operator[i].equals(\"\
    -\")) {\n                    result -= operand1;\n                } else if (operator[i].equals(\"\
    *\")) {\n                    result *= operand1;\n                } else if (operator[i].equals(\"\
    /\")) {\n                    result /= operand1;\n                }\n        \
    \    } else {\n                throw new ArithmeticException(\"The operator list\
    \ is empty.\");\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nc0iez_.java:31: error: incompatible types: Long cannot be converted\
    \ to String\n            String operand0 = operand.get(i);\n                 \
    \                        ^\n/tmp/tmp5nc0iez_.java:36: error: incompatible types:\
    \ Long cannot be converted to String\n                Long operand1 = Long.parseLong(operand.get(i));\n\
    \                                                          ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code here\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaiq0s3i0.java:29: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (i\
    \ == 0) {\n                result = operand.get(0) * operand.get(1) + operand.get(2)\
    \ * operand.get(3) + operand.get(4);\n            }\n            if (i < op.size()\
    \ - 1) {\n                if (op.get(i) == \"+\") {\n                    result\
    \ = operand.get(0) + operand.get(1);\n                }\n                if (op.get(i)\
    \ == \"-\") {\n                    result = operand.get(0) - operand.get(1);\n\
    \                }\n                if (op.get(i) == \"*\") {\n              \
    \      result = operand.get(0) * operand.get(1);\n                }\n        \
    \        if (op.get(i) == \"//\") {\n                    result = operand.get(0)\
    \ / operand.get(1);\n                }\n                if (op.get(i) == \"**\"\
    ) {\n                    result = operand.get(0) * operand.get(1);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpeb_fwc8_.java:31)\n\tat Problem.main(tmpeb_fwc8_.java:54)\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Check input argument to see whether it is valid. \n        if (op.size() !=\
    \ operand.size() - 1) {\n            return -1L;\n        }\n        ArrayList<String>\
    \ left = new ArrayList<String>();\n        ArrayList<String> right = new ArrayList<String>();\n\
    \        // Convert operand to string array list.\n        for (long i : operand)\
    \ {\n            left.add(String.valueOf(i));\n        }\n        // Convert operator\
    \ to string array list.\n        Iterator<String> i = op.iterator();\n       \
    \ while (i.hasNext()) {\n            String next = i.next();\n            if (next.equals(\"\
    +\")) {\n                right.add(\"+\");\n            }\n            else if\
    \ (next.equals(\"-\")) {\n                right.add(\"-\");\n            }\n \
    \           else if (next.equals(\"*\")) {\n                right.add(\"*\");\n\
    \            }\n            else if (next.equals(\"//\")) {\n                right.add(\"\
    //\");\n            }\n            else if (next.equals(\"**\")) {\n         \
    \       right.add(\"**\");\n            }\n        }\n        // Make left and\
    \ right arraylist size equal\n        if (left.size() != right.size()) {\n   \
    \         return -1L;\n        }\n        // Convert left and right to string\
    \ arraylist.\n        ArrayList<String> left2 = new ArrayList<String>();\n   \
    \     ArrayList<String> right2 = new ArrayList<String>();\n        // Convert\
    \ left and right to string arraylist.\n        for (int j = 0; j < left.size();\
    \ j++) {\n            left2.add(left.get(j));\n        }\n        for (int j =\
    \ 0; j < right.size(); j++) {\n            right2.add(right.get(j));\n       \
    \ }\n        // Create binary tree\n        TreeNode root = new TreeNode(left2.get(0),\
    \ left2.get(1), left2.get(2), left2.get(3));\n        TreeNode current = root;\n\
    \        // Recursively traverse tree and evaluate \n        for (String str :\
    \ right2) {\n            switch (str) {\n                case \"+\":\n       \
    \             current.val3 = current.val1 + current.val2;\n                  \
    \  break;\n                case \"-\":\n                    current.val3 = current.val1\
    \ - current.val2;\n                    break;\n                case \"*\":\n \
    \                   current.val3 = current.val1 * current.val2;\n            \
    \        break;\n                case \"//\":\n                    current.val3\
    \ = current.val1 / current.val2;\n                    break;\n               \
    \ case \"**\":\n                    current.val3 = Math.pow(current.val1, current.val2);\n\
    \                    break;\n                default:\n                    return\
    \ -1L;\n            }\n            current = current.left;\n        }\n      \
    \  return current.val3;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ktcahpj.java:73: error: cannot find symbol\n        TreeNode root\
    \ = new TreeNode(left2.get(0), left2.get(1), left2.get(2), left2.get(3));\n  \
    \      ^\n  symbol:   class TreeNode\n  location: class Problem\n/tmp/tmp3ktcahpj.java:73:\
    \ error: cannot find symbol\n        TreeNode root = new TreeNode(left2.get(0),\
    \ left2.get(1), left2.get(2), left2.get(3));\n                            ^\n\
    \  symbol:   class TreeNode\n  location: class Problem\n/tmp/tmp3ktcahpj.java:74:\
    \ error: cannot find symbol\n        TreeNode current = root;\n        ^\n  symbol:\
    \   class TreeNode\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Map<String,\
    \ Function<Long, Long>> map = new HashMap<>();\n        map.put(\"+\", (a, b)\
    \ -> a + b);\n        map.put(\"-\", (a, b) -> a - b);\n        map.put(\"*\"\
    , (a, b) -> a * b);\n        map.put(\"//\", (a, b) -> a / b);\n        map.put(\"\
    **\", (a, b) -> a ** b);\n        Long sum = map.get(op.get(0)).apply(operand.get(0),\
    \ operand.get(1));\n        for (int i = 1; i < op.size(); i++) {\n          \
    \  sum = map.get(op.get(i)).apply(sum, operand.get(i));\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbiy0zhzm.java:33: error: illegal start of expression\n        map.put(\"\
    **\", (a, b) -> a ** b);\n                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String op1 : op) {\n            for (int i = 0; i\
    \ < operand.size()-1; i++) {\n                String operator = op1;\n       \
    \         long operand1 = operand.get(i);\n                long operand2 = operand.get(i+1);\n\
    \                switch (operator) {\n                case \"+\":\n          \
    \          result += operand1;\n                    break;\n                case\
    \ \"-\":\n                    result -= operand1;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    for (int j=0; j<operand2;\
    \ j++)\n                        result *= operand1;\n                    break;\n\
    \                default:\n                    break;\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_rddwhk.java:60)\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int length = (op.size() - 1);\n\n        for(int i = 1;\
    \ i < length; i ++) {\n            switch(op.get(i)) {\n                case \"\
    +\":\n                    result += operand.get(length - i - 1);\n           \
    \         break;\n                case \"-\":\n                    result -= operand.get(length\
    \ - i - 1);\n                    break;\n                case \"*\":\n       \
    \             result *= operand.get(length - i - 1);\n                    break;\n\
    \                case \"/\":\n                    result /= operand.get(length\
    \ - i - 1);\n                    break;\n                case \"//\":\n      \
    \              result /= operand.get(length - i - 1);\n                    break;\n\
    \                case \"**\":\n                    result *= operand.get(length\
    \ - i - 1);\n                    break;\n                default:\n          \
    \          throw new IllegalArgumentException(\"Invalid operator \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4tymy4lu.java:58)\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ operator = new ArrayList<String>();\n        int size = op.size();\n       \
    \ if (size <= 0) {\n            System.out.println(\"operator size must be greater\
    \ than 0\");\n            return Long.MIN_VALUE;\n        }\n        for (int\
    \ i = 0; i < size; i++) {\n            operator.add(op.get(i));\n        }\n \
    \       ArrayList<Long> operand0 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ operand1 = new ArrayList<Long>();\n        for (int i = 0; i < size - 1; i++)\
    \ {\n            operand0.add(operand.get(i));\n        }\n        for (int i\
    \ = 0; i < size - 1; i++) {\n            operand1.add(operand.get(i + 1));\n \
    \       }\n        long result = Long.MIN_VALUE;\n        if (operator.size()\
    \ <= 1) {\n            return result;\n        }\n        for (int i = 0; i <\
    \ operator.size(); i++) {\n            String operation = operator.get(i);\n \
    \           String operation0 = operation;\n            if (i < operator.size()\
    \ - 1) {\n                operation = operator.get(i + 1);\n                operation0\
    \ = operation;\n            }\n            Long operand0 = operand0.stream().filter(b\
    \ -> b != 0L).collect(Collectors.toList()).get(0L);\n            Long operand1\
    \ = operand1.stream().filter(b -> b != 0L).collect(Collectors.toList()).get(0L);\n\
    \            if (operation.equals(\"+\")) {\n                result = result +\
    \ operand0 + operand1;\n            }\n            else if (operation.equals(\"\
    -\")) {\n                result = result - operand0 - operand1;\n            }\n\
    \            else if (operation.equals(\"*\")) {\n                result = result\
    \ * operand0;\n            }\n            else if (operation.equals(\"//\")) {\n\
    \                result = result / operand0;\n            }\n            else\
    \ if (operation.equals(\"**\")) {\n                result = result ** operand0;\n\
    \            }\n            else {\n                System.out.println(\"invalid\
    \ operation \" + operation);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptejzr41t.java:71: error: illegal start of expression\n        \
    \        result = result ** operand0;\n                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Convert operand to double\n        List<Double> doubleOperand = operand.stream().map(x\
    \ -> Double.valueOf(x)).collect(Collectors.toList());\n        // Perform the\
    \ operation\n        double result = 0;\n        int index = 0;\n        \n  \
    \      for (String s : op) {\n            // Get the right side expression\n \
    \           double right = doubleOperand.get(index);\n            \n         \
    \   // Get the left side expression\n            double left = doubleOperand.get(index\
    \ + 1);\n            \n            // Perform the operation\n            switch\
    \ (s.charAt(0)) {\n                case '+':\n                    result = left\
    \ + right;\n                    break;\n                case '-':\n          \
    \          result = left - right;\n                    break;\n              \
    \  case '*':\n                    result = left * right;\n                   \
    \ break;\n                case '/':\n                    result = left / right;\n\
    \                    break;\n                case '%':\n                    result\
    \ = left % right;\n                    break;\n                case '^':\n   \
    \                 result = Math.pow(left, right);\n                    break;\n\
    \                case '**':\n                    result = Math.pow(left, right);\n\
    \                    break;\n            }\n            \n            index +=\
    \ 2;\n        }\n        \n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13y6b5pb.java:61: error: unclosed character literal\n         \
    \       case '**':\n                     ^\n/tmp/tmp13y6b5pb.java:61: error: unclosed\
    \ character literal\n                case '**':\n                        ^\n/tmp/tmp13y6b5pb.java:62:\
    \ error: illegal start of expression\n                    result = Math.pow(left,\
    \ right);\n                           ^\n/tmp/tmp13y6b5pb.java:62: error: : or\
    \ -> expected\n                    result = Math.pow(left, right);\n         \
    \                                         ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ expr = new ArrayList<>();\n        // Find the index of the first operator in\
    \ the array list op.\n        int index = 0;\n        while(index != op.size()\
    \ - 1) {\n            if(op.equals(operand)) {\n                return 0;\n  \
    \          }\n            expr = op.get(index).concat(expr);\n            index++;\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto3nriln.java:35: error: incompatible types: ArrayList<String>\
    \ cannot be converted to String\n            expr = op.get(index).concat(expr);\n\
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ i = 0;\n        long res = 0;\n        Set<String> set = new HashSet<String>();\n\
    \        for (String temp : op)\n            set.addAll(Arrays.asList(temp.split(\"\
    \\\\+\")));\n        for (String temp : set)\n            if (!(temp.equals(\"\
    \"))) {\n                int j = i+1;\n                while (j<set.size() &&\
    \ !(set.contains(temp.get(i)+set.get(j)))) {\n                    j++;\n     \
    \           }\n                String temp2 = set.get(j);\n                operand.remove(i);\n\
    \                operand.remove(i);\n                operand.remove(i);\n    \
    \            operand.add(j, operand.get(i));\n                operand.remove(i);\n\
    \                operand.add(j, operand.get(i));\n                operand.add(i,\
    \ operand.get(j));\n                operand.add(i, operand.get(j));\n        \
    \        temp2 = temp2.split(\"\\\\+\");\n                for (int j = 0; j <\
    \ temp2.length; j++) {\n                    if (temp2[j].equals(temp)) {\n   \
    \                     operand.add(i, operand.get(j));\n                    }\n\
    \                }\n                for (int j = 0; j < temp2.length; j++) {\n\
    \                    operand.add(j, operand.get(i));\n                }\n    \
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            Long\
    \ num1 = operand.get(i);\n            Long num2 = operand.get(i + 1);\n      \
    \      switch (op.get(i)) {\n                case \"+\":\n                   \
    \ res = res + num1;\n                    break;\n                case \"-\":\n\
    \                    res = res - num1;\n                    break;\n         \
    \       case \"*\":\n                    res = res * num1;\n                 \
    \   break;\n                case \"/\":\n                    res = res / num2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  res = res / (double) num2;\n                    break;\n                case\
    \ \"**\":\n                    res = res * (double) Math.pow(num1, num2);\n  \
    \                  break;\n                default:\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmio75nf9.java:36: error: cannot find symbol\n                while\
    \ (j<set.size() && !(set.contains(temp.get(i)+set.get(j)))) {\n              \
    \                                            ^\n  symbol:   method get(int)\n\
    \  location: variable temp of type String\n/tmp/tmpmio75nf9.java:36: error: cannot\
    \ find symbol\n                while (j<set.size() && !(set.contains(temp.get(i)+set.get(j))))\
    \ {\n                                                                     ^\n\
    \  symbol:   method get(int)\n  location: variable set of type Set<String>\n/tmp/tmpmio75nf9.java:39:\
    \ error: cannot find symbol\n                String temp2 = set.get(j);\n    \
    \                              ^\n  symbol:   method get(int)\n  location: variable\
    \ set of type Set<String>\n/tmp/tmpmio75nf9.java:48: error: incompatible types:\
    \ String[] cannot be converted to String\n                temp2 = temp2.split(\"\
    \\\\+\");\n                                   ^\n/tmp/tmpmio75nf9.java:49: error:\
    \ variable j is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \                for (int j = 0; j < temp2.length; j++) {\n                  \
    \       ^\n/tmp/tmpmio75nf9.java:49: error: cannot find symbol\n             \
    \   for (int j = 0; j < temp2.length; j++) {\n                               \
    \          ^\n  symbol:   variable length\n  location: variable temp2 of type\
    \ String\n/tmp/tmpmio75nf9.java:50: error: array required, but String found\n\
    \                    if (temp2[j].equals(temp)) {\n                          \
    \   ^\n/tmp/tmpmio75nf9.java:54: error: variable j is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n                for (int j = 0;\
    \ j < temp2.length; j++) {\n                         ^\n/tmp/tmpmio75nf9.java:54:\
    \ error: cannot find symbol\n                for (int j = 0; j < temp2.length;\
    \ j++) {\n                                         ^\n  symbol:   variable length\n\
    \  location: variable temp2 of type String\n/tmp/tmpmio75nf9.java:58: error: variable\
    \ i is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \        for (int i"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ opLen = op.size();\n        int operandLen = operand.size();\n\n        long\
    \ result = 0;\n        if (opLen != operandLen) {\n            throw new RuntimeException(\"\
    Invalid operator or operand.\");\n        }\n\n        for (int i = 0; i < operandLen\
    \ - 1; i++) {\n            String str = op.get(i);\n            long value = operand.get(i);\n\
    \            switch (str) {\n                case \" + \":\n                 \
    \   result += value;\n                    break;\n                case \" - \"\
    :\n                    result -= value;\n                    break;\n        \
    \        case \" * \":\n                    result *= value;\n               \
    \     break;\n                case \" // \":\n                    result /= value;\n\
    \                    break;\n                case \" ** \":\n                \
    \    result *= value;\n                    result *= value;\n                \
    \    break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator or operand.\");\n            }\n        }\n\n        if (op.get(opLen\
    \ - 1).equals(\" ** \")) {\n            return result * result;\n        } else\
    \ {\n            return result;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Invalid operator\
    \ or operand.\n\tat Problem.doAlgebra(tmpcxbwc32y.java:33)\n\tat Problem.main(tmpcxbwc32y.java:68)\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ reverseOp =  new ArrayList<>(op);\n        reverseOp.remove(0);\n        reverseOp.remove(reverseOp.size()\
    \ - 1);\n        long result = 0;\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            String opStr = op.get(i);\n            long operandNum = operand.get(i);\n\
    \            if (opStr.equals(\"+\")) {\n                result += operandNum;\n\
    \            } else if (opStr.equals(\"-\")) {\n                result -= operandNum;\n\
    \            } else if (opStr.equals(\"*\")) {\n                result *= operandNum;\n\
    \            } else if (opStr.equals(\"/\")) {\n                result /= operandNum;\n\
    \            } else if (opStr.equals(\"//\")) {\n                result /= operandNum;\n\
    \            } else if (opStr.equals(\"**\")) {\n                result **= operandNum;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpectfn23m.java:46: error: illegal start of expression\n        \
    \        result **= operandNum;\n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Create a data holder class for the arithmetic expression.\n        double result\
    \ = 0.0;\n        String opString = \"\";\n        long temp;\n\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            opString = op.get(i);\n          \
    \  try {\n                // For all elements in the operand array list, first\
    \ convert the element to Long.\n                temp = operand.get(i).longValue();\n\
    \            } catch (NumberFormatException e) { // if element is not numeric,\
    \ do not consider it.\n                continue;\n            }\n            switch\
    \ (opString) {\n                case \"+\": result += temp; break;\n         \
    \       case \"-\": result -= temp; break;\n                case \"*\": result\
    \ *= temp; break;\n                case \"/\": result /= temp; break;\n      \
    \          case \"//\": result /= temp; break;\n                case \"**\": result\
    \ *= temp; break;\n                default:\n                    continue;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6rctpxqe.java:52: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return result;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code here...\n        if (operand.size() == 1)\n            return operand.get(0);\n\
    \        if (op.size() == 2)\n            return operand.get(0) - operand.get(1);\n\
    \        ArrayList<Long> left = new ArrayList<>(operand.subList(1, operand.size()\
    \ - 1));\n        ArrayList<Long> right = new ArrayList<>(operand.subList(0, operand.size()\
    \ - 1));\n        if (op.contains(\"+\")) {\n            if (op.contains(\"-\"\
    ))\n                return left.get(left.size() - 1) + right.get(right.size()\
    \ - 1);\n            if (op.contains(\"*\"))\n                return left.get(left.size()\
    \ - 1) * right.get(right.size() - 1);\n            if (op.contains(\"//\"))\n\
    \                return left.get(left.size() - 1) // right.get(right.size() -\
    \ 1);\n            if (op.contains(\"**\"))\n                return Math.pow(left.get(left.size()\
    \ - 1), right.get(right.size() - 1));\n        }\n        if (op.contains(\"-\"\
    )) {\n            if (op.contains(\"*\"))\n                return left.get(left.size()\
    \ - 1) - right.get(right.size() - 1);\n            if (op.contains(\"//\"))\n\
    \                return left.get(left.size() - 1) // right.get(right.size() -\
    \ 1);\n            if (op.contains(\"**\"))\n                return Math.pow(left.get(left.size()\
    \ - 1), right.get(right.size() - 1));\n        }\n        if (op.contains(\"*\"\
    )) {\n            if (op.contains(\"//\"))\n                return left.get(left.size()\
    \ - 1) * right.get(right.size() - 1);\n            if (op.contains(\"**\"))\n\
    \                return Math.pow(left.get(left.size() - 1), right.get(right.size()\
    \ - 1));\n        }\n        if (op.contains(\"//\")) {\n            if (op.contains(\"\
    **\"))\n                return left.get(left.size() - 1) // right.get(right.size()\
    \ - 1);\n        }\n        if (op.contains(\"**\")) {\n            if (op.contains(\"\
    //\"))\n                return Math.pow(left.get(left.size() - 1), right.get(right.size()\
    \ - 1));\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbs8oons.java:41: error: ';' expected\n                return left.get(left.size()\
    \ - 1) // right.get(right.size() - 1);\n                                     \
    \           ^\n/tmp/tmpjbs8oons.java:49: error: ';' expected\n               \
    \ return left.get(left.size() - 1) // right.get(right.size() - 1);\n         \
    \                                       ^\n/tmp/tmpjbs8oons.java:61: error: ';'\
    \ expected\n                return left.get(left.size() - 1) // right.get(right.size()\
    \ - 1);\n                                                ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = Long.MIN_VALUE;\n        boolean isZero = false;\n        if (op.size()\
    \ != operand.size()) {\n            return 0;\n        }\n        for (int i =\
    \ 0; i < op.size(); i++) {\n            String operation = op.get(i);\n      \
    \      long operand1 = operand.get(i);\n            if (operation.equals(\"+\"\
    ) || operation.equals(\"-\") || operation.equals(\"*\")) {\n                result\
    \ += (operand1 instanceof Long) ? operand1 : operand1 * Long.parseLong(op.get(i\
    \ + 1));\n            } else if (operation.equals(\"/\")) {\n                if\
    \ (operand1 == 0) {\n                    isZero = true;\n                } else\
    \ {\n                    result /= operand1;\n                }\n            }\
    \ else if (operation.equals(\"//\")) {\n                if (operand1 == 0) {\n\
    \                    isZero = true;\n                } else {\n              \
    \      result /= operand1;\n                }\n            } else if (operation.equals(\"\
    **\")) {\n                if (operand1 == 0) {\n                    isZero = true;\n\
    \                } else {\n                    result **= operand1;\n        \
    \        }\n            }\n        }\n        // return 0 if both operand are\
    \ zero\n        if (isZero) {\n            return 0;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27c4p9en.java:54: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size() - 1; i++) {\n            result\
    \ += operand.get(i) * (Long.parseLong(op.get(i + 1)));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"*\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat Problem.doAlgebra(tmpjsv_4s15.java:30)\n\tat Problem.main(tmpjsv_4s15.java:35)\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ size = op.size() - 1;\n        long[] opArr = new long[size];\n        long[]\
    \ operandArr = new long[size];\n        for(int i = 0; i < size; i++) {\n    \
    \        opArr[i] = Long.parseLong(op.get(i));\n            operandArr[i] = Long.parseLong(operand.get(i\
    \ + 1));\n        }\n        long result = 0;\n        for(int i = 0; i < size;\
    \ i++) {\n            switch(opArr[i]) {\n                case ('+'):\n      \
    \              result += operandArr[i];\n                    break;\n        \
    \        case ('-'):\n                    result -= operandArr[i];\n         \
    \           break;\n                case ('*'):\n                    result *=\
    \ operandArr[i];\n                    break;\n                case ('/'):\n  \
    \                  result /= operandArr[i];\n                    break;\n    \
    \            case ('//'):\n                    result /= operandArr[i];\n    \
    \                break;\n                case ('**'):\n                    result\
    \ *= operandArr[i];\n                    break;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbwvlybpc.java:50: error: unclosed character literal\n         \
    \       case ('//'):\n                      ^\n/tmp/tmpbwvlybpc.java:50: error:\
    \ unclosed character literal\n                case ('//'):\n                 \
    \        ^\n/tmp/tmpbwvlybpc.java:53: error: unclosed character literal\n    \
    \            case ('**'):\n                      ^\n/tmp/tmpbwvlybpc.java:53:\
    \ error: unclosed character literal\n                case ('**'):\n          \
    \               ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Find the length of op list minus one.\n        int nop = op.size() - 1;\n  \
    \      // Find the length of operand list minus two.\n        int nop = operand.size()\
    \ - 2;\n        // Find the length of operand list minus one.\n        int nopa\
    \ = operand.size() - 1;\n        // Find the length of operator list minus one.\n\
    \        int nop = op.size() - 1;\n        // Set result to 0.\n        long result\
    \ = 0;\n        // Loop through each operand element.\n        for (int i = 0;\
    \ i < nopa; i++) {\n            // Loop through each operator element.\n     \
    \       for (int j = 0; j < nop; j++) {\n                // Use a switch statement\
    \ to perform the required operation.\n                switch (op.get(j)) {\n \
    \                   // If the current operator is +, then add operand to result\
    \ and shift operand left by one \n                    // position. Otherwise,\
    \ if the current operator is -, subtract operand from result. Otherwise,\n   \
    \                 // if the current operator is *, multiply result by the operand\
    \ and shift operand left by \n                    // one position. Otherwise,\
    \ if the current operator is //, then divide result by \n                    //\
    \ operand and shift operand left by one position. Otherwise, if the current operator\
    \ is **, \n                    // raise result to the operand and shift operand\
    \ left by one position.\n                    case \"+\":\n                   \
    \     result += (operand.get(j)).longValue();\n                        operand.remove(i).longValue();\n\
    \                        break;\n                    case \"-\":\n           \
    \             result -= (operand.get(j)).longValue();\n                      \
    \  operand.remove(i).longValue();\n                        break;\n          \
    \          case \"*\":\n                        result *= (operand.get(j)).longValue();\n\
    \                        operand.remove(i).longValue();\n                    \
    \    break;\n                    case \"//\":\n                        result\
    \ /= (operand.get(j)).longValue();\n                        operand.remove(i).longValue();\n\
    \                        break;\n                    case \"**\":\n          \
    \              result **= (operand.get(j)).longValue();\n                    \
    \    operand.remove(i).longValue();\n                        break;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzldfab7n.java:67: error: illegal start of expression\n        \
    \                result **= (operand.get(j)).longValue();\n                  \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ your code here\n        ArrayList<String> operartorList = Arrays.asList(op);\n\
    \        ArrayList<String> operandList = Arrays.asList(operand);\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        if (operartorList.size() <= 1) {\n    \
    \        return 0;\n        }\n        HashMap<String, Integer> operatorHashMap\
    \ = new HashMap<>();\n        operatorHashMap.put(\"+\", 1);\n        operatorHashMap.put(\"\
    *\", 2);\n        operatorHashMap.put(\"-\", 3);\n        operatorHashMap.put(\"\
    /\", 4);\n        operatorHashMap.put(\"//\", 5);\n        operatorHashMap.put(\"\
    **\", 6);\n        StringBuilder stringBuilder = new StringBuilder();\n      \
    \  stringBuilder.append(operartorList.get(0).toString());\n        stringBuilder.append(\"\
    \ \" + operandList.get(0).toString() + \" \");\n        for (int i = 1; i < operartorList.size();\
    \ i++) {\n            String keyName = operartorList.get(i);\n            int\
    \ operatorValue = operatorHashMap.get(keyName);\n            int operandValue\
    \ = operandList.get(i).intValue();\n            stringBuilder.append(keyName +\
    \ \" \" + operandValue + \" \");\n        }\n        String expression = stringBuilder.toString();\n\
    \        Long resultValue = Long.parseLong(expression);\n        return resultValue;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdvcgkg2.java:29: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     ArrayList<String> operartorList = Arrays.asList(op);\n                 \
    \                                      ^\n  where T is a type-variable:\n    T\
    \ extends Object declared in method <T>asList(T...)\n/tmp/tmprdvcgkg2.java:30:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ List<T> conforms to ArrayList<String>\n        ArrayList<String> operandList\
    \ = Arrays.asList(operand);\n                                                \
    \     ^\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>asList(T...)\n/tmp/tmprdvcgkg2.java:48: error: cannot find symbol\n     \
    \       int operandValue = operandList.get(i).intValue();\n                  \
    \                               ^\n  symbol:   method intValue()\n  location:\
    \ class String\n3 errors\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your solution here\n        long result = 0;\n        int count = 0;\n\
    \        long base = 1;\n        for (String oper : op) {\n            if (oper\
    \ == \"+\") {\n                long temp = operand.get(count - 1) + operand.get(count\
    \ + 1);\n                result += (temp * base);\n            } else if (oper\
    \ == \"-\") {\n                long temp = operand.get(count - 1) - operand.get(count\
    \ + 1);\n                result -= (temp * base);\n            } else if (oper\
    \ == \"*\") {\n                long temp = operand.get(count - 1) * operand.get(count\
    \ + 1);\n                result += (temp * base);\n            } else if (oper\
    \ == \"/\") {\n                long temp = operand.get(count - 1) / operand.get(count\
    \ + 1);\n                result -= (temp * base);\n            } else if (oper\
    \ == \"**\") {\n                long temp = operand.get(count - 1) * operand.get(count\
    \ + 1);\n                result += (temp * base);\n            }\n           \
    \ base = base * operand.get(count + 1);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpmh_ahse7.java:46)\n\tat Problem.main(tmpmh_ahse7.java:54)\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ create stack\n        ArrayList<String> opStack = new ArrayList<String>();\n\
    \        // create result object\n        long result = 0;\n        // loop through\
    \ operand\n        for (Long i : operand) {\n            // get last operator\
    \ from stack\n            String lastOper = opStack.get(opStack.size() - 1);\n\
    \            // if operand is a number\n            if (i instanceof Long) {\n\
    \                // get last number from stack\n                long lastNum =\
    \ Long.valueOf(opStack.get(opStack.size() - 1));\n                // create new\
    \ string based on operator and operand\n                String newOper = lastOper\
    \ + String.valueOf(i);\n                // if new string is not the same as last\
    \ string, add operand and operator to stack\n                if (!newOper.equals(lastOper))\
    \ {\n                    opStack.add(String.valueOf(i));\n                }\n\
    \                // if new string is the same as last string, multiply last number\
    \ by operand\n                else if (newOper.equals(lastOper)) {\n         \
    \           opStack.add(String.valueOf(i * lastNum));\n                }\n   \
    \         }\n            // if operand is operator\n            else {\n     \
    \           // get last operator from stack\n                String lastOper =\
    \ opStack.get(opStack.size() - 1);\n                // create new string based\
    \ on operator and operand\n                String newOper = lastOper + i;\n  \
    \              // if new string is not the same as last string, add operand and\
    \ operator to stack\n                if (!newOper.equals(lastOper)) {\n      \
    \              opStack.add(String.valueOf(i));\n                }\n          \
    \      // if new string is the same as last string, add operand to stack\n   \
    \             else if (newOper.equals(lastOper)) {\n                    opStack.add(String.valueOf(i));\n\
    \                }\n            }\n        }\n        // loop through stack backwards\n\
    \        for (int i = opStack.size() - 1; i >= 0; i--) {\n            // get last\
    \ operator from stack\n            String lastOper = opStack.get(i);\n       \
    \     // if last operator is operand\n            if (lastOper.equals(lastOper))\
    \ {\n                // multiply last number by operand\n                result\
    \ = result + (lastNum * Long.valueOf(lastOper));\n            }\n            //\
    \ else if last operator is operator\n            else {\n                // add\
    \ last operator to result\n                result = result + (Long.valueOf(lastOper));\n\
    \            }\n        }\n        // return result\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2zf0ku3.java:54: error: variable lastOper is already defined in\
    \ method doAlgebra(ArrayList<String>,ArrayList<Long>)\n                String\
    \ lastOper = opStack.get(opStack.size() - 1);\n                       ^\n/tmp/tmpm2zf0ku3.java:74:\
    \ error: cannot find symbol\n                result = result + (lastNum * Long.valueOf(lastOper));\n\
    \                                   ^\n  symbol:   variable lastNum\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        switch (op.get(0).charAt(0)) { // add the first operator\n\
    \        case '+':\n            for(int i = 1, s = 0, j = (int)op.get(0).charAt(1);\
    \ i < operand.size(); ++i, ++s)\n                result += operand.get(i - 1)\
    \ * operand.get(s);\n            result = result + doAlgebra(op.subList(1, op.size()),\
    \ operand.subList(1, operand.size()));\n            break;\n        case '-':\n\
    \            for(int i = 1, s = 0, j = (int)op.get(0).charAt(1); i < operand.size();\
    \ ++i, ++s)\n                result -= operand.get(i - 1) * operand.get(s);\n\
    \            result = result - doAlgebra(op.subList(1, op.size()), operand.subList(1,\
    \ operand.size()));\n            break;\n        case '*':\n            for(int\
    \ i = 1, s = 0, j = (int)op.get(0).charAt(1); i < operand.size(); ++i, ++s)\n\
    \                result *= operand.get(i - 1) * operand.get(s);\n            result\
    \ = result * doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size()));\n\
    \            break;\n        case '/':\n            for(int i = 1, s = 0, j =\
    \ (int)op.get(0).charAt(1); i < operand.size(); ++i, ++s)\n                result\
    \ /= operand.get(i - 1) * operand.get(s);\n            result = result / doAlgebra(op.subList(1,\
    \ op.size()), operand.subList(1, operand.size()));\n            break;\n     \
    \   case '^':\n            for(int i = 1, s = 0, j = (int)op.get(0).charAt(1);\
    \ i < operand.size(); ++i, ++s)\n                result *= operand.get(i - 1)\
    \ * operand.get(s);\n            result = result ** doAlgebra(op.subList(1, op.size()),\
    \ operand.subList(1, operand.size()));\n            break;\n        default:\n\
    \            System.out.println(\"Wrong operator \" + op.get(0));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ujfbla_.java:53: error: illegal start of expression\n        \
    \    result = result ** doAlgebra(op.subList(1, op.size()), operand.subList(1,\
    \ operand.size()));\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int length = op.size();\n        if(length == 0) return\
    \ 0;\n        if(length == 1) return operand.get(0);\n        if(length == 2)\
    \ {\n            switch(op.get(0)) {\n                case \"+\": result = operand.get(0)\
    \ + operand.get(1);\n                    break;\n                case \"-\": result\
    \ = operand.get(0) - operand.get(1);\n                    break;\n           \
    \     case \"*\": result = operand.get(0) * operand.get(1);\n                \
    \    break;\n                case \"//\": result = operand.get(0) / operand.get(1);\n\
    \                    break;\n                case \"**\": result = operand.get(0)\
    \ % operand.get(1);\n                    break;\n                default: return\
    \ -1;\n            }\n        } else {\n            switch(op.get(0)) {\n    \
    \            case \"+\": result = doAlgebra(op.subList(1, length), operand.subList(0,\
    \ length-1));\n                    break;\n                case \"-\": result\
    \ = doAlgebra(op.subList(1, length), operand.subList(0, length-1));\n        \
    \            break;\n                case \"*\": result = doAlgebra(op.subList(1,\
    \ length), operand.subList(0, length-1));\n                    break;\n      \
    \          case \"//\": result = doAlgebra(op.subList(1, length), operand.subList(0,\
    \ length-1));\n                    break;\n                case \"**\": result\
    \ = doAlgebra(op.subList(1, length), operand.subList(0, length-1));\n        \
    \            break;\n                default: return -1;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb5irrlm6.java:48: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n                case \"+\": result = doAlgebra(op.subList(1,\
    \ length), operand.subList(0, length-1));\n                                  \
    \                     ^\n/tmp/tmpb5irrlm6.java:50: error: incompatible types:\
    \ List<String> cannot be converted to ArrayList<String>\n                case\
    \ \"-\": result = doAlgebra(op.subList(1, length), operand.subList(0, length-1));\n\
    \                                                       ^\n/tmp/tmpb5irrlm6.java:52:\
    \ error: incompatible types: List<String> cannot be converted to ArrayList<String>\n\
    \                case \"*\": result = doAlgebra(op.subList(1, length), operand.subList(0,\
    \ length-1));\n                                                       ^\n/tmp/tmpb5irrlm6.java:54:\
    \ error: incompatible types: List<String> cannot be converted to ArrayList<String>\n\
    \                case \"//\": result = doAlgebra(op.subList(1, length), operand.subList(0,\
    \ length-1));\n                                                        ^\n/tmp/tmpb5irrlm6.java:56:\
    \ error: incompatible types: List<String> cannot be converted to ArrayList<String>\n\
    \                case \"**\": result = doAlgebra(op.subList(1, length), operand.subList(0,\
    \ length-1));\n                                                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n5 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code goes here\n        long result = 0;\n        long index = 0;\n   \
    \     while(index < op.size() && index < operand.size()) {\n            String\
    \ op = op.get(index);\n            String operand1 = operand.get(index);\n   \
    \         String operand2 = operand.get(index + 1);\n            if(op.equals(\"\
    +\"))\n                result += Long.parseLong(operand1);\n            else if(op.equals(\"\
    -\"))\n                result -= Long.parseLong(operand1);\n            else if(op.equals(\"\
    *\"))\n                result *= Long.parseLong(operand1);\n            else if(op.equals(\"\
    //\"))\n                result /= Long.parseLong(operand1);\n            else\
    \ if(op.equals(\"**\"))\n                result *= Double.parseDouble(operand1);\n\
    \            else {\n                index++;\n                index++;\n    \
    \            System.out.println(\"Invalid operation!\");\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7_hbp1d.java:32: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(index);\n\
    \                   ^\n/tmp/tmpu7_hbp1d.java:32: error: cannot find symbol\n \
    \           String op = op.get(index);\n                          ^\n  symbol:\
    \   method get(long)\n  location: variable op of type String\n/tmp/tmpu7_hbp1d.java:33:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        String operand1 = operand.get(index);\n                             \
    \             ^\n/tmp/tmpu7_hbp1d.java:34: error: incompatible types: possible\
    \ lossy conversion from long to int\n            String operand2 = operand.get(index\
    \ + 1);\n                                                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code here\n        long[] eval = Arrays.stream(operand.toArray()).mapToLong(i\
    \ -> {\n            long[] r = new long[op.size()];\n            int j = 0;\n\
    \            for(String o : op){\n                if(i == 0)\n               \
    \     r[j] = 0;\n                if(i == 1)\n                    r[j] = 1;\n \
    \               else if(i == 2)\n                    r[j] = 1;\n             \
    \   else if(i == 3)\n                    r[j] = 0;\n                else if(i\
    \ == 4)\n                    r[j] = -1;\n                else if(i == 5)\n   \
    \                 r[j] = 1;\n                else if(i == 6)\n               \
    \     r[j] = 0;\n                else if(i == 7)\n                    r[j] = -1;\n\
    \                else\n                    r[j] = i;\n                j++;\n \
    \           }\n            return r;\n        }).toArray(long[]::new);\n     \
    \   return eval[0] + eval[1];\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxzm01z4.java:33: error: bad operand types for binary operator\
    \ '=='\n                if(i == 0)\n                     ^\n  first type:  Object\n\
    \  second type: int\n/tmp/tmppxzm01z4.java:35: error: bad operand types for binary\
    \ operator '=='\n                if(i == 1)\n                     ^\n  first type:\
    \  Object\n  second type: int\n/tmp/tmppxzm01z4.java:37: error: bad operand types\
    \ for binary operator '=='\n                else if(i == 2)\n                \
    \          ^\n  first type:  Object\n  second type: int\n/tmp/tmppxzm01z4.java:39:\
    \ error: bad operand types for binary operator '=='\n                else if(i\
    \ == 3)\n                          ^\n  first type:  Object\n  second type: int\n\
    /tmp/tmppxzm01z4.java:41: error: bad operand types for binary operator '=='\n\
    \                else if(i == 4)\n                          ^\n  first type: \
    \ Object\n  second type: int\n/tmp/tmppxzm01z4.java:43: error: bad operand types\
    \ for binary operator '=='\n                else if(i == 5)\n                \
    \          ^\n  first type:  Object\n  second type: int\n/tmp/tmppxzm01z4.java:45:\
    \ error: bad operand types for binary operator '=='\n                else if(i\
    \ == 6)\n                          ^\n  first type:  Object\n  second type: int\n\
    /tmp/tmppxzm01z4.java:47: error: bad operand types for binary operator '=='\n\
    \                else if(i == 7)\n                          ^\n  first type: \
    \ Object\n  second type: int\n/tmp/tmppxzm01z4.java:50: error: incompatible types:\
    \ Object cannot be converted to long\n                    r[j] = i;\n        \
    \                   ^\n/tmp/tmppxzm01z4.java:53: error: incompatible types: bad\
    \ return type in lambda expression\n            return r;\n                  \
    \ ^\n    long[] cannot be converted to long\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n10 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Integer>\
    \ operandList = new ArrayList<Integer>();\n        for(int i = 0; i < operand.size();\
    \ i++) {\n            operandList.add(operand.get(i));\n        }\n        StringBuilder\
    \ expression = new StringBuilder();\n        for(int i = 0; i < op.size(); i++)\
    \ {\n            expression.append(op.get(i));\n            expression.append(operandList.get(i));\n\
    \            if(i < op.size() - 1)\n                expression.append(\" + \"\
    );\n        }\n        return Long.parseLong(expression.toString());\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg26s686.java:30: error: incompatible types: Long cannot be converted\
    \ to Integer\n            operandList.add(operand.get(i));\n                 \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code here.\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6p8wob7.java:29: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        Map<String, Map<String, Long>> operations\
    \ = new HashMap<>();\n        Map<String, Map<String, Long>> operators = new HashMap<>();\n\
    \        for (String opString : op) {\n            long result = 0;\n        \
    \    if (operators.containsKey(opString)) {\n                Map<String, Long>\
    \ opMap = operators.get(opString);\n                for (String operand : operand)\
    \ {\n                    if (opMap.containsKey(operand)) {\n                 \
    \       result = result + opMap.get(operand);\n                    } else {\n\
    \                        String opString1 = opString;\n                      \
    \  String operand1 = operand.toString();\n                        opString1 =\
    \ opString.substring(0, 1).toLowerCase() + opString.substring(1);\n          \
    \              operand1 = operand.toString();\n                        opString1\
    \ = opString.substring(0, opString.indexOf(\"(\"));\n                        operand1\
    \ = operand.substring(0, operand.indexOf(\"(\"));\n                        String\
    \ operand2 = operand.substring(operand.indexOf(\"(\") + 1, operand.indexOf(\"\
    )\"));\n                        opString1 = opString1.substring(0, opString1.indexOf(\"\
    (\"));\n                        operand1 = operand1.substring(0, operand1.indexOf(\"\
    (\"));\n                        String operand3 = operand.substring(operand.indexOf(\"\
    (\") + 1, operand.indexOf(\")\"));\n                        opString1 = opString1.substring(0,\
    \ opString1.indexOf(\"(\"));\n                        operand1 = operand1.substring(0,\
    \ operand1.indexOf(\"(\"));\n                        String operand4 = operand.substring(operand.indexOf(\"\
    (\") + 1, operand.indexOf(\")\"));\n                        opString1 = opString1.substring(0,\
    \ opString1.indexOf(\"(\"));\n                        operand1 = operand1.substring(0,\
    \ operand1.indexOf(\"(\"));\n                        Long operand2L;\n       \
    \                 if (operand2.equals(\"-\")) {\n                            operand2L\
    \ = -(long) Long.parseLong(operand2.substring(1));\n                        }\
    \ else {\n                            operand2L = (long) Long.parseLong(operand2);\n\
    \                        }\n                        String operand3 = operand3.substring(0,\
    \ operand3.indexOf(\"(\"));\n                        operand3 = operand3.substring(0,\
    \ operand3.indexOf(\"(\"));\n                        Long operand3L;\n       \
    \                 if (operand3.equals(\"-\")) {\n                            operand3L\
    \ = -(long) Long.parseLong(operand3.substring(1));\n                        }\
    \ else {\n                            operand3L = (long) Long.parseLong(operand3);\n\
    \                        }\n                        String operand4 = operand4.substring(0,\
    \ operand4.indexOf(\"(\"));\n                        operand4 = operand4.substring(0,\
    \ operand4.indexOf(\"(\"));\n                        Long operand4L;\n       \
    \                 if (operand4.equals(\"-\")) {\n                            operand4L\
    \ = -(long) Long.parseLong(operand4.substring(1));\n                        \n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpko1fcwfc.java:75: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        long exp = 1;\n        for (String op1 : op) {\n      \
    \      for (Long num : operand) {\n                switch (op1) {\n          \
    \          case \"+\":\n                        result = result + num;\n     \
    \                   break;\n                    case \"-\":\n                \
    \        result = result - num;\n                        break;\n            \
    \        case \"*\":\n                        result = result * num;\n       \
    \                 break;\n                    case \"/\":\n                  \
    \      if (num < 0) {\n                            throw new ArithmeticException(\"\
    Cannot divide by zero.\");\n                        }\n                      \
    \  result = result / num;\n                        break;\n                  \
    \  case \"//\":\n                        if (num < 0) {\n                    \
    \        throw new ArithmeticException(\"Cannot divide by zero.\");\n        \
    \                }\n                        result = result / num;\n         \
    \               exp *= num;\n                        break;\n                \
    \    case \"**\":\n                        exp *= num;\n                     \
    \   break;\n                    default:\n                        throw new ArithmeticException(\"\
    Cannot find the operator \" + op1);\n                }\n            }\n      \
    \  }\n        return result * exp;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposgh7isx.java:66)\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        switch (op.get(0)) {\n        case \"+\":\n           \
    \ result = operand.get(0) + operand.get(1);\n            break;\n        case\
    \ \"-\":\n            result = operand.get(0) - operand.get(1);\n            break;\n\
    \        case \"*\":\n            result = operand.get(0) * operand.get(1);\n\
    \            break;\n        case \"//\":\n            result = operand.get(0)\
    \ / operand.get(1);\n            break;\n        case \"**\":\n            result\
    \ = Math.pow(operand.get(0), operand.get(1));\n            break;\n        default:\n\
    \            break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdb30w9k1.java:43: error: incompatible types: possible lossy conversion\
    \ from double to long\n            result = Math.pow(operand.get(0), operand.get(1));\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = 0;\n        \n        int oper = 0;\n        int oper = op.size();\n \
    \       int oper1 = operand.size();\n        int oper2 = 0;\n        \n      \
    \  ArrayList<String> temp = new ArrayList<String>();\n        ArrayList<Long>\
    \ temp1 = new ArrayList<Long>();\n        \n        //System.out.println(\"oper1\
    \ = \" + oper1);\n        \n        //System.out.println(oper + \" \" + oper1\
    \ + \" = \" + temp1 + \" \" + oper2);\n        \n        if(oper1 > oper){\n \
    \           for(int i = 0; i <(oper1 - oper); i++){\n                temp1.add(operand.get(i));\n\
    \            }\n        }else{\n            for(int i = 0; i < (oper - oper1);\
    \ i++){\n                temp.add(op.get(i));\n            }\n        }\n    \
    \    \n        //System.out.println(\"temp1 = \" + temp1);\n        \n       \
    \ //System.out.println(temp.size() + \" \" + temp.size());\n        \n       \
    \ for(int i = 0; i < temp.size();i++){\n            \n            for(int j =\
    \ 0; j < temp1.size();j++){\n                \n                if(temp.get(i)\
    \ == op1.get(j)){\n                    //System.out.println(temp.get(j));\n  \
    \                  //System.out.println(temp1.get(j));\n                    res\
    \ = res + temp1.get(j);\n                }\n            }\n        }\n       \
    \ \n        //System.out.println(res);\n        \n        //System.out.println(res);\n\
    \        \n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6npl1q6.java:31: error: variable oper is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n        int oper = op.size();\n\
    \            ^\n/tmp/tmpy6npl1q6.java:60: error: cannot find symbol\n        \
    \        if(temp.get(i) == op1.get(j)){\n                                  ^\n\
    \  symbol:   variable op1\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size()\
    \ < 2 || operand.size() < 2) {\n            System.out.println(\"Operator array\
    \ list should have at least one operator and two operands.\");\n            return\
    \ 0;\n        }\n        if(op.size() > 1) {\n            int count = op.size();\n\
    \            int last = op.size()-1;\n            for(int i=0; i < last; i++)\
    \ {\n                if(i == (count-1)) {\n                    return Integer.parseInt(op.get(i))\
    \ + Integer.parseInt(operand.get(i));\n                }\n                if(i\
    \ == (count-2)) {\n                    return Integer.parseInt(op.get(i)) - Integer.parseInt(operand.get(i));\n\
    \                }\n                if(i == (count-3)) {\n                   \
    \ return Integer.parseInt(op.get(i)) * Integer.parseInt(operand.get(i));\n   \
    \             }\n                if(i == (count-4)) {\n                    return\
    \ Integer.parseInt(op.get(i)) / Integer.parseInt(operand.get(i));\n          \
    \      }\n                if(i == (count-5)) {\n                    return Math.pow(Integer.parseInt(op.get(i)),\
    \ Integer.parseInt(operand.get(i)));\n                }\n            }\n     \
    \   }\n        System.out.println(\"Operator array list should have at least one\
    \ operator.\");\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkdijnt5.java:37: error: incompatible types: Long cannot be converted\
    \ to String\n                    return Integer.parseInt(op.get(i)) + Integer.parseInt(operand.get(i));\n\
    \                                                                            \
    \         ^\n/tmp/tmpgkdijnt5.java:40: error: incompatible types: Long cannot\
    \ be converted to String\n                    return Integer.parseInt(op.get(i))\
    \ - Integer.parseInt(operand.get(i));\n                                      \
    \                                               ^\n/tmp/tmpgkdijnt5.java:43: error:\
    \ incompatible types: Long cannot be converted to String\n                   \
    \ return Integer.parseInt(op.get(i)) * Integer.parseInt(operand.get(i));\n   \
    \                                                                            \
    \      ^\n/tmp/tmpgkdijnt5.java:46: error: incompatible types: Long cannot be\
    \ converted to String\n                    return Integer.parseInt(op.get(i))\
    \ / Integer.parseInt(operand.get(i));\n                                      \
    \                                               ^\n/tmp/tmpgkdijnt5.java:49: error:\
    \ incompatible types: Long cannot be converted to String\n                   \
    \ return Math.pow(Integer.parseInt(op.get(i)), Integer.parseInt(operand.get(i)));\n\
    \                                                                            \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = 0;\n        for (String opStr : op) {\n            try {\n           \
    \     Class opClass = Class.forName(opStr);\n                Method opMethod =\
    \ opClass.getMethod(\"apply\", new Class[]{Long.TYPE});\n                Object[]\
    \ opArgs = new Object[operand.size()];\n                for (int i = 0; i < opArgs.length;\
    \ i++)\n                    opArgs[i] = operand.get(i);\n                opMethod.invoke(null,\
    \ opArgs);\n                res = res + opMethod.invoke(null, opArgs);\n     \
    \       } catch (Exception e) {\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcvzbocn.java:37: error: bad operand types for binary operator\
    \ '+'\n                res = res + opMethod.invoke(null, opArgs);\n          \
    \                ^\n  first type:  long\n  second type: Object\nNote: /tmp/tmptcvzbocn.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ operatorLen = op.size();\n        int operandLen = operand.size() - 1;\n   \
    \     // For each operation, check its precedence. \n        // If it has a lower\
    \ precedence than the current precedence of the operation, the \n        // precedence\
    \ of the operation is changed to lower precedence. \n        for (int i = 0; i\
    \ < operatorLen; i++) {\n            String curOp = op.get(i);\n            int\
    \ curPrecedence = getPrecedence(curOp);\n            if (curPrecedence > getPrecedence(op.get(i\
    \ + 1)))\n                swap(op, i + 1, i);\n        }\n        // For each\
    \ operator, check its precedence and its associativity. \n        // If it has\
    \ a lower precedence than the current precedence of the operation, the \n    \
    \    // precedence of the operation is changed to lower precedence. \n       \
    \ for (int i = 0; i < operatorLen; i++) {\n            String curOp = op.get(i);\n\
    \            int curPrecedence = getPrecedence(curOp);\n            if (curPrecedence\
    \ > getPrecedence(op.get(i + 1)))\n                swap(op, i + 1, i);\n     \
    \   }\n\n        // For each operation, calculate its value. \n        // If an\
    \ operator has higher precedence than the current precedence of the operation,\
    \ \n        // the precedence of the operation is changed to higher precedence.\
    \ \n        for (int i = 0; i < operandLen; i++) {\n            long curOp = operand.get(i);\n\
    \            int curPrecedence = getPrecedence(curOp);\n            if (curPrecedence\
    \ < getPrecedence(op.get(i + 1)))\n                swap(op, i + 1, i);\n     \
    \   }\n\n        // Get and return the value\n        return getValue(op);\n \
    \   }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1ns3sp4.java:35: error: cannot find symbol\n            int curPrecedence\
    \ = getPrecedence(curOp);\n                                ^\n  symbol:   method\
    \ getPrecedence(String)\n  location: class Problem\n/tmp/tmpb1ns3sp4.java:36:\
    \ error: cannot find symbol\n            if (curPrecedence > getPrecedence(op.get(i\
    \ + 1)))\n                                ^\n  symbol:   method getPrecedence(String)\n\
    \  location: class Problem\n/tmp/tmpb1ns3sp4.java:37: error: cannot find symbol\n\
    \                swap(op, i + 1, i);\n                ^\n  symbol:   method swap(ArrayList<String>,int,int)\n\
    \  location: class Problem\n/tmp/tmpb1ns3sp4.java:44: error: cannot find symbol\n\
    \            int curPrecedence = getPrecedence(curOp);\n                     \
    \           ^\n  symbol:   method getPrecedence(String)\n  location: class Problem\n\
    /tmp/tmpb1ns3sp4.java:45: error: cannot find symbol\n            if (curPrecedence\
    \ > getPrecedence(op.get(i + 1)))\n                                ^\n  symbol:\
    \   method getPrecedence(String)\n  location: class Problem\n/tmp/tmpb1ns3sp4.java:46:\
    \ error: cannot find symbol\n                swap(op, i + 1, i);\n           \
    \     ^\n  symbol:   method swap(ArrayList<String>,int,int)\n  location: class\
    \ Problem\n/tmp/tmpb1ns3sp4.java:54: error: cannot find symbol\n            int\
    \ curPrecedence = getPrecedence(curOp);\n                                ^\n \
    \ symbol:   method getPrecedence(long)\n  location: class Problem\n/tmp/tmpb1ns3sp4.java:55:\
    \ error: cannot find symbol\n            if (curPrecedence < getPrecedence(op.get(i\
    \ + 1)))\n                                ^\n  symbol:   method getPrecedence(String)\n\
    \  location: class Problem\n/tmp/tmpb1ns3sp4.java:56: error: cannot find symbol\n\
    \                swap(op, i + 1, i);\n                ^\n  symbol:   method swap(ArrayList<String>,int,int)\n\
    \  location: class Problem\n/tmp/tmpb1ns3sp4.java:60: error: cannot find symbol\n\
    \        return getValue(op);\n               ^\n  symbol:   method getValue(ArrayList<String>)\n\
    \  location: class Problem\n10 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //write\
    \ your code\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5mq9gtt.java:32)\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        Operator op1 = new Operator(op);\n        System.out.println(op1);\n\
    \        System.out.println(operand);\n        System.out.println(operand.size());\n\
    \        for (Long i : operand) {\n            System.out.println(\"i=\" + i);\n\
    \        }\n        int i = 0;\n        while (i < op.size()) {\n            int\
    \ j = op.size() - 1;\n            int k = 0;\n            while (k <= j) {\n \
    \               long l = 0;\n                for (int m = 0; m < operand.size();\
    \ m++) {\n                    l += op1.value1(operand.get(m), operand.get(m));\n\
    \                }\n                System.out.println(\"j=\" + j + \"k=\" + k\
    \ + \"l=\" + l);\n                result += l;\n                k++;\n       \
    \     }\n            i++;\n        }\n        System.out.println(result);\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6d7loebt.java:29: error: cannot find symbol\n        Operator op1\
    \ = new Operator(op);\n        ^\n  symbol:   class Operator\n  location: class\
    \ Problem\n/tmp/tmp6d7loebt.java:29: error: cannot find symbol\n        Operator\
    \ op1 = new Operator(op);\n                           ^\n  symbol:   class Operator\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() < 2) {\n            return 0;\n        }\n        long result = 0;\n\
    \        ArrayList<String> opsAsString = new ArrayList<>();\n        ArrayList<String>\
    \ op = new ArrayList<>();\n        ArrayList<String> operand = new ArrayList<>();\n\
    \        ArrayList<String> operand2 = new ArrayList<>();\n        opsAsString.addAll(Arrays.asList(op));\n\
    \        for (int i = 0; i < opsAsString.size(); i++) {\n            op.add(opsAsString.get(i));\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = operand.size(); i > 0; i--) {\n            operand2.add(operand.get(i\
    \ - 1).toString());\n        }\n        op = op.reverse();\n        opsAsString.addAll(Arrays.asList(op));\n\
    \        for (int i = 0; i < opsAsString.size(); i++) {\n            op.add(opsAsString.get(i));\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand2.size(); i++) {\n            operand2.add(operand2.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand2.size(); i++) {\n            operand.add(operand2.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \        }\n        for (int i = 0; i < operand.size(); i++) {\n            operand.add(operand.get(i).toString());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p7eflnu.java:106: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            String\
    \ opSymbol = op.get(i);\n            double numVal = Double.parseDouble(operand.get(i));\n\
    \            switch(opSymbol) {\n                case \"+\":\n               \
    \     result = result + numVal;\n                    break;\n                case\
    \ \"-\":\n                    result = result - numVal;\n                    break;\n\
    \                case \"*\":\n                    result = result * numVal;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = result / numVal;\n                    break;\n                case\
    \ \"**\":\n                    result = result ** numVal;\n                  \
    \  break;\n                default:\n                    System.out.println(\"\
    Invalid operator symbol.\");\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mxu7mxv.java:46: error: illegal start of expression\n        \
    \            result = result ** numVal;\n                                    \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (String s : op) {\n            if (s.equals(\"+\"))\n\
    \                result += operand.get(0);\n            else if (s.equals(\"-\"\
    ))\n                result -= operand.get(0);\n            else if (s.equals(\"\
    *\"))\n                result *= operand.get(0);\n            else if (s.equals(\"\
    /\"))\n                result /= operand.get(0);\n            else if (s.equals(\"\
    //\"))\n                result //= operand.get(0);\n            else if (s.equals(\"\
    **\"))\n                result *= operand.get(0);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6vmlzx8.java:39: error: not a statement\n                result\
    \ //= operand.get(0);\n                ^\n/tmp/tmps6vmlzx8.java:39: error: ';'\
    \ expected\n                result //= operand.get(0);\n                     \
    \ ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ This variable will store the result of the algebra.\n        long result = 0;\n\
    \        // This variable will store the temporary variable used to store the\
    \ intermediate result.\n        long temp = 0;\n        // This variable will\
    \ store the operator used to evaluate the algebra.\n        String lastOp = op.get(op.size()\
    \ - 1);\n        // This variable will store the array list of operands.\n   \
    \     ArrayList<Long> operands = operand;\n\n        // This loop will run for\
    \ every element in the operands array list.\n        for (long i : operands) {\n\
    \            // This loop will run for every element in the operand array list.\
    \ \n            for (int j = 0; j < op.size(); j++) {\n                // If the\
    \ last operator in the op array list is equal to the current operator. \n    \
    \            if (op.size() - 1 == j && lastOp.equals(op.get(j))) {\n         \
    \           // We will evaluate the last operand in the operands array list.\n\
    \                    temp = i;\n                    // Break out of the j loop.\n\
    \                    break;\n                }\n                // If the last\
    \ operator in the op array list is not equal to the current operator. \n     \
    \           else if (!lastOp.equals(op.get(j))) {\n                    // We will\
    \ evaluate the current operand in the operands array list.\n                 \
    \   temp = i;\n                    // Jump out of the j loop.\n              \
    \      break;\n                }\n            }\n            // We will store\
    \ the current intermediate result.\n            result = temp + result;\n    \
    \    }\n        // Return the final result.\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s3ovgsa.java:63)\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ For each operator in operator array, take operands in operand array list as\
    \ parameters and calculate\n        // the result of the given operation\n   \
    \     long result = 0;\n        ArrayList<String> operators = op;\n        ArrayList<Long>\
    \ operands = operand;\n        for (String operator : operators) {\n         \
    \   if (operator.equals(\"+\")) {\n                result = result + operands.get(operands.size()\
    \ - 1);\n            } else if (operator.equals(\"*\")) {\n                result\
    \ = result * operands.get(operands.size() - 1);\n            } else if (operator.equals(\"\
    -\")) {\n                result = result - operands.get(operands.size() - 1);\n\
    \            } else if (operator.equals(\"//\")) {\n                result = result\
    \ / operands.get(operands.size() - 1);\n            } else if (operator.equals(\"\
    **\")) {\n                result = result ** operands.get(operands.size() - 1);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36smrx1j.java:43: error: illegal start of expression\n        \
    \        result = result ** operands.get(operands.size() - 1);\n             \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ n = op.size() - 1;\n        long res = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (i < n) {\n                long l = 0;\n                for\
    \ (int j = 0; j < n; j++) {\n                    if (i == j) {\n             \
    \           l += operand.get(j);\n                    }\n                    else\
    \ {\n                        l += operand.get(j) * op.get(i).charAt(j);\n    \
    \                }\n                }\n                res += l;\n           \
    \ }\n            else {\n                res += operand.get(0);\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdjgstuwu.java:50)\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size())\n            return -1;\n        long ans = operand.get(0).longValue();\n\
    \        for (int i = 1; i < op.size(); i++) {\n            long val = operand.get(i).longValue();\n\
    \            switch (op.get(i)) {\n                case \"+\":\n             \
    \       ans += val;\n                    break;\n                case \"-\":\n\
    \                    ans -= val;\n                    break;\n               \
    \ case \"*\":\n                    ans *= val;\n                    break;\n \
    \               case \"//\":\n                    ans /= val;\n              \
    \      break;\n                case \"**\":\n                    ans **= val;\n\
    \                    break;\n                default:\n                    return\
    \ -1;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1mgfjr6.java:47: error: illegal start of expression\n        \
    \            ans **= val;\n                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.length() - 1; i++) {\n          \
    \  switch(op.get(i).charAt(0)) {\n            case '+':\n                result\
    \ += operand.get(i);\n                break;\n            case '-':\n        \
    \        result -= operand.get(i);\n                break;\n            case '*':\n\
    \                result *= operand.get(i);\n                break;\n         \
    \   case '/':\n                result /= operand.get(i);\n                break;\n\
    \            case '^':\n                result /= operand.get(i);\n          \
    \      break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp745vd6aq.java:29: error: cannot find symbol\n        for(int i\
    \ = 0; i < op.length() - 1; i++) {\n                             ^\n  symbol:\
    \   method length()\n  location: variable op of type ArrayList<String>\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Create Stack class\n        Stack stack = new Stack();\n        // Initializing\
    \ some variables.\n        long result = 0, i = 0; // result and i are for stack\
    \ operations.\n\n        // For loop for iterating and getting values from arraylist\n\
    \        for(String operator : op){\n            System.out.println(\"Operator:\
    \ \" + operator);\n            stack = new Stack(); // Initializing stack variable.\n\
    \            // If first time looping, then do addition of operands.\n       \
    \     if(stack.peek().equals(\"+\")){\n                while(i < operand.size()){\n\
    \                    stack.add(operand.get(i));\n                    i++;\n  \
    \              }\n            }\n            // If second time looping, then do\
    \ subtraction of operands.\n            else if(stack.peek().equals(\"-\")){\n\
    \                while(i < operand.size()){\n                    stack.add(operand.get(i));\n\
    \                    i++;\n                }\n            }\n            // If\
    \ third time looping, then do multiplication of operands.\n            else if(stack.peek().equals(\"\
    *\")){\n                while(i < operand.size()){\n                    stack.add(operand.get(i));\n\
    \                    i++;\n                }\n            }\n            // If\
    \ fourth time looping, then do floor division of operands.\n            else if(stack.peek().equals(\"\
    //\")){\n                while(i < operand.size()){\n                    stack.add(operand.get(i));\n\
    \                    i++;\n                }\n            }\n            // If\
    \ fifth time looping, then do exponentiation of operands.\n            else if(stack.peek().equals(\"\
    **\")){\n                while(i < operand.size()){\n                    stack.add(operand.get(i));\n\
    \                    i++;\n                }\n            }\n            // Else\
    \ the operator is \"=\"\n            else{\n                // If there are more\
    \ operands, then do addition.\n                if(operand.size() > 1){\n     \
    \               while(i < operand.size()){\n                        stack.add(operand.get(i));\n\
    \                        i++;\n                    }\n                    // If\
    \ there are more operands, then do subtraction.\n                }else if(operand.size()\
    \ > 0){\n                    // If there is only one operand, then do subtraction.\n\
    \                    if(operand.size() == 1){\n                        stack.add(operand.get(0));\n\
    \                    }\n                }else{\n                    // If there\
    \ are no more operands, then return 0.\n                    break;\n         \
    \       }\n            }\n            // Evaluate operation.\n            switch(operator){\n\
    \                case \"+\": \n                result = stack.pop() + stack.pop();\n\
    \                break;\n                case \"-\": \n                result\
    \ = stack.pop() - stack.pop();\n                break;\n                case \"\
    *\": \n                result = stack.pop() * stack.pop();\n                break;\n\
    \                case \"//\": \n                result = stack.pop() // stack.pop();\n\
    \                break;\n                case \"**\": \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxc5b3ucp.java:103: error: ';' expected\n                result\
    \ = stack.pop() // stack.pop();\n                                    ^\n/tmp/tmpxc5b3ucp.java:108:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long>\
    \ operand2 = new ArrayList<>();\n        for (Long i : operand) {\n          \
    \  operand2.add(i);\n        }\n        if (op.size() != operand2.size()) {\n\
    \            System.out.println(\"Invalid Input\");\n        }\n        long result\
    \ = 0;\n        for (String op : op) {\n            switch (op) {\n          \
    \      case \"+\":\n                    result = result + operand2.get(0);\n \
    \                   operand2.remove(0);\n                    break;\n        \
    \        case \"-\":\n                    result = result - operand2.get(0);\n\
    \                    operand2.remove(0);\n                    break;\n       \
    \         case \"*\":\n                    result = result * operand2.get(0);\n\
    \                    operand2.remove(0);\n                    break;\n       \
    \         case \"//\":\n                    result = result / operand2.get(0);\n\
    \                    operand2.remove(0);\n                    break;\n       \
    \         case \"**\":\n                    result = result ** operand2.get(0);\n\
    \                    operand2.remove(0);\n                    break;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9d5kkv4o.java:55: error: illegal start of expression\n        \
    \            result = result ** operand2.get(0);\n                           \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            if (operand.get(i)\
    \ <= 0) {\n                return result;\n            } else {\n            \
    \    switch (op.get(i)) {\n                    case \"*\": result = result * operand.get(i);\
    \ break;\n                    case \"+\": result = result + operand.get(i); break;\n\
    \                    case \"-\": result = result - operand.get(i); break;\n  \
    \                  case \"//\": result = result / operand.get(i); break;\n   \
    \                 case \"**\": result = result ** operand.get(i); break;\n   \
    \             }\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpornebt64.java:38: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand.get(i); break;\n        \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String>\
    \ left = new ArrayList<>();\n        ArrayList<String> right = new ArrayList<>();\n\
    \        // Use basic algebra operations to get the left and right side.\n   \
    \     for (int i = 0; i < op.size() - 1; i++) {\n            left.add(op.get(i));\n\
    \            right.add(op.get(i + 1));\n        }\n        long res = 0;\n   \
    \     for(int i=0; i<operand.size()-1; i++){\n            long operandValue =\
    \ operand.get(i);\n            long operatorValue = operand.get(i+1);\n      \
    \      switch(operatorValue){\n                case 1:\n                    res\
    \ = res + operandValue;\n                    break;\n                case 2:\n\
    \                    res = res - operandValue;\n                    break;\n \
    \               case 3:\n                    res = res * operandValue;\n     \
    \               break;\n                case 4:\n                    res = res\
    \ / (operandValue);\n                    break;\n                case 5:\n   \
    \                 res = res % (operandValue);\n                    break;\n  \
    \          }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1p1gtv8.java:39: error: patterns in switch statements are a preview\
    \ feature and are disabled by default.\n            switch(operatorValue){\n \
    \                 ^\n  (use --enable-preview to enable patterns in switch statements)\n\
    /tmp/tmpq1p1gtv8.java:40: error: constant label of type int is not compatible\
    \ with switch selector type long\n                case 1:\n                  \
    \   ^\n/tmp/tmpq1p1gtv8.java:43: error: constant label of type int is not compatible\
    \ with switch selector type long\n                case 2:\n                  \
    \   ^\n/tmp/tmpq1p1gtv8.java:46: error: constant label of type int is not compatible\
    \ with switch selector type long\n                case 3:\n                  \
    \   ^\n/tmp/tmpq1p1gtv8.java:49: error: constant label of type int is not compatible\
    \ with switch selector type long\n                case 4:\n                  \
    \   ^\n/tmp/tmpq1p1gtv8.java:52: error: constant label of type int is not compatible\
    \ with switch selector type long\n                case 5:\n                  \
    \   ^\n6 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < op.length; i++) {\n            String\
    \ op = op.get(i);\n            long sum = 0;\n            for (int j = 0; j <\
    \ operand.size(); j++) {\n                long value = operand.get(j);\n     \
    \           switch (op) {\n                case \"+\":\n                    sum\
    \ = sum + value;\n                    break;\n                case \"-\":\n  \
    \                  sum = sum - value;\n                    break;\n          \
    \      case \"*\":\n                    sum = sum * value;\n                 \
    \   break;\n                case \"//\":\n                    sum = sum / value;\n\
    \                    break;\n                case \"**\":\n                  \
    \  sum = sum * value;\n                    break;\n                }\n       \
    \     }\n            switch (op) {\n            case \"+\":\n                result\
    \ = sum;\n                break;\n            case \"-\":\n                result\
    \ = sum;\n                break;\n            case \"*\":\n                result\
    \ = sum;\n                break;\n            case \"//\":\n                result\
    \ = sum;\n                break;\n            case \"**\":\n                result\
    \ = sum;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwoq8d5ha.java:29: error: cannot find symbol\n        for (int i\
    \ = 0; i < op.length; i++) {\n                              ^\n  symbol:   variable\
    \ length\n  location: variable op of type ArrayList<String>\n/tmp/tmpwoq8d5ha.java:30:\
    \ error: variable op is already defined in method doAlgebra(ArrayList<String>,ArrayList<Long>)\n\
    \            String op = op.get(i);\n                   ^\n/tmp/tmpwoq8d5ha.java:30:\
    \ error: cannot find symbol\n            String op = op.get(i);\n            \
    \              ^\n  symbol:   method get(int)\n  location: variable op of type\
    \ String\n3 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        int size = op.size();\n        int num = 0;\n\n       \
    \ if (size == 0) {\n            throw new Exception(\"No operations were given\"\
    );\n        }\n\n        for(int i = 0; i < size; i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result = result + operand.get(num);\n               \
    \ num++;\n            }\n            else if (op.get(i).equals(\"-\")) {\n   \
    \             result = result - operand.get(num);\n                num++;\n  \
    \          }\n            else if (op.get(i).equals(\"*\")) {\n              \
    \  result = result * operand.get(num);\n                num++;\n            }\n\
    \            else if (op.get(i).equals(\"//\")) {\n                result = result\
    \ / operand.get(num);\n                num++;\n            }\n            else\
    \ if (op.get(i).equals(\"**\")) {\n                result = result ** operand.get(num);\n\
    \                num++;\n            }\n            else {\n                throw\
    \ new Exception(\"Unsupported operation\");\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrw3m5ek.java:54: error: illegal start of expression\n        \
    \        result = result ** operand.get(num);\n                              \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ length = op.size();\n        long result = 0;\n\n        // For each operator\
    \ and operand\n        for(int i=0; i<length-1; i++) {\n            String operation\
    \ = op.get(i);\n            long operand1 = operand.get(i);\n            long\
    \ operand2 = operand.get(i+1);\n\n            // If there are two operands and\
    \ operation is a basic algebra operation\n            if(operand2 != 0 && operation.equals(\"\
    +\")) {\n                result += (long)operand1 + (long)operand2;\n        \
    \    } else if(operand2 != 0 && operation.equals(\"*\")) {\n                result\
    \ += (long)operand1 * operand2;\n            } else if(operand2 != 0 && operation.equals(\"\
    -\")) {\n                result += (long)operand1 - operand2;\n            } else\
    \ if(operand2 != 0 && operation.equals(\"/\")) {\n                result += (long)operand1\
    \ / (long)operand2;\n            } else if(operand2 != 0 && operation.equals(\"\
    //\")) {\n                result += (long)operand1 / (long)operand2;\n       \
    \     } else if(operand2 != 0 && operation.equals(\"**\")) {\n               \
    \ result += (long)Math.pow(operand1, operand2);\n            } else {\n      \
    \          return 0L;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcuqmw_c.java:57)\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size()\
    \ == 0) return 0;\n        if(operand.size() < 2) return 0;\n        int result\
    \ = 0;\n        for(int i = 0; i < op.size(); i++) {\n            if(op.size()\
    \ == 1) {\n                result = result + operand.get(i);\n            }\n\
    \            else {\n                switch(op.charAt(i)) {\n                \
    \    case '+':\n                        result = result + operand.get(i);\n  \
    \                      break;\n                    case '-':\n               \
    \         result = result - operand.get(i);\n                        break;\n\
    \                    case '*':\n                        result = result * operand.get(i);\n\
    \                        break;\n                    case '/':\n             \
    \           result = result / operand.get(i);\n                        break;\n\
    \                    case '//':\n                        result = result / operand.get(i);\n\
    \                        break;\n                    case '**':\n            \
    \            result = result ** operand.get(i);\n                        break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrf0iy8k.java:49: error: unclosed character literal\n         \
    \           case '//':\n                         ^\n/tmp/tmpqrf0iy8k.java:49:\
    \ error: unclosed character literal\n                    case '//':\n        \
    \                    ^\n/tmp/tmpqrf0iy8k.java:50: error: illegal start of expression\n\
    \                        result = result / operand.get(i);\n                 \
    \              ^\n/tmp/tmpqrf0iy8k.java:50: error: : or -> expected\n        \
    \                result = result / operand.get(i);\n                         \
    \                               ^\n/tmp/tmpqrf0iy8k.java:52: error: unclosed character\
    \ literal\n                    case '**':\n                         ^\n/tmp/tmpqrf0iy8k.java:52:\
    \ error: unclosed character literal\n                    case '**':\n        \
    \                    ^\n/tmp/tmpqrf0iy8k.java:53: error: illegal start of expression\n\
    \                        result = result ** operand.get(i);\n                \
    \               ^\n/tmp/tmpqrf0iy8k.java:53: error: illegal start of expression\n\
    \                        result = result ** operand.get(i);\n                \
    \                         ^\n/tmp/tmpqrf0iy8k.java:53: error: : or -> expected\n\
    \                        result = result ** operand.get(i);\n                \
    \                                         ^\n9 errors\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int\
    \ length = op.size();\n        int lengthOperand = operand.size();\n        if\
    \ (lengthOperand == 1) {\n            Long a = operand.get(0);\n            if\
    \ (op.contains(\"+\")) {\n                return a + a;\n            } else if\
    \ (op.contains(\"-\")) {\n                return a - a;\n            } else if\
    \ (op.contains(\"*\")) {\n                return a * a;\n            } else if\
    \ (op.contains(\"/\")) {\n                if (a == 0) {\n                    throw\
    \ new ArithmeticException();\n                } else {\n                    return\
    \ a / a;\n                }\n            } else if (op.contains(\"//\")) {\n \
    \               if (a == 0) {\n                    throw new ArithmeticException();\n\
    \                } else {\n                    return a / a;\n               \
    \ }\n            } else if (op.contains(\"**\")) {\n                if (a == 0)\
    \ {\n                    throw new ArithmeticException();\n                } else\
    \ {\n                    return a * a;\n                }\n            } else\
    \ {\n                throw new ArithmeticException();\n            }\n       \
    \ } else if (lengthOperand == 2) {\n            Long a = operand.get(0);\n   \
    \         Long b = operand.get(1);\n            if (op.contains(\"+\")) {\n  \
    \              return a + b;\n            } else if (op.contains(\"-\")) {\n \
    \               return a - b;\n            } else if (op.contains(\"*\")) {\n\
    \                return a * b;\n            } else if (op.contains(\"/\")) {\n\
    \                if (b == 0) {\n                    throw new ArithmeticException();\n\
    \                } else {\n                    return a / b;\n               \
    \ }\n            } else if (op.contains(\"//\")) {\n                if (b == 0)\
    \ {\n                    throw new ArithmeticException();\n                } else\
    \ {\n                    return a / b;\n                }\n            } else\
    \ if (op.contains(\"**\")) {\n                if (b == 0) {\n                \
    \    throw new ArithmeticException();\n                } else {\n            \
    \        return a * b;\n                }\n            } else {\n            \
    \    throw new ArithmeticException();\n            }\n        } else {\n     \
    \       throw new ArithmeticException();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException\n\tat Problem.doAlgebra(tmpnk8edj1k.java:90)\n\
    \tat Problem.main(tmpnk8edj1k.java:94)\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n          \
    \  for (int j = 0; j < op.size(); j++) {\n                if (j == 0) {\n    \
    \                result += operand.get(i);\n                } else {\n       \
    \             if (operand.get(i) > 0) {\n                        if (op.get(j).equals(\"\
    /\")) {\n                            result += Math.pow(operand.get(i), operand.get(i\
    \ - 1));\n                        } else if (op.get(j).equals(\"**\")) {\n   \
    \                         result += Math.pow(operand.get(i), operand.get(i - 1));\n\
    \                        } else {\n                            result += operand.get(i\
    \ - 1) * Math\n                                    .pow(operand.get(i - 1), operand.get(i\
    \ - 1));\n                        }\n                    } else {\n          \
    \              if (op.get(j).equals(\"//\")) {\n                            result\
    \ += operand.get(i);\n                        } else {\n                     \
    \       if (op.get(j).equals(\"**\")) {\n                                result\
    \ += Math.pow(operand.get(i), operand.get(i - 1));\n                         \
    \   } else {\n                                throw new IllegalArgumentException(\n\
    \                                        \"Invalid algebraic expression\");\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.doAlgebra(tmpruw2r7q5.java:40)\n\tat Problem.main(tmpruw2r7q5.java:61)\n"
  stdout: ''
  timestamp: 1659977916
