{
  "name": "mbpp_222_check_type",
  "language": "py",
  "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len(set(map(type, test_tuple))) == 1\n\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type(('a', 'b', 'c', 'd', 'e')))\nprint(check_type(('a', 'b', 'c', 'd', 'e', 1)))\nprint(check_type((1, 2, 3, 4, 5, 'a')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2, 1.3)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2, 1.3, 1.4)))\nprint",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 'b', 'c', 1)))\nprint(check_type(('a', 'b', 'c', 1, 2.0)))\nprint(check_type(('a', 'b', 'c', 1, 2.0, (1, 2, 3))))\nprint(check_type(('a', 'b', 'c', 1, 2.0, (1, 2, 3.0))))",
    "    return len(set([type(x) for x in test_tuple])) == 1\n\nprint(check_type((1, 2, 3, 4, 5, 6)))\nprint(check_type(('a', 'b', 'c', 'd', 'e', 'f')))\nprint(check_type((1, 2, 3, 4, 5, 'a')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7.0)))",
    "    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", 1)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, \"a\")))",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\")))\nprint(check_type((\"a\", \"b\", \"c\", 1)))\nprint(check_type((1, 2, 3, \"a\")))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, 5)))\nprint(check_type((1, 2, 3, 4.0, 5.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,",
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a')))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True)))",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, '5')))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, \"3\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"11\")))",
    "    return len(set([type(i) for i in test_tuple])) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, '3')))\nprint(check_type((1, 2, '3.0')))\nprint(check_type((1, 2, '3.0', 3)))\nprint(check_type((1, 2, '3.0', 3, 3.0)))",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n"
  ]
}