{
  "name": "mbpp_93_power",
  "language": "py",
  "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(3, 4) == 81\n    assert candidate(2, 3) == 8\n    assert candidate(5, 5) == 3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n",
    "    return a ** b\n\n"
  ]
}