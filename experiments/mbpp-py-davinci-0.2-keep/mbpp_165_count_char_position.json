{
  "name": "mbpp_165_count_char_position",
  "language": "py",
  "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('xbcefg') == 2\n    assert candidate('ABcED') == 3\n    assert candidate('AbgdeF') == 5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len([x for x in str1.lower() if x.isalpha() and ord(x) - ord('a') == str1.lower().index(x)])\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == string.ascii_lowercase[i]:\n            count += 1\n    return count\n\n",
    "    return sum(1 for i in range(len(str1)) if str1[i].lower() == chr(ord('a') + i))\n\n",
    "    return len([x for x in str1 if x.lower() == chr(ord(x) - ord('a') + ord('A'))])\n\n",
    "    return sum(1 for i, c in enumerate(str1.lower()) if c == chr(ord('a') + i))\n\n",
    "    return sum(1 for i in range(len(str1)) if str1[i].lower() == chr(97 + i))\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(97 + i):\n            count += 1\n    return count\n\n",
    "    return sum(1 for i in range(len(str1)) if str1[i].lower() == chr(i + 97))\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + 97):\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(97 + i):\n            count += 1\n    return count\n\n",
    "    return sum(1 for i, c in enumerate(str1.lower()) if c == chr(i + 97))\n\n",
    "    return len([c for c in str1.lower() if c in string.ascii_lowercase and str1.lower().index(c) == string.ascii_lowercase.index(c)])\n\n",
    "    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + i):\n            count += 1\n    return count\n\n",
    "    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + i):\n            count += 1\n    return count\n\n",
    "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == alphabet[i]:\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + 97):\n            count += 1\n    return count\n\n",
    "    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count\n\n"
  ]
}