{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "py",
  "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [i[1] for i in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu8rm17dj.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpu8rm17dj.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpu8rm17dj.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpu8rm17dj.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwpsj_92.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpqwpsj_92.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpqwpsj_92.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpqwpsj_92.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfq2jhyqw.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpfq2jhyqw.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfq2jhyqw.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfq2jhyqw.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7aetj12j.py\", line 22, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmp7aetj12j.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppw4d98p2.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmppw4d98p2.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmppw4d98p2.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmppw4d98p2.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5zkb7mo2.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp5zkb7mo2.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp5zkb7mo2.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp5zkb7mo2.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcznqsb2y.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpcznqsb2y.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcznqsb2y.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcznqsb2y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            elif nums1[i] + nums2[j] < heap[0][0]:\n                heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpreqrizwq.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpreqrizwq.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiyr6e7aj.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpiyr6e7aj.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpiyr6e7aj.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpiyr6e7aj.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k <= 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvj6_2d07.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpvj6_2d07.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpvj6_2d07.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpvj6_2d07.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk09b95y1.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpk09b95y1.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpk09b95y1.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpk09b95y1.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt9rblag2.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpt9rblag2.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpt9rblag2.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpt9rblag2.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnvmq8j2c.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpnvmq8j2c.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpnvmq8j2c.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpnvmq8j2c.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdc6knr_e.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdc6knr_e.py\", line 24, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpdc6knr_e.py\", line 19, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpdc6knr_e.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k <= 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqli10z1z.py\", line 22, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmpqli10z1z.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppw4d98p2.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmppw4d98p2.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmppw4d98p2.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmppw4d98p2.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsoivwz0m.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpsoivwz0m.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsoivwz0m.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsoivwz0m.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm5vjod4f.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm5vjod4f.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm5vjod4f.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm5vjod4f.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj6m0gvhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpj6m0gvhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj6m0gvhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj6m0gvhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplgzd9tvi.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmplgzd9tvi.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmplgzd9tvi.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmplgzd9tvi.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k <= 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv8wcpvgr.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpv8wcpvgr.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpv8wcpvgr.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpv8wcpvgr.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61pb9vy6.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp61pb9vy6.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    res = []\n    visited = set()\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            visited.add((i + 1, j))\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjre17a3d.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjre17a3d.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpjre17a3d.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpjre17a3d.py\", line 13, in k_smallest_pairs\n    _, i, j = heapq.heappop(heap)\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy8m65lc9.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpy8m65lc9.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpy8m65lc9.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpy8m65lc9.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsoivwz0m.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpsoivwz0m.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsoivwz0m.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsoivwz0m.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcznqsb2y.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpcznqsb2y.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcznqsb2y.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcznqsb2y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnz56s_vp.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpnz56s_vp.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpnz56s_vp.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpnz56s_vp.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\nprint(k_smallest_pairs([1,1,2], [1,2,3], 2))\nprint(k_smallest_pairs([1,2], [3], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp33baptzp.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp33baptzp.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrcgmzxz.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpfrcgmzxz.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfrcgmzxz.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfrcgmzxz.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg48ny1pf.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpg48ny1pf.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpg48ny1pf.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpg48ny1pf.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\nprint(k_smallest_pairs([1,1,2], [1,2,3], 2))\nprint(k_smallest_pairs([1,2], [3], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz0vdf2on.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpz0vdf2on.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjl_bbua_.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpjl_bbua_.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpjl_bbua_.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpjl_bbua_.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtrml7i6.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpqtrml7i6.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(min(k, len(heap))):\n        res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp88yj9wrj.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp88yj9wrj.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp88yj9wrj.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp88yj9wrj.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif06lg02.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpif06lg02.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpif06lg02.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpif06lg02.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                else:\n                    break\n    return [[-x[0] - nums2[x[2]], nums2[x[2]]] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfg2sv96.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpnfg2sv96.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpnfg2sv96.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpnfg2sv96.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm5vjod4f.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm5vjod4f.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm5vjod4f.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm5vjod4f.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2_t94415.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp2_t94415.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpse8n8_ox.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpse8n8_ox.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjigt1e4r.py\", line 22, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmpjigt1e4r.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp55g0rgzt.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp55g0rgzt.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "[[1, 2], [1, 4], [1, 6]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj6m0gvhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpj6m0gvhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj6m0gvhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj6m0gvhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5p_y3hht.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5p_y3hht.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp5p_y3hht.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp5p_y3hht.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        res.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptgpkpszy.py\", line 30, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmptgpkpszy.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk7xicojn.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpk7xicojn.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6op3n4qn.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp6op3n4qn.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp6op3n4qn.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp6op3n4qn.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append([nums1[i], nums2[j]])\n    res.sort(key=lambda x: x[0] + x[1])\n    return res[:k]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n                else:\n                    break\n    return [[x[1], x[2]] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj_lmn24t.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_lmn24t.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj_lmn24t.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj_lmn24t.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj6m0gvhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpj6m0gvhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj6m0gvhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj6m0gvhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    while k > 0 and heap:\n        res.append(heapq.heappop(heap)[1])\n        k -= 1\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpce06xbom.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpce06xbom.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpce06xbom.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpce06xbom.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    # heapify the first array\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphffnx2br.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmphffnx2br.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmphffnx2br.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmphffnx2br.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4njulad.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm4njulad.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm4njulad.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm4njulad.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi8kw7q87.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpi8kw7q87.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpi8kw7q87.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpi8kw7q87.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [i[1] for i in heap]\n\nprint(k_smallest_pairs([1,1,2], [1,2,3], 10))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpub7ktzol.py\", line 24, in <module>\n    print(k_smallest_pairs([1,1,2], [1,2,3], 10))\n  File \"/tmp/tmpub7ktzol.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1p4t57w.py\", line 20, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpw1p4t57w.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrcgmzxz.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpfrcgmzxz.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfrcgmzxz.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfrcgmzxz.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8n9g0_l1.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp8n9g0_l1.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp8n9g0_l1.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp8n9g0_l1.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo6xunfzu.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpo6xunfzu.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpo6xunfzu.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpo6xunfzu.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35uk47bo.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp35uk47bo.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp35uk47bo.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp35uk47bo.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    return sorted(itertools.product(nums1, nums2), key=sum)[:k]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppcrv_e10.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmppcrv_e10.py\", line 14, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmppcrv_e10.py\", line 9, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmppcrv_e10.py\", line 7, in k_smallest_pairs\n    return sorted(itertools.product(nums1, nums2), key=sum)[:k]\nNameError: name 'itertools' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwdbafl7r.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpwdbafl7r.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcznqsb2y.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpcznqsb2y.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcznqsb2y.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcznqsb2y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)] if k < len(heap) else [heapq.heappop(heap)[1] for _ in range(len(heap))]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqmuk25e_.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpqmuk25e_.py\", line 21, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpqmuk25e_.py\", line 16, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpqmuk25e_.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfq2jhyqw.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpfq2jhyqw.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfq2jhyqw.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfq2jhyqw.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n\n    if not nums1 or not nums2:\n        return []\n\n    if k == 0:\n        return []\n\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n\n    heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return result\n\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\nprint(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2))\nprint(k_smallest_pairs([1, 2], [3], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpny75_z8l.py\", line 30, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmpny75_z8l.py\", line 21, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)] if k <= len(heap) else [heapq.heappop(heap)[1] for _ in range(len(heap))]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3i1pfbzc.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp3i1pfbzc.py\", line 21, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp3i1pfbzc.py\", line 16, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp3i1pfbzc.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            elif -nums1[i] - nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfgl49ckb.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpfgl49ckb.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfgl49ckb.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfgl49ckb.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))][::-1]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5pclq6cn.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5pclq6cn.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp5pclq6cn.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp5pclq6cn.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfq2jhyqw.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpfq2jhyqw.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfq2jhyqw.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfq2jhyqw.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while len(res) < k and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp28h3na2v.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp28h3na2v.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp28h3na2v.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp28h3na2v.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkalmbk2e.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkalmbk2e.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkalmbk2e.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkalmbk2e.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    while k > 0 and heap:\n        res.append(heapq.heappop(heap)[1])\n        k -= 1\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpce06xbom.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpce06xbom.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpce06xbom.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpce06xbom.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_0puaf_t.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_0puaf_t.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_0puaf_t.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp_0puaf_t.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_0puaf_t.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_0puaf_t.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_0puaf_t.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp_0puaf_t.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < -heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5u6mmx9a.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5u6mmx9a.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp5u6mmx9a.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp5u6mmx9a.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpadc4hsiu.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpadc4hsiu.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: sum(x))\n    return pairs[:k]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "[[1, 2], [1, 4], [1, 6]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[x, y] for x in nums1 for y in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpektkkl30.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpektkkl30.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpektkkl30.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpektkkl30.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(res) < k:\n                res.append([nums1[i], nums2[j]])\n            else:\n                res.sort(key=lambda x: x[0] + x[1])\n                if nums1[i] + nums2[j] < res[-1][0] + res[-1][1]:\n                    res[-1] = [nums1[i], nums2[j]]\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1yybp9t.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpo1yybp9t.py\", line 17, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpo1yybp9t.py\", line 12, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n    return res[::-1]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpukgbycox.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpukgbycox.py\", line 35, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpukgbycox.py\", line 30, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpukgbycox.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk7xicojn.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpk7xicojn.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl3_dbo5e.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpl3_dbo5e.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpl3_dbo5e.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpl3_dbo5e.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            elif nums1[i] + nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cwjwfk5.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cwjwfk5.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp9cwjwfk5.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp9cwjwfk5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(res) < k:\n                res.append([nums1[i], nums2[j]])\n            else:\n                res.sort(key=lambda x: x[0] + x[1])\n                if nums1[i] + nums2[j] < res[-1][0] + res[-1][1]:\n                    res[-1] = [nums1[i], nums2[j]]\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    queue = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(queue) < k:\n                heapq.heappush(queue, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -queue[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(queue)\n                    heapq.heappush(queue, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in queue]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6xhaatui.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp6xhaatui.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp6xhaatui.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp6xhaatui.py\", line 15, in k_smallest_pairs\n    heapq.heappush(queue, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    result = []\n    while k > 0:\n        result.append(heapq.heappop(heap)[1])\n        k -= 1\n    return result\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1hx2ha41.py\", line 23, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp1hx2ha41.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            elif nums1[i] + nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkz768vb_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpkz768vb_.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkz768vb_.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkz768vb_.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k <= 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        res.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res[::-1]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe3jpx8di.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpe3jpx8di.py\", line 36, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpe3jpx8di.py\", line 31, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpe3jpx8di.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj6m0gvhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpj6m0gvhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj6m0gvhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj6m0gvhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    while heap and k > 0:\n        res.append(heapq.heappop(heap)[1])\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr9fll2f0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpr9fll2f0.py\", line 24, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpr9fll2f0.py\", line 19, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpr9fll2f0.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # Time: O(klogk)\n    # Space: O(k)\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgww5_5j2.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpgww5_5j2.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpgww5_5j2.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpgww5_5j2.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnvn7hke6.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpnvn7hke6.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcznqsb2y.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpcznqsb2y.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcznqsb2y.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcznqsb2y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeawilgon.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpeawilgon.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpeawilgon.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpeawilgon.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append([nums1[i], nums2[j]])\n    res.sort(key=lambda x: x[0] + x[1])\n    return res[:k]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n\n    pairs.sort(key=lambda x: x[0] + x[1])\n\n    return pairs[:k]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while len(res) < k and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp_w53yka.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpp_w53yka.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp_w53yka.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp_w53yka.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqb8g5b5.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpmqb8g5b5.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmqb8g5b5.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmqb8g5b5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxxgu7tab.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpxxgu7tab.py\", line 32, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpxxgu7tab.py\", line 27, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpxxgu7tab.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4njulad.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm4njulad.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm4njulad.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm4njulad.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp55g0rgzt.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp55g0rgzt.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuj6r_rcv.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj6r_rcv.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuj6r_rcv.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuj6r_rcv.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # Time: O(k*log(k))\n    # Space: O(k)\n    if not nums1 or not nums2:\n        return []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(res) < k:\n                res.append([nums1[i], nums2[j]])\n            else:\n                res.sort(key=lambda x: x[0] + x[1])\n                if nums1[i] + nums2[j] < res[-1][0] + res[-1][1]:\n                    res.pop()\n                    res.append([nums1[i], nums2[j]])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvi3eyr90.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpvi3eyr90.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpvi3eyr90.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpvi3eyr90.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx63x2hkb.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpx63x2hkb.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpx63x2hkb.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpx63x2hkb.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k >= len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptf5qkw4n.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptf5qkw4n.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmptf5qkw4n.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmptf5qkw4n.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2eee8yd.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpo2eee8yd.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpo2eee8yd.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpo2eee8yd.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcznqsb2y.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpcznqsb2y.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcznqsb2y.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcznqsb2y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j == len(nums2) - 1:\n            continue\n        heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr9as8gyg.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpr9as8gyg.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpr9as8gyg.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpr9as8gyg.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfq2jhyqw.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpfq2jhyqw.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfq2jhyqw.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfq2jhyqw.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtrml7i6.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpqtrml7i6.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    return sorted([(x, y) for x in nums1 for y in nums2], key=lambda x: x[0] + x[1])[:k]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_y4im2_0.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp_y4im2_0.py\", line 14, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_y4im2_0.py\", line 9, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [item[1] for item in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4m54xtho.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4m54xtho.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4m54xtho.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4m54xtho.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkktf63q9.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpkktf63q9.py\", line 24, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkktf63q9.py\", line 19, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkktf63q9.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdc6knr_e.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdc6knr_e.py\", line 24, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpdc6knr_e.py\", line 19, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpdc6knr_e.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplosu21bs.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmplosu21bs.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmplosu21bs.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmplosu21bs.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -nums1[i]-nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc2n1exr.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpxc2n1exr.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpxc2n1exr.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpxc2n1exr.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i]-nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsoivwz0m.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpsoivwz0m.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsoivwz0m.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsoivwz0m.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}