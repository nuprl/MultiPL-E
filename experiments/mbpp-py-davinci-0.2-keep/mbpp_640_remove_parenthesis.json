{
  "name": "mbpp_640_remove_parenthesis",
  "language": "py",
  "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['python (chrome)']) == 'python'\n    assert candidate(['string(.abc)']) == 'string'\n    assert candidate(['alpha(num)']) == 'alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', ' '.join(items))",
    "    return re.sub(r'\\([^)]*\\)', '', ' '.join(items))\n\nprint(remove_parenthesis(['(1)', '2', '(3)', '4', '(5)']))",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r\"\\([^)]*\\)\", \"\", \" \".join(items))\n\nprint(remove_parenthesis([\"example (.com)\", \"w3resource\", \"github (.com)\", \"stackoverflow (.com)\"]))",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return \"\".join(item for item in items if item not in \"()\")\n\nprint(remove_parenthesis([\"(\", \"a\", \"b\", \"c\", \")\", \"d\", \"e\"]))",
    "    return re.sub(r'\\([^)]*\\)', '', items)\n",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', items)\n\nprint(remove_parenthesis([\"example (.com)\", \"w3resource\", \"github (.com)\", \"stackoverflow (.com)\"]))",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', items)\n",
    "    return re.sub(r'\\([^)]*\\)', '', items)\n\nprint(remove_parenthesis(['example (words in parenthesis)']) == 'example ')\nprint(remove_parenthesis(['example (words in parenthesis) (more words)']) == 'example ')\nprint(remove_parenthesis(['a (first set of parenthesis)', 'b (second set of parenthesis)']) == ['a ', 'b '])\nprint(remove_parenthesis(['a (first set of parenthesis) (second set of parenthesis)', 'b (first set of parenthesis) (second set of parenthesis)']) == ['a ', 'b '])",
    "    return re.sub(r'\\([^()]*\\)', '', ' '.join(items))\n",
    "    return re.sub(r'\\([^)]*\\)', '', items)"
  ]
}