{
  "name": "mbpp_398_sum_of_digits",
  "language": "py",
  "prompt": "from typing import Any\n\ndef sum_of_digits(nums: Any) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([10, 2, 56]) == 14\n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']]) == 19\n    assert candidate([10, 20, -4, 5, -70]) == 19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum([int(i) for i in str(nums)])\n",
    "    return sum([int(i) for i in str(nums)])\n\nprint(sum_of_digits(123))\nprint(sum_of_digits(123456789))",
    "    return sum(map(int, str(nums)))\n\nprint(sum_of_digits(123))\nprint(sum_of_digits([1, 2, 3]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "    return sum([int(i) for i in str(nums)])\n",
    "    return sum([int(i) for i in str(nums)])\n\nprint(sum_of_digits(123))\nprint(sum_of_digits(12345))\nprint(sum_of_digits(123456789))",
    "    if type(nums) == int:\n        return sum(int(i) for i in str(nums))\n    elif type(nums) == list:\n        return [sum(int(i) for i in str(num)) for num in nums]\n    else:\n        return None",
    "    return sum(int(x) for x in str(nums))\n\nprint(sum_of_digits(123))\nprint(sum_of_digits(123456789))",
    "    return sum(int(i) for i in str(nums))\n",
    "    return sum([int(i) for i in str(nums)])\n\nprint(sum_of_digits(123))\nprint(sum_of_digits(123456789))",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(x) for x in nums])\n    elif isinstance(nums, int):\n        return sum([int(x) for x in str(nums)])\n    else:\n        return 0\n",
    "    if type(nums) == list:\n        return sum([sum_of_digits(num) for num in nums])\n    elif type(nums) == int:\n        return sum([int(digit) for digit in str(nums)])\n    else:\n        return 0\n",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(num) for num in nums])\n    else:\n        return sum([int(digit) for digit in str(nums)])\n",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(num) for num in nums])\n    elif isinstance(nums, int):\n        return sum([int(digit) for digit in str(nums)])\n    else:\n        return 0",
    "    return sum([int(i) for i in str(nums)])\n",
    "    return sum([int(i) for i in str(nums)])",
    "    if not isinstance(nums, list):\n        return 0\n    return sum([sum([int(i) for i in str(num)]) for num in nums])\n",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(num) for num in nums])\n    elif isinstance(nums, int):\n        return sum([int(digit) for digit in str(nums)])\n    else:\n        raise TypeError(\"Input must be a list of integers\")",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(num) for num in nums])\n    elif isinstance(nums, int):\n        return sum([int(i) for i in str(nums)])\n    else:\n        return 0\n",
    "    if not isinstance(nums, list):\n        return 0\n    return sum([sum_of_digits(n) for n in nums]) if isinstance(nums, list) else sum([int(d) for d in str(nums)])\n",
    "    if isinstance(nums, list):\n        return sum([sum_of_digits(num) for num in nums])\n    elif isinstance(nums, int):\n        return sum([int(digit) for digit in str(nums)])\n    else:\n        return 0\n"
  ]
}