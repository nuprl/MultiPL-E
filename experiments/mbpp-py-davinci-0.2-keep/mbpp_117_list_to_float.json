{
  "name": "mbpp_117_list_to_float",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str]]) -> List[Tuple[float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [[float(i) if i.replace('.', '', 1).isdigit() else i for i in sublist] for sublist in test_list]",
    "    return [[float(y) for y in x] for x in test_list]\n",
    "    return [[float(i) for i in j] for j in test_list]\n",
    "    return [[float(y) for y in x] for x in test_list]\n",
    "    return [[float(i) for i in j] for j in test_list]\n",
    "    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
    "    return [[float(y) for y in x] for x in test_list]\n",
    "    return [[float(i) for i in j] for j in test_list]\n",
    "    return [[float(i) if i.isdigit() else i for i in j] for j in test_list]\n",
    "    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
    "    return [[float(x) if x.replace('.', '', 1).isdigit() else x for x in l] for l in test_list]",
    "    return [[float(i) for i in row] for row in test_list]\n",
    "    return [[float(x) for x in y] for y in test_list]\n",
    "    return [[float(i) for i in j] for j in test_list]",
    "    return [[float(i) for i in sublist] for sublist in test_list]\n\n",
    "    return [[float(i) if i.replace('.', '', 1).isdigit() else i for i in j] for j in test_list]",
    "    return [[float(i) if i.replace('.','',1).isdigit() else i for i in l] for l in test_list]\n",
    "    return [[float(i) if i.isdigit() else i for i in sublist] for sublist in test_list]\n",
    "    return [tuple(float(i) if i.replace('.','',1).isdigit() else i for i in tup) for tup in test_list]",
    "    return [[float(i) for i in j] for j in test_list]\n"
  ]
}