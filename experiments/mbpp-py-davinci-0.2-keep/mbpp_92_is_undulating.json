{
  "name": "mbpp_92_is_undulating",
  "language": "py",
  "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n < 0:\n        return False\n    if n < 10:\n        return True\n    prev_digit = n % 10\n    n //= 10\n    while n > 0:\n        digit = n % 10\n        if digit == prev_digit:\n            return False\n        prev_digit = digit\n        n //= 10\n    return True\n\n",
    "    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n",
    "    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(1, len(n) - 1):\n            if int(n[i - 1]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return True\n        return False\n\n",
    "    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i] == n[i - 1] or n[i] == n[i + 1]:\n            return False\n    return True\n\n",
    "    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) % 2 == 0 and int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 == 0) or (\n                int(n[i - 1]) % 2 != 0 and int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 != 0):\n            return True\n    return False\n\n",
    "    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n",
    "    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n",
    "    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0:\n            if int(n[i + 1]) % 2 == 0:\n                if int(n[i + 2]) % 2 == 0:\n                    return False\n        if int(n[i]) % 2 == 1:\n            if int(n[i + 1]) % 2 == 1:\n                if int(n[i + 2]) % 2 == 1:\n                    return False\n    return True\n\n",
    "    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i] == s[i - 1] or s[i] == s[i + 1]:\n            return False\n    return True\n\n",
    "    return is_bouncy(n) and is_bouncy(n + 1)\n\n",
    "    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n",
    "    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i - 1]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            if int(n[i]) % 2 == 0:\n                return False\n        elif int(n[i - 1]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            if int(n[i]) % 2 != 0:\n                return False\n    return True\n\n",
    "    return is_bouncy(n) and is_bouncy(n, False)\n\n",
    "    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n",
    "    n = str(n)\n    for i in range(len(n) - 2):\n        if (n[i] < n[i + 1] > n[i + 2]) or (n[i] > n[i + 1] < n[i + 2]):\n            return True\n    return False\n\n",
    "    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if (int(s[i]) - int(s[i - 1])) * (int(s[i]) - int(s[i + 1])) < 0:\n            return True\n    return False\n\n",
    "    return is_bouncy(n) and is_bouncy(n, True)\n\n",
    "    if n < 10:\n        return False\n    last_digit = n % 10\n    n = n // 10\n    while n > 0:\n        if (n % 10) == last_digit:\n            return False\n        last_digit = n % 10\n        n = n // 10\n    return True\n\n",
    "    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n",
    "    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n"
  ]
}