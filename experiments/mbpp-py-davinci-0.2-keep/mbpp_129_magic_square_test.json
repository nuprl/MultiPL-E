{
  "name": "mbpp_129_magic_square_test",
  "language": "py",
  "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    # TODO: Implement this function\n    return False\n",
    "    # TODO: Write your code here\n    pass\n",
    "    # TODO: Implement me\n    pass\n",
    "    # TODO: Write your code here\n    pass\n",
    "    # TODO: Write your code here\n    return True\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if matrix is magic square\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i]) != sum(my_matrix[0]):\n            return False\n    for i in range(len(my_matrix[0])):\n        if sum([row[i] for row in my_matrix]) != sum(my_matrix[0]):\n            return False\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != sum(my_matrix[0]):\n        return False\n    if sum([my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix))]) != sum(my_matrix[0]):\n        return False\n    return True\n",
    "    # TODO: Write your code here\n    pass\n",
    "    pass\n\n",
    "    pass",
    "    # TODO: Implement me\n    return False\n",
    "    # TODO: Implement me\n    pass\n",
    "    # TODO: Implement me\n    pass\n",
    "    # Check if the matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i]) != sum(my_matrix[0]):\n            return False\n        if sum([row[i] for row in my_matrix]) != sum(my_matrix[0]):\n            return False\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != sum(my_matrix[0]):\n        return False\n    if sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]) != sum(my_matrix[0]):\n        return False\n\n    return True\n\n",
    "    # TODO: Implement me\n    return False\n",
    "    # TODO: Implement me\n    return False",
    "    # TODO: Implement this function\n    pass\n",
    "    pass\n",
    "    # TODO: implement this function\n    pass\n",
    "    # TODO: Write your code here\n    pass\n",
    "    magic_sum = sum(my_matrix[0])\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i]) != magic_sum:\n            return False\n    for j in range(len(my_matrix[0])):\n        if sum([row[j] for row in my_matrix]) != magic_sum:\n            return False\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != magic_sum:\n        return False\n    if sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]) != magic_sum:\n        return False\n    return True\n"
  ]
}