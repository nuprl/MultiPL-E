{
  "name": "mbpp_392_get_max_sum",
  "language": "py",
  "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\ndef test_check():\n    check(get_max_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n\n    return max(\n        get_max_sum(n // 2)\n        + get_max_sum(n // 3)\n        + get_max_sum(n // 4)\n        + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n <= 5:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + n, n\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n <= 5:\n        return n\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n\n",
    "    if n < 12:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4), n\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 2:\n        return n\n    return max(\n        n,\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n <= 5:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2)\n        + get_max_sum(n // 3)\n        + get_max_sum(n // 4)\n        + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 2:\n        return n\n    return max(\n        n,\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2)\n        + get_max_sum(n // 3)\n        + get_max_sum(n // 4)\n        + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n <= 5:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n <= 0:\n        return 0\n    if n <= 5:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n < 2:\n        return n\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + n, n\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2)\n        + get_max_sum(n // 3)\n        + get_max_sum(n // 4)\n        + get_max_sum(n // 5),\n        n,\n    )\n\n",
    "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(\n        get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5),\n        n,\n    )\n\n"
  ]
}