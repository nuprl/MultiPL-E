{
  "name": "mbpp_619_move_num",
  "language": "py",
  "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n    return test_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0t73876.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpf0t73876.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpf0t73876.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            char_str += i\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n    return test_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0t73876.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpf0t73876.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpf0t73876.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    str_list = list(test_str)\n    num_list = []\n    for i in str_list:\n        if i.isdigit():\n            num_list.append(i)\n            str_list.remove(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt6n9iunz.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpt6n9iunz.py\", line 20, in test_check\n    check(move_num)\n  File \"/tmp/tmpt6n9iunz.py\", line 15, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    str_ = []\n    for i in test_str:\n        if i.isnumeric():\n            num.append(i)\n        else:\n            str_.append(i)\n    return \"\".join(str_) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    result = []\n    for i in test_str:\n        if i in nums:\n            result.append(i)\n        else:\n            result.insert(0, i)\n    return \"\".join(result)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_umlcmak.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_umlcmak.py\", line 21, in test_check\n    check(move_num)\n  File \"/tmp/tmp_umlcmak.py\", line 16, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = [char for char in test_str if char.isdigit()]\n    char = [char for char in test_str if not char.isdigit()]\n    return ''.join(char) + ''.join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    nums_str = \"\"\n    for i in test_str:\n        if i in nums:\n            nums_str += i\n    return test_str + nums_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj8r3puqu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpj8r3puqu.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpj8r3puqu.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for char in test_str:\n        if char in nums:\n            num_str += char\n        else:\n            other_str += char\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            char_str += i\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    nums_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            nums_str += i\n        else:\n            other_str += i\n    return other_str + nums_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [char for char in test_str if char.isdigit()]\n    letters = [char for char in test_str if char.isalpha()]\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [i for i in test_str if i.isdigit()]\n    letters = [i for i in test_str if not i.isdigit()]\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return ''.join(str_list) + ''.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join([i for i in test_str if not i.isdigit()]) + \"\".join([i for i in test_str if i.isdigit()])\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    char = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            char.append(i)\n    return \"\".join(char) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.ascii_letters)\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprqdgnx1e.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprqdgnx1e.py\", line 16, in test_check\n    check(move_num)\n  File \"/tmp/tmprqdgnx1e.py\", line 11, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmprqdgnx1e.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = [i for i in test_str if i.isdigit()]\n    char = [i for i in test_str if not i.isdigit()]\n    return \"\".join(char) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", digits)) + test_str.translate(\n        str.maketrans(\"\", \"\", ascii_letters)\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpauuslbhs.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpauuslbhs.py\", line 16, in test_check\n    check(move_num)\n  File \"/tmp/tmpauuslbhs.py\", line 11, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmpauuslbhs.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", digits)) + test_str.translate(\nNameError: name 'digits' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return ''.join(letters) + ''.join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    char_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            char_list.append(i)\n    return ''.join(char_list) + ''.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            chars.append(i)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\n        str.maketrans(string.digits, string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4i8vkmc1.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp4i8vkmc1.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp4i8vkmc1.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp4i8vkmc1.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    return \"\".join([i for i in test_str if i not in nums]) + \"\".join([i for i in test_str if i in nums])\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(\n        [\n            i\n            for i in test_str\n            if i.isalpha()\n        ]\n    ) + \"\".join(\n        [\n            i\n            for i in test_str\n            if i.isdigit()\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return ''.join(str_list) + ''.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    for i in test_str:\n        if i not in nums:\n            new_str += i\n    return new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvtrj74wp.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpvtrj74wp.py\", line 22, in test_check\n    check(move_num)\n  File \"/tmp/tmpvtrj74wp.py\", line 17, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            char_str += i\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(\n        [\n            char\n            for char in test_str\n            if char.isalpha()\n        ]\n    ) + \"\".join(\n        [\n            char\n            for char in test_str\n            if char.isdigit()\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit(), reverse=True))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuyzkf9cd.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpuyzkf9cd.py\", line 14, in test_check\n    check(move_num)\n  File \"/tmp/tmpuyzkf9cd.py\", line 9, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i in nums:\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return ''.join(str_list) + ''.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    char_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            char_list.append(i)\n    return ''.join(char_list) + ''.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            other_str += i\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            chars.append(i)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    str_list = list(test_str)\n    num_list = []\n    for i in str_list:\n        if i in nums:\n            num_list.append(i)\n            str_list.remove(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp72yksltl.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp72yksltl.py\", line 21, in test_check\n    check(move_num)\n  File \"/tmp/tmp72yksltl.py\", line 16, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    char = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            char.append(i)\n    return ''.join(char) + ''.join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [i for i in test_str if i.isdigit()]\n    chars = [i for i in test_str if not i.isdigit()]\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(\n        [\n            char\n            for char in test_str\n            if char.isalpha()\n        ]\n    ) + \"\".join(\n        [\n            char\n            for char in test_str\n            if char.isdigit()\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    alph = []\n    for i in test_str:\n        if i.isalpha():\n            alph.append(i)\n        else:\n            num.append(i)\n    return \"\".join(alph) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    str_list = list(test_str)\n    num_list = []\n    for i in str_list:\n        if i in nums:\n            num_list.append(i)\n            str_list.remove(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp72yksltl.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp72yksltl.py\", line 21, in test_check\n    check(move_num)\n  File \"/tmp/tmp72yksltl.py\", line 16, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    alpha_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            alpha_str += i\n    return alpha_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit(), reverse=True))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuyzkf9cd.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpuyzkf9cd.py\", line 14, in test_check\n    check(move_num)\n  File \"/tmp/tmpuyzkf9cd.py\", line 9, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n    for i in nums:\n        test_str = test_str.replace(i, \"\")\n    return test_str + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            char_str += i\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            pass\n    for i in num:\n        test_str = test_str.replace(i, \"\")\n    return test_str + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [i for i in test_str if i.isdigit()]\n    chars = [i for i in test_str if not i.isdigit()]\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return ''.join(letters) + ''.join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i in nums:\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for char in test_str:\n        if char in nums:\n            new_str += char\n    for char in test_str:\n        if char not in nums:\n            new_str += char\n    return new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn2k59vas.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpn2k59vas.py\", line 22, in test_check\n    check(move_num)\n  File \"/tmp/tmpn2k59vas.py\", line 17, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(list(filter(lambda x: not x.isdigit(), test_str)) + list(filter(lambda x: x.isdigit(), test_str)))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    return test_str + new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpajupennq.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpajupennq.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpajupennq.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    alpha = []\n    for i in test_str:\n        if i.isalpha():\n            alpha.append(i)\n        else:\n            num.append(i)\n    return \"\".join(alpha) + \"\".join(num)\n\n\nprint(move_num(\"a1b2c3\"))\nprint(move_num(\"a10b20c30\"))\nprint(move_num(\"abc\"))\nprint(move_num(\"123\"))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "abc123\nabc102030\nabc\n123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\nprint(move_num(\"abc123\"))\nprint(move_num(\"abc\"))\nprint(move_num(\"123\"))\nprint(move_num(\"\"))\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprc_vpkl6.py\", line 9, in <module>\n    print(move_num(\"abc123\"))\n  File \"/tmp/tmprc_vpkl6.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    alpha = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            alpha.append(i)\n    return ''.join(alpha) + ''.join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    return test_str + new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpajupennq.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpajupennq.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpajupennq.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [x for x in test_str if x.isdigit()]\n    chars = [x for x in test_str if not x.isdigit()]\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    return \"\".join([i for i in test_str if i not in nums]) + \"\".join([i for i in test_str if i in nums])\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    char_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(i for i in test_str if not i.isdigit()) + \"\".join(i for i in test_str if i.isdigit())\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for c in test_str:\n        if c.isdigit():\n            nums.append(c)\n        else:\n            chars.append(c)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_list = []\n    char_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            char_list.append(i)\n    return \"\".join(char_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i not in nums:\n            new_str += i\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    return new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            other_str += i\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp50q1z9bo.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp50q1z9bo.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp50q1z9bo.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp50q1z9bo.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\n        str.maketrans(string.digits, string.digits)\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwsa3_8a2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwsa3_8a2.py\", line 16, in test_check\n    check(move_num)\n  File \"/tmp/tmpwsa3_8a2.py\", line 11, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmpwsa3_8a2.py\", line 5, in move_num\n    return test_str.translate(str.maketrans(\"\", \"\", string.digits)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n    return test_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0t73876.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpf0t73876.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpf0t73876.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    return \"\".join(\n        [i for i in test_str if i not in nums] + [i for i in test_str if i in nums]\n    )\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [i for i in test_str if i.isdigit()]\n    letters = [i for i in test_str if not i.isdigit()]\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit(), reverse=True))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuyzkf9cd.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpuyzkf9cd.py\", line 14, in test_check\n    check(move_num)\n  File \"/tmp/tmpuyzkf9cd.py\", line 9, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            other_str += i\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    nums_str = \"\"\n    for i in test_str:\n        if i in nums:\n            nums_str += i\n    return test_str + nums_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj8r3puqu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpj8r3puqu.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpj8r3puqu.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = [str(i) for i in range(10)]\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i in num:\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            other_str += i\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num_str = \"\"\n    alpha_str = \"\"\n    for char in test_str:\n        if char.isalpha():\n            alpha_str += char\n        else:\n            num_str += char\n    return alpha_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join([i for i in test_str if not i.isdigit()]) + \"\".join([i for i in test_str if i.isdigit()])\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for char in test_str:\n        if char in nums:\n            num_str += char\n        else:\n            other_str += char\n    return other_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return test_str.translate(str.maketrans('', '', string.digits)) + test_str.translate(\n        str.maketrans('', '', string.ascii_letters))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp41f8ulrc.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp41f8ulrc.py\", line 15, in test_check\n    check(move_num)\n  File \"/tmp/tmp41f8ulrc.py\", line 10, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n  File \"/tmp/tmp41f8ulrc.py\", line 5, in move_num\n    return test_str.translate(str.maketrans('', '', string.digits)) + test_str.translate(\nNameError: name 'string' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    alpha = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            alpha.append(i)\n    return \"\".join(alpha) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            chars.append(i)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    alpha = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            alpha.append(i)\n    return \"\".join(alpha) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    res = []\n    for i in test_str:\n        if i in nums:\n            res.append(i)\n        else:\n            res.insert(0, i)\n    return \"\".join(res)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv5bslvsg.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpv5bslvsg.py\", line 21, in test_check\n    check(move_num)\n  File \"/tmp/tmpv5bslvsg.py\", line 16, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [x for x in test_str if x.isdigit()]\n    chars = [x for x in test_str if not x.isdigit()]\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = [i for i in test_str if i.isdigit()]\n    char = [i for i in test_str if not i.isdigit()]\n    return \"\".join(char) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = \"0123456789\"\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    for i in test_str:\n        if i not in nums:\n            new_str += i\n    return new_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc_vltp4v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpc_vltp4v.py\", line 22, in test_check\n    check(move_num)\n  File \"/tmp/tmpc_vltp4v.py\", line 17, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n    return test_str + num_str\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0t73876.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpf0t73876.py\", line 19, in test_check\n    check(move_num)\n  File \"/tmp/tmpf0t73876.py\", line 14, in check\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = []\n    chars = []\n    for c in test_str:\n        if c.isdigit():\n            nums.append(c)\n        else:\n            chars.append(c)\n    return \"\".join(chars) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    nums = [i for i in test_str if i.isdigit()]\n    letters = [i for i in test_str if i.isalpha()]\n    return \"\".join(letters) + \"\".join(nums)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n    num = []\n    str_ = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            str_.append(i)\n    return \"\".join(str_) + \"\".join(num)\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}