{
  "name": "mbpp_606_radian_degree",
  "language": "py",
  "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(90) == 1.5707963267948966\n    assert candidate(60) == 1.0471975511965976\n    assert candidate(120) == 2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * (math.pi / 180)\n\n",
    "    return degree * (math.pi / 180)\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * (math.pi / 180)\n\n",
    "    return degree * (math.pi / 180)\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n",
    "    return degree * math.pi / 180\n\n"
  ]
}