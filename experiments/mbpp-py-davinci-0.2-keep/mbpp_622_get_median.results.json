{
  "name": "mbpp_622_get_median",
  "language": "py",
  "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8_orlmyd.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp8_orlmyd.py\", line 33, in test_check\n    check(get_median)\n  File \"/tmp/tmp8_orlmyd.py\", line 28, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp8_orlmyd.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n == 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp447vgrkx.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp447vgrkx.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmp447vgrkx.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp447vgrkx.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j, count = 0, 0, 0\n    m1, m2 = -1, -1\n    while count <= n:\n        count += 1\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphr70cy9f.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmphr70cy9f.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmphr70cy9f.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmphr70cy9f.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr2[n // 2 - 1:], arr1[:n // 2 + 1], n - n // 2 + 1)\n    return get_median(arr2[n // 2:], arr1[:n // 2 + 1], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtlt8xa8.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpqtlt8xa8.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpqtlt8xa8.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqtlt8xa8.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n == 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 > m2:\n        if n % 2 == 0:\n            return get_median(arr1[:n//2+1], arr2[n//2-1:], n//2+1)\n        else:\n            return get_median(arr1[:n//2+1], arr2[n//2:], n//2+1)\n    else:\n        if n % 2 == 0:\n            return get_median(arr2[:n//2+1], arr1[n//2-1:], n//2+1)\n        else:\n            return get_median(arr2[:n//2+1], arr1[n//2:], n//2+1)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx3tg8xmn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpx3tg8xmn.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpx3tg8xmn.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpx3tg8xmn.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n == 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgmewk3nd.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpgmewk3nd.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpgmewk3nd.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpgmewk3nd.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqz2j30h_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpqz2j30h_.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpqz2j30h_.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqz2j30h_.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqz2j30h_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpqz2j30h_.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpqz2j30h_.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqz2j30h_.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        else:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    else:\n        if n % 2 == 0:\n            return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n        else:\n            return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg57_3_q0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpg57_3_q0.py\", line 38, in test_check\n    check(get_median)\n  File \"/tmp/tmpg57_3_q0.py\", line 33, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpg57_3_q0.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphr70cy9f.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmphr70cy9f.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmphr70cy9f.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmphr70cy9f.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr2[n // 2 - 1:], arr1[:n // 2 + 1], n - n // 2 + 1)\n    return get_median(arr2[n // 2:], arr1[:n // 2 + 1], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxinypo__.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpxinypo__.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpxinypo__.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpxinypo__.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0iei8_j.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpr0iei8_j.py\", line 36, in test_check\n    check(get_median)\n  File \"/tmp/tmpr0iei8_j.py\", line 31, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpr0iei8_j.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n == 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcm_6ld_i.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpcm_6ld_i.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpcm_6ld_i.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpcm_6ld_i.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr2[n // 2 - 1:], arr1[:n // 2 + 1], n - n // 2 + 1)\n    return get_median(arr2[n // 2:], arr1[:n // 2 + 1], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtlt8xa8.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpqtlt8xa8.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpqtlt8xa8.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqtlt8xa8.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        else:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    else:\n        if n % 2 == 0:\n            return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n        else:\n            return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg57_3_q0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpg57_3_q0.py\", line 38, in test_check\n    check(get_median)\n  File \"/tmp/tmpg57_3_q0.py\", line 33, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpg57_3_q0.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    \n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    \n    if m1 == m2:\n        return m1\n    \n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n    \ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzj7gtf5.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpbzj7gtf5.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpbzj7gtf5.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpbzj7gtf5.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqwhdytex.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwhdytex.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpqwhdytex.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpqwhdytex.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnfcvnwfe.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpnfcvnwfe.py\", line 32, in test_check\n    check(get_median)\n  File \"/tmp/tmpnfcvnwfe.py\", line 27, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpnfcvnwfe.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv1u5dswh.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpv1u5dswh.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpv1u5dswh.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpv1u5dswh.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        else:\n            return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    else:\n        if n % 2 == 0:\n            return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n        else:\n            return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo04m_3ej.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpo04m_3ej.py\", line 40, in test_check\n    check(get_median)\n  File \"/tmp/tmpo04m_3ej.py\", line 35, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpo04m_3ej.py\", line 16, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr2[n//2 - 1:], arr1[:n//2 + 1], n - n//2 + 1)\n    return get_median(arr2[n//2:], arr1[:n//2 + 1], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbqlz7ax7.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpbqlz7ax7.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpbqlz7ax7.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpbqlz7ax7.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8_orlmyd.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp8_orlmyd.py\", line 33, in test_check\n    check(get_median)\n  File \"/tmp/tmp8_orlmyd.py\", line 28, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp8_orlmyd.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0iei8_j.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpr0iei8_j.py\", line 36, in test_check\n    check(get_median)\n  File \"/tmp/tmpr0iei8_j.py\", line 31, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpr0iei8_j.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphr70cy9f.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmphr70cy9f.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmphr70cy9f.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmphr70cy9f.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr2[n//2 - 1:], arr1[:n//2 + 1], n - n//2 + 1)\n    return get_median(arr2[n//2:], arr1[:n//2 + 1], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaim9nvbn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpaim9nvbn.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpaim9nvbn.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpaim9nvbn.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n - n//2 + 1)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4hm0j41y.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp4hm0j41y.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmp4hm0j41y.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp4hm0j41y.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvuoqj9yl.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpvuoqj9yl.py\", line 34, in test_check\n    check(get_median)\n  File \"/tmp/tmpvuoqj9yl.py\", line 29, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpvuoqj9yl.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoj6de1tg.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpoj6de1tg.py\", line 35, in test_check\n    check(get_median)\n  File \"/tmp/tmpoj6de1tg.py\", line 30, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpoj6de1tg.py\", line 14, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7j4mbrcg.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp7j4mbrcg.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmp7j4mbrcg.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmp7j4mbrcg.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2[:n//2+1], n - n//2)\n    if n % 2 == 0:\n        return get_median(arr1[:n//2+1], arr2[n//2-1:], n - n//2 + 1)\n    return get_median(arr1[:n//2+1], arr2[n//2:], n - n//2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz4u8vkvm.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpz4u8vkvm.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpz4u8vkvm.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpz4u8vkvm.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2.0\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i, j = 0, 0\n    m1, m2 = -1, -1\n\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n    if n == 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2 - 1:], arr2[:n // 2 + 1], n - n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n - n // 2)\n    if n % 2 == 0:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2 - 1:], n - n // 2 + 1)\n    return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n - n // 2)\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgmewk3nd.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpgmewk3nd.py\", line 31, in test_check\n    check(get_median)\n  File \"/tmp/tmpgmewk3nd.py\", line 26, in check\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n  File \"/tmp/tmpgmewk3nd.py\", line 13, in get_median\n    m1 = median(arr1, n)\nNameError: name 'median' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}