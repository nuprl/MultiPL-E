{
  "name": "mbpp_305_start_withp",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pig', 'dog', 'cat', 'parrot', 'penguin']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pear', 'apple', 'peach', 'pomegranate', 'pineapple']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'plum', 'pineapple', 'papaya']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'papaya']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pudding']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'plum', 'pumpkin']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'peas']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))",
    "    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return tuple(filter(lambda word: word.startswith(\"p\"), words))\n\nprint(start_withp([\"pear\", \"apple\", \"peach\", \"plum\"]))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes', 'pepper', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pudding']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pig', 'apple', 'pear', 'pineapple', 'penguin']))",
    "    return tuple([word for word in words if word[0].lower() == 'p'])\n\nprint(start_withp(['name', 'is', 'Peter', 'Parker']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'apple', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'potato', 'pepper', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'peach', 'pear']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple(filter(lambda x: x[0].lower() == 'p', words))\n\nprint(start_withp(['name','city','job']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pizza', 'pancake']))",
    "    return tuple(word for word in words if word[0] == 'p')\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'apple', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding']))",
    "    return tuple(filter(lambda word: word[0].lower() == 'p', words))\n\nprint(start_withp(['name','is','Anna']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'plum', 'pineapple', 'pumpkin']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pear', 'apple', 'pineapple', 'peach']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))",
    "    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pepperoni']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes', 'pepper']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(word for word in words if word[0] == 'p')\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return [word for word in words if word[0].lower() == 'p']\n\nprint(start_withp(['name','is','Anna']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'pepper', 'pumpkin', 'pineapple']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'apple', 'pear', 'peach', 'orange']))",
    "    return tuple(word for word in words if word.startswith('p'))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'potato', 'pancake', 'pasta']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'porky', 'porkchop']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'potato', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\n",
    "    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return tuple(p_words)\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pineapple', 'pizza']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'potato', 'pepper', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancake']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'plum', 'pomegranate']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'plum']))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'pomegranate']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'potatoes']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza', 'pancakes']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n",
    "    return tuple(word for word in words if word.startswith('p'))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pork', 'potatoes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancakes']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'papaya']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza', 'pork', 'pancake', 'pudding']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pepper', 'pizza']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pizza', 'pepper']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding']))",
    "    return [word for word in words if word[0].lower() == 'p']\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['panda', 'penguin', 'polar bear', 'pig', 'panther']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(word for word in words if word.startswith('p'))\n",
    "    return tuple([word for word in words if word[0] == 'p'])\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\n",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'pie', 'potatoes', 'pepper']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'apple', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pudding']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple([word for word in words if word.startswith('p')])\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pork', 'pork']))",
    "    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'apple', 'pear']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'pepper']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['hello', 'world', 'python', 'pandas', 'pandas']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancakes']))\n",
    "    return tuple(word for word in words if word[0] == 'p')\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['name', 'is', 'Peter', 'Parker']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))"
  ]
}