{
  "name": "mbpp_598_armstrong_number",
  "language": "py",
  "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(153) == True\n    assert candidate(259) == False\n    assert candidate(4458) == False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if number < 0:\n        return False\n    if number < 10:\n        return True\n    digits = []\n    while number > 0:\n        digits.append(number % 10)\n        number //= 10\n    return sum(map(lambda x: x ** len(digits), digits)) == number\n\n",
    "    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_digits = 0\n    for digit in num_str:\n        sum_of_digits += int(digit) ** num_len\n    return sum_of_digits == number\n\n",
    "    number_of_digits = len(str(number))\n    sum_of_digits = 0\n    for digit in str(number):\n        sum_of_digits += int(digit) ** number_of_digits\n    return sum_of_digits == number\n\n",
    "    return number == sum(int(digit) ** len(str(number)) for digit in str(number))\n\n",
    "    number_of_digits = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** number_of_digits\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n\n",
    "    return number == sum(int(digit) ** len(str(number)) for digit in str(number))\n\n",
    "    number_string = str(number)\n    number_length = len(number_string)\n    sum_of_digits = 0\n    for digit in number_string:\n        sum_of_digits += int(digit) ** number_length\n    return sum_of_digits == number\n\n",
    "    return number == sum(int(digit) ** len(str(number)) for digit in str(number))\n\n",
    "    number_of_digits = len(str(number))\n    sum_of_digits = 0\n    for digit in str(number):\n        sum_of_digits += int(digit) ** number_of_digits\n    return sum_of_digits == number\n\n",
    "    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_digits = 0\n    for digit in num_str:\n        sum_of_digits += int(digit) ** num_len\n    return sum_of_digits == number\n\n",
    "    number_str = str(number)\n    return number == sum(int(digit) ** len(number_str) for digit in number_str)\n\n",
    "    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for i in range(num_len):\n        sum += int(num_str[i]) ** num_len\n    return sum == number\n\n",
    "    number_of_digits = len(str(number))\n    sum_of_digits = 0\n    for digit in str(number):\n        sum_of_digits += int(digit) ** number_of_digits\n    return sum_of_digits == number\n\n",
    "    number_of_digits = len(str(number))\n    sum_of_digits = 0\n    for digit in str(number):\n        sum_of_digits += int(digit) ** number_of_digits\n    return sum_of_digits == number\n\n",
    "    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n\n",
    "    number_of_digits = len(str(number))\n    sum_of_digits = 0\n    for digit in str(number):\n        sum_of_digits += int(digit) ** number_of_digits\n    return sum_of_digits == number\n\n",
    "    return number == sum(int(digit) ** len(str(number)) for digit in str(number))\n\n",
    "    number_str = str(number)\n    number_len = len(number_str)\n    return number == sum(int(digit) ** number_len for digit in number_str)\n\n",
    "    return number == sum(int(digit) ** len(str(number)) for digit in str(number))\n\n",
    "    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for i in range(num_len):\n        sum += int(num_str[i]) ** num_len\n    return sum == number\n\n"
  ]
}