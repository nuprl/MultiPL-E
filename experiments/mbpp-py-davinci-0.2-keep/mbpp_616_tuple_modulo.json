{
  "name": "mbpp_616_tuple_modulo",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((1, 2, 3, 4), (2, 2, 2, 2)))",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((1, 2, 3), (2, 3, 4)))\nprint(tuple_modulo((1, 2, 3), (2, 3, 5)))",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((1,2,3), (2,3,4)))",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((1,2,3),(4,5,6)))",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((1, 2, 3, 4), (5, 6, 7, 8)))"
  ]
}