{
  "name": "mbpp_585_expensive_items",
  "language": "py",
  "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }], 2) == [{ 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-1', 'price': 101.1 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }, { 'name': 'Item-4', 'price': 22.75 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n\ndef test_check():\n    check(expensive_items)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x[\"price\"], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    pass",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    return sorted(items, key=lambda item: item[\"price\"], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda item: item['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x[\"price\"], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    # sort the items by price\n    items.sort(key=lambda x: x['price'], reverse=True)\n    # return the first n items\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    # sort items by price\n    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x[\"price\"], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x[\"price\"], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]",
    "    items.sort(key=lambda x: x[\"price\"], reverse=True)\n    return items[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    # TODO: Write your code here\n    pass\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x[\"price\"], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda item: item['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\n",
    "    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"
  ]
}