{
  "name": "mbpp_223_is_majority",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # Write your code here.\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n//2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # Time: O(log n)\n    # Space: O(1)\n    # Edge case: if n is 0, return False\n    if n == 0:\n        return False\n    # Find the index of the first occurrence of x\n    first_occurrence_index = binary_search(arr, 0, n - 1, x)\n    # If the first occurrence index is -1, return False\n    if first_occurrence_index == -1:\n        return False\n    # If the index of the first occurrence of x plus n/2 is less than the length of the array, return True\n    if first_occurrence_index + n // 2 < n:\n        return True\n    # Otherwise, return False\n    return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # Time complexity: O(log n)\n    # Space complexity: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    mid = n // 2\n    if arr[mid] == x:\n        return (mid + n // 2) < n or arr[mid + n // 2] == x\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n"
  ]
}