{
  "name": "mbpp_160_find_solution",
  "language": "py",
  "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                return None\n            else:\n                if x == 0:\n                    y += 1\n                else:\n                    x -= 1\n                    y += 1\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return x, y\n            x += 1\n        return None",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y, x - (a // b) * y\n        a, b = b % a, a\n    return x, y\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y, _ = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y > n:\n                y -= 1\n            else:\n                x += 1\n        return (x, y)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    return (x, y) if a1 == n else (y, x)",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\n",
    "    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) == 0:\n        return (n // a, n // b)\n    else:\n        return None",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y += 1\n        else:\n            x += 1\n    return x, y\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y += 1\n        else:\n            x += 1\n    return (x, y)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n",
    "    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x*a + y*b != n:\n            if x*a + y*b < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n"
  ]
}