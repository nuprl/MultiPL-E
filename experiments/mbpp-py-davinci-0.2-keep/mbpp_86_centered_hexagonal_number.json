{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "py",
  "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n * (2 * n - 1)\n\n",
    "    return n * (2 * n - 1)\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return n * (2 * n - 1)\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return n * (2 * n - 1)\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return n * (2 * n - 1)\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return 3 * n * (n - 1) + 1\n\n",
    "    return n * (2 * n - 1)\n\n",
    "    return 3 * n * (n - 1) + 1\n\n"
  ]
}