{
  "name": "mbpp_58_opposite_Signs",
  "language": "py",
  "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(1, -2) == True\n    assert candidate(3, 2) == False\n    assert candidate(-10, -10) == False\n    assert candidate(-2, 2) == True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n",
    "    return ((x ^ y) < 0)\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n",
    "    return (x ^ y) < 0\n\n",
    "    return True if (x < 0 and y > 0) or (x > 0 and y < 0) else False\n\n",
    "    return True if ((x ^ y) < 0) else False\n\n"
  ]
}