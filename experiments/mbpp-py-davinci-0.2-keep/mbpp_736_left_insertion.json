{
  "name": "mbpp_736_left_insertion",
  "language": "py",
  "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4\n    assert candidate([1, 2, 4, 5], 3) == 2\n    assert candidate([1, 2, 4, 5], 7) == 4\n\ndef test_check():\n    check(left_insertion)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(a) == 0:\n        return 0\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
    "    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
    "    if len(a) == 0:\n        return 0\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n",
    "    if x < a[0]:\n        return 0\n    elif x > a[-1]:\n        return len(a)\n    else:\n        for i in range(len(a)):\n            if a[i] > x:\n                return i\n",
    "    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n",
    "    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if x <= a[mid]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n",
    "    if len(a) == 0:\n        return 0\n    if x <= a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    left = 0\n    right = len(a) - 1\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid\n        else:\n            right = mid\n    return right\n",
    "    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
    "    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
    "    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\n",
    "    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
    "    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return len(a)\n"
  ]
}