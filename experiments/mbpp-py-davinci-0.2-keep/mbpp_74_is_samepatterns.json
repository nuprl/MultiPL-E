{
  "name": "mbpp_74_is_samepatterns",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == True\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'a' and colors[i] != colors[0]:\n            return False\n        if patterns[i] == 'b' and colors[i] == colors[0]:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and int(colors[i]) % 2 != 0:\n            return False\n        if patterns[i] == 'odd' and int(colors[i]) % 2 == 0:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and colors[i] % 2 != 0:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == 'odd' and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n",
    "    for i in range(len(colors)):\n        if patterns[i] == \"odd\" and i % 2 == 0:\n            return False\n        elif patterns[i] == \"even\" and i % 2 == 1:\n            return False\n        elif patterns[i] == \"up\" and colors[i] < colors[i - 1]:\n            return False\n        elif patterns[i] == \"down\" and colors[i] > colors[i - 1]:\n            return False\n    return True\n",
    "    for i in range(len(patterns)):\n        if patterns[i] == 'a':\n            if colors[i] != colors[0]:\n                return False\n        elif patterns[i] == 'b':\n            if colors[i] == colors[0]:\n                return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"odd\" and colors[i] % 2 == 0:\n            return False\n        elif patterns[i] == \"even\" and colors[i] % 2 != 0:\n            return False\n    return True\n\nprint(is_samepatterns([1, 3, 4, 6, 5], [\"odd\", \"odd\", \"even\", \"odd\", \"odd\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5, 6, 7, 8, 9], [\"even\", \"odd\", \"odd\", \"even\", \"odd\", \"even\", \"odd\", \"even\", \"even\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5], [\"even\", \"odd\", \"even\", \"odd\", \"odd\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5], [\"even\", \"odd\", \"even\", \"odd\", \"even\"]))",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"*\" and colors[i] != patterns[i]:\n            return False\n        if patterns[i] != \"*\" and colors[i] == patterns[i]:\n            return False\n    return True",
    "    for i in range(len(patterns)):\n        if patterns[i] == \"b\":\n            if colors[i] != \"blue\":\n                return False\n        elif patterns[i] == \"g\":\n            if colors[i] != \"green\":\n                return False\n        elif patterns[i] == \"r\":\n            if colors[i] != \"red\":\n                return False\n        elif patterns[i] == \"y\":\n            if colors[i] != \"yellow\":\n                return False\n        else:\n            return False\n    return True\n",
    "    for i in range(len(patterns)):\n        if patterns[i] == \"b\":\n            if colors[i] != \"blue\":\n                return False\n        elif patterns[i] == \"g\":\n            if colors[i] != \"green\":\n                return False\n        elif patterns[i] == \"r\":\n            if colors[i] != \"red\":\n                return False\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'a' and colors[i] == 'r':\n            return False\n        if patterns[i] == 'b' and colors[i] == 'g':\n            return False\n        if patterns[i] == 'c' and colors[i] == 'b':\n            return False\n    return True\n",
    "    for i in range(len(patterns)):\n        if patterns[i] == \"b\":\n            if colors[i] != \"blue\":\n                return False\n        elif patterns[i] == \"g\":\n            if colors[i] != \"green\":\n                return False\n        elif patterns[i] == \"r\":\n            if colors[i] != \"red\":\n                return False\n        elif patterns[i] == \"y\":\n            if colors[i] != \"yellow\":\n                return False\n        else:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and colors[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i] != 'R':\n            return False\n        elif patterns[i] == 'G' and colors[i] != 'G':\n            return False\n        elif patterns[i] == 'B' and colors[i] != 'B':\n            return False\n    return True\n\nprint(is_samepatterns(['R', 'G', 'B', 'R', 'B', 'R'], ['R', 'R', 'R', 'G', 'B', 'B']))\nprint(is_samepatterns(['R', 'G', 'B', 'R', 'B', 'R'], ['R', 'R', 'R', 'G', 'B', 'R']))",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'a':\n            if colors[i] != colors[0]:\n                return False\n        elif patterns[i] == 'b':\n            if colors[i] == colors[0]:\n                return False\n    return True\n"
  ]
}