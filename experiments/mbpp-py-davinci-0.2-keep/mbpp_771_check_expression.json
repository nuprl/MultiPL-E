{
  "name": "mbpp_771_check_expression",
  "language": "py",
  "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('{()}[{}]') == True\n    assert candidate('{()}[{]') == False\n    assert candidate('{()}[{}][]({})') == True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    stack = []\n    for c in exp:\n        if c in [\"(\", \"{\", \"[\"]:\n            stack.append(c)\n        elif c in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            if c == \")\" and stack[-1] != \"(\":\n                return False\n            if c == \"}\" and stack[-1] != \"{\":\n                return False\n            if c == \"]\" and stack[-1] != \"[\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if char == \")\" and top != \"(\":\n                    return False\n                elif char == \"}\" and top != \"{\":\n                    return False\n                elif char == \"]\" and top != \"[\":\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\" and char != \")\":\n                    return False\n                elif top == \"{\" and char != \"}\":\n                    return False\n                elif top == \"[\" and char != \"]\":\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for i in exp:\n        if i == \"(\" or i == \"{\" or i == \"[\":\n            stack.append(i)\n        elif i == \")\" or i == \"}\" or i == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if stack[-1] == \"(\" and char != \")\":\n                return False\n            if stack[-1] == \"{\" and char != \"}\":\n                return False\n            if stack[-1] == \"[\" and char != \"]\":\n                return False\n            stack.pop()\n    return not stack\n\n",
    "    stack = []\n    for i in exp:\n        if i == \"(\" or i == \"[\" or i == \"{\":\n            stack.append(i)\n        elif i == \")\" or i == \"]\" or i == \"}\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if i == \")\" and top != \"(\":\n                    return False\n                elif i == \"]\" and top != \"[\":\n                    return False\n                elif i == \"}\" and top != \"{\":\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            else:\n                if i == \")\" and stack[-1] == \"(\":\n                    stack.pop()\n                elif i == \"}\" and stack[-1] == \"{\":\n                    stack.pop()\n                elif i == \"]\" and stack[-1] == \"[\":\n                    stack.pop()\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] != \"(\":\n                return False\n            if char == \"}\" and stack[-1] != \"{\":\n                return False\n            if char == \"]\" and stack[-1] != \"[\":\n                return False\n            stack.pop()\n    return not stack\n\n",
    "    stack = []\n    for i in exp:\n        if i == \"(\" or i == \"{\" or i == \"[\":\n            stack.append(i)\n        elif i == \")\" or i == \"}\" or i == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for c in exp:\n        if c == \"(\" or c == \"[\" or c == \"{\":\n            stack.append(c)\n        elif c == \")\" or c == \"]\" or c == \"}\":\n            if len(stack) == 0:\n                return False\n            if c == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif c == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif c == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"[\", \"{\"]:\n            stack.append(char)\n        elif char in [\")\", \"]\", \"}\"]:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == \"(\" and char != \")\":\n                return False\n            if top == \"[\" and char != \"]\":\n                return False\n            if top == \"{\" and char != \"}\":\n                return False\n    return not stack\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == \"(\" and char != \")\":\n                return False\n            if top == \"{\" and char != \"}\":\n                return False\n            if top == \"[\" and char != \"]\":\n                return False\n    return not stack\n\n",
    "    stack = []\n    for i in exp:\n        if i in [\"(\", \"[\", \"{\"]:\n            stack.append(i)\n        elif i in [\")\", \"]\", \"}\"]:\n            if not stack:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n",
    "    stack = []\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n",
    "    stack = []\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\" and i != \")\":\n                    return False\n                elif top == \"{\" and i != \"}\":\n                    return False\n                elif top == \"[\" and i != \"]\":\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n",
    "    stack = []\n    for char in exp:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == \"(\" and char != \")\":\n                return False\n            if top == \"{\" and char != \"}\":\n                return False\n            if top == \"[\" and char != \"]\":\n                return False\n    return not stack\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\" and char != \")\":\n                    return False\n                elif top == \"{\" and char != \"}\":\n                    return False\n                elif top == \"[\" and char != \"]\":\n                    return False\n    return not stack\n\n",
    "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if stack[-1] == \"(\" and char == \")\":\n                stack.pop()\n            elif stack[-1] == \"{\" and char == \"}\":\n                stack.pop()\n            elif stack[-1] == \"[\" and char == \"]\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"
  ]
}