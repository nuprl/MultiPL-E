{
  "name": "mbpp_90_len_log",
  "language": "py",
  "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['python', 'PHP', 'bigdata']) == 7\n    assert candidate(['a', 'ab', 'abc']) == 3\n    assert candidate(['small', 'big', 'tall']) == 5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['a', 'ab', 'abc', 'abcd']))",
    "    return len(max(list1, key=len))\n",
    "    return max(len(word) for word in list1)\n",
    "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
    "    return len(max(list1, key=len))\n\nprint(len_log([\"a\", \"ab\", \"abc\", \"abcd\"]))",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['abc', 'abcd', 'abcde']))",
    "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n\nprint(len_log([\"abc\", \"abcd\", \"abcde\"]))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['a', 'ab', 'abc', 'abcd', 'abcde']))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log([\"hello\", \"world\", \"python\"]))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max(map(len, list1))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\nprint(len_log(['a', 'ab', 'abc', 'abcd']))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log([\"a\", \"ab\", \"abc\"]))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max([len(word) for word in list1])\n",
    "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['abc', 'abcd', 'abcde']))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n\nprint(len_log(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']))",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max(map(len, list1))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['a', 'ab', 'abc', 'abcd']))",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    longest_word = max(list1, key=len)\n    return len(longest_word)\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return max(map(len, list1))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    length = 0\n    for i in list1:\n        if len(i) > length:\n            length = len(i)\n    return length\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['a', 'aa', 'aaa', 'aaaa']))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['a', 'ab', 'abc']))",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\nprint(len_log(['abc', 'abcd', 'ab']))",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))",
    "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
  ]
}