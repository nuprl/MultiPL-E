{
  "name": "mbpp_90_len_log",
  "language": "py",
  "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['python', 'PHP', 'bigdata']) == 7\n    assert candidate(['a', 'ab', 'abc']) == 3\n    assert candidate(['small', 'big', 'tall']) == 5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n\n",
    "    return max(len(word) for word in list1)\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n",
    "    return len(max(list1, key=len))\n"
  ]
}