{
  "name": "mbpp_630_get_coordinates",
  "language": "py",
  "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n",
    "    x, y = test_tup\n    return [[x+1, y], [x-1, y], [x, y+1], [x, y-1]]\n",
    "    x, y = test_tup\n    return [[x+1, y], [x-1, y], [x, y+1], [x, y-1]]\n\nprint(get_coordinates((0, 0)))\nprint(get_coordinates((1, 2)))\nprint(get_coordinates((3, 3)))\nprint(get_coordinates((2, 5)))\n",
    "    x, y = test_tup\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n\nprint(get_coordinates((1, 2)))",
    "    x, y = test_tup\n    return [[x+1, y], [x-1, y], [x, y+1], [x, y-1]]\n\nprint(get_coordinates((1, 1)))",
    "    x, y = test_tup\n    return [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]\n\nprint(get_coordinates((0, 0)))\nprint(get_coordinates((1, 2)))\nprint(get_coordinates((3, 3)))\n",
    "    x, y = test_tup\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n\nprint(get_coordinates((2, 2)))",
    "    x, y = test_tup\n    return [[x, y + 1], [x, y - 1], [x + 1, y], [x - 1, y]]\n\nprint(get_coordinates((1, 1)))\nprint(get_coordinates((0, 0)))\nprint(get_coordinates((-1, -1)))\nprint(get_coordinates((-2, -2)))\nprint(get_coordinates((-3, -3)))\nprint(get_coordinates((-4, -4)))\nprint(get_coordinates((-5, -5)))\nprint(get_coordinates((-6, -6)))\nprint(get_coordinates((-7, -7)))\nprint(get_coordinates((-8, -8)))\nprint(get_coordinates((-9, -9)))\nprint(get_coordinates((-10, -10)))\nprint(get_coordinates((-11, -11)))\nprint(get_coordinates((-12, -12)))\nprint(get_coordinates((-13, -13)))\nprint(get_coordinates((-14, -14)))\nprint(get_coordinates((-15, -15)))\nprint(get_coordinates((-16, -16)))\nprint(get_coordinates((-17, -17)))\nprint(get_coordinates((-18, -18)))\nprint(get_coordinates((-19, -19)))\nprint(get_coordinates((-20, -20)))\nprint(get_coordinates((-21, -21)))\nprint(get_coordinates((-22, -22)))\nprint(get_coordinates((-23, -23)))\nprint(get_coordinates((-24, -24)))\nprint(get_coordinates((-25, -25)))\nprint(get_coordinates((-26, -26)))\nprint(get_coordinates((-27, -27)))\nprint(get_coordinates((-28, -28)))\nprint(get_coordinates((-29, -29)))\nprint(get_coordinates((-30, -30)))\nprint(get_coordinates((-31, -31)))\nprint(get_coordinates((-32, -",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n\n",
    "    x, y = test_tup\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n\nprint(get_coordinates((0,0)))",
    "    x, y = test_tup\n    return [[x, y+1], [x, y-1], [x+1, y], [x-1, y]]\n",
    "    x, y = test_tup\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n\nprint(get_coordinates((1,1)))",
    "    x, y = test_tup\n    return [[x, y+1], [x, y-1], [x+1, y], [x-1, y]]\n\n",
    "    x, y = test_tup\n    return [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]"
  ]
}