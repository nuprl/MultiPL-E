{
  "name": "mbpp_560_union_elements",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14), (13, 15, 16, 17)) == (11, 12, 13, 14, 15, 16, 17)\n\ndef test_check():\n    check(union_elements)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
  ]
}