{
  "name": "mbpp_474_replace_char",
  "language": "py",
  "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('polygon', 'y', 'l') == 'pollgon'\n    assert candidate('character', 'c', 'a') == 'aharaater'\n    assert candidate('python', 'l', 'a') == 'python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    if str1 == \"\":\n        return \"\"\n    if str1[0] == ch:\n        return newch + replace_char(str1[1:], ch, newch)\n    return str1[0] + replace_char(str1[1:], ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return newch.join(str1.split(ch))\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    if str1 == \"\":\n        return \"\"\n    if str1[0] == ch:\n        return newch + replace_char(str1[1:], ch, newch)\n    return str1[0] + replace_char(str1[1:], ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return newch.join(str1.split(ch))\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    if len(str1) == 0:\n        return str1\n    if str1[0] == ch:\n        return newch + replace_char(str1[1:], ch, newch)\n    else:\n        return str1[0] + replace_char(str1[1:], ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n"
  ]
}