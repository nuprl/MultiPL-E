{
  "name": "mbpp_474_replace_char",
  "language": "py",
  "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('polygon', 'y', 'l') == 'pollgon'\n    assert candidate('character', 'c', 'a') == 'aharaater'\n    assert candidate('python', 'l', 'a') == 'python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    str1 = str1.replace(ch, newch)\n    return str1\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n",
    "    return str1.replace(ch, newch)\n\n"
  ]
}