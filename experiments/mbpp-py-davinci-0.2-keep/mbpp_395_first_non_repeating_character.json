{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "py",
  "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('abcabc') == None\n    assert candidate('abc') == 'a'\n    assert candidate('ababc') == 'c'\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(str1) == 0:\n        return None\n    if len(str1) == 1:\n        return str1\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return None\n",
    "    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n",
    "    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    for c in str1:\n        if str1.count(c) == 1:\n            return c\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n\nprint(first_non_repeating_character(\"abcab\")) # should return 'c'\nprint(first_non_repeating_character(\"abab\")) # should return None\nprint(first_non_repeating_character(\"aabbbc\")) # should return 'c'\nprint(first_non_repeating_character(\"aabbdbc\")) # should return 'd'",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    for c in str1:\n        if str1.count(c) == 1:\n            return c\n    return None\n\n",
    "    if str1 is None:\n        return None\n    if len(str1) == 0:\n        return None\n    if len(str1) == 1:\n        return str1\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n\nprint(first_non_repeating_character('abcdef'))\nprint(first_non_repeating_character('aabbcc'))\nprint(first_non_repeating_character('abcabc'))",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n\nprint(first_non_repeating_character(\"abcdabcd\"))\nprint(first_non_repeating_character(\"abcd\"))",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n\n",
    "    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n",
    "    if len(str1) == 0:\n        return None\n    if len(str1) == 1:\n        return str1[0]\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n",
    "    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
    "    # Remove this comment and fill in your code here\n    # raise NotImplementedError\n    # print(str1)\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
  ]
}