{
  "name": "mbpp_773_occurance_substring",
  "language": "py",
  "prompt": "from typing import Optional, Tuple, Union\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"abcd\"))\nprint(occurance_substring(\"abcdabc\", \"d\"))\nprint(occurance_substring(\"abcdabc\", \"z\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"abc\"))\nprint(occurance_substring(\"abcdabc\", \"d\"))\nprint(occurance_substring(\"abcdabc\", \"dab\"))\nprint(occurance_substring(\"abcdabc\", \"xyz\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if len(pattern) > len(text):\n        return None\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i + len(pattern)] == pattern:\n            return (i, i + len(pattern))\n    return None\n\nprint(occurance_substring(\"abcd\", \"bc\"))\nprint(occurance_substring(\"abcd\", \"bcx\"))\nprint(occurance_substring(\"abcd\", \"bcde\"))",
    "    if not pattern:\n        return None\n    if not text:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"Hello World\", \"o\"))\nprint(occurance_substring(\"Hello World\", \"z\"))\nprint(occurance_substring(\"Hello World\", \"l\"))",
    "    if not pattern:\n        return None\n    if not text:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern not in text:\n        return None\n    return text.count(pattern), text.index(pattern)\n",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.find(pattern), text.rfind(pattern))\n    else:\n        return None\n\nprint(occurance_substring('abcdabc', 'ab'))\nprint(occurance_substring('abcdabc', 'bc'))\nprint(occurance_substring('abcdabc', 'cd'))\nprint(occurance_substring('abcdabc', 'de'))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None\n\nprint(occurance_substring(\"abcd\", \"ab\"))\nprint(occurance_substring(\"abcd\", \"ef\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\n\nprint(occurance_substring(\"abracadabra\", \"dab\"))\n\nprint(occurance_substring(\"abracadabra\", \"acad\"))\n\nprint(occurance_substring(\"abracadabra\", \"bra\"))\n\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\n\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\n\nprint(occurance_substring(\"abracadabra\", \" \"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.find(pattern), text.rfind(pattern))",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))\nprint(occurance_substring(\"abcdabc\", \"abcd\"))\nprint(occurance_substring(\"abcdabc\", \"abcda\"))\nprint(occurance_substring(\"abcdabc\", \"abc\"))\nprint(occurance_substring(\"abcdabc\", \"bcd\"))\nprint(occurance_substring(\"abcdabc\", \"cdab\"))\nprint(occurance_substring(\"abcdabc\", \"cdabc\"))\nprint(occurance_substring(\"abcdabc\", \"abcdab\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc\", \"bcda\"))\nprint(occurance_substring(\"abcdabc",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring('banana', 'na'))\nprint(occurance_substring('banana', 'nana'))\nprint(occurance_substring('banana', 'nanas'))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if not text or not pattern:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern not in text:\n        return None\n    return text.count(pattern), text.index(pattern)\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if not text or not pattern:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern not in text:\n        return None\n    return text.count(pattern), text.find(pattern)\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"abc\"))\nprint(occurance_substring(\"abcdabc\", \"d\"))\nprint(occurance_substring(\"abcdabc\", \"a\"))\nprint(occurance_substring(\"abcdabc\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    return re.search(pattern, text)\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.index(pattern)\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if len(pattern) > len(text):\n        return None\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)] == pattern:\n            return i, i + len(pattern)\n    return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.index(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (pattern, text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.find(pattern), text.find(pattern) + len(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring('abcdabc', 'ab'))\nprint(occurance_substring('aaaaa', 'aa'))\nprint(occurance_substring('aaaaa', 'b'))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.index(pattern), text.index(pattern) + len(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acb\"))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\nprint(occurance_substring(\"This is a test string\", \"is\"))\nprint(occurance_substring(\"babababa\", \"baba\"))\nprint(occurance_substring(\"Python is an awesome language to program in!\", \"o\"))\nprint(occurance_substring(\"We have nothing in common!\", \"really?\"))\nprint(occurance_substring(\"This is this and that is this\", \"this\"))",
    "    if pattern in text:\n        return text.find(pattern), text.count(pattern)\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"racadabra\"))\nprint(occurance_substring(\"abracadabra\", \"ra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"ABRACADABRA\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"brac\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"cadabraabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"ABRACADABRAA\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrAa\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabraabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraabra\"))\nprint(occurance_substring(\"abracadabra\", \"cadabraabracadabra\"))\nprint(occurance_substring(\"",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"simsalabim\"))",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"ada\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"dabr\"))\nprint(occurance_substring(\"abracadabra\", \"abrac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"brac\"))\nprint(occurance_substring(\"abracadabra\", \"cada\"))\nprint(occurance_substring(\"abracadabra\", \"racadab\"))\nprint(occurance_substring(\"abracadabra\", \"abracad\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"cadabraabra\"))\nprint(occurance_substring(\"abracadabra\", \"acadabracad\"))\nprint(occurance_substring(\"abracadabra\", \"racadabraab\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabrac\"))\nprint(occurance_substring(\"abracadabra\", \"cadabracada\"))\nprint(occurance_substring(\"abracadabra\", \"racadabraabr\"))",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"ada\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"dabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occ",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"AbRa\"))\nprint(occurance_substring(\"abracadabra\", \"1234\"))",
    "    if pattern in text:\n        return text.find(pattern), text.count(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"ada\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"dabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadab\"))\nprint(occurance_substring(\"abracadabra\", \"abracad\"))\nprint(occurance_substring(\"abracadabra\", \"abraca\"))\nprint(occurance_substring(\"abracadabra\", \"abrac\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"ab\"))\nprint(occurance_substring(\"abracadabra\", \"a\"))\nprint(occurance_substring(\"abracadabra\", \"b\"))\nprint(occurance_substring",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.index(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n\nprint(occurance_substring(\"Python is an interpreted, high-level, general-purpose programming language.\", \"Python\"))\nprint(occurance_substring(\"Python is an interpreted, high-level, general-purpose programming language.\", \"Java\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))\nprint(occurance_substring(\"hello world\", \"hello\"))",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'abcd'))\nprint(occurance_substring('abcdec', 'bcd'))\nprint(occurance_substring('abcdec', 'ab'))\nprint(occurance_substring('abcdec', 'cd'))\nprint(occurance_substring('abcdec', 'ec'))\nprint(occurance_substring('abcdec', 'de'))\nprint(occurance_substring('abcdec', 'c'))\nprint(occurance_substring('abcdec', 'd'))\nprint(occurance_substring('abcdec', 'e'))\nprint(occurance_substring('abcdec', 'a'))\nprint(occurance_substring('abcdec', 'b'))\nprint(occurance_substring('abcdec', 'abcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdecabcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdecabcdecabcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcdecabcdecabcdecabcdecabcdecabcdecabcdec'))\nprint(occurance_substring('abcdec', 'abcdecabcd",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"ac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"bric\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"elephant\"))",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if not pattern or not text:\n        return None\n    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "\n    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"dabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n"
  ]
}