{
  "name": "mbpp_773_occurance_substring",
  "language": "py",
  "prompt": "from typing import Optional, Tuple, Union\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"abcd\"))\nprint(occurance_substring(\"abcdabc\", \"d\"))\nprint(occurance_substring(\"abcdabc\", \"z\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"abc\"))\nprint(occurance_substring(\"abcdabc\", \"d\"))\nprint(occurance_substring(\"abcdabc\", \"dab\"))\nprint(occurance_substring(\"abcdabc\", \"xyz\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if len(pattern) > len(text):\n        return None\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i + len(pattern)] == pattern:\n            return (i, i + len(pattern))\n    return None\n\nprint(occurance_substring(\"abcd\", \"bc\"))\nprint(occurance_substring(\"abcd\", \"bcx\"))\nprint(occurance_substring(\"abcd\", \"bcde\"))",
    "    if not pattern:\n        return None\n    if not text:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"Hello World\", \"o\"))\nprint(occurance_substring(\"Hello World\", \"z\"))\nprint(occurance_substring(\"Hello World\", \"l\"))",
    "    if not pattern:\n        return None\n    if not text:\n        return None\n    if len(pattern) > len(text):\n        return None\n    if pattern not in text:\n        return None\n    return text.count(pattern), text.index(pattern)\n",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.find(pattern), text.rfind(pattern))\n    else:\n        return None\n\nprint(occurance_substring('abcdabc', 'ab'))\nprint(occurance_substring('abcdabc', 'bc'))\nprint(occurance_substring('abcdabc', 'cd'))\nprint(occurance_substring('abcdabc', 'de'))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None"
  ]
}