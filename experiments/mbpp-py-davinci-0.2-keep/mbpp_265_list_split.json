{
  "name": "mbpp_265_list_split",
  "language": "py",
  "prompt": "from typing import Any\n\ndef list_split(S: Any, step: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))\nprint(list_split([1, 2, 3, 4, 5, 6], 4))\nprint(list_split([1, 2, 3, 4, 5, 6], 5))\nprint(list_split([1, 2, 3, 4, 5, 6], 6))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    if not isinstance(S, list):\n        raise TypeError(\"S must be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"step must be an integer\")\n    if step < 1:\n        raise ValueError(\"step must be greater than 0\")\n    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))\nprint(list_split([1, 2, 3, 4, 5, 6], 4))\nprint(list_split([1, 2, 3, 4, 5, 6], 5))\nprint(list_split([1, 2, 3, 4, 5, 6], 6))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 4))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 5))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 6))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 7))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 8))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 9))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 10))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))\nprint(list_split([1, 2, 3, 4, 5, 6], 4))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 1))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 4))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 5))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 6))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 7))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 8))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 9))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 10))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))\nprint(list_split([1, 2, 3, 4, 5, 6], 4))\nprint(list_split([1, 2, 3, 4, 5, 6], 5))\nprint(list_split([1, 2, 3, 4, 5, 6], 6))\nprint(list_split([1, 2, 3, 4, 5, 6], 7))\nprint(list_split([1, 2, 3, 4, 5, 6], 8))\nprint(list_split([1, 2, 3, 4, 5, 6], 9))\nprint(list_split([1, 2, 3, 4, 5, 6], 10))\nprint(list_split([1, 2, 3, 4, 5, 6], 11))\nprint(list_split([1, 2, 3, 4, 5, 6], 12))\nprint(list_split([1, 2, 3, 4, 5, 6], 13))\nprint(list_split([1, 2, 3, 4, 5, 6], 14))\nprint(list_split([1, 2, 3, 4, 5, 6], 15))\nprint(list_split([1, 2, 3, 4, 5, 6], 16))\nprint(list_split([1, 2, 3, 4, 5, 6], 17))\nprint(list_split([1, 2, 3, 4, 5, 6], 18))\nprint(list_split([1, 2, 3, 4, 5, 6], 19))\nprint(list_split([1, 2, 3, 4, 5, 6], 20))\nprint(list_split([1, 2, 3, 4, 5, 6], 21))\nprint(list_split([1, 2, 3, 4, 5, 6], 22))\nprint(list_split([1, 2, 3, 4, 5, 6], 23))\nprint(list_split([1, 2, 3, 4, 5, 6], 24))\nprint(",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    if not isinstance(S, list):\n        raise TypeError(\"S must be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"step must be an integer\")\n    if step <= 0:\n        raise ValueError(\"step must be greater than 0\")\n    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 4))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 5))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 6))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 7))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 8))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 9))\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 10))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6], 2))\nprint(list_split([1, 2, 3, 4, 5, 6], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i + step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9], 3))",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n",
    "    return [S[i:i + step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]",
    "    return [S[i:i+step] for i in range(0, len(S), step)]\n\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))"
  ]
}