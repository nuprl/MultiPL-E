{
  "name": "mbpp_566_sum_digits",
  "language": "py",
  "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(345) == 12\n    assert candidate(12) == 3\n    assert candidate(97) == 16\n\ndef test_check():\n    check(sum_digits)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return sum(int(d) for d in str(n))\n\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return sum(int(digit) for digit in str(n))\n\n",
    "    return sum(map(int, str(n)))\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return sum(int(digit) for digit in str(n))\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n",
    "    return sum(int(x) for x in str(n))\n\n",
    "    return sum(int(i) for i in str(n))\n\n",
    "    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return sum(int(digit) for digit in str(n))\n\n"
  ]
}