{
  "name": "mbpp_141_pancake_sort",
  "language": "py",
  "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums) - 1, -1, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n",
    "    n = len(nums)\n    for i in range(n, 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    def flip(nums: List[int], k: int) -> None:\n        i = 0\n        while i < k // 2:\n            nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n            i += 1\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index + 1)\n        flip(nums, i + 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 0, -1):\n        max_index = 0\n        for j in range(0, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n"
  ]
}