{
  "name": "mbpp_141_pancake_sort",
  "language": "py",
  "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums) - 1, -1, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n",
    "    n = len(nums)\n    for i in range(n, 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    def flip(nums: List[int], k: int) -> None:\n        i = 0\n        while i < k // 2:\n            nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n            i += 1\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index + 1)\n        flip(nums, i + 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 0, -1):\n        max_index = 0\n        for j in range(0, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i - 1:-1] + nums[:len(nums) - i]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([5,4,3,2,1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index == i - 1:\n            continue\n        if max_index != 0:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[max_index::-1] + nums[max_index + 1:i]\n        nums = nums[i - 1::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:len(nums)-i][::-1] + nums[len(nums)-i:]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i - 1:-1] + nums[:len(nums) - i]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8, 9, 10]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        nums[:len(nums) - i] = nums[:len(nums) - i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    if len(nums) <= 1:\n        return nums\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))\nprint(pancake_sort([1, 2, 3]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i-1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[len(nums) - i - 1::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))\nprint(\"The arrays above should be [1, 2, 3, 4, 5], \\\n    [1, 2, 3, 4, 5], and [1, 2, 3, 4, 5].\")",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            flip(nums, max_index)\n            flip(nums, i)\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[max_idx::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index == i - 1:\n            continue\n        if max_index > 0:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for x in range(len(nums), 1, -1):\n        i = nums.index(x)\n        if i != x - 1:\n            nums = nums[:i:-1] + nums[:i]\n            nums = nums[::-1]\n    return nums\n\n",
    "    for i in range(len(nums) - 1, -1, -1):\n        max_index = nums.index(max(nums[:i + 1]))\n        if max_index != i:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i + 1][::-1] + nums[i + 1:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[max_index::-1] + nums[max_index + 1:len(nums)]\n            nums = nums[i - 1::-1] + nums[i:len(nums)]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index == i - 1:\n            continue\n        if max_index != 0:\n            nums[:max_index + 1] = reversed(nums[:max_index + 1])\n        nums[:i] = reversed(nums[:i])\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))\nprint(pancake_sort([1, 2, 3]))",
    "    res = []\n    for x in range(len(nums), 1, -1):\n        i = nums.index(x)\n        res.extend([i + 1, x])\n        nums = nums[:i:-1] + nums[:i]\n    return res\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    def flip(nums, k):\n        i = 0\n        while i < k:\n            nums[i], nums[k] = nums[k], nums[i]\n            i += 1\n            k -= 1\n\n    for i in range(len(nums), 0, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i-1:\n            nums = nums[max_index::-1] + nums[max_index+1:i]\n            nums = nums[i-1::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        flip(nums, max_index)\n        flip(nums, len(nums)-i-1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8, 9, 10]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))\nprint(\"The arrays above should be [1, 2, 3, 4, 5], \\\n    [1, 2, 3, 4, 5], and [1, 2, 3, 4, 5].\")",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            flip(nums, max_index)\n            flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[max_index::-1] + nums[max_index + 1:i]\n        nums = nums[i - 1::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[len(nums) - i - 1::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[0:max_index + 1] = nums[max_index::-1]\n            nums[0:i] = nums[i - 1::-1]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i-1:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))\nprint(\"The arrays above should be [1, 2, 3, 4, 5], \\\n    [1, 2, 3, 4, 5], and [1, 2, 3, 4, 5].\")",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[max_idx::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n            nums[:i] = reversed(nums[:i])\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums) - 1, -1, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index == i:\n            continue\n        flip(nums, max_index)\n        flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3]))\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index == i - 1:\n            continue\n        if max_index != 0:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 1]))\nprint(pancake_sort([1, 5, 4, 3, 2, 1, 1]))\nprint(pancake_sort([1, 5, 4, 3, 2, 1, 1, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i-1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        if max_index != len(nums) - 1 - i:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i - 1:-1] + nums[:len(nums) - i]\n    return nums\n",
    "    for i in range(len(nums), 0, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for x in range(len(nums), 1, -1):\n        i = nums.index(x)\n        if i != x - 1:\n            if i != 0:\n                nums = nums[:i + 1][::-1] + nums[i + 1:]\n            nums = nums[:x][::-1] + nums[x:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[len(nums) - i - 1::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3]))\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index == i - 1:\n            continue\n        nums = nums[max_index::-1] + nums[max_index + 1:i]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[len(nums) - i - 1::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))\nprint(pancake_sort([1, 2, 3, 5, 4]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i-1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i-1:\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7]))",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_idx = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums = nums[max_idx::-1] + nums[max_idx + 1:]\n        nums = nums[:i + 1][::-1] + nums[i + 1:]\n    return nums",
    "    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums)):\n        max_index = 0\n        for j in range(len(nums) - i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index == i - 1:\n            continue\n        if max_index != 0:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8, 9]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8, 9, 10]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:len(nums)-i][::-1] + nums[len(nums)-i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7, 8, 9]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        if max_index != len(nums) - i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n\nprint(pancake_sort([3, 2, 4, 1]))\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:len(nums)-i][::-1] + nums[len(nums)-i:]\n    return nums\n\nprint(pancake_sort([1,5,4,3,2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        nums = nums[len(nums) - i - 1::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i-1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))\nprint(pancake_sort([1,2,3]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    def flip(sublist, k):\n        i = 0\n        while i < k // 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n        return sublist\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_idx = nums.index(max(nums[:i + 1]))\n        if max_idx != i:\n            nums = flip(nums, max_idx + 1)\n            nums = flip(nums, i + 1)\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            flip(nums, max_index)\n            flip(nums, i)\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[max_idx::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        nums = nums[max_index::-1] + nums[max_index+1:]\n        nums = nums[len(nums)-i-1::-1] + nums[len(nums)-i:]\n    return nums\n\nprint(pancake_sort([1,2,3,4,5,6,7,8,9,10]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums = flip(nums, max_idx + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i-1:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1,5,4,3,2]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = 0\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i - 1:\n            nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[max_idx::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[0:i]))\n        if max_idx != i-1:\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1,5,4,3,2]))\nprint(pancake_sort([1,2,3,4,5]))\nprint(pancake_sort([5,4,3,2,1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx != i - 1:\n            nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\nprint(pancake_sort([1,5,4,3,2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    def flip(sublist, k):\n        i = 0\n        while i < k:\n            sublist[i], sublist[k] = sublist[k], sublist[i]\n            i += 1\n            k -= 1\n\n    current_size = len(nums)\n    while current_size > 1:\n        mi = nums.index(max(nums[0:current_size]))\n        if mi != current_size - 1:\n            flip(nums, mi)\n            flip(nums, current_size - 1)\n        current_size -= 1\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        if max_index != len(nums) - 1 - i:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 2, 3, 4, 5]))\nprint(pancake_sort([5, 4, 3, 2, 1]))\nprint(pancake_sort([1, 2, 3, 5, 4]))\nprint(pancake_sort([1, 2, 4, 3, 5]))\nprint(pancake_sort([1, 3, 2, 4, 5]))\nprint(pancake_sort([1, 3, 2, 5, 4]))\nprint(pancake_sort([1, 4, 2, 3, 5]))\nprint(pancake_sort([1, 4, 2, 5, 3]))\nprint(pancake_sort([1, 4, 3, 2, 5]))\nprint(pancake_sort([1, 4, 3, 5, 2]))\nprint(pancake_sort([1, 5, 2, 3, 4]))\nprint(pancake_sort([1, 5, 2, 4, 3]))\nprint(pancake_sort([1, 5, 3, 2, 4]))\nprint(pancake_sort([1, 5, 3, 4, 2]))\nprint(pancake_sort([1, 5, 4, 2, 3]))\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3,2,4,1]))",
    "    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums) - i]))\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:len(nums) - i][::-1] + nums[len(nums) - i:]\n    return nums",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([1,5,4,3,2]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:i] = reversed(nums[:i])\n    return nums\n\n",
    "    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n\n\nprint(pancake_sort([1, 5, 4, 3, 2]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6]))\nprint(pancake_sort([1, 5, 4, 3, 2, 6, 7]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:i]))\n        if max_index == i - 1:\n            continue\n        nums = nums[max_index::-1] + nums[max_index + 1:len(nums)]\n        nums = nums[i - 1::-1] + nums[i:len(nums)]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            flip(nums, max_index)\n            flip(nums, i - 1)\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        if max_idx == i - 1:\n            continue\n        nums = nums[:max_idx + 1][::-1] + nums[max_idx + 1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n\nprint(pancake_sort([3, 2, 4, 1]))\nprint(pancake_sort([1, 5, 4, 3, 2]))",
    "    for i in range(len(nums) - 1, -1, -1):\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i)\n    return nums\n\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
    "    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n    return nums\n"
  ]
}