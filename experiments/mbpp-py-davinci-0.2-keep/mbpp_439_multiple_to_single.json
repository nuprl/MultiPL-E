{
  "name": "mbpp_439_multiple_to_single",
  "language": "py",
  "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([11, 33, 50]) == 113350\n    assert candidate([-1, 2, 3, 4, 5, 6]) == -123456\n    assert candidate([10, 15, 20, 25]) == 10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(str(x) for x in L))\n",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(str(i) for i in L))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(str(x) for x in L))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(str(i) for i in L))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(str(x) for x in L))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(str(x) for x in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(str(i) for i in L))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join([str(x) for x in L]))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(str(i) for i in L))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(str(i) for i in L))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(str(x) for x in L))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3]))",
    "    return int(\"\".join(map(str, L)))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9,0]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(''.join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "    return int(''.join(str(x) for x in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(str(x) for x in L))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(str(x) for x in L))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9,0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "    return int(''.join(str(i) for i in L))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(''.join(map(str, L)))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join([str(i) for i in L]))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))",
    "    return int(\"\".join(str(i) for i in L))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5,6]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(''.join(str(x) for x in L))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join([str(i) for i in L]))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(str(i) for i in L))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3]))\nprint(multiple_to_single([1, 2, 3, 4]))\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6]))",
    "    return int(''.join(str(i) for i in L))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6]))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1,2,3,4,5]))",
    "    return int(''.join([str(i) for i in L]))\n",
    "    return int(''.join(map(str, L)))\n",
    "    return int(''.join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(''.join(str(i) for i in L))\n",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(str(i) for i in L))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
    "    return int(\"\".join(map(str, L)))\n",
    "    return int(\"\".join(map(str, L)))\n\nprint(multiple_to_single([1, 2, 3, 4, 5]))\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))"
  ]
}