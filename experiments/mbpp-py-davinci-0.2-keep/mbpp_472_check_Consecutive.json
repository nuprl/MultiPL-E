{
  "name": "mbpp_472_check_Consecutive",
  "language": "py",
  "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 2, 3, 5, 6]) == False\n    assert candidate([1, 2, 1]) == False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    if len(l) == 1:\n        return True\n    else:\n        l.sort()\n        for i in range(len(l) - 1):\n            if l[i] + 1 != l[i + 1]:\n                return False\n        return True\n\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n\n\nprint(check_Consecutive([1, 2, 3, 4, 5]))\nprint(check_Consecutive([1, 2, 3, 4, 6]))",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n"
  ]
}