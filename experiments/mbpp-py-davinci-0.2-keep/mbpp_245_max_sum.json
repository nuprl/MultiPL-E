{
  "name": "mbpp_245_max_sum",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if not arr:\n        return 0\n\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]))\nprint(max_sum([80, 60, 30, 40, 20, 10]))",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n        dec[n - i - 1] = max(dec[n - i] + arr[n - i - 1], arr[n - i - 1])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[n - 1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n        dec[n - 1 - i] = max(dec[n - i] + arr[n - 1 - i], arr[n - 1 - i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n\n",
    "    n = len(arr)\n    # dp[i][0] = max sum ending at i, increasing\n    # dp[i][1] = max sum ending at i, decreasing\n    dp = [[0] * 2 for _ in range(n)]\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + arr[i])\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + arr[i])\n    return max(dp[n - 1][0], dp[n - 1][1])\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n",
    "    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_sum = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                arr[i] = arr[i] + arr[i-1]\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n        return max_sum\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    max_sum = -1\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n\n",
    "    if not arr:\n        return 0\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    arr_with_zero = [0] + arr\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n    # reversed\n    arr_with_zero_reversed = [0] + arr[::-1]\n\n    # create a list of length len(arr) + 1\n    # where the first element is 0\n    # and the rest are the elements of arr\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n\n",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    return max([inc[i] + dec[i] for i in range(n)])",
    "    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n\n    return max([inc[i] + dec[i] for i in range(n)])\n\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]))"
  ]
}