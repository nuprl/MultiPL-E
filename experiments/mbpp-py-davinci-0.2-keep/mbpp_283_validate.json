{
  "name": "mbpp_283_validate",
  "language": "py",
  "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        n //= 10\n    for i in range(1, 10):\n        if digits[i] > i:\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        if digits[digit] > digit:\n            return False\n        digits[digit] += 1\n        n = n // 10\n    return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n\n",
    "    return all(str(n).count(str(i)) <= i for i in range(10))\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        n //= 10\n    for i in range(10):\n        if digits[i] > i:\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        if digits[digit] > digit:\n            return False\n        n //= 10\n    return True\n\n",
    "    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in range(0, len(n)):\n            if n.count(n[i]) > int(n[i]):\n                return False\n        return True\n\n",
    "    if n < 0:\n        return False\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        n = n // 10\n    for i in range(10):\n        if digits[i] > i:\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        if digits[digit] > digit:\n            return False\n        digits[digit] += 1\n        n //= 10\n    return True\n\n",
    "    if n < 0:\n        return False\n    d = {}\n    for i in str(n):\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str(n):\n        if d[i] > int(i):\n            return False\n    return True\n\n",
    "    digits = [int(x) for x in str(n)]\n    return all(digits.count(x) <= x for x in digits)\n\n",
    "    if n < 0:\n        return False\n    n = str(n)\n    for i in range(len(n)):\n        if n.count(n[i]) > int(n[i]):\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        n //= 10\n    for i in range(10):\n        if digits[i] > i:\n            return False\n    return True\n\n\nprint(validate(1234))\nprint(validate(1243))\nprint(validate(0))\nprint(validate(-1))",
    "    if n < 0:\n        return False\n    else:\n        return True\n\n",
    "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    digits = [0] * 10\n    while n > 0:\n        digit = n % 10\n        digits[digit] += 1\n        n //= 10\n    for i in range(10):\n        if digits[i] > i:\n            return False\n    return True\n\n",
    "    if n < 0:\n        return False\n    else:\n        n = str(n)\n        for i in n:\n            if n.count(i) > int(i):\n                return False\n        return True\n\n"
  ]
}