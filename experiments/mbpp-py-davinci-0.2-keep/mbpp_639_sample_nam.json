{
  "name": "mbpp_639_sample_nam",
  "language": "py",
  "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa']) == 10\n    assert candidate(['abcd', 'Python', 'abba', 'aba']) == 6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"John\", \"James\", \"Jack\", \"Jill\"]))",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])\n\nprint(sample_nam([\"John\", \"James\", \"Jack\", \"Jeanne\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pamela\", \"Andrea\"]))\nprint(sample_nam([\"Sally\", \"Sue\", \"Sunny\"]))",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])\n\nprint(sample_nam([\"John\", \"Mary\", \"Bob\", \"James\"]))\nprint(sample_nam([\"John\", \"mary\", \"Bob\", \"James\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pamela\", \"Andrea\"]))\nprint(sample_nam([\"Sally\", \"Sue\", \"Sunny\"]))\nprint(sample_nam([\"Xavier\", \"Xena\", \"Bambi\"]))\nprint(sample_nam([\"Mike\", \"John\", \"Johnny\"]))\nprint(sample_nam([\"Margaret\", \"Angela\", \"Bella\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\n",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pamela\", \"Andrea\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pieter\", \"Vivian\", \"Pieter\", \"Hans\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pieter\", \"Margriet\", \"Daan\", \"Joris\", \"Renee\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())"
  ]
}