{
  "name": "mbpp_237_check_occurences",
  "language": "py",
  "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int]]) -> Dict[Tuple[int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == { (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == { (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return {t: test_list.count(t) for t in test_list}\n",
    "    return {tup: test_list.count(tup) for tup in test_list}\n\nprint(check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2)]))",
    "    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n",
    "    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n",
    "    # Your code here\n    return {}\n\n",
    "    return {t: test_list.count(t) for t in test_list}\n\nprint(check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2)]))",
    "    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n",
    "    return {tup: test_list.count(tup) for tup in test_list}\n",
    "    # TODO: Implement me\n    pass\n",
    "    occurences = {}\n    for tuple_ in test_list:\n        if tuple_ in occurences:\n            occurences[tuple_] += 1\n        else:\n            occurences[tuple_] = 1\n    return occurences\n\n",
    "    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n\n",
    "    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n\n",
    "    return {t: test_list.count(t) for t in test_list}\n",
    "    return {tup: test_list.count(tup) for tup in test_list}\n",
    "    occurences = {}\n    for tup in test_list:\n        if tup not in occurences:\n            occurences[tup] = 1\n        else:\n            occurences[tup] += 1\n    return occurences\n",
    "    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n",
    "    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n",
    "    result = {}\n    for tup in test_list:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n",
    "    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n",
    "    pass\n\n"
  ]
}