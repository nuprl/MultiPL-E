{
  "name": "mbpp_238_number_of_substrings",
  "language": "py",
  "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('abc') == 6\n    assert candidate('abcd') == 10\n    assert candidate('abcde') == 15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return len(str) * (len(str) + 1) // 2\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:j]) for i in range(len(str)) for j in range(i + 1, len(str) + 1))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return len(str) * (len(str) + 1) // 2\n\n",
    "    return len(str) * (len(str) + 1) // 2\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return len(str) * (len(str) + 1) // 2\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n",
    "    return sum(len(str[i:]) for i in range(len(str)))\n\n"
  ]
}