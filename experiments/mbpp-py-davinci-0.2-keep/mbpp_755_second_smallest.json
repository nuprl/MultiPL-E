{
  "name": "mbpp_755_second_smallest",
  "language": "py",
  "prompt": "from typing import Any, Optional\n\ndef second_smallest(numbers: Any) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2",
    "    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return min(numbers)\n    if len(numbers) > 2:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n",
    "    if not isinstance(numbers, list):\n        return None\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1] if numbers[0] > numbers[1] else numbers[0]\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    if smallest > second_smallest:\n        smallest, second_smallest = second_smallest, smallest\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest",
    "    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1] if numbers[0] > numbers[1] else numbers[0]\n    else:\n        first = numbers[0]\n        second = numbers[1]\n        if first > second:\n            first, second = second, first\n        for i in range(2, len(numbers)):\n            if numbers[i] < first:\n                second = first\n                first = numbers[i]\n            elif numbers[i] < second:\n                second = numbers[i]\n        return second\n\n",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    else:\n        numbers.remove(min(numbers))\n        return min(numbers)\n\nprint(second_smallest([1, 2, -8, -2, 0]))\nprint(second_smallest([1, 1, 0, 0, 2, -2, -2]))\nprint(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))\nprint(second_smallest([2, 2]))\nprint(second_smallest([2]))\nprint(second_smallest([]))",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1] if numbers[0] > numbers[1] else numbers[0]\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest\n",
    "    if numbers is None:\n        return None\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[0] if numbers[0] < numbers[1] else numbers[1]\n    first = numbers[0]\n    second = numbers[1]\n    if first > second:\n        first, second = second, first\n    for i in range(2, len(numbers)):\n        if numbers[i] < first:\n            second = first\n            first = numbers[i]\n        elif numbers[i] < second:\n            second = numbers[i]\n    return second\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1] if numbers[0] > numbers[1] else numbers[0]\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest\n\nprint(second_smallest([1,2,3,4,5]))\nprint(second_smallest([5,4,3,2,1]))\nprint(second_smallest([1,1,1,1,1]))\nprint(second_smallest([1,2]))\nprint(second_smallest([2,1]))\nprint(second_smallest([1]))\nprint(second_smallest([]))",
    "    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return min(numbers)\n    if len(numbers) == 3:\n        return min(numbers[1], numbers[2])\n    return second_smallest(numbers[1:])\n\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3]))\nprint(second_smallest([1, 2]))\nprint(second_smallest([1]))\nprint(second_smallest([]))",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    numbers.sort()\n    return numbers[1]\n"
  ]
}