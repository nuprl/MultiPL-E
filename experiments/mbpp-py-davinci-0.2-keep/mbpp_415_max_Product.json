{
  "name": "mbpp_415_max_Product",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\n    assert candidate([1, 2, 3]) == (2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    arr.sort()\n    return arr[-1]*arr[-2]\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n\nprint(max_Product([1, 2, 3, 4, 5]))",
    "    arr.sort()\n    return (arr[-1]*arr[-2], arr[0]*arr[1])\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n",
    "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_index = (0, 1)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_index = (i, j)\n    return max_index\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n    return (max1, max2)\n",
    "    if len(arr) < 2:\n        return None\n    max_1 = max(arr[0], arr[1])\n    max_2 = min(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n    return max_1, max_2",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\nprint(max_Product([1, 4, 3, 6, 7, 0]))\n",
    "    if len(arr) < 2:\n        return None\n    max_prod = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n\nprint(max_Product([1,2,3,4,5]))",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n",
    "    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                pair = (arr[i], arr[j])\n    return pair\n",
    "    if len(arr) < 2:\n        return None\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair\n"
  ]
}