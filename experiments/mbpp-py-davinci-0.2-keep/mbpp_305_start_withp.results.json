{
  "name": "mbpp_305_start_withp",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvhcxyl2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprvhcxyl2.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmprvhcxyl2.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "['pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqaw35jeq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpqaw35jeq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpqaw35jeq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pig', 'dog', 'cat', 'parrot', 'penguin']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pig', 'parrot', 'penguin')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvk3mn020.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvk3mn020.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvk3mn020.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pear', 'apple', 'peach', 'pomegranate', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pear', 'peach', 'pomegranate', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw0cuapi8.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpw0cuapi8.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpw0cuapi8.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'plum', 'pineapple', 'papaya']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum', 'pineapple', 'papaya')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbazdrft1.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpbazdrft1.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpbazdrft1.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_lwe0xow.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_lwe0xow.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_lwe0xow.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'papaya']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'papaya')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuqsylpnj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpuqsylpnj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpuqsylpnj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvzpa0hr_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvzpa0hr_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvzpa0hr_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn_2a7wlc.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpn_2a7wlc.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn_2a7wlc.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'plum', 'pumpkin']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pear', 'peach', 'plum', 'pumpkin')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmczepbbh.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpmczepbbh.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpmczepbbh.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpddetmewp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpddetmewp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpddetmewp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpegeotf3o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpegeotf3o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpegeotf3o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq3y6yfrw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq3y6yfrw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq3y6yfrw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeyuqaihp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpeyuqaihp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpeyuqaihp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnavxps34.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpnavxps34.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpnavxps34.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6jal6zql.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp6jal6zql.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp6jal6zql.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpduqkjra3.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpduqkjra3.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpduqkjra3.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6ob2ij4c.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp6ob2ij4c.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp6ob2ij4c.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpef97g50p.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpef97g50p.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpef97g50p.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pepper', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvox3ewl3.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvox3ewl3.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvox3ewl3.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpor2ml20o.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpor2ml20o.py\", line 17, in test_check\n    check(start_withp)\n  File \"/tmp/tmpor2ml20o.py\", line 12, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfutxjqa_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfutxjqa_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfutxjqa_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphuasat3i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphuasat3i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphuasat3i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeyuqaihp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpeyuqaihp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpeyuqaihp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_wgagdpv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_wgagdpv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_wgagdpv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjny7qrdy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjny7qrdy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjny7qrdy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplyent14o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplyent14o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplyent14o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc89_wdqp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpc89_wdqp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpc89_wdqp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith(\"p\"), words))\n\nprint(start_withp([\"pear\", \"apple\", \"peach\", \"plum\"]))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pear', 'peach', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpexq61yz3.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpexq61yz3.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpexq61yz3.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm_w01mw6.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpm_w01mw6.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpm_w01mw6.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw7zk_9yp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpw7zk_9yp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpw7zk_9yp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pig', 'apple', 'pear', 'pineapple', 'penguin']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pig', 'pear', 'pineapple', 'penguin')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw131t6py.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpw131t6py.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpw131t6py.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0].lower() == 'p'])\n\nprint(start_withp(['name', 'is', 'Peter', 'Parker']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('Peter', 'Parker')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0b7yrse1.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0b7yrse1.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0b7yrse1.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'peach', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplu2euhay.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplu2euhay.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplu2euhay.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'potato', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'potato', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq07sy309.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq07sy309.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq07sy309.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm22desu5.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpm22desu5.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpm22desu5.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4xa82o01.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4xa82o01.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4xa82o01.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplswzzr74.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplswzzr74.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplswzzr74.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'peach', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'peach', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuo8b8ded.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpuo8b8ded.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpuo8b8ded.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplyent14o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplyent14o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplyent14o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0].lower() == 'p', words))\n\nprint(start_withp(['name','city','job']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "()\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl43b29nj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl43b29nj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl43b29nj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkum6ixex.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpkum6ixex.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpkum6ixex.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnx2ih4ao.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpnx2ih4ao.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpnx2ih4ao.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplyent14o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplyent14o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplyent14o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqrvna0k2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpqrvna0k2.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpqrvna0k2.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3m_29n8g.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp3m_29n8g.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3m_29n8g.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvrv5wmhr.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvrv5wmhr.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvrv5wmhr.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'peach', 'pizza', 'pork', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbu7j4s9o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpbu7j4s9o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpbu7j4s9o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0].lower() == 'p', words))\n\nprint(start_withp(['name','is','Anna']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "()\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphujxga8s.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphujxga8s.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphujxga8s.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq027rez7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq027rez7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq027rez7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'plum', 'pineapple', 'pumpkin']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pear', 'peach', 'plum', 'pineapple', 'pumpkin')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq48qiixb.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq48qiixb.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq48qiixb.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiwn0r1bq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpiwn0r1bq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpiwn0r1bq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp68yjz5am.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp68yjz5am.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp68yjz5am.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpni8cdh4g.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpni8cdh4g.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpni8cdh4g.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp43dnkx9x.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp43dnkx9x.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp43dnkx9x.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa_tklkz8.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpa_tklkz8.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpa_tklkz8.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvhcxyl2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprvhcxyl2.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmprvhcxyl2.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'peach', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkywi5tse.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpkywi5tse.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpkywi5tse.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_9u9bzl6.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_9u9bzl6.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_9u9bzl6.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0c7gna18.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0c7gna18.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0c7gna18.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq3y6yfrw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq3y6yfrw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq3y6yfrw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pepperoni']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'peach', 'pizza', 'pepperoni')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4i_i1qey.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4i_i1qey.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4i_i1qey.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes', 'pepper')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwitl7x3w.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwitl7x3w.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpwitl7x3w.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3m_29n8g.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp3m_29n8g.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3m_29n8g.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'pineapple', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzkb23d6b.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpzkb23d6b.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpzkb23d6b.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcmpmkta7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpcmpmkta7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpcmpmkta7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa7duhxev.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpa7duhxev.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpa7duhxev.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0].lower() == 'p']\n\nprint(start_withp(['name','is','Anna']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "[]\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpucedc84o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpucedc84o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpucedc84o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'pepper', 'pumpkin', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pear', 'peach', 'pepper', 'pumpkin', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0oiewj2a.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0oiewj2a.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0oiewj2a.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2shqytge.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2shqytge.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2shqytge.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc89_wdqp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpc89_wdqp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpc89_wdqp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'apple', 'pear', 'peach', 'orange']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pizza', 'pear', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp09fo5cx1.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp09fo5cx1.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp09fo5cx1.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word.startswith('p'))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'potato', 'pancake', 'pasta']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'potato', 'pancake', 'pasta')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppnvh5x5t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmppnvh5x5t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmppnvh5x5t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'porky', 'porkchop']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'porky', 'porkchop')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdtg9m9c4.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpdtg9m9c4.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpdtg9m9c4.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'peach', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptb_2ddgy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmptb_2ddgy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmptb_2ddgy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'potato', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'potato', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi0o8do9.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpdi0o8do9.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpdi0o8do9.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfihstt2n.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfihstt2n.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfihstt2n.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpczsa0gcl.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpczsa0gcl.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpczsa0gcl.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7vee86nt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7vee86nt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7vee86nt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return tuple(p_words)\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvwbg66eu.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpvwbg66eu.py\", line 20, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvwbg66eu.py\", line 15, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplswzzr74.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplswzzr74.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplswzzr74.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfnkkovr3.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfnkkovr3.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfnkkovr3.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2shqytge.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2shqytge.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2shqytge.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'potato', 'pepper', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpsjaug5br.py\", line 9\n    print(start_withp(['pizza', 'potato', 'pepper', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza', 'pizza',",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp57ov1o7f.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp57ov1o7f.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp57ov1o7f.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo0y_iy_e.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpo0y_iy_e.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpo0y_iy_e.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'plum', 'pomegranate']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum', 'pomegranate')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdwlyl9qp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpdwlyl9qp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpdwlyl9qp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7wq9ecq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpm7wq9ecq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpm7wq9ecq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4kivbrnx.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp4kivbrnx.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4kivbrnx.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'plum']))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5xfn_t6b.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp5xfn_t6b.py\", line 17, in test_check\n    check(start_withp)\n  File \"/tmp/tmp5xfn_t6b.py\", line 12, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplyent14o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplyent14o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplyent14o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'pomegranate']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'pomegranate')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppphaqlc2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmppphaqlc2.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmppphaqlc2.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7o43kgsi.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7o43kgsi.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7o43kgsi.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1cw3f5no.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1cw3f5no.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1cw3f5no.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "['pumpkin', 'pie', 'pear', 'plum']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp64y20e6_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp64y20e6_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp64y20e6_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pizza', 'pasta', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpww5z0kqw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpww5z0kqw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpww5z0kqw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdy410cj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvdy410cj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvdy410cj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplabmw89v.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplabmw89v.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplabmw89v.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0d7z__wt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0d7z__wt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0d7z__wt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1oj5_km.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpk1oj5_km.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpk1oj5_km.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word.startswith('p'))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pork', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pork', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcbyp1r14.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpcbyp1r14.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpcbyp1r14.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i_w8ykm.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_i_w8ykm.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_i_w8ykm.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpolpufxui.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpolpufxui.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpolpufxui.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'papaya']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'plum', 'pineapple', 'papaya')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu1orynal.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpu1orynal.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpu1orynal.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl6be4il5.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl6be4il5.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl6be4il5.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7x2h6991.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7x2h6991.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7x2h6991.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza', 'pork', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza', 'pork', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp80x5gcx7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp80x5gcx7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp80x5gcx7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptdtlg7fa.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmptdtlg7fa.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmptdtlg7fa.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplyent14o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplyent14o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplyent14o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwmrru7mt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwmrru7mt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpwmrru7mt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2w9n0l2e.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp2w9n0l2e.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2w9n0l2e.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pizza', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pizza', 'pepper')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph_f61al7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph_f61al7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph_f61al7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpog3yhc_z.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpog3yhc_z.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpog3yhc_z.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0].lower() == 'p']\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8wkls0cl.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp8wkls0cl.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp8wkls0cl.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjceay5oy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjceay5oy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjceay5oy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp02k1pryj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp02k1pryj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp02k1pryj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['panda', 'penguin', 'polar bear', 'pig', 'panther']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "['panda', 'penguin', 'polar bear', 'pig', 'panther']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppmwa2kk6.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmppmwa2kk6.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmppmwa2kk6.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word.startswith('p'))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzwe4cvss.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpzwe4cvss.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpzwe4cvss.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprapxr16r.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmprapxr16r.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmprapxr16r.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7vee86nt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7vee86nt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7vee86nt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'pie', 'potatoes', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "['pizza', 'pasta', 'pancakes', 'pie', 'potatoes', 'pepper']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeh65gl0q.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpeh65gl0q.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpeh65gl0q.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92_ug06i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp92_ug06i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp92_ug06i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fi093ve.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4fi093ve.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4fi093ve.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphxwwaxv9.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphxwwaxv9.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphxwwaxv9.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcdt63yfg.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdt63yfg.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpcdt63yfg.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word.startswith('p')])\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo9cyxb4n.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpo9cyxb4n.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpo9cyxb4n.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pork', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pork', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_o9l7x2v.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_o9l7x2v.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_o9l7x2v.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwkocmgrp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwkocmgrp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpwkocmgrp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "['pumpkin', 'pie', 'peach', 'pear']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjybifmtg.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjybifmtg.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjybifmtg.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pizza', 'pork']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmehv6yhl.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpmehv6yhl.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpmehv6yhl.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2nlq0b7n.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2nlq0b7n.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2nlq0b7n.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35fmeeja.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp35fmeeja.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp35fmeeja.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'pepper')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdpk3cpk7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpdpk3cpk7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpdpk3cpk7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1cw3f5no.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1cw3f5no.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1cw3f5no.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['hello', 'world', 'python', 'pandas', 'pandas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('python', 'pandas', 'pandas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjk5_ek8x.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjk5_ek8x.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjk5_ek8x.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancakes']))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ae65drg.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp3ae65drg.py\", line 17, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3ae65drg.py\", line 12, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3m_29n8g.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp3m_29n8g.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3m_29n8g.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfhyzn7qs.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfhyzn7qs.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfhyzn7qs.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptf7uq0es.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmptf7uq0es.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmptf7uq0es.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2w9n0l2e.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp2w9n0l2e.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2w9n0l2e.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3yaylqhv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3yaylqhv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3yaylqhv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp43dnkx9x.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp43dnkx9x.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp43dnkx9x.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxenywlck.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpxenywlck.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpxenywlck.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzyabkc_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmptzyabkc_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmptzyabkc_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'peach', 'pizza', 'pudding', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbdvrjj97.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpbdvrjj97.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpbdvrjj97.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl76_ay1q.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl76_ay1q.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl76_ay1q.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['name', 'is', 'Peter', 'Parker']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "()\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7px8kbrw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7px8kbrw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7px8kbrw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123245,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2413o3mi.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2413o3mi.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2413o3mi.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd00ja0ph.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpd00ja0ph.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpd00ja0ph.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}