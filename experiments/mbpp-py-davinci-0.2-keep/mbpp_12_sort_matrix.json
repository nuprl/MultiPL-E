{
  "name": "mbpp_12_sort_matrix",
  "language": "py",
  "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n",
    "    M.sort(key=lambda x: sum(x))\n    return M\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # sort by sum of rows\n    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n"
  ]
}