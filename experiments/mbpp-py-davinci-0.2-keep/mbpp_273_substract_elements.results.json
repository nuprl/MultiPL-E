{
  "name": "mbpp_273_substract_elements",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 5)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n(0, 0, 0, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3, 4), (2, 3, 4, 5)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(-1, -1, -1, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3), (4, 5, 6)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(-3, -3, -3)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (1,2,3)))\nprint(substract_elements((1,2,3), (1,2,4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (1,2,3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (1,2,3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (4, 5, 6)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(-3, -3, -3)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (4,5,6)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(-3, -3, -3)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 3, 4)\nprint(substract_elements(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(-1, -1, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\nprint(substract_elements(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(-4, -4, -4, -4)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3, 4)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 1, 1)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 1, 2)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 4)))\nprint(substract_elements((1, 2, 3), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, -1)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (1, 2, 3)\n\nprint(substract_elements(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3,4), (1,2,3,4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (4, 5, 6)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(-3, -3, -3)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (2, 3, 4, 5)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(-1, -1, -1, -1)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0, 0)\n(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x: x[0] - x[1], zip(test_tup1, test_tup2)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (1,2,3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(substract_elements((1, 2, 3, 4), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0, 0)\n(0, 0, 0, 0)\n(0, 0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123171,
      "stdout": "(0, 0, 0)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x,y: x-y, test_tup1, test_tup2))\n\nprint(substract_elements((1,2,3), (4,5,6)))\nprint(substract_elements((1,2,3), (1,2,3)))\nprint(substract_elements((1,2,3), (0,0,0)))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(-3, -3, -3)\n(0, 0, 0)\n(1, 2, 3)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\nprint(substract_elements((1, 2, 3), (1, 2, 4)))\nprint(substract_elements((1, 2, 3), (1, 2, 3, 4)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1666123172,
      "stdout": "(0, 0, 0)\n(0, 0, -1)\n(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (1, 2, 3)))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "(0, 0, 0)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}