{
  "name": "mbpp_223_is_majority",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezcjyqvx.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpezcjyqvx.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpezcjyqvx.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpezcjyqvx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3bfdork.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpy3bfdork.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy3bfdork.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4ixtezn.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc4ixtezn.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc4ixtezn.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpc4ixtezn.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n//2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9t5okw_h.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9t5okw_h.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9t5okw_h.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    # Edge case: if n is 0, return False\n    if n == 0:\n        return False\n    # Find the index of the first occurrence of x\n    first_occurrence_index = binary_search(arr, 0, n - 1, x)\n    # If the first occurrence index is -1, return False\n    if first_occurrence_index == -1:\n        return False\n    # If the index of the first occurrence of x plus n/2 is less than the length of the array, return True\n    if first_occurrence_index + n // 2 < n:\n        return True\n    # Otherwise, return False\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0dp4hblz.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0dp4hblz.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0dp4hblz.py\", line 24, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmp0dp4hblz.py\", line 13, in is_majority\n    first_occurrence_index = binary_search(arr, 0, n - 1, x)\nNameError: name 'binary_search' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnt5ccyov.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpnt5ccyov.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpnt5ccyov.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9yvpt556.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9yvpt556.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9yvpt556.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp9yvpt556.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc13xwoki.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc13xwoki.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc13xwoki.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpc13xwoki.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time complexity: O(log n)\n    # Space complexity: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    mid = n // 2\n    if arr[mid] == x:\n        return (mid + n // 2) < n or arr[mid + n // 2] == x\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp78z5b2oo.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp78z5b2oo.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmp78z5b2oo.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n  File \"/tmp/tmp78z5b2oo.py\", line 16, in is_majority\n    return (mid + n // 2) < n or arr[mid + n // 2] == x\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplgfnc4md.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmplgfnc4md.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmplgfnc4md.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgv79uj0m.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgv79uj0m.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgv79uj0m.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    if arr[n//2] < x:\n        return is_majority(arr[n//2:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3vu_jd1r.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp3vu_jd1r.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmp3vu_jd1r.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxm46wsay.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpxm46wsay.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxm46wsay.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpxm46wsay.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n\n    return is_majority(arr[n // 2 + 1:], n // 2, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf7qfdb31.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpf7qfdb31.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpf7qfdb31.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0bzmmo9z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp0bzmmo9z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0bzmmo9z.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return (mid + n // 2) < n or arr[mid + n // 2] == x\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph927tpn2.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmph927tpn2.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmph927tpn2.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n  File \"/tmp/tmph927tpn2.py\", line 13, in is_majority\n    return (mid + n // 2) < n or arr[mid + n // 2] == x\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x and arr[1] == x\n    if n == 3:\n        return arr[0] == x and arr[1] == x and arr[2] == x\n    if n == 4:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x\n    if n == 5:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x\n    if n == 6:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x and arr[5] == x\n    if n == 7:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x and arr[5] == x and arr[6] == x\n    if n == 8:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x and arr[5] == x and arr[6] == x and arr[7] == x\n    if n == 9:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x and arr[5] == x and arr[6] == x and arr[7] == x and arr[8] == x\n    if n == 10:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x and arr[4] == x and arr[5] == x and arr[6] == x and arr[7] == x and arr[8] == x and arr[9] == x\n    if n == 11:\n        return arr[0] == x and arr[1] == x and arr[2] == x and arr[3] == x\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn80pkcd5.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpn80pkcd5.py\", line 36, in test_check\n    check(is_majority)\n  File \"/tmp/tmpn80pkcd5.py\", line 30, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd3s3e1yd.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpd3s3e1yd.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpd3s3e1yd.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzgquh7x.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmptzgquh7x.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmptzgquh7x.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptou6h9z5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmptou6h9z5.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmptou6h9z5.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0bzmmo9z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp0bzmmo9z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0bzmmo9z.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return (mid + n // 2) <= (n - 1) and arr[mid + n // 2] == x\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp76llpe5r.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp76llpe5r.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp76llpe5r.py\", line 21, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    mid = n // 2\n    if arr[mid] == x:\n        return arr.count(x) > mid\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5igp3bi7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp5igp3bi7.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp5igp3bi7.py\", line 23, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezcjyqvx.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpezcjyqvx.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpezcjyqvx.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpezcjyqvx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    first_occurrence = binary_search(arr, 0, n - 1, x)\n    if first_occurrence == -1:\n        return False\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == x:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp20blupcv.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp20blupcv.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp20blupcv.py\", line 18, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmp20blupcv.py\", line 9, in is_majority\n    first_occurrence = binary_search(arr, 0, n - 1, x)\nNameError: name 'binary_search' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if x == arr[n//2]:\n        return True\n    elif x < arr[n//2]:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfn3klqpf.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpfn3klqpf.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpfn3klqpf.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpryivh382.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpryivh382.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpryivh382.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid + 1:], n, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp026v8puq.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp026v8puq.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp026v8puq.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2wl8pisk.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp2wl8pisk.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2wl8pisk.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2wl8pisk.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n\n    if arr[n//2] == x:\n        return True\n\n    if arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n//2, x)\n    else:\n        return is_majority(arr[:n//2], n//2, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdv4_yvv1.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdv4_yvv1.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpdv4_yvv1.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n\n    return is_majority(arr[n // 2 + 1:], n // 2, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf7qfdb31.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpf7qfdb31.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpf7qfdb31.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if x == arr[n // 2]:\n        return True\n    elif x > arr[n // 2]:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n    else:\n        return is_majority(arr[:n // 2], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc3xfxap3.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpc3xfxap3.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc3xfxap3.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph5lbuoub.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmph5lbuoub.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmph5lbuoub.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4ixtezn.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc4ixtezn.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc4ixtezn.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpc4ixtezn.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcssgpka6.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpcssgpka6.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcssgpka6.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwsxy7rac.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwsxy7rac.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpwsxy7rac.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfv52oe18.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpfv52oe18.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpfv52oe18.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n//2] == x:\n        return True\n\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnrfxexzu.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpnrfxexzu.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpnrfxexzu.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ekqvley.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ekqvley.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2ekqvley.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2ekqvley.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return arr[0] == arr[1]\n    mid = n // 2\n    if arr[mid] == x:\n        return is_majority(arr[:mid], mid, x) or is_majority(arr[mid + 1:], n - mid - 1, x)\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8q8bg9gm.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp8q8bg9gm.py\", line 29, in test_check\n    check(is_majority)\n  File \"/tmp/tmp8q8bg9gm.py\", line 24, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if x == arr[n // 2]:\n        return True\n    elif x < arr[n // 2]:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpky22xvop.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpky22xvop.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpky22xvop.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp546air2p.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp546air2p.py\", line 29, in test_check\n    check(is_majority)\n  File \"/tmp/tmp546air2p.py\", line 24, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return arr[mid + n // 2] == x\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9j9e_4ul.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9j9e_4ul.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9j9e_4ul.py\", line 20, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp39vrnkwg.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp39vrnkwg.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmp39vrnkwg.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp39vrnkwg.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpugnff948.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpugnff948.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpugnff948.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Your code here\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6f5ifixj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp6f5ifixj.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmp6f5ifixj.py\", line 17, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    first = find_first(arr, 0, n - 1, x)\n    last = find_last(arr, 0, n - 1, x)\n    if last - first + 1 > n // 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_xumwj3y.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_xumwj3y.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmp_xumwj3y.py\", line 15, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmp_xumwj3y.py\", line 7, in is_majority\n    first = find_first(arr, 0, n - 1, x)\nNameError: name 'find_first' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4ixtezn.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc4ixtezn.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc4ixtezn.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpc4ixtezn.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp00swmewv.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp00swmewv.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmp00swmewv.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqf_t88z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvqf_t88z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpvqf_t88z.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpvqf_t88z.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezcjyqvx.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpezcjyqvx.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpezcjyqvx.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpezcjyqvx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxm46wsay.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpxm46wsay.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxm46wsay.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpxm46wsay.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd2cced_s.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd2cced_s.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpd2cced_s.py\", line 22, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpd2cced_s.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxt6jk5tq.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpxt6jk5tq.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxt6jk5tq.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpylcze0ni.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpylcze0ni.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpylcze0ni.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log(n))\n    # Space: O(1)\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyp8zx8rl.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpyp8zx8rl.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpyp8zx8rl.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpyp8zx8rl.py\", line 11, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezcjyqvx.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpezcjyqvx.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpezcjyqvx.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpezcjyqvx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ekqvley.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ekqvley.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2ekqvley.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2ekqvley.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log(n))\n    # Space: O(1)\n    # Edge cases:\n    # 1. Empty array\n    # 2. Array with only one element\n    # 3. Array with only two elements\n    # 4. Array with only three elements\n    # 5. Array with only four elements\n    # 6. Array with only five elements\n    # 7. Array with only six elements\n    # 8. Array with only seven elements\n    # 9. Array with only eight elements\n    # 10. Array with only nine elements\n    # 11. Array with only ten elements\n    # 12. Array with only eleven elements\n    # 13. Array with only twelve elements\n    # 14. Array with only thirteen elements\n    # 15. Array with only fourteen elements\n    # 16. Array with only fifteen elements\n    # 17. Array with only sixteen elements\n    # 18. Array with only seventeen elements\n    # 19. Array with only eighteen elements\n    # 20. Array with only nineteen elements\n    # 21. Array with only twenty elements\n    # 22. Array with only twenty-one elements\n    # 23. Array with only twenty-two elements\n    # 24. Array with only twenty-three elements\n    # 25. Array with only twenty-four elements\n    # 26. Array with only twenty-five elements\n    # 27. Array with only twenty-six elements\n    # 28. Array with only twenty-seven elements\n    # 29. Array with only twenty-eight elements\n    # 30. Array with only twenty-nine elements\n    # 31. Array with only thirty elements\n    # 32. Array with only thirty-one elements\n    # 33. Array with only thirty-two elements\n    # 34. Array with only thirty-three elements\n    # 35. Array with only thirty-four elements\n    # 36. Array with only thirty-five elements\n    # 37. Array with only thirty-six elements\n    # 38. Array with only thirty-seven elements\n    # 39. Array with only thirty-eight elements\n    # 40. Array with only thirty-nine elements\n    # 41. Array with only forty elements\n    # 42. Array with only forty-one elements\n    # 43. Array with only forty-two elements\n    # 44. Array with only forty-three elements\n    # 45. Array with\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2lxh4o5w.py\", line 64, in <module>\n    test_check()\n  File \"/tmp/tmp2lxh4o5w.py\", line 62, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2lxh4o5w.py\", line 56, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(log n) time | O(1) space\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpghfa_h0z.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpghfa_h0z.py\", line 31, in test_check\n    check(is_majority)\n  File \"/tmp/tmpghfa_h0z.py\", line 25, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Find the index of the first occurrence of x\n    i = first(arr, 0, n - 1, x)\n\n    # If element is not present at all, return false\n    if i == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    if (i + n // 2 <= n - 1 and arr[i + n // 2] == x):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc0436skw.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpc0436skw.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpc0436skw.py\", line 22, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmpc0436skw.py\", line 8, in is_majority\n    i = first(arr, 0, n - 1, x)\nNameError: name 'first' is not defined. Did you mean: 'List'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    return arr.count(x) > n/2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7prbyfz3.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp7prbyfz3.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7prbyfz3.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfx5jqe9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfx5jqe9.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxfx5jqe9.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if (mid == 0 or arr[mid - 1] != x) and (mid == n - 1 or arr[mid + 1] != x):\n                return True\n            elif mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph5oe67sy.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmph5oe67sy.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmph5oe67sy.py\", line 24, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0bzmmo9z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp0bzmmo9z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0bzmmo9z.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa_c6v8i_.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpa_c6v8i_.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpa_c6v8i_.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # find the first occurrence of the element\n    first = find_first(arr, 0, n - 1, x)\n\n    # if the element is not present at all, return false\n    if first == -1:\n        return False\n\n    # if the element occurs more than n/2 times, it's the majority element\n    if first + n // 2 < n and arr[first + n // 2] == x:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgzjee_2y.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpgzjee_2y.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgzjee_2y.py\", line 22, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmpgzjee_2y.py\", line 8, in is_majority\n    first = find_first(arr, 0, n - 1, x)\nNameError: name 'find_first' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(log n) time | O(1) space\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid - 1 >= 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                return mid + n // 2 < n and arr[mid + n // 2] == x\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqf_t88z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvqf_t88z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpvqf_t88z.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpvqf_t88z.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl4_d48xw.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpl4_d48xw.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl4_d48xw.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfx5jqe9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfx5jqe9.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxfx5jqe9.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxmxb89w_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpxmxb89w_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxmxb89w_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    if n == 0:\n        return False\n    if x == arr[n//2]:\n        return True\n    elif x > arr[n//2]:\n        return is_majority(arr[n//2:], n//2, x)\n    else:\n        return is_majority(arr[:n//2], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp12fngl6s.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp12fngl6s.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp12fngl6s.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnqb5v88h.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpnqb5v88h.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpnqb5v88h.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8fw9e06.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpn8fw9e06.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpn8fw9e06.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid + 1:], n, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbc_onw5z.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpbc_onw5z.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpbc_onw5z.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5lhyv4t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy5lhyv4t.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy5lhyv4t.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if (mid == 0 or arr[mid - 1] != x) and (mid == n - 1 or arr[mid + 1] != x):\n                return True\n            elif mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3l5r4vs.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpy3l5r4vs.py\", line 34, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy3l5r4vs.py\", line 28, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezcjyqvx.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpezcjyqvx.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpezcjyqvx.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpezcjyqvx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa_c6v8i_.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpa_c6v8i_.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpa_c6v8i_.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return True if count > n/2 else False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbfao8ct8.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpbfao8ct8.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmpbfao8ct8.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpbfao8ct8.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    return arr[n//2] == x and is_majority(arr[:n//2], n//2, x) and is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz6tzwg_e.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpz6tzwg_e.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmpz6tzwg_e.py\", line 14, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaqbp94_y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaqbp94_y.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpaqbp94_y.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    mid = n // 2\n    if arr[mid] == x:\n        return arr.count(x) > mid\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5igp3bi7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp5igp3bi7.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp5igp3bi7.py\", line 23, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ekqvley.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ekqvley.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2ekqvley.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2ekqvley.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if x == arr[n//2]:\n        return True\n    elif x < arr[n//2]:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt4gs_j6f.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpt4gs_j6f.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpt4gs_j6f.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzgquh7x.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmptzgquh7x.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmptzgquh7x.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n//2, x)\n    else:\n        return is_majority(arr[:n//2], n//2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy04lbjfw.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpy04lbjfw.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy04lbjfw.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}