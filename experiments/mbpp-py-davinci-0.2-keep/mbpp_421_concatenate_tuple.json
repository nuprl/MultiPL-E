{
  "name": "mbpp_421_concatenate_tuple",
  "language": "py",
  "prompt": "from typing import Tuple, Union\n\ndef concatenate_tuple(test_tup: Tuple[Union[str, int]]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'\n    assert candidate(('QWE', 'is', 4, 'RTY')) == 'QWE-is-4-RTY'\n    assert candidate(('ZEN', 'is', 4, 'OP')) == 'ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return \"\".join(str(x) for x in test_tup)",
    "    return ','.join(map(str, test_tup))",
    "    return ''.join(str(i) for i in test_tup)\n",
    "    return ''.join(str(x) for x in test_tup)\n",
    "    return \"\".join(str(x) for x in test_tup)\n\nprint(concatenate_tuple((1, 2, 3, 4, 5, 6)))",
    "    return ''.join(str(x) for x in test_tup)",
    "    return ','.join(map(str, test_tup))",
    "    return ','.join([str(x) for x in test_tup])\n",
    "    return '-'.join(map(str, test_tup))\n",
    "    return ''.join(map(str, test_tup))\n",
    "    return ','.join(map(str, test_tup))\n",
    "    return \"\".join(map(str, test_tup))\n\nprint(concatenate_tuple((\"a\", \"b\", \"c\")))\nprint(concatenate_tuple((1, 2, 3)))\nprint(concatenate_tuple((\"a\", 1, \"c\")))",
    "    return '-'.join(map(str, test_tup))\n\nprint(concatenate_tuple((1, 2, 3, 4, 5)))",
    "    return ''.join(str(x) for x in test_tup)\n",
    "    return ''.join(str(i) for i in test_tup)\n",
    "    return \"\".join(map(str, test_tup))\n",
    "    return ''.join(str(i) for i in test_tup)\n",
    "    return \"\".join(map(str, test_tup))",
    "    return ''.join(str(x) for x in test_tup)\n",
    "    return ''.join(str(x) for x in test_tup)\n"
  ]
}