{
  "name": "mbpp_748_capital_words_spaces",
  "language": "py",
  "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('PythonProgrammingExamples') == 'Python Programming Examples'\n    assert candidate('GetReadyToBeCodingFreak') == 'Get Ready To Be Coding Freak'\n\ndef test_check():\n    check(capital_words_spaces)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return re.sub(r\"([A-Z])\", r\" \\1\", str1).strip()\n\n",
    "    return re.sub(r'([A-Z])', r' \\1', str1)\n\n",
    "    return \" \".join(re.findall(\"[A-Z][a-z]+\", str1))\n\n",
    "    return re.sub(r'([A-Z])', r' \\1', str1).strip()\n\n",
    "    return re.sub(r'([A-Z])', r' \\1', str1).strip()\n\n",
    "    return re.sub(r\"(?<=[A-Z])\", \" \", str1)\n\n",
    "    return \" \".join(re.findall(r\"[A-Z][a-z]*\", str1))\n\n",
    "    return \" \".join(re.findall(r\"[A-Z][a-z]*\", str1))\n\n",
    "    return re.sub(r'([A-Z])', r' \\1', str1)\n\n",
    "    return \" \".join(re.findall(\"[A-Z][^A-Z]*\", str1))\n\n",
    "    str1 = str1.replace(\" \", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\".\", \"\")\n    str1 = str1.replace(\",\", \"\")\n    str1 = str1.replace(\";\", \"\")\n    str1 = str1.replace(\":\", \"\")\n    str1 = str1.replace(\"!\", \"\")\n    str1 = str1.replace(\"?\", \"\")\n    str1 = str1.replace(\"(\", \"\")\n    str1 = str1.replace(\")\", \"\")\n    str1 = str1.replace(\"[\", \"\")\n    str1 = str1.replace(\"]\", \"\")\n    str1 = str1.replace(\"{\", \"\")\n    str1 = str1.replace(\"}\", \"\")\n    str1 = str1.replace(\"/\", \"\")\n    str1 = str1.replace(\"\\\\\", \"\")\n    str1 = str1.replace(\"|\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\"=\", \"\")\n    str1 = str1.replace(\"*\", \"\")\n    str1 = str1.replace(\"&\", \"\")\n    str1 = str1.replace(\"^\", \"\")\n    str1 = str1.replace(\"%\", \"\")\n    str1 = str1.replace(\"$\", \"\")\n    str1 = str1.replace(\"#\", \"\")\n    str1 = str1.replace(\"@\", \"\")\n    str1 = str1.replace(\"!\", \"\")\n    str1 = str1.replace(\"~\", \"\")\n    str1 = str1.replace(\"`\", \"\")\n    str1 = str1.replace(\"'\", \"\")\n    str1 = str1.replace(\"\\\"\", \"\")\n    str1 = str1.replace(\"<\", \"\")\n    str1 = str1.replace(\">\", \"\")\n    str1 = str1.replace(\"0\", \"\")\n    str1 = str1.replace(\"1\", \"\")\n    str1 = str1.replace(\"2\", \"",
    "    return re.sub(r\"([A-Z])\", r\" \\1\", str1).strip()\n\n",
    "    return \" \".join(re.findall(\"[A-Z][^A-Z]*\", str1))\n\n",
    "    return \" \".join(str1.split())\n\n",
    "    return \" \".join(re.findall(\"[A-Z][^A-Z]*\", str1))\n\n",
    "    return \" \".join(re.findall(r\"[A-Z][a-z]*\", str1))\n\n",
    "    return \" \".join(str1.split())\n\n",
    "    return ' '.join(str1.split(' '))\n\n",
    "    return \" \".join([word for word in str1.split() if word[0].isupper()])\n\n",
    "    return re.sub(r'([A-Z])', r' \\1', str1).strip()\n\n"
  ]
}