{
  "name": "mbpp_268_find_star_num",
  "language": "py",
  "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + (n - 1) * 6\n\n",
    "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    return n * (n + 1) // 2\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 4 * (n - 1)\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + n * 2 - 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 4 * (n - 1)\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 4 * (n - 1) + 1\n\n",
    "    return n * (n + 1) // 2\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 2 * n - 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + n * 2 - 1\n\n",
    "    return n * (n + 1) // 2\n\n",
    "    return (n * (n + 1)) // 2\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + 4 * (n - 1) + 1\n\n",
    "    if n == 1:\n        return 1\n    return find_star_num(n - 1) + n * n\n\n",
    "    return n * (n + 1) // 2\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_star_num(n - 1) + find_star_num(n - 2)\n\n"
  ]
}