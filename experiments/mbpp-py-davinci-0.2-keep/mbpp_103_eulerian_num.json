{
  "name": "mbpp_103_eulerian_num",
  "language": "py",
  "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    if n < m:\n        return 0\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m - 2)\n\n",
    "    if n == m:\n        return 1\n    if n == 0:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n\n",
    "    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\n",
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 or m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n == 1:\n        return m\n    if m == 1:\n        return 1\n    return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n, m - 1)\n\n",
    "    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    if n < m:\n        return 0\n    if m == 0:\n        return 1\n    if n == m:\n        return 1\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n\n",
    "    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\n",
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\n",
    "    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 or m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if m > n:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n\n",
    "    if n < m:\n        return 0\n    if n == m:\n        return 1\n    if m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n\n",
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n\n",
    "    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    if n < m:\n        return 0\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m - 2)\n\n",
    "    if n < 0 or m < 0 or n < m:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 1\n    if n == 1 and m == 1:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\n",
    "    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n",
    "    if n < m:\n        return 0\n    if n == m:\n        return 1\n    if m == 0:\n        return 1\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n\n"
  ]
}