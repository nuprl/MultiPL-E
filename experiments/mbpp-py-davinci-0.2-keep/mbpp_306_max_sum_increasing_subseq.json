{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == n:\n        return 0\n    max_sum = 0\n    for i in range(index, n):\n        if a[i] > a[k]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i])\n    return max_sum\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n",
    "    if index == 0:\n        return a[0]\n    else:\n        if k > index:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[index]\n    if k == n:\n        return a[index]\n    if k < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k + 1), max_sum_increasing_subseq(a, n, index - 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if index == 2:\n        return max(a[0], a[1], a[2])\n    if index == 3:\n        return max(a[0], a[1], a[2], a[3])\n    if index == 4:\n        return max(a[0], a[1], a[2], a[3], a[4])\n    if index == 5:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5])\n    if index == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if index == 7:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if index == 8:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if index == 9:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if index == 10:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if index == 11:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if index == 12:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[",
    "    if index == 0:\n        return a[0]\n    if k == index:\n        return a[index]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return a[index]\n    if k < 0:\n        return 0\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
  ]
}