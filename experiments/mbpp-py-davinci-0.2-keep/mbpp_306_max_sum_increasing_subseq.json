{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == n:\n        return 0\n    max_sum = 0\n    for i in range(index, n):\n        if a[i] > a[k]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i])\n    return max_sum\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n",
    "    if index == 0:\n        return a[0]\n    else:\n        if k > index:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[index]\n    if k == n:\n        return a[index]\n    if k < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k + 1), max_sum_increasing_subseq(a, n, index - 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if index == 2:\n        return max(a[0], a[1], a[2])\n    if index == 3:\n        return max(a[0], a[1], a[2], a[3])\n    if index == 4:\n        return max(a[0], a[1], a[2], a[3], a[4])\n    if index == 5:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5])\n    if index == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if index == 7:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if index == 8:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if index == 9:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if index == 10:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if index == 11:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if index == 12:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[",
    "    if index == 0:\n        return a[0]\n    if k == index:\n        return a[index]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return a[index]\n    if k < 0:\n        return 0\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == 0:\n        return a[index]\n    if k == index:\n        return a[index]\n    if k < index:\n        return 0\n    max_sum = 0\n    for i in range(index):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n    return max_sum\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                   max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n               max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n\n    # include the current element\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if k <= index:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] <= a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k),\n               max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                   a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == 0:\n        return a[index]\n    else:\n        if k > index:\n            return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k) + a[index])\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n\n    # include kth element\n    include = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n    # exclude kth element\n    exclude = max_sum_increasing_subseq(a, n, index, k + 1)\n\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n\n    # include kth element\n    include_kth_element = a[k] + max_sum_increasing_subseq(a, n, index, k + 1)\n\n    # exclude kth element\n    exclude_kth_element = max_sum_increasing_subseq(a, n, index, k + 1)\n\n    return max(include_kth_element, exclude_kth_element)\n\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == 1:\n        return a[0] + a[1]\n    if k == 2:\n        return a[0] + a[1] + a[2]\n    if k == 3:\n        return a[0] + a[1] + a[2] + a[3]\n    if k == 4:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if k == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if k == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if k == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if k == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if k == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if k == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if k == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]",
    "    if index == n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(max_sum_increasing_subseq(a, n, index, k + 1), a[index] + a[k] + max_sum_increasing_subseq(a, n, k, k + 1))\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == 1:\n        return a[1]\n    if k == 2:\n        return a[0] + a[2]\n    if k == 3:\n        return a[0] + a[3]\n    if k == 4:\n        return a[0] + a[4]\n    if k == 5:\n        return a[0] + a[5]\n    if k == 6:\n        return a[0] + a[6]\n    if k == 7:\n        return a[0] + a[7]\n    if k == 8:\n        return a[0] + a[8]\n    if k == 9:\n        return a[0] + a[9]\n    if k == 10:\n        return a[0] + a[10]\n    if k == 11:\n        return a[0] + a[11]\n    if k == 12:\n        return a[0] + a[12]\n    if k == 13:\n        return a[0] + a[13]\n    if k == 14:\n        return a[0] + a[14]\n    if k == 15:\n        return a[0] + a[15]\n    if k == 16:\n        return a[0] + a[16]\n    if k == 17:\n        return a[0] + a[17]\n    if k == 18:\n        return a[0] + a[18]\n    if k == 19:\n        return a[0] + a[19]\n    if k == 20:\n        return a[0] + a[20]\n    if k == 21:\n        return a[0] + a[21]\n    if k == 22:\n        return a[0] + a[22]\n    if k == 23:\n        return a[0] + a[23]\n    if k == 24:\n        return a[0] + a[24]\n    if k == 25:\n        return a[0] + a[25]\n    if k == 26:\n        return a[0]",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n",
    "    if index == 0:\n        return a[index]\n    else:\n        if a[index] > a[k]:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, index))\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if index == 2:\n        return max(a[0] + a[2], a[1])\n    if index == 3:\n        return max(a[0] + a[3], a[1] + a[3], a[2])\n    if index == 4:\n        return max(a[0] + a[4], a[1] + a[4], a[2] + a[4], a[3])\n    if index == 5:\n        return max(a[0] + a[5], a[1] + a[5], a[2] + a[5], a[3] + a[5], a[4])\n    if index == 6:\n        return max(a[0] + a[6], a[1] + a[6], a[2] + a[6], a[3] + a[6], a[4] + a[6], a[5])\n    if index == 7:\n        return max(a[0] + a[7], a[1] + a[7], a[2] + a[7], a[3] + a[7], a[4] + a[7], a[5] + a[7], a[6])\n    if index == 8:\n        return max(a[0] + a[8], a[1] + a[8], a[2] + a[8], a[3] + a[8], a[4] + a[8], a[5] + a[8], a[6] + a[8], a[7])\n    if index == 9:\n        return max(a[0] + a[9], a[1] + a[9], a[2] + a[9], a[3] + a[9], a[4] + a[9], a[5] + a[9], a[6] + a[9], a[7] + a[9], a[8])\n    if index == 10:\n        return max(a[0] + a[10], a[1] +",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n\n    # include the kth element\n    if a[k] > a[index]:\n        return a[k] + max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == 1:\n        return a[1]\n    if k == 2:\n        return a[0] + a[2]\n    if k == 3:\n        return a[0] + a[3]\n    if k == 4:\n        return a[0] + a[4]\n    if k == 5:\n        return a[0] + a[5]\n    if k == 6:\n        return a[0] + a[6]\n    if k == 7:\n        return a[0] + a[7]\n    if k == 8:\n        return a[0] + a[8]\n    if k == 9:\n        return a[0] + a[9]\n    if k == 10:\n        return a[0] + a[10]\n    if k == 11:\n        return a[0] + a[11]\n    if k == 12:\n        return a[0] + a[12]\n    if k == 13:\n        return a[0] + a[13]\n    if k == 14:\n        return a[0] + a[14]\n    if k == 15:\n        return a[0] + a[15]\n    if k == 16:\n        return a[0] + a[16]\n    if k == 17:\n        return a[0] + a[17]\n    if k == 18:\n        return a[0] + a[18]\n    if k == 19:\n        return a[0] + a[19]\n    if k == 20:\n        return a[0] + a[20]\n    if k == 21:\n        return a[0] + a[21]\n    if k == 22:\n        return a[0] + a[22]\n    if k == 23:\n        return a[0] + a[23]\n    if k == 24:\n        return a[0] + a[24]\n    if k == 25:\n        return a[0] + a[25]\n    if k == 26:\n        return a[0]",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n\n    if k == 0:\n        return max(a[0], max_sum_increasing_subseq(a, n, index - 1, k))\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == index:\n        return a[index]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n\n",
    "    if index >= n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] < a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if k == index + 1:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n\n    if k == n:\n        return 0\n\n    if k < index:\n        return 0\n\n    if k == index:\n        return a[index]\n\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index+1, index+1), max_sum_increasing_subseq(a, n, index, k+1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n\n    # if a[index] > a[k] then we can include a[k] in the subsequence\n    if a[index] < a[k]:\n        return max(\n            max_sum_increasing_subseq(a, n, index + 1, k + 1),\n            a[k] + max_sum_increasing_subseq(a, n, index, k + 1),\n        )\n    else:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[k] > a[index]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n\n    if k == 0:\n        return 0\n\n    if k == 1:\n        return a[0]\n\n    if k == 2:\n        return a[1]\n\n    if k == 3:\n        return a[0] + a[2]\n\n    if k == 4:\n        return a[1] + a[3]\n\n    if k == 5:\n        return a[2] + a[4]\n\n    if k == 6:\n        return a[3] + a[5]\n\n    if k == 7:\n        return a[4] + a[6]\n\n    if k == 8:\n        return a[5] + a[7]\n\n    if k == 9:\n        return a[6] + a[8]\n\n    if k == 10:\n        return a[7] + a[9]\n\n    if k == 11:\n        return a[8] + a[10]\n\n    if k == 12:\n        return a[9] + a[11]\n\n    if k == 13:\n        return a[10] + a[12]\n\n    if k == 14:\n        return a[11] + a[13]\n\n    if k == 15:\n        return a[12] + a[14]\n\n    if k == 16:\n        return a[13] + a[15]\n\n    if k == 17:\n        return a[14] + a[16]\n\n    if k == 18:\n        return a[15] + a[17]\n\n    if k == 19:\n        return a[16] + a[18]\n\n    if k == 20:\n        return a[17] + a[19]\n\n    if k == 21:\n        return a[18] + a[20]\n\n    if k == 22:\n        return a[19] + a[21]\n\n    if k == 23:\n        return a[20] + a[22]\n\n    if k == 24:\n        return a[21] + a[23]\n\n    if k == 25:\n        return a[22] + a[24]\n\n    if k == 26:\n        return a[23] + a[25]\n\n    if",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if k == index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if k == index + 1:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == 0:\n        return a[index]\n    else:\n        max_sum = 0\n        for i in range(index):\n            if a[i] < a[index] and i < k:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        return max_sum + a[index]\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index >= n:\n        return 0\n    if k >= n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(\n        a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n        max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == 0:\n        return a[index]\n\n    max_sum = a[index]\n    for i in range(index):\n        if a[i] < a[index] and i < k:\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k))\n\n    return max_sum\n\n",
    "    if index == n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return a[index]\n    if k > index:\n        return a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == 0:\n        return a[index]\n    else:\n        if k > index:\n            return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[index]\n    else:\n        max_sum = 0\n        for i in range(index):\n            if a[i] < a[k]:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        return max_sum + a[k]\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if index == k:\n        return a[index]\n    if index < k:\n        return -1\n    if k < 0:\n        return -1\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < 0:\n        return 0\n    if k <= index:\n        return 0\n    if k > n:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if index == 2:\n        return max(a[0], a[1], a[2])\n    if index == 3:\n        return max(a[0], a[1], a[2], a[3])\n    if index == 4:\n        return max(a[0], a[1], a[2], a[3], a[4])\n    if index == 5:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5])\n    if index == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if index == 7:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if index == 8:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if index == 9:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if index == 10:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if index == 11:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if index == 12:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                   a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if k == index + 1:\n        return a[index]\n    return max(\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] < a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k + 1),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if k == n:\n        return 0\n    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[k]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == 0:\n        return a[k]\n    if k == 0:\n        return a[0]\n    if k <= index:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n",
    "    if index == 0:\n        return a[index]\n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    return max_sum + a[k]\n",
    "    if index == n:\n        return 0\n\n    if k == n:\n        return 0\n\n    if k <= index:\n        return 0\n\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == n:\n        return 0\n\n    if k == n:\n        return 0\n\n    if k < index:\n        return 0\n\n    # include the kth element\n    include = a[k] + max_sum_increasing_subseq(a, n, index, k + 1)\n\n    # exclude the kth element\n    exclude = max_sum_increasing_subseq(a, n, index, k + 1)\n\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k),\n               a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[k]\n    return max(\n        max_sum_increasing_subseq(a, n, index - 1, k),\n        max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index],\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[index]\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    if k > n - 1:\n        return 0\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n",
    "    if index == n:\n        return 0\n\n    if k == n:\n        return 0\n\n    if k < index:\n        return 0\n\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n\n    # include the current element\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # include the current element only if it is less than the kth element\n    if index < k:\n        include = max(include, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n\n    return max(include, exclude)\n\n",
    "    if index == 0:\n        return a[0]\n    if k == index:\n        return a[index]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] <= a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return a[index]\n    if k < 0:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k < index:\n        return -1\n    if k == index:\n        return a[k]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n\n",
    "    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[0], a[1])\n    if k == index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, index + 1)\n    return max(\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k)\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[k] < a[index]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n",
    "    if index == n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return 0\n    if k < index:\n        return 0\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k < index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n\n    if a[index] < a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(\n        a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k),\n    )\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == 1:\n        return a[0] + a[1]\n    if k == 2:\n        return a[0] + a[2]\n    if index == k:\n        return a[0] + max_sum_increasing_subseq(a, n, index-1, k-1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\n",
    "    if index == 0:\n        return a[index]\n    if k == 0:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n\n    if k == n:\n        return 0\n\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index+1, index+1), max_sum_increasing_subseq(a, n, index, k+1))\n",
    "    if index == 0:\n        return a[0]\n    if k == 0:\n        return a[0]\n    if k == 1:\n        return a[0] + a[1]\n    if k == 2:\n        return a[0] + a[2]\n    if k == 3:\n        return a[0] + a[2] + a[3]\n    if k == 4:\n        return a[0] + a[2] + a[3] + a[4]\n    if k == 5:\n        return a[0] + a[2] + a[3] + a[4] + a[5]\n    if k == 6:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if k == 7:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if k == 8:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if k == 9:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if k == 10:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if k == 11:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if k == 12:\n        return a[0] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] +",
    "    if index == n:\n        return 0\n\n    # include current element\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # exclude current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # include current element only if it is less than k\n    if index < k:\n        include = max(include, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k >= n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                   a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n",
    "    if index == 0:\n        return a[index]\n    if k <= index:\n        return 0\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if a[k] < a[index]:\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    return max(a[k] + max_sum_increasing_subseq(a, n, index + 1, index + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n",
    "    if index == n:\n        return 0\n\n    # include the current element\n    include = a[index]\n    if index < k:\n        include += max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(include, exclude)\n\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if k < index:\n        return 0\n    if k == index:\n        return a[index]\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n",
    "    if index == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n",
    "    if index == n:\n        return 0\n    if k == n:\n        return 0\n    if a[index] > a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
  ]
}