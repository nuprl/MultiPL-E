{
  "name": "mbpp_252_convert",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0, 0.0)\n    assert candidate(5) == (5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return cmath.polar(numbers)\n\nprint(convert(complex(input())))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1+2j))",
    "    return cmath.polar(numbers)\n\nprint(convert(1 + 2j))"
  ]
}