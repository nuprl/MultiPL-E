{
  "name": "mbpp_444_trim_tuple",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple[int]], K: int) -> str:\n    \"\"\"\n\tWrite a function to trim each tuple by k in the given tuple list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [tuple(x[:K] + x[K+1:]) for x in test_list]\n",
    "    return [tuple(x[:K]) for x in test_list]\n",
    "    return [tuple(x[:K] + x[K+1:]) for x in test_list]\n",
    "    return str([tuple(x[:K]) for x in test_list])\n",
    "    return [tuple(x[:K]) for x in test_list]\n",
    "    return str([tuple(x[:K] for x in test_list)])\n",
    "    return str([tuple(x[:K]) for x in test_list])\n",
    "    return ' '.join([' '.join([str(i) for i in tup[:K]]) for tup in test_list])\n",
    "    return str([tuple(i[:K] + i[-K:]) for i in test_list])\n\n",
    "    return [tuple(l[:K]) for l in test_list]\n",
    "    return [tuple(x[:K]) for x in test_list]\n",
    "    return str(list(map(lambda x: x[:K], test_list)))\n\n",
    "    return str([tuple(x[:K]) for x in test_list])\n",
    "    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return str(test_list)\n",
    "    return str([tuple(x[:K] + x[-K:]) for x in test_list])\n",
    "    return str([tuple(i[:K]) for i in test_list])\n",
    "    return str([tuple(x[:K]) for x in test_list])\n",
    "    return str(list(map(lambda x: x[:K], test_list)))\n\n",
    "    return [tuple(x[:K] + x[K + 1:]) for x in test_list]\n\n",
    "    return str([tuple(t[:K]) for t in test_list])\n"
  ]
}