{
  "name": "mbpp_555_difference",
  "language": "py",
  "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(range(n + 1)) ** 2 - sum(x ** 3 for x in range(n + 1))\n\n",
    "    return sum_of_cubes(n) - sum_of_n(n)\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum(range(n + 1)) ** 2 - sum(x ** 3 for x in range(n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum_of_cubes(n) - sum_of_naturals(n)\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum([i ** 3 for i in range(1, n + 1)])\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(map(lambda x: x ** 3, range(1, n + 1)))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum_of_cubes(n) - sum_of_numbers(n)\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(map(lambda x: x ** 3, range(1, n + 1)))\n\n",
    "    return sum(range(n + 1)) ** 2 - sum(i ** 3 for i in range(n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(map(lambda x: x ** 3, range(1, n + 1)))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n",
    "    return sum([i ** 3 for i in range(1, n + 1)]) - sum([i for i in range(1, n + 1)]) ** 2\n\n",
    "    return sum(range(1, n + 1)) ** 2 - sum(i ** 3 for i in range(1, n + 1))\n\n"
  ]
}