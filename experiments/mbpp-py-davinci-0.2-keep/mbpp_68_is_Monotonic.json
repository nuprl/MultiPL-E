{
  "name": "mbpp_68_is_Monotonic",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i - 1]\n            continue\n        if breaks_direction(direction, A[i - 1], A[i]):\n            return False\n    return True\n",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i - 1]\n            continue\n        if breaks_direction(direction, A[i - 1], A[i]):\n            return False\n    return True\n",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i-1]\n            continue\n        if breaks_direction(direction, A[i-1], A[i]):\n            return False\n    return True\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i - 1]\n            continue\n        if breaks_direction(direction, A[i - 1], A[i]):\n            return False\n    return True\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nprint(is_Monotonic([1,2,3,4,5]))\nprint(is_Monotonic([5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i - 1]\n            continue\n        if breaks_direction(direction, A[i - 1], A[i]):\n            return False\n    return True\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nprint(is_Monotonic([6, 5, 4, 4]))\nprint(is_Monotonic([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))\nprint(is_Monotonic([1, 1, 2, 3, 7]))\nprint(is_Monotonic([1, 2, 2, 3]))\nprint(is_Monotonic([1, 1, 2]))\nprint(is_Monotonic([1, 2, 4, 5]))\nprint(is_Monotonic([1, 1, 1]))\nprint(is_Monotonic([1]))\nprint(is_Monotonic([]))",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9]))\nprint(is_Monotonic([9,8,7,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i-1]\n            continue\n        if breaks_direction(A[i-1], A[i], direction):\n            return False\n    return True\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9]))\nprint(is_Monotonic([9,8,7,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i - 1]\n            continue\n        if breaks_direction(direction, A[i - 1], A[i]):\n            return False\n    return True\n\n",
    "    if len(A) == 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(len(A) - 1):\n            if A[i] < A[i + 1]:\n                return False\n    return True\n",
    "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nprint(is_Monotonic([1,2,3,4,5]))\nprint(is_Monotonic([1,2,3,4,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9]))\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]))",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i-1]\n            continue\n        if breaks_direction(direction, A[i-1], A[i]):\n            return False\n    return True\n",
    "    if len(A) <= 2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2, len(A)):\n        if direction == 0:\n            direction = A[i] - A[i-1]\n            continue\n        if breaks_direction(direction, A[i-1], A[i]):\n            return False\n    return True\n"
  ]
}