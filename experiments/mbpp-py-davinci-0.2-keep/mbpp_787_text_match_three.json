{
  "name": "mbpp_787_text_match_three",
  "language": "py",
  "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('caacabbbba') == True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return re.search(r\"ab{3}\", text)\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    return re.search(r'ab{3}', text) is not None\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return bool(pattern.search(text))\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return bool(pattern.search(text))\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return bool(pattern.search(text))\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return bool(pattern.search(text))\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    return re.search(r'a[b]{3}', text) is not None\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return bool(pattern.search(text))\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return pattern.search(text) is not None\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    pattern = re.compile(r'ab{3}')\n    return bool(pattern.match(text))\n\n",
    "    pattern = re.compile(r\"ab{3}\")\n    return pattern.search(text) is not None\n\n",
    "    return re.search(r\"ab{3}\", text) is not None\n\n",
    "    return re.search(r\"ab{3}\", text)\n\n"
  ]
}