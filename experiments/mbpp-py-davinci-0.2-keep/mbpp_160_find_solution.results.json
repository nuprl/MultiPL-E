{
  "name": "mbpp_160_find_solution",
  "language": "py",
  "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                return None\n            else:\n                if x == 0:\n                    y += 1\n                else:\n                    x -= 1\n                    y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz8u5ne92.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpz8u5ne92.py\", line 29, in test_check\n    check(find_solution)\n  File \"/tmp/tmpz8u5ne92.py\", line 24, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpz8u5ne92.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8n7bu034.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8n7bu034.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8n7bu034.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8n7bu034.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmgwuywhm.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpmgwuywhm.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmgwuywhm.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmgwuywhm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return x, y\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3r8x36yl.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3r8x36yl.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3r8x36yl.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3r8x36yl.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y, x - (a // b) * y\n        a, b = b % a, a\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt3ty_en6.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpt3ty_en6.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpt3ty_en6.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpt3ty_en6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y, _ = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp28896wgo.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp28896wgo.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp28896wgo.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp28896wgo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y > n:\n                y -= 1\n            else:\n                x += 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnsq2iw6.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpqnsq2iw6.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpqnsq2iw6.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpqnsq2iw6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    return (x, y) if a1 == n else (y, x)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmsm0v_bl.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpmsm0v_bl.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmsm0v_bl.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmsm0v_bl.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi77exn_1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi77exn_1.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpi77exn_1.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpi77exn_1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) == 0:\n        return (n // a, n // b)\n    else:\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1vycjiw.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpr1vycjiw.py\", line 32, in test_check\n    check(find_solution)\n  File \"/tmp/tmpr1vycjiw.py\", line 27, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpr1vycjiw.py\", line 22, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y += 1\n        else:\n            x += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpztxxao1v.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpztxxao1v.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpztxxao1v.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpztxxao1v.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y += 1\n        else:\n            x += 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj_xui0x.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpjj_xui0x.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjj_xui0x.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjj_xui0x.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x*a + y*b != n:\n            if x*a + y*b < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppmin6jvm.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmppmin6jvm.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmppmin6jvm.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmppmin6jvm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y > n:\n                y -= 1\n            else:\n                x += 1\n        return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qcz75ju.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp4qcz75ju.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qcz75ju.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qcz75ju.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    (x, y) = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mrhmjb2.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4mrhmjb2.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4mrhmjb2.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4mrhmjb2.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbgub01ef.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpbgub01ef.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpbgub01ef.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpbgub01ef.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a + y * b != n:\n            if x * a + y * b < n:\n                x += 1\n            else:\n                y -= 1\n        return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5smwg_dd.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp5smwg_dd.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5smwg_dd.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5smwg_dd.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            x += 1\n            y -= 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp00yroa9r.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp00yroa9r.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp00yroa9r.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp00yroa9r.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y, x - (a // b) * y\n        a, b = b, a % b\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjd_nxur9.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpjd_nxur9.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjd_nxur9.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjd_nxur9.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                x -= 1\n            else:\n                y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprl2ar45y.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmprl2ar45y.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmprl2ar45y.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmprl2ar45y.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a0, b0)), y * (n // gcd(a0, b0))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc6ae3un.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxc6ae3un.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpxc6ae3un.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpxc6ae3un.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a + y * b != n:\n            if x * a + y * b < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5vfrf360.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp5vfrf360.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5vfrf360.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5vfrf360.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_euclidean_algorithm(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6mc_riyn.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp6mc_riyn.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6mc_riyn.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6mc_riyn.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return x, y\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3r8x36yl.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3r8x36yl.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3r8x36yl.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3r8x36yl.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = extended_euclidean_algorithm(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp02m6l65a.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp02m6l65a.py\", line 30, in test_check\n    check(find_solution)\n  File \"/tmp/tmp02m6l65a.py\", line 25, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp02m6l65a.py\", line 19, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp64gy8a3a.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp64gy8a3a.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmp64gy8a3a.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp64gy8a3a.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) == 0:\n        return (n // gcd(a, b), 0)\n    else:\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcacb296p.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpcacb296p.py\", line 30, in test_check\n    check(find_solution)\n  File \"/tmp/tmpcacb296p.py\", line 25, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpcacb296p.py\", line 19, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrpkajfd.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpjrpkajfd.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjrpkajfd.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjrpkajfd.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8n7bu034.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8n7bu034.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8n7bu034.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8n7bu034.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi77exn_1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi77exn_1.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpi77exn_1.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpi77exn_1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi77exn_1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi77exn_1.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpi77exn_1.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpi77exn_1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a0, b0)), y * (n // gcd(a0, b0))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc6ae3un.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxc6ae3un.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpxc6ae3un.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpxc6ae3un.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 0\n    while n > 0:\n        if n >= a:\n            n -= a\n            x += 1\n        else:\n            n -= b\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy9ggt28j.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpy9ggt28j.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpy9ggt28j.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpy9ggt28j.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (b, a)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0iredy64.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp0iredy64.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0iredy64.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0iredy64.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoeht_h5v.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpoeht_h5v.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpoeht_h5v.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpoeht_h5v.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrpkajfd.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpjrpkajfd.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjrpkajfd.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjrpkajfd.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8n7bu034.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8n7bu034.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8n7bu034.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8n7bu034.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x0, y0, d = extended_gcd(a, b)\n    return (x0 * (n // d), y0 * (n // d))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxehsp5c.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpkxehsp5c.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpkxehsp5c.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpkxehsp5c.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplolgl911.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmplolgl911.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmplolgl911.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmplolgl911.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    x, y = find_solution(b % a, a, n)\n    return (y - (b // a) * x, x)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu0dhxn82.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpu0dhxn82.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpu0dhxn82.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpu0dhxn82.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return x, y\n    return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            x -= 1\n        else:\n            y += 1\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_e1b_qhp.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp_e1b_qhp.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_e1b_qhp.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_e1b_qhp.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) == 0:\n        return (n // gcd(a, b)) * extended_euclidean_algorithm(a, b)\n    return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipwapiot.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpipwapiot.py\", line 16, in test_check\n    check(find_solution)\n  File \"/tmp/tmpipwapiot.py\", line 11, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpipwapiot.py\", line 7, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                x -= 1\n            else:\n                y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprl2ar45y.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmprl2ar45y.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmprl2ar45y.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmprl2ar45y.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 0\n    while True:\n        if a * x + b * y == n:\n            return (x, y)\n        if a * x + b * y > n:\n            return None\n        if x == 0:\n            x += 1\n        else:\n            x *= -1\n            y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4_2dr9sm.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp4_2dr9sm.py\", line 39, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4_2dr9sm.py\", line 34, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4_2dr9sm.py\", line 19, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return x, y\n            x += 1\n            y -= 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0abwo0su.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp0abwo0su.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0abwo0su.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0abwo0su.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None\n\nprint(find_solution(1, 2, 3))\nprint(find_solution(1, 2, 4))\nprint(find_solution(1, 2, 5))\nprint(find_solution(1, 2, 6))\nprint(find_solution(1, 2, 7))\nprint(find_solution(1, 2, 8))\nprint(find_solution(1, 2, 9))\nprint(find_solution(1, 2, 10))\nprint(find_solution(1, 2, 11))\nprint(find_solution(1, 2, 12))\nprint(find_solution(1, 2, 13))\nprint(find_solution(1, 2, 14))\nprint(find_solution(1, 2, 15))\nprint(find_solution(1, 2, 16))\nprint(find_solution(1, 2, 17))\nprint(find_solution(1, 2, 18))\nprint(find_solution(1, 2, 19))\nprint(find_solution(1, 2, 20))\nprint(find_solution(1, 2, 21))\nprint(find_solution(1, 2, 22))\nprint(find_solution(1, 2, 23))\nprint(find_solution(1, 2, 24))\nprint(find_solution(1, 2, 25))\nprint(find_solution(1, 2, 26))\nprint(find_solution(1, 2, 27))\nprint(find_solution(1, 2, 28))\nprint(find_solution(1, 2, 29))\nprint(find_solution(1, 2, 30))\nprint(find_solution(1, 2, 31))\nprint(find_solution(1, 2, 32))\nprint(find_solution(1, 2, 33))\nprint(find_solution(1, 2, 34))\nprint(find_solution(1, 2, 35))\nprint(find\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpatql0dbc.py\", line 46\n    print(find\n         ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    return (n // a, 0)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8trkszu.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpn8trkszu.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpn8trkszu.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpn8trkszu.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphdl0hcel.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmphdl0hcel.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmphdl0hcel.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmphdl0hcel.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x = 0\n        y = n // b\n        while x * a + y * b != n:\n            x += 1\n            y -= 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1vpq07xt.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp1vpq07xt.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp1vpq07xt.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp1vpq07xt.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplolgl911.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmplolgl911.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmplolgl911.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmplolgl911.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return (n // b) * x, (n // b) * y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxlkqovcy.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxlkqovcy.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpxlkqovcy.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpxlkqovcy.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n\n    x, y = 0, 1\n    u, v = 1, 0\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpogmzfj47.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpogmzfj47.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpogmzfj47.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpogmzfj47.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8e18_9bk.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8e18_9bk.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8e18_9bk.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8e18_9bk.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a, b)), y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgzm1ln8u.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpgzm1ln8u.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpgzm1ln8u.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpgzm1ln8u.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 0\n    while True:\n        if a * x + b * y == n:\n            return (x, y)\n        x += 1\n        y -= 1\n    return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6jlw_8yx.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp6jlw_8yx.py\", line 35, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6jlw_8yx.py\", line 30, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6jlw_8yx.py\", line 19, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = find_solution(b % a, a, n)\n    return (y - (b // a) * x, x)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgibqcnqa.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpgibqcnqa.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpgibqcnqa.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpgibqcnqa.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdmsl7_z.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpvdmsl7_z.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpvdmsl7_z.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpvdmsl7_z.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != 0 and b1 != 0:\n        if a1 > b1:\n            a1 -= b1\n            x += y\n        else:\n            b1 -= a1\n            y += x\n    if a1 == 0:\n        return (n // b1 * y, y)\n    else:\n        return (x, n // a1 * x)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppj4q4pfx.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmppj4q4pfx.py\", line 35, in test_check\n    check(find_solution)\n  File \"/tmp/tmppj4q4pfx.py\", line 30, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmppj4q4pfx.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a + y * b != n:\n            if x * a + y * b < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5guset46.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp5guset46.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5guset46.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5guset46.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n\n    x0, y0 = 0, 1\n    r0, r1 = a, b\n    while r1:\n        q = r0 // r1\n        x0, x1 = x1, x0 - q * x1\n        y0, y1 = y1, y0 - q * y1\n        r0, r1 = r1, r0 - q * r1\n    return x0, y0\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz6pk_cad.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpz6pk_cad.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpz6pk_cad.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpz6pk_cad.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2hhnnoz.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpo2hhnnoz.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpo2hhnnoz.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpo2hhnnoz.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrpkajfd.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpjrpkajfd.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjrpkajfd.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjrpkajfd.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0 and n == 0:\n        return (0, 0)\n    if a == 0 and b == 0 and n != 0:\n        return None\n    if a == 0 and b != 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if a != 0 and b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if a != 0 and b != 0:\n        if n % gcd(a, b) == 0:\n            return (n // a, n // b)\n        else:\n            return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfwbdyl0n.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpfwbdyl0n.py\", line 33, in test_check\n    check(find_solution)\n  File \"/tmp/tmpfwbdyl0n.py\", line 28, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpfwbdyl0n.py\", line 22, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) / b\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3sk8l8h4.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp3sk8l8h4.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3sk8l8h4.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3sk8l8h4.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmgwuywhm.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpmgwuywhm.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmgwuywhm.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmgwuywhm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a0 != 0:\n        q, b0, a0 = b0 // a0, a0, b0 % a0\n        x, y = y - q * x, x\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptkqenptu.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmptkqenptu.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmptkqenptu.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmptkqenptu.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    return (x, y) if a1 == n else (y, x)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphr2ps4p3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmphr2ps4p3.py\", line 26, in test_check\n    check(find_solution)\n  File \"/tmp/tmphr2ps4p3.py\", line 21, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmphr2ps4p3.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (n // a, n // b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfgksoi5a.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpfgksoi5a.py\", line 30, in test_check\n    check(find_solution)\n  File \"/tmp/tmpfgksoi5a.py\", line 25, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpfgksoi5a.py\", line 19, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                x -= 1\n            else:\n                y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprl2ar45y.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmprl2ar45y.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmprl2ar45y.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmprl2ar45y.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc3_79dio.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc3_79dio.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpc3_79dio.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpc3_79dio.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a < n:\n            y = (n - x * a) / b\n            if y % 1 == 0:\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsg_3tgkf.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpsg_3tgkf.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpsg_3tgkf.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpsg_3tgkf.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a < n:\n            y = (n - x * a) / b\n            if y % 1 == 0:\n                return (x, y)\n            x += 1\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsst0zczv.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpsst0zczv.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpsst0zczv.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpsst0zczv.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0k1i67cz.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp0k1i67cz.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0k1i67cz.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0k1i67cz.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if a < 0:\n        return find_solution(-a, b, -n)\n    if b < 0:\n        return find_solution(a, -b, -n)\n    if a > b:\n        return find_solution(b, a, n)\n    if n < 0:\n        return find_solution(a, b, -n)\n    if n % a == 0:\n        return (n // a, 0)\n    if n < a:\n        return None\n    x, y = find_solution(b % a, a, n % a)\n    return (y, x - (n // a) * y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8wa5za0f.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp8wa5za0f.py\", line 40, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8wa5za0f.py\", line 35, in check\n    assert candidate(2, 3, 7) == (2, 1)\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp64gy8a3a.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp64gy8a3a.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmp64gy8a3a.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp64gy8a3a.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 0\n    while x * a <= n:\n        if (n - x * a) % b == 0:\n            y = (n - x * a) // b\n            return (x, y)\n        x += 1\n    return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8c3rho0l.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8c3rho0l.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8c3rho0l.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8c3rho0l.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2hhnnoz.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpo2hhnnoz.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpo2hhnnoz.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpo2hhnnoz.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 0\n    while x * a + y * b != n:\n        if x * a + y * b < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_wl6zkb.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpo_wl6zkb.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpo_wl6zkb.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpo_wl6zkb.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        if b == 0:\n            return None\n        if n % b == 0:\n            return (0, n // b)\n        return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        return None\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = find_solution(b % a, a, n % a)\n    return (y - (b // a) * x, x)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpladdphiw.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpladdphiw.py\", line 29, in test_check\n    check(find_solution)\n  File \"/tmp/tmpladdphiw.py\", line 24, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpladdphiw.py\", line 19, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    return (n // a, 0)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8trkszu.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpn8trkszu.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpn8trkszu.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpn8trkszu.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_euclidean_algorithm(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6mc_riyn.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp6mc_riyn.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6mc_riyn.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6mc_riyn.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a0, b0)), y * (n // gcd(a0, b0))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc6ae3un.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxc6ae3un.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpxc6ae3un.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpxc6ae3un.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if n % gcd(a, b) == 0:\n        return (n // gcd(a, b), 0)\n    else:\n        return None\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6pl0g4wn.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp6pl0g4wn.py\", line 31, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6pl0g4wn.py\", line 26, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6pl0g4wn.py\", line 19, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_50_93hn.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp_50_93hn.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_50_93hn.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_50_93hn.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdmsl7_z.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpvdmsl7_z.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpvdmsl7_z.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpvdmsl7_z.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            else:\n                x += 1\n                y -= 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5cufkw9z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp5cufkw9z.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5cufkw9z.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5cufkw9z.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            x -= 1\n        else:\n            y += 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz86y5h6v.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpz86y5h6v.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpz86y5h6v.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpz86y5h6v.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplolgl911.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmplolgl911.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmplolgl911.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmplolgl911.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        for x in range(n // a + 1):\n            y = (n - a * x) / b\n            if y == int(y):\n                return (x, y)\n        return None\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a > 0:\n        q, r = divmod(b, a)\n        m = x - u * q\n        b, a, x, y = a, r, u, v\n    return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7olufai.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpm7olufai.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpm7olufai.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpm7olufai.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8e18_9bk.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8e18_9bk.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8e18_9bk.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8e18_9bk.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmgwuywhm.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpmgwuywhm.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmgwuywhm.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmgwuywhm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_euclidean_algorithm(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv9zg85jh.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpv9zg85jh.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpv9zg85jh.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpv9zg85jh.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if x * a + y * b == n:\n                return x, y\n            if x * a + y * b > n:\n                y -= 1\n            else:\n                x += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp53bsnc_x.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp53bsnc_x.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmp53bsnc_x.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp53bsnc_x.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4671nft5.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp4671nft5.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4671nft5.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4671nft5.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return (x * n // b0, y * n // a0)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpehlm69_2.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpehlm69_2.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpehlm69_2.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpehlm69_2.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc3_79dio.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpc3_79dio.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpc3_79dio.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpc3_79dio.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y > n:\n                y -= 1\n            else:\n                x += 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnsq2iw6.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpqnsq2iw6.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpqnsq2iw6.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpqnsq2iw6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y, x - (a // b) * y\n        a, b = b, a % b\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3o909onv.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp3o909onv.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3o909onv.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3o909onv.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    gcdab = b\n    return x * (n // gcdab), y * (n // gcdab)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3apxaznz.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp3apxaznz.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3apxaznz.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3apxaznz.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y -= 1\n        else:\n            x += 1\n    return x, y\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpufh9k787.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpufh9k787.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpufh9k787.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpufh9k787.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y > n:\n                y -= 1\n            else:\n                x += 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnsq2iw6.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpqnsq2iw6.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpqnsq2iw6.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpqnsq2iw6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3675m2ge.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp3675m2ge.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3675m2ge.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3675m2ge.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_euclidean_algorithm(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv9zg85jh.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpv9zg85jh.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpv9zg85jh.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpv9zg85jh.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            y -= 1\n        else:\n            x += 1\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp15gzvcwy.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp15gzvcwy.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp15gzvcwy.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp15gzvcwy.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n//b)\n    if b == 0:\n        return (n//a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = find_solution(b, a%b, n)\n    return (y, x - (a//b)*y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s1_e3kj.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp2s1_e3kj.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp2s1_e3kj.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp2s1_e3kj.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return x, y\n            elif a * x + b * y > n:\n                return None\n            elif a * x + b * y < n:\n                x += 1\n                y -= 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpldiyy9t4.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpldiyy9t4.py\", line 26, in test_check\n    check(find_solution)\n  File \"/tmp/tmpldiyy9t4.py\", line 21, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpldiyy9t4.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) == 0:\n        return (x, y)\n    else:\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps1m78c51.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmps1m78c51.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmps1m78c51.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmps1m78c51.py\", line 7, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a, b)), y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgzm1ln8u.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpgzm1ln8u.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpgzm1ln8u.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpgzm1ln8u.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    (x, y) = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mrhmjb2.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4mrhmjb2.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4mrhmjb2.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4mrhmjb2.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_euclidean_algorithm(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6mc_riyn.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp6mc_riyn.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6mc_riyn.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6mc_riyn.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzpx8p5ny.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpzpx8p5ny.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpzpx8p5ny.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpzpx8p5ny.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return (x, y)\n            elif a * x + b * y > n:\n                return None\n            else:\n                if a * x + b * y < n:\n                    x += 1\n                else:\n                    y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_hff_2k5.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp_hff_2k5.py\", line 28, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_hff_2k5.py\", line 23, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_hff_2k5.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = extended_euclidean_algorithm(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqvdr3cls.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpqvdr3cls.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmpqvdr3cls.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpqvdr3cls.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a, b)), y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgzm1ln8u.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpgzm1ln8u.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpgzm1ln8u.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpgzm1ln8u.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu5vy3szo.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpu5vy3szo.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpu5vy3szo.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpu5vy3szo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0 and n == 0:\n        return (0, 0)\n    if a == 0 and b == 0 and n != 0:\n        return None\n    if a == 0 and b != 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if a != 0 and b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if a != 0 and b != 0:\n        if n % gcd(a, b) == 0:\n            return (n // gcd(a, b), 0)\n        else:\n            return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmdyhp5fv.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpmdyhp5fv.py\", line 33, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmdyhp5fv.py\", line 28, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmdyhp5fv.py\", line 22, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = bezout(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz99ezoju.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpz99ezoju.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpz99ezoju.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpz99ezoju.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphdl0hcel.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmphdl0hcel.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmphdl0hcel.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmphdl0hcel.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - q * y, y\n        b, a, x, y = a, r, m, n\n    return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_k7vo97q.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp_k7vo97q.py\", line 28, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_k7vo97q.py\", line 23, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_k7vo97q.py\", line 13, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            x += 1\n            y -= 1\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp00yroa9r.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp00yroa9r.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp00yroa9r.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp00yroa9r.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if (a * x + b * y) == n:\n                return (x, y)\n            elif (a * x + b * y) > n:\n                return None\n            else:\n                x += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3hk7k06r.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp3hk7k06r.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmp3hk7k06r.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp3hk7k06r.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = bezout(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0e4hg0_j.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp0e4hg0_j.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0e4hg0_j.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0e4hg0_j.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    if a1 == n:\n        return (x, y)\n    else:\n        return (y, x)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpylfj_4k1.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpylfj_4k1.py\", line 29, in test_check\n    check(find_solution)\n  File \"/tmp/tmpylfj_4k1.py\", line 24, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpylfj_4k1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return x, y\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_4fc_1jz.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp_4fc_1jz.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_4fc_1jz.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_4fc_1jz.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_euclidean(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf2fdb0ja.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpf2fdb0ja.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpf2fdb0ja.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpf2fdb0ja.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_euclidean_algorithm(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv9zg85jh.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpv9zg85jh.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpv9zg85jh.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpv9zg85jh.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    u, v, s, t = 1, 0, 0, 1\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrpkajfd.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpjrpkajfd.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpjrpkajfd.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpjrpkajfd.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        gcd, x, y = extended_gcd(a, b)\n        if n % gcd != 0:\n            return None\n        else:\n            return (x * (n // gcd), y * (n // gcd))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwk5gd2g2.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwk5gd2g2.py\", line 26, in test_check\n    check(find_solution)\n  File \"/tmp/tmpwk5gd2g2.py\", line 21, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpwk5gd2g2.py\", line 14, in find_solution\n    gcd, x, y = extended_gcd(a, b)\nNameError: name 'extended_gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m8l8zfo.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8m8l8zfo.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp8m8l8zfo.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp8m8l8zfo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    return (x, y) if a1 == n else (y, x)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmsm0v_bl.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpmsm0v_bl.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmsm0v_bl.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmsm0v_bl.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (b, a)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0iredy64.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp0iredy64.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0iredy64.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0iredy64.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y > n:\n            x -= 1\n        else:\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdsx6a6he.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpdsx6a6he.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpdsx6a6he.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpdsx6a6he.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (b, n - b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9wfddaoh.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp9wfddaoh.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp9wfddaoh.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp9wfddaoh.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4qklw2u6.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp4qklw2u6.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp4qklw2u6.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp4qklw2u6.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpse8maqq7.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpse8maqq7.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpse8maqq7.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpse8maqq7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n\n    x, y = 0, 0\n    while x * a <= n:\n        if (n - x * a) % b == 0:\n            y = (n - x * a) // b\n            return (x, y)\n        x += 1\n    return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkdfu_1nw.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpkdfu_1nw.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpkdfu_1nw.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpkdfu_1nw.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y - (b // a) * x, x\n        a, b = b % a, a\n    return (n * x) // gcd(a, b), (n * y) // gcd(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvkm9vf54.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpvkm9vf54.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpvkm9vf54.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpvkm9vf54.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfmhquqt.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpdfmhquqt.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpdfmhquqt.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpdfmhquqt.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    a1, b1 = a, b\n    while a1 != n and b1 != n:\n        if a1 < b1:\n            a1 += a\n            x += 1\n        else:\n            b1 += b\n            y += 1\n    if a1 == n:\n        return (x, y)\n    else:\n        return (y, x)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpylfj_4k1.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpylfj_4k1.py\", line 29, in test_check\n    check(find_solution)\n  File \"/tmp/tmpylfj_4k1.py\", line 24, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpylfj_4k1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a % b != 0:\n        q, r = divmod(a, b)\n        x, y = y, x - q * y\n        a, b = b, r\n    return (x * (n // b), y * (n // b))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpccq6j1br.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpccq6j1br.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpccq6j1br.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpccq6j1br.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwjp8fdcu.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpwjp8fdcu.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmpwjp8fdcu.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpwjp8fdcu.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return y, (n - b * y) // a\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0hq3s1ju.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp0hq3s1ju.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0hq3s1ju.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0hq3s1ju.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            x -= 1\n            y += 1\n        return (x, y)\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxj6refoa.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxj6refoa.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmpxj6refoa.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpxj6refoa.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoeht_h5v.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpoeht_h5v.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpoeht_h5v.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpoeht_h5v.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a <= n:\n            if (n - x * a) % b == 0:\n                y = (n - x * a) // b\n                return (x, y)\n            x += 1\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmgwuywhm.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpmgwuywhm.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpmgwuywhm.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpmgwuywhm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoeht_h5v.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpoeht_h5v.py\", line 19, in test_check\n    check(find_solution)\n  File \"/tmp/tmpoeht_h5v.py\", line 14, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpoeht_h5v.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) == 0:\n        return extended_euclidean_algorithm(a, b)\n    else:\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiu0y3yev.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiu0y3yev.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiu0y3yev.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiu0y3yev.py\", line 7, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while x * a + y * b != n:\n            if x * a + y * b < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5guset46.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp5guset46.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5guset46.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5guset46.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if (a * x) + (b * y) == n:\n                return (x, y)\n            if (a * x) + (b * y) < n:\n                x += 1\n            else:\n                y += 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1sp3rh.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpcd1sp3rh.py\", line 25, in test_check\n    check(find_solution)\n  File \"/tmp/tmpcd1sp3rh.py\", line 20, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpcd1sp3rh.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = extended_gcd(a, b)\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5akpztkw.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp5akpztkw.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp5akpztkw.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp5akpztkw.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n\n    x, y = 0, 1\n    a0, b0 = a, b\n    while a0 != 0:\n        q, b0, a0 = b0 // a0, a0, b0 % a0\n        x, y = y - q * x, x\n\n    return (x * (n // gcd(a, b)), y * (n // gcd(a, b)))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_ktoiczm.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp_ktoiczm.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmp_ktoiczm.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp_ktoiczm.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu5vy3szo.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpu5vy3szo.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpu5vy3szo.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpu5vy3szo.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x, y = y - q * x, x\n    return x * (n // gcd(a, b)), y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgzm1ln8u.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpgzm1ln8u.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmpgzm1ln8u.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpgzm1ln8u.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    if n % gcd(a, b) != 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    x, y = find_solution(b % a, a, n)\n    return (y - (b // a) * x, x)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuh0fyq8g.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpuh0fyq8g.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpuh0fyq8g.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpuh0fyq8g.py\", line 9, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) == 0:\n        return extended_euclidean_algorithm(a, b)\n    return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8puzhtk.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpn8puzhtk.py\", line 17, in test_check\n    check(find_solution)\n  File \"/tmp/tmpn8puzhtk.py\", line 12, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpn8puzhtk.py\", line 7, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 0\n        while True:\n            if a * x + b * y == n:\n                return x, y\n            else:\n                x += 1\n                y -= 1\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2fyxkert.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp2fyxkert.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmp2fyxkert.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp2fyxkert.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = 0, 1\n        while a * x + b * y != n:\n            if a * x + b * y < n:\n                x += 1\n            else:\n                y -= 1\n        return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp1646qns.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpp1646qns.py\", line 24, in test_check\n    check(find_solution)\n  File \"/tmp/tmpp1646qns.py\", line 19, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpp1646qns.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        gcd, x, y = extended_euclidean_algorithm(a, b)\n        if n % gcd != 0:\n            return None\n        else:\n            return (x * (n // gcd), y * (n // gcd))\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbnombjmh.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpbnombjmh.py\", line 26, in test_check\n    check(find_solution)\n  File \"/tmp/tmpbnombjmh.py\", line 21, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpbnombjmh.py\", line 14, in find_solution\n    gcd, x, y = extended_euclidean_algorithm(a, b)\nNameError: name 'extended_euclidean_algorithm' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a != 0:\n        x, y = y, x - (a // b) * y\n        a, b = b, a % b\n    return x * (n // gcd(a, b)), y * (n // gcd(a, b))\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0gj1janl.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp0gj1janl.py\", line 20, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0gj1janl.py\", line 15, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0gj1janl.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (x, y)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiv597ad7.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpiv597ad7.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmpiv597ad7.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpiv597ad7.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return extended_euclidean_algorithm(a, b)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6mc_riyn.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp6mc_riyn.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp6mc_riyn.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp6mc_riyn.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) == 0:\n        return (x, y)\n    else:\n        return None\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps1m78c51.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmps1m78c51.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmps1m78c51.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmps1m78c51.py\", line 7, in find_solution\n    if n % gcd(a, b) == 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    else:\n        return (b, a)\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0iredy64.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp0iredy64.py\", line 18, in test_check\n    check(find_solution)\n  File \"/tmp/tmp0iredy64.py\", line 13, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmp0iredy64.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            y += 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi77exn_1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi77exn_1.py\", line 23, in test_check\n    check(find_solution)\n  File \"/tmp/tmpi77exn_1.py\", line 18, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpi77exn_1.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplolgl911.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmplolgl911.py\", line 21, in test_check\n    check(find_solution)\n  File \"/tmp/tmplolgl911.py\", line 16, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmplolgl911.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n    if n % gcd(a, b) != 0:\n        return None\n    x, y = 0, 1\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return x, y\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf8ql14qq.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpf8ql14qq.py\", line 22, in test_check\n    check(find_solution)\n  File \"/tmp/tmpf8ql14qq.py\", line 17, in check\n    assert candidate(2, 3, 7) == (2, 1)\n  File \"/tmp/tmpf8ql14qq.py\", line 7, in find_solution\n    if n % gcd(a, b) != 0:\nNameError: name 'gcd' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}