{
  "name": "mbpp_635_heap_sort",
  "language": "py",
  "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5]) == [1, 5, 7, 9]\n\ndef test_check():\n    check(heap_sort)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    heap = Heap(iterable)\n    return heap.sort()",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]\n",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    # TODO: Implement heap sort\n    pass\n\n",
    "    heap = Heap(iterable)\n    return heap.sort()",
    "    pass",
    "    pass",
    "    heap = Heap(iterable)\n    return heap.sort()\n",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass\n",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    n = len(iterable)\n    for i in range(n, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable\n\n",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    def heapify(iterable: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and iterable[left] > iterable[largest]:\n            largest = left\n\n        if right < n and iterable[right] > iterable[largest]:\n            largest = right\n\n        if largest != i:\n            iterable[i], iterable[largest] = iterable[largest], iterable[i]\n            heapify(iterable, n, largest)\n\n    n = len(iterable)\n\n    for i in range(n, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    heap = Heap(iterable)\n    return heap.sort()",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    return []",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    heap = Heap()\n    for i in iterable:\n        heap.insert(i)\n    return heap.sort()",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    def heapify(iterable: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and iterable[i] < iterable[left]:\n            largest = left\n        if right < n and iterable[largest] < iterable[right]:\n            largest = right\n        if largest != i:\n            iterable[i], iterable[largest] = iterable[largest], iterable[i]\n            heapify(iterable, n, largest)\n\n    n = len(iterable)\n    for i in range(n, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass\n",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    heap = Heap(iterable)\n    return heap.sort()",
    "    pass",
    "    pass",
    "    return iterable",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass",
    "    pass"
  ]
}