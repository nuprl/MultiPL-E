{
  "name": "mbpp_758_unique_sublists",
  "language": "py",
  "prompt": "from typing import Any\n\ndef unique_sublists(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == { (1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1 }\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == { ('green', 'orange'): 2, ('black',): 1, ('white',): 1 }\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]) == { (10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1 }\n    assert candidate([['john']]) == { ('john',): 1 }\n\ndef test_check():\n    check(unique_sublists)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return {tuple(i): list1.count(i) for i in list1}\n\n",
    "    list1 = [tuple(x) for x in list1]\n    return {x: list1.count(x) for x in list1}",
    "    return {tuple(x): list1.count(x) for x in list1}\n\nprint(unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,",
    "    return Counter([tuple(x) for x in list1])",
    "    return Counter([tuple(x) for x in list1])",
    "    return {tuple(x): list1.count(x) for x in list1}\n\nprint(unique_sublists([[1, 2], [3, 4], [1, 2], [5], [6], [7], [8], [3, 4], [3, 4], [7]]))",
    "    return {tuple(x): list1.count(x) for x in list1}",
    "    return Counter([tuple(x) for x in list1])",
    "    return {tuple(x): list1.count(x) for x in list1}",
    "    return {tuple(i): list1.count(i) for i in list1}\n\nprint(unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    return dict(Counter(list2))\n",
    "    return {tuple(i): list1.count(i) for i in list1}",
    "    return Counter([tuple(x) for x in list1])",
    "    return {tuple(i): list1.count(i) for i in list1}",
    "    return {tuple(x): list1.count(x) for x in list1}",
    "    return Counter(tuple(x) for x in list1)",
    "    unique_sublists = {}\n    for item in list1:\n        if type(item) == list:\n            item = tuple(item)\n        if item in unique_sublists:\n            unique_sublists[item] += 1\n        else:\n            unique_sublists[item] = 1\n    return unique_sublists\n\nprint(unique_sublists([1, 2, 3, [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],",
    "    return {tuple(i): list1.count(i) for i in list1}",
    "    return {tuple(x):list1.count(x) for x in list1}\n\nprint(unique_sublists([[1,2,3],[1,2,3],[1,2,3]]))",
    "    return Counter([tuple(i) for i in list1])"
  ]
}