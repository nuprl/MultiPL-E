{
  "name": "mbpp_407_rearrange_bigger",
  "language": "py",
  "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n\n    # Find the first index from the right where the digit is less than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no such index exists, the number is in descending order, so it can't be rearranged\n    if i == -1:\n        return -1\n\n    # Find the smallest digit to the right of index i that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of index i\n    digits[i + 1:] = digits[len(digits) - 1: i: -1]\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join([str(x) for x in digits]))\n\n",
    "    # convert to string\n    s = str(n)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(s) - 1):\n        if s[i] < s[i + 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit to the right of the digit found above that is larger than it\n    for j in range(i + 1, len(s)):\n        if s[j] > s[i]:\n            break\n    # swap the digits\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    # reverse the digits to the right of the digit found above\n    s[i + 1:] = reversed(s[i + 1:])\n    # convert back to integer and return\n    return int(\"\".join(s))\n\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(1243))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(20))",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_str = int(n_str)\n    return n_str\n\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(54321))\nprint(rearrange_bigger(56789))\nprint(rearrange_bigger(98765))\nprint(rearrange_bigger(9876))\nprint(rearrange_bigger(9876))\nprint(rearrange_bigger(9))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(0))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(100))\nprint(rearrange_bigger(1000))\nprint(rearrange_bigger(10000))\nprint(rearrange_bigger(100000))\nprint(rearrange_bigger(1000000))\nprint(rearrange_bigger(10000000))\nprint(rearrange_bigger(100000000))\nprint(rearrange_bigger(1000000000))\nprint(rearrange_bigger(10000000000))\nprint(rearrange_bigger(100000000000))\nprint(rearrange_bigger(1000000000000))\nprint(rearrange_bigger(10000000000000))\nprint(rearrange_bigger(100000000000000))\nprint(rearrange_bigger(1000000000000000))\nprint(rearrange_bigger(10000000000000000))\nprint(rearrange_bigger(100000000000000000))\nprint(rearrange_bigger(1000000000000000000))\nprint(rearrange_bigger(10000000000000000000))\nprint(rearrange_bigger(100000000000000000000))\nprint(rearrange_bigger(1000000000000000000000))\nprint(rearrange_bigger(1",
    "    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(digits))\n    return -1\n",
    "    n = str(n)\n    n_list = list(n)\n    n_list.sort(reverse=True)\n    n_list = ''.join(n_list)\n    return int(n_list)\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1\n\n",
    "    num = str(n)\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] > num[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(num) - 1, i - 1, -1):\n        if num[j] > num[i - 1]:\n            break\n\n    num = list(num)\n    num[i - 1], num[j] = num[j], num[i - 1]\n    num[i:] = num[i:][::-1]\n    return int(''.join(num))\n\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n",
    "    nums = list(str(n))\n    for i in range(len(nums)-1, 0, -1):\n        if nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            return int(''.join(nums))\n    return -1\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list.reverse()\n    num_str = ''.join(num_list)\n    return int(num_str)\n",
    "    # convert to string\n    num_str = str(n)\n    # convert to list\n    num_list = list(num_str)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit to the right of the pivot that is larger than the pivot\n    smallest_larger = i\n    for j in range(i + 1, len(num_list)):\n        if num_list[j] > num_list[i - 1] and num_list[j] < num_list[smallest_larger]:\n            smallest_larger = j\n    # swap the pivot with the smallest digit larger than the pivot\n    num_list[i - 1], num_list[smallest_larger] = num_list[smallest_larger], num_list[i - 1]\n    # reverse the digits to the right of the pivot\n    num_list[i:] = num_list[len(num_list) - 1: i - 1: -1]\n    # convert the list to an integer\n    return int(\"\".join(num_list))\n\n",
    "    num = list(str(n))\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] > num[i - 1]:\n            num[i], num[i - 1] = num[i - 1], num[i]\n            return int(\"\".join(num))\n    return -1\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n\nprint(rearrange_bigger(123456789))",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))",
    "    # convert to string\n    n = str(n)\n    # find the pivot\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    # find the next greater digit\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    # swap\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    # reverse\n    n[i:] = n[:i - 1:-1]\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(x) for x in n_list]\n    n_list = [str(x) for x in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return -1\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n    return int(''.join(map(str, digits)))",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n"
  ]
}