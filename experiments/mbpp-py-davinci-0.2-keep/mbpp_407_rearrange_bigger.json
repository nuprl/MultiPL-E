{
  "name": "mbpp_407_rearrange_bigger",
  "language": "py",
  "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n\n    # Find the first index from the right where the digit is less than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no such index exists, the number is in descending order, so it can't be rearranged\n    if i == -1:\n        return -1\n\n    # Find the smallest digit to the right of index i that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of index i\n    digits[i + 1:] = digits[len(digits) - 1: i: -1]\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join([str(x) for x in digits]))\n\n",
    "    # convert to string\n    s = str(n)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(s) - 1):\n        if s[i] < s[i + 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit to the right of the digit found above that is larger than it\n    for j in range(i + 1, len(s)):\n        if s[j] > s[i]:\n            break\n    # swap the digits\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    # reverse the digits to the right of the digit found above\n    s[i + 1:] = reversed(s[i + 1:])\n    # convert back to integer and return\n    return int(\"\".join(s))\n\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(1243))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(20))",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_str = int(n_str)\n    return n_str\n\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(54321))\nprint(rearrange_bigger(56789))\nprint(rearrange_bigger(98765))\nprint(rearrange_bigger(9876))\nprint(rearrange_bigger(9876))\nprint(rearrange_bigger(9))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(0))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(100))\nprint(rearrange_bigger(1000))\nprint(rearrange_bigger(10000))\nprint(rearrange_bigger(100000))\nprint(rearrange_bigger(1000000))\nprint(rearrange_bigger(10000000))\nprint(rearrange_bigger(100000000))\nprint(rearrange_bigger(1000000000))\nprint(rearrange_bigger(10000000000))\nprint(rearrange_bigger(100000000000))\nprint(rearrange_bigger(1000000000000))\nprint(rearrange_bigger(10000000000000))\nprint(rearrange_bigger(100000000000000))\nprint(rearrange_bigger(1000000000000000))\nprint(rearrange_bigger(10000000000000000))\nprint(rearrange_bigger(100000000000000000))\nprint(rearrange_bigger(1000000000000000000))\nprint(rearrange_bigger(10000000000000000000))\nprint(rearrange_bigger(100000000000000000000))\nprint(rearrange_bigger(1000000000000000000000))\nprint(rearrange_bigger(1",
    "    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(digits))\n    return -1\n",
    "    n = str(n)\n    n_list = list(n)\n    n_list.sort(reverse=True)\n    n_list = ''.join(n_list)\n    return int(n_list)\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1\n\n",
    "    num = str(n)\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] > num[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(num) - 1, i - 1, -1):\n        if num[j] > num[i - 1]:\n            break\n\n    num = list(num)\n    num[i - 1], num[j] = num[j], num[i - 1]\n    num[i:] = num[i:][::-1]\n    return int(''.join(num))\n\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n",
    "    nums = list(str(n))\n    for i in range(len(nums)-1, 0, -1):\n        if nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            return int(''.join(nums))\n    return -1\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list.reverse()\n    num_str = ''.join(num_list)\n    return int(num_str)\n",
    "    # convert to string\n    num_str = str(n)\n    # convert to list\n    num_list = list(num_str)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit to the right of the pivot that is larger than the pivot\n    smallest_larger = i\n    for j in range(i + 1, len(num_list)):\n        if num_list[j] > num_list[i - 1] and num_list[j] < num_list[smallest_larger]:\n            smallest_larger = j\n    # swap the pivot with the smallest digit larger than the pivot\n    num_list[i - 1], num_list[smallest_larger] = num_list[smallest_larger], num_list[i - 1]\n    # reverse the digits to the right of the pivot\n    num_list[i:] = num_list[len(num_list) - 1: i - 1: -1]\n    # convert the list to an integer\n    return int(\"\".join(num_list))\n\n",
    "    num = list(str(n))\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] > num[i - 1]:\n            num[i], num[i - 1] = num[i - 1], num[i]\n            return int(\"\".join(num))\n    return -1\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n\nprint(rearrange_bigger(123456789))",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))",
    "    # convert to string\n    n = str(n)\n    # find the pivot\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    # find the next greater digit\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    # swap\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    # reverse\n    n[i:] = n[:i - 1:-1]\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(x) for x in n_list]\n    n_list = [str(x) for x in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return -1\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n    return int(''.join(map(str, digits)))",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n",
    "    n_list = list(str(n))\n    n_list.sort(reverse=True)\n    return int(''.join(n_list))",
    "    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(num_list) - 1, i - 1, -1):\n        if num_list[j] > num_list[i - 1]:\n            break\n    num_list[i - 1], num_list[j] = num_list[j], num_list[i - 1]\n    num_list[i:] = num_list[i:][::-1]\n    return int(''.join([str(i) for i in num_list]))\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    # convert number to string\n    num_str = str(n)\n    # convert string to list\n    num_list = list(num_str)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(num_list) - 1):\n        if num_list[i] < num_list[i + 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit that is greater than the digit at i\n    for j in range(i + 1, len(num_list)):\n        if num_list[j] > num_list[i]:\n            break\n    # swap the digits at i and j\n    num_list[i], num_list[j] = num_list[j], num_list[i]\n    # reverse the digits from i + 1 to the end\n    num_list[i + 1:] = num_list[:i:-1]\n    # convert list to string\n    num_str = ''.join(num_list)\n    # convert string to int\n    num_int = int(num_str)\n    # return the int\n    return num_int\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(\"\".join([str(x) for x in digits]))\n    return -1\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list_str = ''.join(n_list)\n    if n_str == n_list_str:\n        return -1\n    else:\n        return int(n_list_str)\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return -1\n\n",
    "    nums = list(str(n))\n    for i in range(len(nums)-2, -1, -1):\n        if nums[i] < nums[i+1]:\n            for j in range(len(nums)-1, i, -1):\n                if nums[j] > nums[i]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    nums[i+1:] = sorted(nums[i+1:])\n                    return int(''.join(nums))\n    return -1\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n_str) - 1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i + 1:] = reversed(n_str[i + 1:])\n    return int(\"\".join(n_str))",
    "    if n < 10:\n        return -1\n\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n\n    return -1\n",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n_str) - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    num_str = str(n)\n    num_list = [int(i) for i in num_str]\n    num_list.sort(reverse=True)\n    num_list_str = [str(i) for i in num_list]\n    num_str_sorted = ''.join(num_list_str)\n    if num_str_sorted == num_str:\n        return -1\n    else:\n        return int(num_str_sorted)",
    "    nums = list(map(int, str(n)))\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] > nums[i - 1]:\n            nums[i:] = sorted(nums[i:])\n            for j in range(i, len(nums)):\n                if nums[j] > nums[i - 1]:\n                    nums[i - 1], nums[j] = nums[j], nums[i - 1]\n                    break\n            return int(''.join(map(str, nums)))\n    return -1\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    return -1\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[i:][::-1]\n    return int(''.join(n))\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    n = list(n)\n    n[i:] = sorted(n[i:])\n    for j in range(i, len(n)):\n        if n[j] > n[i - 1]:\n            n[i - 1], n[j] = n[j], n[i - 1]\n            break\n    return int(\"\".join(n))",
    "    num_list = list(str(n))\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n    return int(\"\".join(map(str, digits)))\n\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = list(map(int, n_list))\n    n_list = list(map(str, n_list))\n    n_str = \"\".join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    # convert to string\n    n = str(n)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(n) - 1):\n        if n[i] < n[i + 1]:\n            break\n    else:\n        return -1\n\n    # find the smallest digit to the right of i that is greater than n[i]\n    for j in range(i + 1, len(n)):\n        if n[j] > n[i]:\n            break\n\n    # swap n[i] and n[j]\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n\n    # reverse the digits to the right of i\n    n[i + 1:] = reversed(n[i + 1:])\n\n    return int(\"\".join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    for j in range(len(n)-1, i-1, -1):\n        if n[j] > n[i-1]:\n            break\n    n = list(n)\n    n[i-1], n[j] = n[j], n[i-1]\n    n[i:] = n[i:][::-1]\n    return int(''.join(n))\n",
    "    num_str = str(n)\n    for i in range(len(num_str) - 1, 0, -1):\n        if num_str[i] > num_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(num_str) - 1, i - 1, -1):\n        if num_str[j] > num_str[i - 1]:\n            break\n    num_str = num_str[:i - 1] + num_str[j] + num_str[i:j] + num_str[i - 1] + num_str[j + 1:]\n    return int(num_str)\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(\"\".join(map(str, digits)))\n    return -1\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(i) for i in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    return int(''.join(map(str, digits)))\n",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            n_str = n_str[:i - 1] + n_str[i] + n_str[i - 1] + n_str[i + 1:]\n            return int(n_str)\n    return -1\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(\"\".join([str(d) for d in digits]))\n    return -1\n\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len-1, 0, -1):\n        if n_str[i] > n_str[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(n_len-1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i+1:] = sorted(n_str[i+1:])\n    return int(''.join(n_str))\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = reversed(digits[i:])\n    return int(''.join(map(str, digits)))",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(n_str) - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_len = len(n_list)\n    for i in range(n_len - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(''.join(n_list))\n    return -1\n\n",
    "    if n < 10:\n        return -1\n\n    # convert number to list of digits\n    digits = [int(x) for x in str(n)]\n\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1\n\n    # find the smallest digit to the right of i that is greater than digits[i]\n    for j in range(i + 1, len(digits)):\n        if digits[j] > digits[i]:\n            break\n\n    # swap digits[i] and digits[j]\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # reverse the digits to the right of i\n    digits[i + 1:] = digits[:i:-1]\n\n    return int(''.join(map(str, digits)))",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(\"\".join([str(x) for x in digits]))\n    return -1\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = reversed(n[i + 1:])\n    return int(\"\".join(n))\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return -1\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    return -1\n",
    "    n_str = str(n)\n    n_list = [int(i) for i in n_str]\n    n_list.sort(reverse=True)\n    n_list_str = [str(i) for i in n_list]\n    n_str_sorted = ''.join(n_list_str)\n    if n_str_sorted == n_str:\n        return -1\n    else:\n        n_list_sorted = [int(i) for i in n_str_sorted]\n        n_list_sorted.sort()\n        n_list_sorted_str = [str(i) for i in n_list_sorted]\n        n_str_sorted_sorted = ''.join(n_list_sorted_str)\n        return int(n_str_sorted_sorted)\n",
    "    if n < 10:\n        return -1\n    s = list(str(n))\n    i = len(s) - 1\n    while i > 0 and s[i] <= s[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(s) - 1\n    while s[j] <= s[i - 1]:\n        j -= 1\n    s[i - 1], s[j] = s[j], s[i - 1]\n    s[i:] = s[len(s) - 1: i - 1: -1]\n    return int(\"\".join(s))",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n\n    n_str = list(n_str)\n    n_str[i - 1], n_str[j] = n_str[j], n_str[i - 1]\n    n_str[i:] = n_str[i:][::-1]\n    return int(''.join(n_str))\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(\"\".join(n_list))\n    return -1",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join([str(x) for x in digits]))",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(''.join(n_list))\n    return -1",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    return int(''.join(n))\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n",
    "    str_n = str(n)\n    for i in range(len(str_n) - 1, 0, -1):\n        if str_n[i] > str_n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(str_n) - 1, i - 1, -1):\n        if str_n[j] > str_n[i - 1]:\n            break\n    str_n = list(str_n)\n    str_n[i - 1], str_n[j] = str_n[j], str_n[i - 1]\n    str_n[i:] = str_n[i:][::-1]\n    return int(''.join(str_n))\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    return int(n_str)\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(''.join(n_list))\n    return -1\n\n",
    "    # convert to string\n    num_str = str(n)\n    # find the index of the first digit that is smaller than the digit to its right\n    for i in range(len(num_str) - 1):\n        if num_str[i] < num_str[i + 1]:\n            break\n    # if no such digit exists, the number is already the largest possible\n    else:\n        return -1\n    # find the smallest digit to the right of the digit found above that is larger than it\n    for j in range(i + 1, len(num_str)):\n        if num_str[j] > num_str[i]:\n            break\n    # swap the two digits\n    num_str = list(num_str)\n    num_str[i], num_str[j] = num_str[j], num_str[i]\n    # reverse the digits to the right of the digit found above\n    num_str[i + 1:] = reversed(num_str[i + 1:])\n    # convert back to int and return\n    return int(\"\".join(num_str))\n",
    "    num_str = str(n)\n    for i in range(len(num_str) - 1, 0, -1):\n        if num_str[i] > num_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(num_str) - 1, i - 1, -1):\n        if num_str[j] > num_str[i - 1]:\n            break\n    num_str = num_str[:i - 1] + num_str[j] + ''.join(sorted(num_str[i - 1:j] + num_str[j + 1:]))\n    return int(num_str)\n\n",
    "    if n < 10:\n        return -1\n\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n\n    if i == 0:\n        return -1\n\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n\n    return int(''.join(map(str, digits)))",
    "    # convert to string to iterate over digits\n    n = str(n)\n    # start from the end and find the first digit that is smaller than the digit to its right\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit on right side of (i-1)'th digit that is greater than number[i-1]\n    x = n[i - 1]\n    smallest = i\n    for j in range(i + 1, len(n)):\n        if n[j] > x and n[j] < n[smallest]:\n            smallest = j\n    # swap the above found smallest digit with number[i-1]\n    n = list(n)\n    n[i - 1], n[smallest] = n[smallest], n[i - 1]\n    # sort the digits after (i-1) in ascending order\n    n[i:] = sorted(n[i:])\n    return int(''.join(n))",
    "    if n < 10:\n        return -1\n\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n\n    if i <= 0:\n        return -1\n\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n\n    return int(\"\".join(map(str, digits)))\n\n",
    "    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(''.join(s))",
    "    # convert to list of digits\n    digits = [int(x) for x in str(n)]\n    # find the first digit that is smaller than the one to its right\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit to the right of the pivot that is greater than the pivot\n    pivot = digits[i - 1]\n    smallest = i\n    for j in range(i + 1, len(digits)):\n        if digits[j] > pivot and digits[j] < digits[smallest]:\n            smallest = j\n    # swap the pivot with the smallest digit to the right of the pivot\n    digits[i - 1], digits[smallest] = digits[smallest], digits[i - 1]\n    # sort the digits to the right of the pivot\n    digits[i:] = sorted(digits[i:])\n    # convert back to integer\n    return int(''.join(map(str, digits)))",
    "    # convert to string\n    n = str(n)\n    # find the first digit from the right that is smaller than the digit to its right\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit to the right of the pivot that is greater than the pivot\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    # swap the pivot with the smallest digit to the right of the pivot\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    # reverse the digits to the right of the pivot\n    n[i + 1:] = reversed(n[i + 1:])\n    return int(\"\".join(n))",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list.reverse()\n    num_str = \"\".join(num_list)\n    return int(num_str)\n\n",
    "    if n < 10:\n        return -1\n    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    if i == 1 and n[i] <= n[i - 1]:\n        return -1\n    x = n[i - 1]\n    smallest = i\n    for j in range(i + 1, len(n)):\n        if n[j] > x and n[j] < n[smallest]:\n            smallest = j\n    n = list(n)\n    n[i - 1], n[smallest] = n[smallest], n[i - 1]\n    n[i:] = sorted(n[i:])\n    return int(\"\".join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[j], digits[i - 1] = digits[i - 1], digits[j]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(str(d) for d in digits))",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1: i - 1: -1]\n    return int(''.join(map(str, digits)))",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[i:][::-1]\n    return int(''.join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    j = i\n    while j < len(n) and n[j] > n[i - 1]:\n        j += 1\n    n = n[:i - 1] + n[j - 1] + ''.join(sorted(n[i - 1:j - 1] + n[j:]))\n    return int(n)",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    num_list = [int(x) for x in num_list]\n    num_list = [str(x) for x in num_list]\n    num_str = ''.join(num_list)\n    return int(num_str)\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            break\n    else:\n        return -1\n    return int(\"\".join(n_list))\n\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(''.join(num_list))\n    return -1\n",
    "    if n < 10:\n        return -1\n    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            s[i], s[i - 1] = s[i - 1], s[i]\n            return int(''.join(s))\n    return -1\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[i:][::-1]\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)",
    "    if n < 0:\n        return None\n    if n < 10:\n        return n\n    s = str(n)\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            break\n    else:\n        return None\n    for j in range(len(s) - 1, i - 1, -1):\n        if s[j] > s[i - 1]:\n            break\n    s = s[:i - 1] + s[j] + ''.join(sorted(s[i - 1:j] + s[j + 1:]))\n    return int(s)\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1: i - 1: -1]\n    return int(''.join(map(str, digits)))\n",
    "    n_str = str(n)\n    n_str_list = list(n_str)\n    for i in range(len(n_str_list) - 1, 0, -1):\n        if n_str_list[i] > n_str_list[i - 1]:\n            n_str_list[i], n_str_list[i - 1] = n_str_list[i - 1], n_str_list[i]\n            return int(''.join(n_str_list))\n    return -1",
    "    # convert to string\n    n = str(n)\n    # find the first decreasing digit\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit greater than n[i-1]\n    smallest = i\n    for j in range(i + 1, len(n)):\n        if n[j] > n[i - 1] and n[j] < n[smallest]:\n            smallest = j\n    # swap the digits\n    n = list(n)\n    n[i - 1], n[smallest] = n[smallest], n[i - 1]\n    # sort the digits after n[i-1]\n    n[i:] = sorted(n[i:])\n    # convert back to int\n    return int(\"\".join(n))",
    "    n_str = str(n)\n    n_list = [int(i) for i in n_str]\n    n_list_sorted = sorted(n_list)\n    n_list_sorted.reverse()\n    n_list_sorted_str = [str(i) for i in n_list_sorted]\n    n_list_sorted_str = ''.join(n_list_sorted_str)\n    n_list_sorted_int = int(n_list_sorted_str)\n    if n_list_sorted_int == n:\n        return -1\n    else:\n        return n_list_sorted_int",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = ''.join(n_list)\n    n_list = int(n_list)\n    if n_list > n:\n        return n_list\n    else:\n        return -1\n",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(''.join(n_list))\n    return -1\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = list(n_str)\n    n_str[i - 1], n_str[j] = n_str[j], n_str[i - 1]\n    n_str[i:] = n_str[i:][::-1]\n    return int(\"\".join(n_str))",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 2, -1, -1):\n        if n_str[i] < n_str[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i + 1:] = n_str[i + 1:][::-1]\n    return int(''.join(n_str))\n\n",
    "    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(\"\".join(s))\n\n",
    "    s = list(str(n))\n    for i in range(len(s)-1, 0, -1):\n        if s[i] > s[i-1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i-1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i-1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(4321))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(21))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_bigger(534976))\nprint(rearrange_big",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = n[:i - 1] + n[j] + ''.join(sorted(n[i - 1:j] + n[j + 1:]))\n    return int(n)\n\n",
    "    # convert to string\n    num = str(n)\n    # find the index of the first digit that is smaller than the digit to its right\n    for i in range(len(num) - 1):\n        if num[i] < num[i + 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit to the right of the pivot that is larger than the pivot\n    for j in range(i + 1, len(num)):\n        if num[j] > num[i]:\n            break\n    # swap the pivot with the smallest digit to its right\n    num = list(num)\n    num[i], num[j] = num[j], num[i]\n    # reverse the digits to the right of the pivot\n    num[i + 1:] = reversed(num[i + 1:])\n    return int(\"\".join(num))",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(\"\".join(n_list))\n    return -1\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    return -1\n\n",
    "    s = list(str(n))\n    for i in range(len(s)-1, 0, -1):\n        if s[i] > s[i-1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i-1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i-1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    if n < 0:\n        return None\n    if n < 10:\n        return n\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return None\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))",
    "    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list.reverse()\n    return int(''.join(num_list))\n",
    "    num_str = str(n)\n    num_len = len(num_str)\n    for i in range(num_len - 1, 0, -1):\n        if num_str[i] > num_str[i - 1]:\n            break\n    if i == 0:\n        return -1\n    x = num_str[i - 1]\n    smallest = i\n    for j in range(i + 1, num_len):\n        if num_str[j] > x and num_str[j] < num_str[smallest]:\n            smallest = j\n    num_str = list(num_str)\n    num_str[i - 1], num_str[smallest] = num_str[smallest], num_str[i - 1]\n    num_str[i:] = num_str[i:][::-1]\n    return int(''.join(num_str))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    # convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit to the right of i that is bigger than digits[i - 1]\n    j = i\n    for k in range(i + 1, len(digits)):\n        if digits[k] > digits[i - 1] and digits[k] < digits[j]:\n            j = k\n    # swap digits[i - 1] and digits[j]\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    # reverse the digits to the right of i\n    digits[i:] = digits[len(digits) - 1: i - 1: -1]\n    # convert the list of digits back to a number\n    return int(''.join([str(x) for x in digits]))\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(\"\".join([str(x) for x in digits]))\n    return -1\n",
    "    s = list(str(n))\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] < s[i + 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > t[0], t))\n            t.remove(m)\n            t.sort()\n            s[i:] = [m] + t\n            return int(\"\".join(s))\n    return -1\n",
    "    num_list = list(str(n))\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = \"\".join(n_list)\n    n_int = int(n_str)\n    return n_int\n",
    "    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(num_list) - 1, i - 1, -1):\n        if num_list[j] > num_list[i - 1]:\n            break\n    num_list[i - 1], num_list[j] = num_list[j], num_list[i - 1]\n    num_list[i:] = num_list[i:][::-1]\n    return int(''.join([str(i) for i in num_list]))\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)",
    "    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n\n    # Find the first index from the right where the digit is less than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no such index exists, the number is already the highest possible\n    if i == -1:\n        return -1\n\n    # Find the smallest digit to the right of i that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap digits[i] and digits[j]\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of i\n    digits[i + 1:] = reversed(digits[i + 1:])\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join([str(x) for x in digits]))\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    n = list(n)\n    n[i:] = sorted(n[i:])\n    for j in range(i, len(n)):\n        if n[j] > n[i - 1]:\n            n[i - 1], n[j] = n[j], n[i - 1]\n            break\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len-1, 0, -1):\n        if n_str[i] > n_str[i-1]:\n            break\n    else:\n        return -1\n    n_str = list(n_str)\n    n_str[i], n_str[i-1] = n_str[i-1], n_str[i]\n    n_str = ''.join(n_str)\n    return int(n_str)\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n\n    n_str = list(n_str)\n    n_str[i - 1], n_str[j] = n_str[j], n_str[i - 1]\n    n_str[i:] = n_str[i:][::-1]\n    return int(''.join(n_str))",
    "    # convert to string\n    num = str(n)\n    # find the first decreasing digit\n    for i in range(len(num) - 1, 0, -1):\n        if num[i] > num[i - 1]:\n            break\n    # if no such digit, return -1\n    else:\n        return -1\n    # find the smallest digit larger than num[i - 1]\n    for j in range(len(num) - 1, i - 1, -1):\n        if num[j] > num[i - 1]:\n            break\n    # swap num[i - 1] and num[j]\n    num = num[:i - 1] + num[j] + num[i:j] + num[i - 1] + num[j + 1:]\n    # sort the digits after num[i - 1]\n    return int(num[:i] + ''.join(sorted(num[i:])))\n",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(\"\".join(n_list))\n    return -1\n\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n",
    "    num_list = list(str(n))\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(num_list) - 1, i - 1, -1):\n        if num_list[j] > num_list[i - 1]:\n            num_list[i - 1], num_list[j] = num_list[j], num_list[i - 1]\n            break\n    num_list[i:] = num_list[i:][::-1]\n    return int(\"\".join(num_list))\n\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    num_str = ''.join(num_list)\n    return int(num_str)\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    n = list(str(n))\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            n[i], n[i - 1] = n[i - 1], n[i]\n            return int(''.join(n))\n    return -1\n",
    "    num_str = str(n)\n    for i in range(len(num_str) - 1, 0, -1):\n        if num_str[i] > num_str[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(num_str) - 1, i - 1, -1):\n        if num_str[j] > num_str[i - 1]:\n            break\n\n    num_str = list(num_str)\n    num_str[i - 1], num_str[j] = num_str[j], num_str[i - 1]\n    num_str[i:] = num_str[i:][::-1]\n    return int(''.join(num_str))\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(i) for i in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(i) for i in digits]))\n    return -1\n",
    "    # convert the number to a string to make it easier to work with\n    s = str(n)\n    # convert the string to a list of characters for easier manipulation\n    l = list(s)\n    # start from the right and find the first character that is smaller than the next character\n    for i in range(len(l) - 1, 0, -1):\n        if l[i] > l[i - 1]:\n            break\n    # if no such character is found, the number is the largest possible\n    else:\n        return -1\n    # start from the right and find the first character that is larger than l[i - 1]\n    for j in range(len(l) - 1, i - 1, -1):\n        if l[j] > l[i - 1]:\n            break\n    # swap the two characters found\n    l[i - 1], l[j] = l[j], l[i - 1]\n    # reverse the suffix\n    l[i:] = l[len(l) - 1: i - 1: -1]\n    # convert the result back to an integer and return it\n    return int(\"\".join(l))\n",
    "    str_n = str(n)\n    for i in range(len(str_n) - 1, 0, -1):\n        if str_n[i] > str_n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(str_n) - 1, i - 1, -1):\n        if str_n[j] > str_n[i - 1]:\n            break\n    str_n = list(str_n)\n    str_n[i - 1], str_n[j] = str_n[j], str_n[i - 1]\n    str_n[i:] = str_n[len(str_n) - 1: i - 1: -1]\n    return int(''.join(str_n))",
    "    # Convert to string, sort, convert back to int\n    return int(''.join(sorted(str(n), reverse=True)))\n\n",
    "    if n < 10:\n        return -1\n    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    if i == 1 and n[i] <= n[i - 1]:\n        return -1\n    x = n[i - 1]\n    smallest = i\n    for j in range(i + 1, len(n)):\n        if n[j] > x and n[j] < n[smallest]:\n            smallest = j\n    n = list(n)\n    n[i - 1], n[smallest] = n[smallest], n[i - 1]\n    n[i:] = sorted(n[i:])\n    return int(\"\".join(n))\n\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(4321))\nprint(rearrange_bigger(534976))",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    # get digits of the number\n    digits = [int(x) for x in str(n)]\n    # find the first decreasing digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit greater than the decreasing digit\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    # swap the digits\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    # sort the digits after the decreasing digit\n    digits[i:] = sorted(digits[i:])\n    # return the number\n    return int(''.join([str(x) for x in digits]))\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1: i - 1: -1]\n    return int(''.join(n))\n\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1: i - 1: -1]\n    return int(\"\".join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    return int(\"\".join(n))\n\n",
    "    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n    return int(''.join(map(str, digits)))\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = list(n_str)\n    n_str[i - 1], n_str[j] = n_str[j], n_str[i - 1]\n    n_str[i:] = n_str[i:][::-1]\n    return int(''.join(n_str))\n\n",
    "    s = list(str(n))\n    for i in range(len(s)-1, 0, -1):\n        if s[i] > s[i-1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i-1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i-1] + [m] + t\n            return int(\"\".join(s))\n    return -1",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = reversed(n[i + 1:])\n    return int(\"\".join(n))\n\n",
    "    n_str = str(n)\n    for i in range(len(n_str)-1, 0, -1):\n        if n_str[i] > n_str[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n_str)-1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i+1:] = reversed(n_str[i+1:])\n    return int(''.join(n_str))\n",
    "    # convert to string\n    s = str(n)\n    # find the first digit that is smaller than the digit to its right\n    for i in range(len(s) - 1):\n        if s[i] < s[i + 1]:\n            break\n    else:\n        return -1\n    # find the smallest digit to the right of i that is greater than s[i]\n    smallest = s[i + 1]\n    smallest_index = i + 1\n    for j in range(i + 1, len(s)):\n        if s[j] > s[i] and s[j] < smallest:\n            smallest = s[j]\n            smallest_index = j\n    # swap s[i] and s[smallest_index]\n    s = s[:i] + smallest + s[i + 1:smallest_index] + s[i] + s[smallest_index + 1:]\n    # sort the digits to the right of i\n    s = s[:i + 1] + \"\".join(sorted(s[i + 1:]))\n    return int(s)\n",
    "    # convert to string\n    s = str(n)\n    # find the first decreasing digit\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            break\n    # if no such digit exists, return -1\n    else:\n        return -1\n    # find the smallest digit that is greater than s[i - 1]\n    # and swap it with s[i - 1]\n    for j in range(len(s) - 1, i - 1, -1):\n        if s[j] > s[i - 1]:\n            s[i - 1], s[j] = s[j], s[i - 1]\n            break\n    # sort the digits after s[i - 1]\n    s[i:] = sorted(s[i:])\n    # return the number\n    return int(s)",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(x) for x in digits]))\n    return -1\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1: i - 1: -1]\n    return int(\"\".join(n))",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(1234567890))\nprint(rearrange_bigger(12345678))\nprint(rearrange_bigger(1234567))\nprint(rearrange_bigger(123456))\nprint(rearrange_bigger(12345))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(1))\nprint(rearrange_bigger(0))",
    "    n_str = str(n)\n    n_list = [int(x) for x in n_str]\n    n_list.sort(reverse=True)\n    n_list_str = [str(x) for x in n_list]\n    return int(''.join(n_list_str))\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    pass",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_len = len(n_list)\n    for i in range(n_len - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            break\n    if i == 0:\n        return -1\n    x = n_list[i - 1]\n    smallest = i\n    for j in range(i + 1, n_len):\n        if n_list[j] > x and n_list[j] < n_list[smallest]:\n            smallest = j\n    n_list[smallest], n_list[i - 1] = n_list[i - 1], n_list[smallest]\n    n_list[i:] = sorted(n_list[i:])\n    return int(''.join(n_list))\n",
    "    # convert to string\n    num = str(n)\n    # find the pivot point\n    for i in range(len(num)-1, 0, -1):\n        if num[i] > num[i-1]:\n            pivot = i-1\n            break\n    else:\n        return -1\n    # find the rightmost successor to the pivot\n    for j in range(len(num)-1, pivot, -1):\n        if num[j] > num[pivot]:\n            successor = j\n            break\n    # swap the pivot with the successor\n    num = list(num)\n    num[pivot], num[successor] = num[successor], num[pivot]\n    # reverse the suffix\n    num[pivot+1:] = num[:pivot:-1]\n    return int(\"\".join(num))\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    x = n[i - 1]\n    smallest = i\n    for j in range(i + 1, len(n)):\n        if n[j] > x and n[j] < n[smallest]:\n            smallest = j\n    n = list(n)\n    n[i - 1], n[smallest] = n[smallest], n[i - 1]\n    n[i:] = reversed(n[i:])\n    return int(\"\".join(n))\n\n",
    "    n_list = list(str(n))\n    for i in range(len(n_list) - 1, 0, -1):\n        if n_list[i] > n_list[i - 1]:\n            n_list[i], n_list[i - 1] = n_list[i - 1], n_list[i]\n            return int(\"\".join(n_list))\n    return -1\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n)-1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = reversed(n[i + 1:])\n    return int(''.join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1: i - 1: -1]\n    return int(''.join(n))\n\n",
    "    if n < 10:\n        return -1\n    n = str(n)\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[i:][::-1]\n    return int(''.join(n))\n\n",
    "    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    else:\n        return -1\n    for j in range(len(n)-1, i-1, -1):\n        if n[j] > n[i-1]:\n            break\n    n = list(n)\n    n[i-1], n[j] = n[j], n[i-1]\n    n[i:] = n[len(n)-1:i-1:-1]\n    return int(''.join(n))\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    else:\n        return -1\n    num_list[i:] = sorted(num_list[i:])\n    for j in range(i, len(num_list)):\n        if num_list[j] > num_list[i - 1]:\n            break\n    num_list[i - 1], num_list[j] = num_list[j], num_list[i - 1]\n    return int(''.join(num_list))\n",
    "    if n < 10:\n        return -1\n    s = list(str(n))\n    i = len(s) - 1\n    while i > 0 and s[i - 1] >= s[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(s) - 1\n    while s[j] <= s[i - 1]:\n        j -= 1\n    s[i - 1], s[j] = s[j], s[i - 1]\n    s[i:] = reversed(s[i:])\n    return int(\"\".join(s))",
    "    if n < 10:\n        return -1\n    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            break\n    if i == 1 and num_list[i] <= num_list[i - 1]:\n        return -1\n    x = num_list[i - 1]\n    smallest = i\n    for j in range(i + 1, len(num_list)):\n        if num_list[j] > x and num_list[j] < num_list[smallest]:\n            smallest = j\n    num_list[smallest], num_list[i - 1] = num_list[i - 1], num_list[smallest]\n    num_list[i:] = sorted(num_list[i:])\n    return int(''.join(map(str, num_list)))\n",
    "    s = list(str(n))\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] > s[i - 1]:\n            t = s[i:]\n            m = min(filter(lambda x: x > s[i - 1], t))\n            t.remove(m)\n            t.sort()\n            s = s[:i - 1] + [m] + t\n            return int(\"\".join(s))\n    return -1\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list.reverse()\n    num_str = ''.join(num_list)\n    return int(num_str)\n",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = n[:i:-1]\n    return int(''.join(n))\n\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(4321))\nprint(rearrange_bigger(534976))",
    "    n = list(str(n))\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            n[i], n[i-1] = n[i-1], n[i]\n            return int(''.join(n))\n    return -1\n",
    "    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join([str(i) for i in num_list]))\n    return -1\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = n_str[:i - 1] + n_str[j] + ''.join(sorted(n_str[i - 1:j] + n_str[j + 1:]))\n    return int(n_str)",
    "    if n < 10:\n        return -1\n    digits = [int(i) for i in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1 : i - 1 : -1]\n    return int(\"\".join(map(str, digits)))\n\n",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n) - 1, i, -1):\n        if n[j] > n[i]:\n            break\n    n = list(n)\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = reversed(n[i + 1:])\n    return int(\"\".join(n))",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n"
  ]
}