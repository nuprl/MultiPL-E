{
  "name": "mbpp_476_big_sum",
  "language": "py",
  "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 4\n    assert candidate([-1, 2, 3, 4]) == 3\n    assert candidate([2, 3, 6]) == 8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n\nprint(big_sum([1, 2, 3, 4, 5]))",
    "    return max(nums) + min(nums)\n\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n",
    "    return max(nums) + min(nums)\n\nprint(big_sum([1, 2, 3, 4, 5]))\nprint(big_sum([-10, -5, -1, -2, -3]))\nprint(big_sum([-1, -2, -3, -4, -5]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "    return max(nums) + min(nums)\n"
  ]
}