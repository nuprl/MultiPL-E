{
  "name": "mbpp_580_extract_even",
  "language": "py",
  "prompt": "from typing import Tuple, Union\n\ndef extract_even(test_tuple: Tuple[Union[int, Tuple[Union[int, Tuple[int]]]]]) -> Tuple[Union[int, Tuple[Union[int, Tuple[int]]]]]:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n\ndef test_check():\n    check(extract_even)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple) and extract_even(i))\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple) and extract_even(i))\n",
    "    return tuple(x for x in test_tuple if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple))",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple) and extract_even(i))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n\nprint(extract_even((1, 2, (3, 4), (5, 6, 7), 8, (9, 10))))",
    "    return tuple(i for i in test_tuple if not isinstance(i, tuple) or extract_even(i))\n",
    "    if isinstance(test_tuple, tuple):\n        return tuple(extract_even(i) for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n    else:\n        return test_tuple\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tuple if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple) and extract_even(x))",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple) and extract_even(i))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n",
    "    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, test_tuple))\n"
  ]
}