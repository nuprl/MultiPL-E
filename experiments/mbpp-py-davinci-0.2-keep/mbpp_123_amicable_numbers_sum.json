{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "py",
  "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(999) == 504\n    assert candidate(9999) == 31626\n    assert candidate(99) == 0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        for j in range(i + 1, limit):\n            if amicable_numbers_check(i, j):\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_proper_divisors(sum_proper_divisors(i)) and i != sum_proper_divisors(i)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum_of_divisors(i)\n            if i == sum_of_divisors(divisors_sum) and i != divisors_sum:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        d_i = sum_of_divisors(i)\n        d_d_i = sum_of_divisors(d_i)\n        if d_d_i == i and d_i != i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(d_i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    return sum(amicable_numbers_list(limit))\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_divisors = sum_of_divisors(i)\n        if sum_divisors > i and sum_of_divisors(sum_divisors) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_divisors)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            divisors = get_divisors(i)\n            divisors_sum = sum(divisors)\n            if divisors_sum > i:\n                divisors_sum_divisors = get_divisors(divisors_sum)\n                divisors_sum_divisors_sum = sum(divisors_sum_divisors)\n                if divisors_sum_divisors_sum == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_divisors(sum_divisors(i)) and i != sum_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.append(a)\n            amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum(get_divisors(i))\n            if i == sum(get_divisors(divisors_sum)) and i != divisors_sum:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if sum_of_divisors(i) != i and sum_of_divisors(sum_of_divisors(i)) == i\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of_number(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of_number(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            if a != i:\n                b = sum_of_divisors(a)\n                if b == i:\n                    amicable_numbers.append(a)\n                    amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(get_divisors(i))\n        if divisors_sum != i and sum(get_divisors(divisors_sum)) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i == sum_of_divisors(j) and i != j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_divisors = sum_divisors_of_number(i)\n            if sum_divisors != i:\n                if sum_divisors == sum_divisors_of_number(sum_divisors):\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_divisors)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i == sum_of_divisors(j) and i != j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors(i))\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if j != i and sum_of_divisors(j) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            d_i = sum_of_divisors(i)\n            if d_i > i:\n                d_d_i = sum_of_divisors(d_i)\n                if d_d_i == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(d_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i and sum_of_divisors <= limit:\n            if sum_of_divisors_of(sum_of_divisors) == i:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and i != a:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i == sum_of_divisors(j) and i != j:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i == sum_of_divisors(j) and i != j:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_divisors_i = sum_divisors(i)\n        sum_divisors_j = sum_divisors(sum_divisors_i)\n        if i == sum_divisors_j and i != sum_divisors_i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_divisors_i = sum_divisors(i)\n        if sum_divisors_i > i:\n            sum_divisors_j = sum_divisors(sum_divisors_i)\n            if sum_divisors_j == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_divisors_i = sum_divisors(i)\n        if sum_divisors_i > i:\n            sum_divisors_sum_divisors_i = sum_divisors(sum_divisors_i)\n            if sum_divisors_sum_divisors_i == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(divisors(i))\n        if i != divisors_sum and sum(divisors(divisors_sum)) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.add(i)\n            amicable_numbers.add(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if j > i and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if x != sum_proper_divisors(x) and x == sum_proper_divisors(sum_proper_divisors(x))\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(get_divisors(i))\n        if i == sum(get_divisors(divisors_sum)) and i != divisors_sum:\n            amicable_numbers.append(i)\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        amicable_pair = sum_of_divisors(i)\n        if sum_of_divisors(amicable_pair) == i and i != amicable_pair:\n            amicable_numbers.append(i)\n            amicable_numbers.append(amicable_pair)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if x == sum_proper_divisors(sum_proper_divisors(x)) and x != sum_proper_divisors(x)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            d1 = sum_of_divisors(i)\n            d2 = sum_of_divisors(d1)\n            if d2 == i and d1 != d2:\n                amicable_numbers.append(i)\n                amicable_numbers.append(d1)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i == sum_of_divisors(j) and i != j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            divisors_sum = sum(get_divisors(i))\n            if sum(get_divisors(divisors_sum)) == i and divisors_sum != i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum(divisors(i))\n            if i == sum(divisors(divisors_sum)) and i != divisors_sum:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.add(i)\n                amicable_numbers.add(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            divisor_sum = sum_of_divisors(i)\n            if divisor_sum != i:\n                divisor_sum_of_divisor_sum = sum_of_divisors(divisor_sum)\n                if divisor_sum_of_divisor_sum == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(divisor_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if sum_of_divisors(j) == i and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        if a == i:\n            continue\n        b = sum_of_divisors(a)\n        if b == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.append(i)\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if sum_of_divisors(sum_of_divisors(i)) == i and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors != i and sum_of_divisors_of(sum_of_divisors) == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum(divisors(i))\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum(divisors(sum_of_divisors))\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum(divisors(sum(divisors(i)))) and i != sum(divisors(i))\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum(divisors(i))\n            if i == sum(divisors(divisors_sum)) and i != divisors_sum:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors(i))\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i and sum_of_divisors_of(sum_of_divisors) == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if is_amicable(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors(i))\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors_i = sum_of_divisors(i)\n            sum_of_divisors_sum_of_divisors_i = sum_of_divisors(sum_of_divisors_i)\n            if i == sum_of_divisors_sum_of_divisors_i and i != sum_of_divisors_i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i and sum_of_divisors_of(sum_of_divisors) == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(divisors(i))\n        if i == sum(divisors(divisors_sum)) and i != divisors_sum:\n            amicable_numbers.append(i)\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        if a == i:\n            continue\n        b = sum_of_divisors(a)\n        if b == i:\n            amicable_numbers.append(a)\n            amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i != j and sum_of_divisors(j) == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(a)\n                amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if is_amicable(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_proper_divisors(i))\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors_i = sum_of_divisors(i)\n        if sum_of_divisors_i > i:\n            sum_of_divisors_j = sum_of_divisors(sum_of_divisors_i)\n            if sum_of_divisors_j == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if x != sum_of_divisors(x) and x == sum_of_divisors(sum_of_divisors(x))\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_proper_divisors(i)\n        if i == sum_of_proper_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            j = sum_of_divisors(i)\n            if i != j and sum_of_divisors(j) == i:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum_of_divisors(i)\n        if divisors_sum > i:\n            divisors_sum_of_divisors = sum_of_divisors(divisors_sum)\n            if divisors_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i and sum_of_divisors_of(sum_of_divisors) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if amicable_numbers_check(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(amicable_numbers_check(i))\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit)\n            if amicable_numbers(x, sum_of_divisors(x))\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_proper_divisors(sum_proper_divisors(i)) and i != sum_proper_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i and sum_of_divisors_of(sum_of_divisors) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if b == i and a != b:\n                amicable_numbers.append(a)\n                amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors_i = sum_of_divisors(i)\n            sum_of_divisors_sum_of_divisors_i = sum_of_divisors(sum_of_divisors_i)\n            if i == sum_of_divisors_sum_of_divisors_i and i != sum_of_divisors_i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if amicable_numbers(i, proper_divisors(i))\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_proper_divisors(i)\n        if i == sum_of_proper_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_proper_divisors(sum_proper_divisors(i))\n            and i != sum_proper_divisors(i)\n        ]\n    )\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(divisors(i))\n        if i == sum(divisors(divisors_sum)) and i != divisors_sum:\n            amicable_numbers.append(i)\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.append(a)\n            amicable_numbers.append(b)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum(get_divisors(i))\n        if i == sum(get_divisors(divisors_sum)) and i != divisors_sum:\n            amicable_numbers.add(i)\n            amicable_numbers.add(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_divisors = sum_of_divisors(i)\n        if sum_divisors > i:\n            sum_divisors_of_sum_divisors = sum_of_divisors(sum_divisors)\n            if sum_divisors_of_sum_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of_number(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of_number(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_proper_divisors(sum_proper_divisors(i)) and i != sum_proper_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum(divisors(i))\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum(divisors(sum_of_divisors))\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum_of_divisors(i)\n        if i == sum_of_divisors(divisors_sum) and i != divisors_sum:\n            amicable_numbers.append(i)\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if is_amicable(i):\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors(i))\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors != i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors_i = sum_of_divisors(i)\n        sum_of_divisors_j = sum_of_divisors(sum_of_divisors_i)\n        if sum_of_divisors_j == i and sum_of_divisors_i != sum_of_divisors_j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_of_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors != i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum(divisors(i))\n            if sum(divisors(divisors_sum)) == i and divisors_sum != i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            a = sum_of_divisors(i)\n            b = sum_of_divisors(a)\n            if i == b and a != b:\n                amicable_numbers.append(i)\n                amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_divisors(sum_divisors(i)) and i != sum_divisors(i)\n        ]\n    )\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if x == sum_divisors(sum_divisors(x)) and x != sum_divisors(x)\n        ]\n    )\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors == i:\n            continue\n        sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n        if sum_of_divisors_of_sum_of_divisors == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if x == sum_of_divisors(sum_of_divisors(x)) and x != sum_of_divisors(x)\n        ]\n    )\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if amicable_numbers(i, sum_of_divisors(i))\n        ]\n    )\n\n",
    "    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if j > i and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_divisors_i = sum_divisors(i)\n        sum_divisors_j = sum_divisors(sum_divisors_i)\n        if sum_divisors_j == i and sum_divisors_i != sum_divisors_j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_divisors_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if sum_of_divisors(sum_of_divisors(i)) == i\n            and sum_of_divisors(i) != i\n        ]\n    )\n\n",
    "    return sum(\n        [\n            x\n            for x in range(1, limit + 1)\n            if amicable_numbers_sum_of_divisors(x) != x\n            and amicable_numbers_sum_of_divisors(amicable_numbers_sum_of_divisors(x)) == x\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum(get_divisors(i))\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum(get_divisors(sum_of_divisors))\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    total = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            total += i\n    return total\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            divisors_sum = sum(get_divisors(i))\n            if i == sum(get_divisors(divisors_sum)) and i != divisors_sum:\n                amicable_numbers.append(i)\n                amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n\n"
  ]
}