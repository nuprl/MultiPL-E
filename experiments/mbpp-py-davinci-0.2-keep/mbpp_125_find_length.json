{
  "name": "mbpp_125_find_length",
  "language": "py",
  "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('11000010001') == 6\n    assert candidate('10111') == 1\n    assert candidate('11011101100101') == 2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    max_len = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == count_one:\n            max_len = max(max_len, count_zero + count_one)\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == \"0\":\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == count_one:\n            max_len = max(max_len, count_zero + count_one)\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0)\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        if count in hash_map:\n            max_length = max(max_length, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        elif count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_str = string[i:j + 1]\n            diff = abs(sub_str.count('0') - sub_str.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        elif count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = max(max_len, count)\n    return max_len\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count(\"0\") == string[i:j + 1].count(\"1\"):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_len = 0\n    curr_len = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            curr_len += 1\n        else:\n            curr_len -= 1\n        if curr_len < 0:\n            curr_len = 0\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"
  ]
}