{
  "name": "mbpp_791_remove_nested",
  "language": "py",
  "prompt": "from typing import Tuple, Union\n\ndef remove_nested(test_tup: Tuple[Union[int, Tuple[int]]]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12)\n\ndef test_check():\n    check(remove_nested)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if type(i) != tuple)\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, (3, 4), (5, 6), (7, 8))))\nprint(remove_nested((1, 2, (3, 4), (5, 6), (7, 8), (9, 10))))",
    "    res = []\n    for i in test_tup:\n        if type(i) == int:\n            res.append(i)\n        else:\n            for j in i:\n                res.append(j)\n    return tuple(res)\n\nprint(remove_nested((1, 2, 3, (4, 5), 6, (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if type(i) != tuple)\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5))))\nprint(remove_nested((1, 2, 3, (4, 5, (6, 7)))))\nprint(remove_nested((1, 2, 3, (4, 5, (6, 7, (8, 9))))))\nprint(remove_nested((1, 2, 3, (4, 5, (6, 7, (8, 9, (10, 11)))))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2, 3), (2, 3, 4), (3, 4, 5))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    res = []\n    for i in test_tup:\n        if isinstance(i, int):\n            res.append(i)\n        else:\n            res.extend(remove_nested(i))\n    return tuple(res)\n\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))))\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    new_tup = []\n    for i in test_tup:\n        if type(i) == int:\n            new_tup.append(i)\n        else:\n            for j in i:\n                new_tup.append(j)\n    return tuple(new_tup)\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, (3, 4), (5, 6, 7), 8)))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, (3, 4), (5, 6), 7, (8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1,2,3,(4,5,6),7,8,9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1,2,3,(4,5,6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6), (7, 8))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, (8, 9, 10))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\ntest_tup = (1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(remove_nested(test_tup))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12), (13, 14, 15))))",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup += (j,)\n        else:\n            new_tup += (i,)\n    return new_tup\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5), (6, 7, 8))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if type(i) != tuple)\n\nprint(remove_nested((1, (2, 3), 4, (5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    new_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup += (item,)\n    return new_tup",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36), (37, 38, 39))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36), (37, 38, 39), (40, 41, 42), (43, 44, 45",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5), 6, (7, 8))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\ntest_tup = (1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(remove_nested(test_tup))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5))))\nprint(remove_nested((1, 2, 3, (4, 5), (6, 7))))\nprint(remove_nested((1, 2, 3, (4, 5), (6, 7), (8, 9, 10))))\nprint(remove_nested((1, 2, 3, (4, 5), (6, 7), (8, 9, 10), (11, 12, 13, 14))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10, (11, 12, 13, (14, 15, 16, (17, 18, 19, 20)))))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))\nprint(remove_nested(((1, 2), (3, 4), 5, 6)))\nprint(remove_nested(((1, 2), (3, 4), (5, 6), (7, 8))))\nprint(remove_nested(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))))",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == int:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, (8, 9, 10))))",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, (2, 3), 4, (5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple([x for x in test_tup if not isinstance(x, tuple)])\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5), (6, 7, 8))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, (3, 4), (5, 6, 7), 8, 9)))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1,2,3,(4,5,6),7,8,9)))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, (2, 3), (4, (5, 6), 7))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, (9, 10))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\ntest_tup = (1, (2, 3), (4, (5, 6), 7), 8, 9, (10, 11))\nprint(remove_nested(test_tup))",
    "    return tuple([i for i in test_tup if type(i) is int])\n\nprint(remove_nested((1,2,3,(4,5,6))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6), (7, 8))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6, (7, 8, 9)))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12), (13, 14, 15))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9)))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12))))\nprint(remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12), (13, 14, 15))))",
    "    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n\ntest_tup = (1, (2, 3), (4, (5, 6), 7), 8, (9, 10))\nprint(remove_nested(test_tup))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    new_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup += (item,)\n    return new_tup\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n\nprint(remove_nested(((1, 2, 3), (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(item for item in test_tup if not isinstance(item, tuple))\n\nprint(remove_nested((1, (2, 3), (4, (5, 6), 7))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1,2,3,(4,5,6))))\nprint(remove_nested((1,2,3,(4,5,6),(7,8,9))))\nprint(remove_nested((1,2,3,(4,5,6),(7,8,9),(10,11,12))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\n\nprint(remove_nested((1, 2, 3, (4, 5, 6), (7, 8, 9))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5), 6, (7, 8))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\nprint(remove_nested((1, 2, 3, (4, 5), 6, (7, 8))))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            continue\n        else:\n            new_tup += (i,)\n    return new_tup\n\nprint(remove_nested((1,2,3,4,5,6,7,8,9,10)))\nprint(remove_nested((1,2,(3,4),5,6,7,8,9,10)))\nprint(remove_nested((1,2,(3,4),5,6,7,8,9,10,(11,12))))\nprint(remove_nested((1,2,(3,4),5,6,7,8,9,10,(11,12,(13,14)))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "    return tuple(x for x in test_tup if not isinstance(x, tuple))\n\nprint(remove_nested((1, (2, 3), (4, (5, 6), 7))))",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n\n",
    "    return tuple(i for i in test_tup if not isinstance(i, tuple))\n"
  ]
}