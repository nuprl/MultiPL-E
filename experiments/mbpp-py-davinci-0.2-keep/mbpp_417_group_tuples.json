{
  "name": "mbpp_417_group_tuples",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef group_tuples(Input: List[Tuple[str]]) -> List[Tuple[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    # TODO: Implement me\n    return []",
    "    # TODO: Implement me\n    return []",
    "    return list(set(Input))\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    # TODO: Write code here\n    pass\n",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return list(set(Input))\n\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]))",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(list(set(i)) for i in zip(*Input))]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    output = []\n    for i in range(len(Input)):\n        if Input[i][0] not in [x[0] for x in output]:\n            output.append(Input[i])\n    return output\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    return [tuple(list(set(x[0] for x in Input)))]\n",
    "    return [Input[0]] + [tup for tup in Input if tup[0] == Input[0][0]]\n",
    "    # TODO: Implement Me\n    return []",
    "    return [tuple(set(i)) for i in zip(*Input)]\n"
  ]
}