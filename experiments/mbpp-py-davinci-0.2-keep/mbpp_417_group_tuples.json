{
  "name": "mbpp_417_group_tuples",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef group_tuples(Input: List[Tuple[str]]) -> List[Tuple[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    # TODO: Implement me\n    return []",
    "    # TODO: Implement me\n    return []",
    "    return list(set(Input))\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    # TODO: Write code here\n    pass\n",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return list(set(Input))\n\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]))",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(list(set(i)) for i in zip(*Input))]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    output = []\n    for i in range(len(Input)):\n        if Input[i][0] not in [x[0] for x in output]:\n            output.append(Input[i])\n    return output\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    return [tuple(list(set(x[0] for x in Input)))]\n",
    "    return [Input[0]] + [tup for tup in Input if tup[0] == Input[0][0]]\n",
    "    # TODO: Implement Me\n    return []",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    # TODO: Implement this function\n    pass\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))",
    "    return list(set(Input))\n\nprint(group_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2)]))",
    "    # TODO: Implement me\n    return []",
    "    return [tuple(set(i)) for i in zip(*Input)]\n\n",
    "    return list(set([(x[0],) for x in Input]))",
    "    return list(set(Input))\n",
    "    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append((Input[i][0], Input[i][1], Input[j][1]))\n    return Output\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    # TODO: Implement me\n    return []",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    # Create a dictionary of tuples\n    tuples_dict = {}\n    for tup in Input:\n        if tup[0] in tuples_dict:\n            tuples_dict[tup[0]].append(tup)\n        else:\n            tuples_dict[tup[0]] = [tup]\n\n    # Find the most common tuple\n    max_tuple = None\n    max_count = 0\n    for key in tuples_dict:\n        if len(tuples_dict[key]) > max_count:\n            max_tuple = key\n            max_count = len(tuples_dict[key])\n\n    return tuples_dict[max_tuple]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]))",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))\n",
    "    return [tuple(i) for i in zip(*Input)]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]",
    "    # TODO: Implement me\n    return []",
    "    return [tuple(set(x)) for x in zip(*Input)]",
    "    return [tuple(Input[0])] * len(Input)\n\nprint(group_tuples([('a', 1), ('a', 2), ('a', 3)]))",
    "    return [tuple(set(x[0] for x in Input))]",
    "    return list(set(Input))\n\n",
    "    # Create a dictionary to store the first element of the tuple as key and the tuple as value\n    dict_ = {}\n    for i in Input:\n        if i[0] in dict_:\n            dict_[i[0]].append(i)\n        else:\n            dict_[i[0]] = [i]\n    # Create a list of tuples to store the first element of the tuple and the list of tuples with the same first element\n    list_ = []\n    for i in dict_:\n        list_.append((i, dict_[i]))\n    return list_\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]\n",
    "    return list(set(Input))",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e')]))\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'b', 'f')]))\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'b', 'f'), ('a', 'b', 'g')]))\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'b', 'f'), ('a', 'b', 'g'), ('a', 'b', 'h')]))",
    "    # your code here\n    return []\n\n",
    "    return list(set(Input))\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    return list(set(Input))\n\nprint(group_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)]))",
    "    return list(set(Input))",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))",
    "    return [tuple(set(i)) for i in zip(*Input)]\n\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e')]))",
    "    return [tuple(set(i)) for i in zip(*Input)]\n\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D')]))\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C')]))\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D')]))\nprint(group_tuples([('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]))",
    "    return [tuple(set(i[0] for i in Input))]\n",
    "    # TODO: Implement me\n    pass\n",
    "    return list(set(Input))\n",
    "    return list(set([x[0] for x in Input]))\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    return [tuple(k) for k, v in groupby(sorted(Input), lambda x: x[0])]\n",
    "    # Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2)]\n    # Output: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2)]\n    # Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2)]\n    # Output: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2)]\n    # Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2), ('e', 1), ('e', 2)]\n    # Output: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2), ('e', 1), ('e', 2)]\n    # Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2), ('e', 1), ('e', 2), ('f', 1), ('f', 2)]\n    # Output: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2), ('e', 1), ('e', 2), ('f', 1), ('f', 2)]\n    # Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), ('d', 1), ('d', 2), ('e', 1), ('e', 2), ('f', 1), ('f', 2), ('g', 1), ('g', 2)]\n    # Output: [('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    pass",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    # TODO: Implement me\n    pass\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('a', 'g')]))",
    "    if len(Input) == 0:\n        return []\n    else:\n        first_element = Input[0][0]\n        return [(first_element, *tup[1:]) for tup in Input if tup[0] == first_element]",
    "    return [tuple(set(x)) for x in zip(*Input)]",
    "    # TODO: Write your code here\n    pass\n\n",
    "    return list(set(Input))",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    # TODO: Implement this function\n    return []\n\n",
    "    return [tuple(set(x[0] for x in Input))]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return list(set(Input))\n",
    "    return [tuple(x[0] for x in Input)]\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c')]))",
    "    if len(Input) == 0:\n        return []\n    else:\n        first_element = Input[0][0]\n        return [tuple([first_element] + list(t[1:])) for t in Input]\n\nprint(group_tuples([('A', 1), ('B', 2), ('A', 3), ('B', 4), ('A', 5)]))",
    "    return [tuple(set(x)) for x in zip(*Input)]",
    "    return list(set([(x[0],) for x in Input]))\n",
    "    return list(set(Input))\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(x[0] for x in Input)]\n\nprint(group_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)]))",
    "    return [tuple(set(i[0] for i in Input))]",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return list(set([i[0] for i in Input]))\n",
    "    return list(set(Input))\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]\n",
    "    return list(set([x[0] for x in Input]))",
    "    return list(set(Input))\n",
    "    return list(set([(x[0],) for x in Input]))\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]))",
    "    Output = []\n    for i in range(len(Input)):\n        if i == 0:\n            Output.append(Input[i])\n        else:\n            if Input[i][0] == Input[i-1][0]:\n                Output.append(Input[i])\n            else:\n                Output.append(Input[i])\n    return Output\n",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return [tuple(x[0] for x in Input)]\n\nprint(group_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2)]))",
    "    return list(set(Input))",
    "    first_elements = []\n    for element in Input:\n        first_elements.append(element[0])\n    return first_elements\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]\n",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    first_elements = [t[0] for t in Input]\n    first_elements_set = set(first_elements)\n    result = []\n    for element in first_elements_set:\n        result.append(tuple(element for element in first_elements if element == element))\n    return result\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e')]))\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'b', 'f')]))\nprint(group_tuples([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'b', 'f'), ('a', 'b', 'g')]))",
    "    return list(set(Input))",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x[0] for x in Input))]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    # TODO: Implement me\n    return []",
    "    return list(set(Input))\n",
    "    return list(set(Input))\n",
    "    return list(set(Input))\n\nprint(group_tuples([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('a', 1), ('b', 4)]))",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(sorted(set(x[0] for x in Input))) for x in Input]",
    "    return list(set(Input))\n",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return list(set([i[0] for i in Input]))\n",
    "    return [tuple(set(x[0] for x in Input))]",
    "    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]\n    # Output = [('a', 'b', 'c', 'd')]\n    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f')]\n    # Output = [('a', 'b', 'c', 'd'), ('e', 'f')]\n    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g')]\n    # Output = [('a', 'b', 'c', 'd'), ('e', 'f', 'g')]\n    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g'), ('h', 'i')]\n    # Output = [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i')]\n    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g'), ('h', 'i'), ('h', 'j')]\n    # Output = [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i', 'j')]\n    # Input = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g'), ('h', 'i'), ('h', 'j'), ('k', 'l')]\n    # Output = [('a', 'b', 'c', 'd'), ('e',",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return list(set([x[0] for x in Input]))\n",
    "    return list(set(Input))\n",
    "    return list(set(Input))\n",
    "    return [tuple(x) for x in zip(*Input)]\n",
    "    return [tuple(set(x[0] for x in Input))]",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\n",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f')]))\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('a', 'g')]))",
    "    return [tuple(set(i[0] for i in Input))]\n",
    "    return [tuple(x[0] for x in Input)]",
    "    # TODO: Implement me\n    return []",
    "    if len(Input) == 0:\n        return []\n    else:\n        first_element = Input[0][0]\n        return [tup for tup in Input if tup[0] == first_element]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return list(set(Input))\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n\nInput = [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]\nprint(group_tuples(Input))",
    "    return [tuple(x[0] for x in Input)]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n\nprint(group_tuples([('A', 'B', 'C'), ('A', 'B', 'D'), ('A', 'B', 'E')]))",
    "    return list(set(Input))",
    "    return [tuple(set(x[0] for x in Input))]",
    "    return list(set(Input))\n",
    "    # TODO: Implement me\n    return []",
    "    pass",
    "    return list(set(map(lambda x: x[0], Input)))\n",
    "    return [tuple(set(x[0] for x in Input))]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return list(set(Input))\n\n",
    "    output = []\n    for i in range(len(Input)):\n        if Input[i][0] not in output:\n            output.append(Input[i][0])\n    return output\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x[0] for x in Input))]",
    "    # TODO: implement me\n    return []\n",
    "    return list(set([i[0] for i in Input]))\n\nprint(group_tuples([('a', 1), ('b', 2), ('a', 3), ('b', 4)]))",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd'), ('e', 'f')]))",
    "    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd')]\n    # Output: [('a', 'b', 'c', 'd')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]\n    # Output: [('a', 'b', 'c', 'd')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f')]\n    # Output: [('a', 'b', 'c', 'd'), ('e', 'f')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g')]\n    # Output: [('a', 'b', 'c', 'd'), ('e', 'f', 'g')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g'), ('f', 'g')]\n    # Output: [('a', 'b', 'c', 'd'), ('e', 'f', 'g')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f'), ('e', 'g'), ('f', 'g'), ('h', 'i')]\n    # Output: [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i')]\n\n    # Input: [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('e', 'f",
    "    return [tuple(x[0] for x in Input)]\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    first_elements = [t[0] for t in Input]\n    first_elements_set = set(first_elements)\n    result = []\n    for element in first_elements_set:\n        result.append((element, first_elements.count(element)))\n    return result\n",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(x)) for x in zip(*Input)]\n",
    "    Output = []\n    for i in range(len(Input)):\n        if i == 0:\n            Output.append(Input[i])\n        else:\n            if Input[i][0] == Input[i-1][0]:\n                Output.append(Input[i])\n    return Output\n",
    "    return [tuple(set(i)) for i in zip(*Input)]",
    "    return [tuple(set(i)) for i in zip(*Input)]\n",
    "    return [tuple(set(t)) for t in zip(*Input)]\n",
    "    if len(Input) == 0:\n        return []\n    else:\n        return [tuple(set(x[0] for x in Input))] + group_tuples([x[1:] for x in Input if len(x) > 1])\n",
    "    return [tuple(set(x[0] for x in Input))]\n\nprint(group_tuples([('a', 'b'), ('a', 'c'), ('a', 'd')]))"
  ]
}