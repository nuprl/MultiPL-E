{
  "name": "mbpp_724_power_base_sum",
  "language": "py",
  "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(2, 100) == 115\n    assert candidate(8, 10) == 37\n    assert candidate(8, 15) == 62\n    assert candidate(3, 3) == 9\n\ndef test_check():\n    check(power_base_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(int(digit) for digit in str(base ** power))\n\n\nprint(power_base_sum(2, 1000))",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(map(int, str(base ** power)))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(digit) for digit in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(x) for x in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n\nprint(power_base_sum(2, 1000))",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(i) for i in str(base ** power))\n\n",
    "    return sum(int(digit) for digit in str(base ** power))\n\n",
    "    return sum(int(digit) for digit in str(base ** power))\n\n",
    "    return sum(int(digit) for digit in str(base ** power))\n\n"
  ]
}