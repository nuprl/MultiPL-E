{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "py",
  "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('aab_cbbbc') == True\n    assert candidate('aab_Abbbc') == False\n    assert candidate('Aaab_abbbc') == False\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return bool(re.search(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.search(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+(_[a-z]+)*\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n",
    "    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\n\n",
    "    return bool(re.match(r\"^[a-z]+(_[a-z]+)*$\", text))\n\n"
  ]
}