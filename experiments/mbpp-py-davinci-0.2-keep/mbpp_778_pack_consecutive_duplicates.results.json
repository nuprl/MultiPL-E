{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "py",
  "prompt": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        else:\n            if list1[i] == list1[i-1]:\n                new_list[-1].append(list1[i])\n            else:\n                new_list.append([list1[i]])\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpuhxsp3l2.py\", line 21\n    print(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\n                                      ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append([current, count])\n                current = i\n                count = 1\n        result.append([current, count])\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjc7cmsxp.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjc7cmsxp.py\", line 29, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpjc7cmsxp.py\", line 24, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        sublist = []\n        final_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                sublist.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                sublist.append(list1[i])\n            else:\n                final_list.append(sublist)\n                sublist = []\n                sublist.append(list1[i])\n        final_list.append(sublist)\n        return final_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in list1:\n        if i not in result:\n            result.append(i)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjqzmnf33.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjqzmnf33.py\", line 19, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpjqzmnf33.py\", line 14, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append([current] * count)\n                current = i\n                count = 1\n        result.append([current] * count)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        sublist = []\n        result = []\n        for i in range(len(list1)):\n            if i == 0:\n                sublist.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                sublist.append(list1[i])\n            else:\n                result.append(sublist)\n                sublist = []\n                sublist.append(list1[i])\n        result.append(sublist)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        sublist = []\n        result = []\n        for i in range(len(list1)):\n            if i == 0:\n                sublist.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                sublist.append(list1[i])\n            else:\n                result.append(sublist)\n                sublist = []\n                sublist.append(list1[i])\n        result.append(sublist)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        packed_list = []\n        current_sublist = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == current_sublist[-1]:\n                current_sublist.append(list1[i])\n            else:\n                packed_list.append(current_sublist)\n                current_sublist = [list1[i]]\n        packed_list.append(current_sublist)\n        return packed_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] != list1[i - 1]:\n            list2.append(list1[i])\n    for i in range(len(list2)):\n        if i == 0:\n            list3.append([list2[i]])\n        elif list2[i] == list2[i - 1]:\n            list3[-1].append(list2[i])\n        else:\n            list3.append([list2[i]])\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxccy38vk.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpxccy38vk.py\", line 30, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpxccy38vk.py\", line 25, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = None\n    for i in list1:\n        if i != current:\n            result.append([i])\n            current = i\n        else:\n            result[-1].append(i)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == current:\n                count += 1\n            else:\n                result.append([current] * count)\n                current = list1[i]\n                count = 1\n        result.append([current] * count)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        list2 = []\n        list2.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                list2[-1].append(list1[i])\n            else:\n                list2.append([list1[i]])\n        return list2\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvjb_3unf.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvjb_3unf.py\", line 24, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpvjb_3unf.py\", line 19, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  File \"/tmp/tmpvjb_3unf.py\", line 14, in pack_consecutive_duplicates\n    list2[-1].append(list1[i])\nAttributeError: 'int' object has no attribute 'append'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        list2 = []\n        list2.append([list1[0]])\n        for i in range(1, len(list1)):\n            if list1[i] == list2[-1][0]:\n                list2[-1].append(list1[i])\n            else:\n                list2.append([list1[i]])\n        return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == current[-1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpb60bitre.py\", line 20\n    print(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n                                      ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n\n    packed = []\n    current = [list1[0]]\n\n    for i in range(1, len(list1)):\n        if list1[i] == current[-1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n\n    packed.append(current)\n    return packed\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append([current, count])\n                current = i\n                count = 1\n        result.append([current, count])\n        return result\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_ese_h_z.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp_ese_h_z.py\", line 28, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp_ese_h_z.py\", line 23, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = None\n    for item in list1:\n        if item != current:\n            result.append([item])\n            current = item\n        else:\n            result[-1].append(item)\n    return result\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9]))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "[[1, 1, 1], [2], [3, 3, 3], [4], [5, 5, 5, 5, 5], [6], [7, 7], [8], [9, 9, 9, 9]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        temp.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdp2rpo2a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdp2rpo2a.py\", line 19, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpdp2rpo2a.py\", line 14, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == current[-1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list2[-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == current:\n                count += 1\n            else:\n                result.append([current, count])\n                current = list1[i]\n                count = 1\n        result.append([current, count])\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaadmvgou.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpaadmvgou.py\", line 29, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpaadmvgou.py\", line 24, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    current = list1[0]\n    temp = []\n    for i in list1:\n        if i == current:\n            temp.append(i)\n        else:\n            result.append(temp)\n            temp = [i]\n            current = i\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return list1\n    result = []\n    current = list1[0]\n    count = 0\n    for i in list1:\n        if i == current:\n            count += 1\n        else:\n            result.append([current, count])\n            current = i\n            count = 1\n    result.append([current, count])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzc8twq3h.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpzc8twq3h.py\", line 29, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpzc8twq3h.py\", line 24, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = [list1[i]]\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9]))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "[[1, 1, 1], [2], [3, 3], [4], [5, 5, 5, 5, 5], [6], [7, 7], [8, 8], [9, 9, 9]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n            list3.append(list2)\n        elif list1[i] == list1[i-1]:\n            list2.append(list1[i])\n        else:\n            list2 = []\n            list2.append(list1[i])\n            list3.append(list2)\n    return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = None\n    for item in list1:\n        if current is None:\n            current = [item]\n        elif current[0] == item:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    if current is not None:\n        result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == new_list[-1][0]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            else:\n                if list1[i] == list1[i-1]:\n                    temp.append(list1[i])\n                else:\n                    result.append(temp)\n                    temp = []\n                    temp.append(list1[i])\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == current:\n                count += 1\n            else:\n                result.append([current] * count)\n                current = list1[i]\n                count = 1\n        result.append([current] * count)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i - 1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append((current, count))\n                current = i\n                count = 1\n        result.append((current, count))\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp91m1dszb.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp91m1dszb.py\", line 30, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp91m1dszb.py\", line 25, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append([current, count])\n                current = i\n                count = 1\n        result.append([current, count])\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp79a0ed_p.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp79a0ed_p.py\", line 30, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp79a0ed_p.py\", line 25, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == current[-1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "[[1, 1, 1], [2], [3, 3, 3, 3], [4, 4], [5, 5, 5, 5, 5], [6, 6, 6], [7, 7, 7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9], [10, 10, 10]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        packed_list = []\n        current_sublist = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == current_sublist[0]:\n                current_sublist.append(list1[i])\n            else:\n                packed_list.append(current_sublist)\n                current_sublist = [list1[i]]\n        packed_list.append(current_sublist)\n        return packed_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        sublist = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == sublist[-1]:\n                sublist.append(list1[i])\n            else:\n                return [sublist] + pack_consecutive_duplicates(list1[i:])\n        return [sublist]\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    if len(list1) == 0:\n        return list2\n    else:\n        list2.append([list1[0]])\n        for i in range(1, len(list1)):\n            if list1[i] == list2[-1][0]:\n                list2[-1].append(list1[i])\n            else:\n                list2.append([list1[i]])\n        return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list2.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                list2[-1].append(list1[i])\n            else:\n                list2.append([list1[i]])\n        return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpusw0rmqe.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpusw0rmqe.py\", line 26, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpusw0rmqe.py\", line 21, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  File \"/tmp/tmpusw0rmqe.py\", line 14, in pack_consecutive_duplicates\n    list2[-1].append(list1[i])\nAttributeError: 'int' object has no attribute 'append'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0:\n            sublist.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = []\n            sublist.append(list1[i])\n    result.append(sublist)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 0\n        for i in list1:\n            if i == current:\n                count += 1\n            else:\n                result.append([current, count])\n                current = i\n                count = 1\n        result.append([current, count])\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjc7cmsxp.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjc7cmsxp.py\", line 29, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpjc7cmsxp.py\", line 24, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        last = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == last:\n                count += 1\n            else:\n                result.append((last, count))\n                last = list1[i]\n                count = 1\n        result.append((last, count))\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8m9arqct.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp8m9arqct.py\", line 29, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp8m9arqct.py\", line 24, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        if i > 0:\n            if list1[i] == list1[i-1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        packed_list = []\n        current_sublist = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                current_sublist.append(list1[i])\n            else:\n                packed_list.append(current_sublist)\n                current_sublist = [list1[i]]\n        packed_list.append(current_sublist)\n        return packed_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        packed = [[list1[0]]]\n        for i in range(1, len(list1)):\n            if list1[i] == packed[-1][0]:\n                packed[-1].append(list1[i])\n            else:\n                packed.append([list1[i]])\n        return packed\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        new_list = []\n        sub_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                sub_list.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                sub_list.append(list1[i])\n            else:\n                new_list.append(sub_list)\n                sub_list = []\n                sub_list.append(list1[i])\n        new_list.append(sub_list)\n        return new_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == current:\n                count += 1\n            else:\n                result.append([current] * count)\n                current = list1[i]\n                count = 1\n        result.append([current] * count)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    current = list1[0]\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == current:\n            count += 1\n        else:\n            result.append([current] * count)\n            current = list1[i]\n            count = 1\n    result.append([current] * count)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        result = []\n        temp = []\n        temp.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdp2rpo2a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdp2rpo2a.py\", line 19, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpdp2rpo2a.py\", line 14, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = list1[0]\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == current:\n            count += 1\n        else:\n            result.append([current] * count)\n            current = list1[i]\n            count = 1\n    result.append([current] * count)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i - 1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    list2 = []\n    for i in range(len(list1) - 1):\n        if list1[i] == list1[i + 1]:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n            list2.append([])\n    list2.append(list1[-1])\n    return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg__ntj9b.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpg__ntj9b.py\", line 28, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpg__ntj9b.py\", line 23, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        new_list = []\n        temp_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp_list.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp_list.append(list1[i])\n            else:\n                new_list.append(temp_list)\n                temp_list = []\n                temp_list.append(list1[i])\n        new_list.append(temp_list)\n        return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    i = 0\n    while i < len(list1):\n        list2.append([list1[i]])\n        j = i + 1\n        while j < len(list1) and list1[i] == list1[j]:\n            list2[-1].append(list1[j])\n            j += 1\n        i = j\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8vm7ywqx.py\", line 24\n    print(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n                                      ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        new_list = []\n        temp_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp_list.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp_list.append(list1[i])\n            else:\n                new_list.append(temp_list)\n                temp_list = []\n                temp_list.append(list1[i])\n        new_list.append(temp_list)\n        return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = list1[0]\n    count = 0\n    for item in list1:\n        if item == current:\n            count += 1\n        else:\n            result.append([current, count])\n            current = item\n            count = 1\n    result.append([current, count])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0bjg04ht.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp0bjg04ht.py\", line 26, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp0bjg04ht.py\", line 21, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        return [list(group) for key, group in groupby(list1)]\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu108rkya.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpu108rkya.py\", line 18, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpu108rkya.py\", line 13, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  File \"/tmp/tmpu108rkya.py\", line 10, in pack_consecutive_duplicates\n    return [list(group) for key, group in groupby(list1)]\nNameError: name 'groupby' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        list2 = []\n        list2.append([list1[0]])\n        for i in range(1, len(list1)):\n            if list1[i] == list2[-1][0]:\n                list2[-1].append(list1[i])\n            else:\n                list2.append([list1[i]])\n        return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return list1\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = None\n    for item in list1:\n        if item != current:\n            result.append([item])\n            current = item\n        else:\n            result[-1].append(item)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0:\n            sublist.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = []\n            sublist.append(list1[i])\n    result.append(sublist)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        new_list = []\n        temp_list = []\n        temp_list.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                temp_list.append(list1[i])\n            else:\n                new_list.append(temp_list)\n                temp_list = []\n                temp_list.append(list1[i])\n        new_list.append(temp_list)\n        return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    current = list1[0]\n    count = 0\n    for i in list1:\n        if i == current:\n            count += 1\n        else:\n            result.append([current, count])\n            current = i\n            count = 1\n    result.append([current, count])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp62s3tnb_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp62s3tnb_.py\", line 26, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmp62s3tnb_.py\", line 21, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        sublist = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == sublist[-1]:\n                sublist.append(list1[i])\n            else:\n                result.append(sublist)\n                sublist = [list1[i]]\n        result.append(sublist)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        new_list = []\n        sub_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                sub_list.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                sub_list.append(list1[i])\n            else:\n                new_list.append(sub_list)\n                sub_list = []\n                sub_list.append(list1[i])\n        new_list.append(sub_list)\n        return new_list\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        new_list = []\n        temp_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp_list.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp_list.append(list1[i])\n            else:\n                new_list.append(temp_list)\n                temp_list = []\n                temp_list.append(list1[i])\n        new_list.append(temp_list)\n        return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        sublist = []\n        result = []\n        for i in range(len(list1)):\n            if i == 0:\n                sublist.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                sublist.append(list1[i])\n            else:\n                result.append(sublist)\n                sublist = []\n                sublist.append(list1[i])\n        result.append(sublist)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        else:\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n    result.append(temp)\n    return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0:\n            sublist.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = []\n            sublist.append(list1[i])\n    result.append(sublist)\n    return result\n\nprint(pack_consecutive_duplicates(['a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e']))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "[['a', 'a', 'a', 'a'], ['b'], ['c', 'c'], ['a', 'a'], ['d'], ['e', 'e', 'e', 'e']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i - 1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        new_list = []\n        prev = list1[0]\n        new_list.append([prev])\n        for i in range(1, len(list1)):\n            if list1[i] == prev:\n                new_list[-1].append(list1[i])\n            else:\n                new_list.append([list1[i]])\n            prev = list1[i]\n        return new_list\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = list1[0]\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == current:\n                count += 1\n            else:\n                result.append([current] * count)\n                current = list1[i]\n                count = 1\n        result.append([current] * count)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "[[1, 1, 1], [2, 2], [3, 3, 3], [4, 4], [5, 5, 5, 5, 5], [6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = [list1[i]]\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        list2.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i - 1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    result = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == current[-1]:\n            current.append(list1[i])\n        else:\n            result.append(current)\n            current = [list1[i]]\n    result.append(current)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == current[-1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            if i == 0:\n                list2.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                list2.append(list1[i])\n            else:\n                list3.append(list2)\n                list2 = []\n                list2.append(list1[i])\n        list3.append(list2)\n        return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123435,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    new_list = []\n    temp_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp_list.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            temp_list.append(list1[i])\n        else:\n            new_list.append(temp_list)\n            temp_list = []\n            temp_list.append(list1[i])\n    new_list.append(temp_list)\n    return new_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        new_list = []\n        sub_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                sub_list.append(list1[i])\n            elif list1[i] == list1[i - 1]:\n                sub_list.append(list1[i])\n            else:\n                new_list.append(sub_list)\n                sub_list = []\n                sub_list.append(list1[i])\n        new_list.append(sub_list)\n        return new_list\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if list1 == []:\n        return []\n    else:\n        if list1[0] == list1[1]:\n            return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n        else:\n            return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd3ho2n5l.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpd3ho2n5l.py\", line 21, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpd3ho2n5l.py\", line 16, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  File \"/tmp/tmpd3ho2n5l.py\", line 11, in pack_consecutive_duplicates\n    return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n  File \"/tmp/tmpd3ho2n5l.py\", line 13, in pack_consecutive_duplicates\n    return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n  File \"/tmp/tmpd3ho2n5l.py\", line 13, in pack_consecutive_duplicates\n    return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n  File \"/tmp/tmpd3ho2n5l.py\", line 13, in pack_consecutive_duplicates\n    return [list1[0]] + pack_consecutive_duplicates(list1[1:])\n  [Previous line repeated 1 more time]\n  File \"/tmp/tmpd3ho2n5l.py\", line 11, in pack_consecutive_duplic",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]))\nprint(pack_consecutive_duplicates(['a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e']))\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "[[1, 1, 1], [2, 2], [3, 3, 3], [4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6]]\n[['a', 'a', 'a', 'a'], ['b'], ['c', 'c'], ['a', 'a'], ['d'], ['e', 'e', 'e', 'e']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        temp = []\n        temp.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if not list1:\n        return []\n    else:\n        result = []\n        temp = []\n        for i in range(len(list1)):\n            if i == 0:\n                temp.append(list1[i])\n            elif list1[i] == list1[i-1]:\n                temp.append(list1[i])\n            else:\n                result.append(temp)\n                temp = []\n                temp.append(list1[i])\n        result.append(temp)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            new_list.append([list1[i]])\n        elif list1[i] == list1[i - 1]:\n            new_list[-1].append(list1[i])\n        else:\n            new_list.append([list1[i]])\n    return new_list\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append([list1[i]])\n        elif list1[i] == list2[-1][0]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        current = [list1[0]]\n        for i in range(1, len(list1)):\n            if list1[i] == current[-1]:\n                current.append(list1[i])\n            else:\n                result.append(current)\n                current = [list1[i]]\n        result.append(current)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list2.append(list1[0])\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            list2[-1].append(list1[i])\n        else:\n            list2.append([list1[i]])\n    return list2\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv1tgodeh.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpv1tgodeh.py\", line 22, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpv1tgodeh.py\", line 17, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  File \"/tmp/tmpv1tgodeh.py\", line 11, in pack_consecutive_duplicates\n    list2[-1].append(list1[i])\nAttributeError: 'int' object has no attribute 'append'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        count = 1\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i - 1]:\n                count += 1\n            else:\n                result.append(list1[i - 1] * count)\n                count = 1\n        result.append(list1[-1] * count)\n        return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123436,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpslt2u8iq.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpslt2u8iq.py\", line 27, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpslt2u8iq.py\", line 22, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    for i in list1:\n        if i not in result:\n            result.append(i)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjqzmnf33.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjqzmnf33.py\", line 19, in test_check\n    check(pack_consecutive_duplicates)\n  File \"/tmp/tmpjqzmnf33.py\", line 14, in check\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i] == list1[i - 1]:\n            list2.append(list1[i])\n        else:\n            list3.append(list2)\n            list2 = []\n            list2.append(list1[i])\n    list3.append(list2)\n    return list3\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef pack_consecutive_duplicates(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = []\n            temp.append(list1[i])\n    result.append(temp)\n    return result\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}