{
  "name": "mbpp_249_intersection_array",
  "language": "py",
  "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return list(set(array_nums1).intersection(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    # Solution 1\n    # return list(set(array_nums1) & set(array_nums2))\n\n    # Solution 2\n    return list(set(array_nums1).intersection(set(array_nums2)))\n\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1 & set_nums2)\n\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    return list(set(array_nums1) & set(array_nums2))\n",
    "    # Solution 1:\n    # return list(set(array_nums1) & set(array_nums2))\n\n    # Solution 2:\n    # return list(set(array_nums1).intersection(set(array_nums2)))\n\n    # Solution 3:\n    # return [num for num in array_nums1 if num in array_nums2]\n\n    # Solution 4:\n    # return list(set(array_nums1).intersection(array_nums2))\n\n    # Solution 5:\n    # return [num for num in array_nums1 if num in set(array_nums2)]\n\n    # Solution 6:\n    # return [num for num in array_nums1 if num in array_nums2 and num not in array_nums1[:array_nums1.index(num)]]\n\n    # Solution 7:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 8:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 9:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 10:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 11:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 12:\n    # return [num for num in array_nums1 if num in array_nums2 and array_nums1.index(num) == array_nums2.index(num)]\n\n    # Solution 13:\n    # return [num for"
  ]
}