{
  "name": "mbpp_294_max_val",
  "language": "py",
  "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, \"6\"]))\nprint(max_val([1, 2, 3, 4, 5, \"6\", \"7\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7mwfvk1o.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, \"6\"]))\n  File \"/tmp/tmp7mwfvk1o.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp4_wrsfb7.py\", line 17\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpress4008.py\", line 24\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\n                                                                                     ^\nSyntaxError: unterminated string literal (detected at line 24)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplpjocdv5.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmplpjocdv5.py\", line 22, in test_check\n    check(max_val)\n  File \"/tmp/tmplpjocdv5.py\", line 17, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmplpjocdv5.py\", line 9, in max_val\n    if isinstance(i, int) and i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqctdp03g.py\", line 10, in <module>\n    print(max_val([1,2,3,4,5,6,7,8,9,10, 'a']))\n  File \"/tmp/tmpqctdp03g.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, \"5\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, \"7\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, \"7\", 8]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n4\n6\n6\n8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val([1, 2, 3, '4', '5']))\nprint(max_val([1, 2, '3', '4', '5']))\nprint(max_val([1, '2', '3', '4', '5']))\nprint(max_val(['1', '2', '3', '4', '5']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n4\n3\n2\n1\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\nprint(max_val([1,2,3,4,5,'a','b','c','d','e']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprlmekyzf.py\", line 11, in <module>\n    print(max_val([1,2,3,4,5,'a','b','c','d','e']))\n  File \"/tmp/tmprlmekyzf.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, \"a\", 3, 4, \"b\"]))\nprint(max_val([1, 2, \"a\", 3, 4, \"b\", 5, 6, 7]))\nprint(max_val([1, 2, \"a\", 3, 4, \"b\", 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "4\n7\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\",\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp57gqfkfw.py\", line 20\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\",\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpi0y0efdx.py\", line 23\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg98drubs.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n  File \"/tmp/tmpg98drubs.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n9\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq465e25u.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpq465e25u.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpq465e25u.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpq465e25u.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv2bqq7ig.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpv2bqq7ig.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpv2bqq7ig.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpv2bqq7ig.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp52va046h.py\", line 17\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\n                                                                                                                                                                                              ^\nSyntaxError: unterminated string literal (detected at line 17)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n1000\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa5q71jpt.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpa5q71jpt.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpa5q71jpt.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpa5q71jpt.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa335_k1g.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpa335_k1g.py\", line 18, in test_check\n    check(max_val)\n  File \"/tmp/tmpa335_k1g.py\", line 13, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpa335_k1g.py\", line 9, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"ten\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\", \"ten\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\", \"ten\", 11]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n9\n9\n9\n11\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5]))\nprint(max_val([1,2,3,4,5, 'a']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp646pnxq6.py\", line 10, in <module>\n    print(max_val([1,2,3,4,5, 'a']))\n  File \"/tmp/tmp646pnxq6.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6, 7]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6, 7, 8]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "3\n4\n5\n6\n7\n8\n9\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpuvb751f4.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\nprint(max_val([1,2,3,'a','b','c',4,5,6,'d','e','f',7,8,9,'g','h','i',10,'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9a3dp5ug.py\", line 11, in <module>\n    print(max_val([1,2,3,'a','b','c',4,5,6,'d','e','f',7,8,9,'g','h','i',10,'j']))\n  File \"/tmp/tmp9a3dp5ug.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3,\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpg9r18wei.py\", line 25\n    print(max_val([1, 2, 3,\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp19cd110_.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l\n                                                                                         ^\nSyntaxError: unterminated string literal (detected at line 25)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\",\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp57gqfkfw.py\", line 20\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\",\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, \"a\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsrgsehbk.py\", line 11, in <module>\n    print(max_val([1, 2, 3, 4, \"a\"]))\n  File \"/tmp/tmpsrgsehbk.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_value = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_value:\n                max_value = i\n    return max_value\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val(['1', 2, 3, 4, '5']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n4\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', '\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp6g1jkmz7.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', '\n                                                                                    ^\nSyntaxError: unterminated string literal (detected at line 25)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_value = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_value:\n            max_value = i\n    return max_value\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val([1, 2, 3, 4, '5', 6]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\n4\n6\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt1rzd4m_.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpt1rzd4m_.py\", line 22, in test_check\n    check(max_val)\n  File \"/tmp/tmpt1rzd4m_.py\", line 17, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpt1rzd4m_.py\", line 9, in max_val\n    if isinstance(i, int) and i > max_value:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3,\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpg8m_cuv4.py\", line 25\n    print(max_val([1, 2, 3,\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpmh6c8i6r.py\", line 23\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5n6vg660.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\n  File \"/tmp/tmp5n6vg660.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n1000\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps36ja5ls.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\n  File \"/tmp/tmps36ja5ls.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    maxval = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > maxval:\n                maxval = i\n    return maxval\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, \"5\", 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4,\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8onsday6.py\", line 25\n    print(max_val([1, 2, 3, 4,\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfpc4e6v7.py\", line 10, in <module>\n    print(max_val([1,2,3,4,5,6,7,8,9,10, \"a\"]))\n  File \"/tmp/tmpfpc4e6v7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmphred85zg.py\", line 19\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5n6vg660.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\n  File \"/tmp/tmp5n6vg660.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_value = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_value:\n                max_value = i\n    return max_value\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n10\na\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkwjelkwk.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkwjelkwk.py\", line 25, in test_check\n    check(max_val)\n  File \"/tmp/tmpkwjelkwk.py\", line 20, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpkwjelkwk.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\",\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpzk18qyq1.py\", line 17\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\",\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "3\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5n6vg660.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\n  File \"/tmp/tmp5n6vg660.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,'a','b','c','d','e','f','g','h','i','j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps0tt4sfz.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmps0tt4sfz.py\", line 20, in test_check\n    check(max_val)\n  File \"/tmp/tmps0tt4sfz.py\", line 15, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmps0tt4sfz.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, \"a\", 3, \"c\", 5]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkru1qk23.py\", line 11, in <module>\n    print(max_val([1, \"a\", 3, \"c\", 5]))\n  File \"/tmp/tmpkru1qk23.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1x8mswtr.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp1x8mswtr.py\", line 19, in test_check\n    check(max_val)\n  File \"/tmp/tmp1x8mswtr.py\", line 14, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp1x8mswtr.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcs3wvx6l.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpcs3wvx6l.py\", line 20, in test_check\n    check(max_val)\n  File \"/tmp/tmpcs3wvx6l.py\", line 15, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpcs3wvx6l.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmj164_t.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpzmj164_t.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpzmj164_t.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpzmj164_t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpmh6c8i6r.py\", line 23\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]))\nprint(max_val([1,2,3,4,5,\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpjuyee2lx.py\", line 16\n    print(max_val([1,2,3,4,5,\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmphht857oc.py\", line 19\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"\n                                                                 ^\nSyntaxError: unterminated string literal (detected at line 19)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "9\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf1f3hs_x.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\"]))\n  File \"/tmp/tmpf1f3hs_x.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "10\n0\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmplr1d1ncv.py\", line 23\n    print(max_val([1,2,3,4,5,6,7,8,9,10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\n                                                                                      ^\nSyntaxError: unterminated string literal (detected at line 23)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 4, 5, 6]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if type(i) == int and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12, 13, 14,\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp7oldhq4e.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 7, 8, 9, 10, 11, 12, 13, 14,\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "9\ni\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpywos3r4k.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i']))\n  File \"/tmp/tmpywos3r4k.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123540,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpddqvfb0e.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpddqvfb0e.py\", line 20, in test_check\n    check(max_val)\n  File \"/tmp/tmpddqvfb0e.py\", line 15, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpddqvfb0e.py\", line 9, in max_val\n    if isinstance(i, int) and i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}