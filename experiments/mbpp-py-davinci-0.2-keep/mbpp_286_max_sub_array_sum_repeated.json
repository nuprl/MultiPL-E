{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        curr_sum = max_sum\n        for i in range(1, k):\n            for j in range(0, n):\n                curr_sum = curr_sum - a[j] + a[(i * n + j) % n]\n                max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    # TODO: Implement me\n    pass\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    if max_wrap > max_sum:\n        return max_wrap\n    else:\n        return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif (max_sum < max_ending_here):\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap += a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        return max(max_sum, max_wrap)\n",
    "    max_sum = 0\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        if max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n    if max_sum == 0:\n        return max(a)\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        a[i] = -a[i]\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        if max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n    return max_sum * (k - 2) + max_sum * 2\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n",
    "    if n == 0:\n        return 0\n\n    max_so_far = a[0]\n    curr_max = a[0]\n\n    for i in range(1, n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    curr_max = 0\n    for i in range(n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    max_wrap = max_wrap + curr_max\n\n    if max_wrap > max_so_far and k > 1:\n        return max_wrap\n    else:\n        return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far > 0:\n            max_sum += max_sum_so_far\n\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[(i + j) % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max(a)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max_so_far * k\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_wrap = max(max_wrap, curr_sum)\n\n    max_wrap = max_wrap * (k - 2)\n\n    return max(max_sum, max_wrap + max_sub_array_sum(a, n))\n\n"
  ]
}