{
  "name": "mbpp_222_check_type",
  "language": "py",
  "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type(('a', 'b', 'c', 'd', 'e')))\nprint(check_type(('a', 'b', 'c', 'd', 'e', 1)))\nprint(check_type((1, 2, 3, 4, 5, 'a')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e')))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2, 1.3)))\nprint(check_type((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 1, 1.0, 1.1, 1.2, 1.3, 1.4)))\nprint\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 'b', 'c', 1)))\nprint(check_type(('a', 'b', 'c', 1, 2.0)))\nprint(check_type(('a', 'b', 'c', 1, 2.0, (1, 2, 3))))\nprint(check_type(('a', 'b', 'c', 1, 2.0, (1, 2, 3.0))))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\n\nprint(check_type((1, 2, 3, 4, 5, 6)))\nprint(check_type(('a', 'b', 'c', 'd', 'e', 'f')))\nprint(check_type((1, 2, 3, 4, 5, 'a')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7.0)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", 1)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, \"a\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nTrue\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\")))\nprint(check_type((\"a\", \"b\", \"c\", 1)))\nprint(check_type((1, 2, 3, \"a\")))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, 5)))\nprint(check_type((1, 2, 3, 4.0, 5.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpnqufsp55.py\", line 26\n    print(check_type((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a')))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, '5')))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, \"3\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"11\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, '3')))\nprint(check_type((1, 2, '3.0')))\nprint(check_type((1, 2, '3.0', 3)))\nprint(check_type((1, 2, '3.0', 3, 3.0)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, '5')))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, 3, \"4\")))\nprint(check_type((1, 2, 3, \"4\", 5.0)))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6)))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True)))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False)))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None)))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\", \"!\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\", \"!\", \"!\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\")))\nprint(check_type((1, 2, 3, \"4\", 5.0, 6, True, False, None, \"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\")))\nprint(check_type(()))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\", 11)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\nprint(check_type((1,2,3,4,5)))\nprint(check_type(('a','b','c','d')))\nprint(check_type((1,2,3,'a','b','c')))\nprint(check_type(()))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nTrue\nFalse\nTrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, \"3\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\")))\nprint(check_type(()))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, '5')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, '10')))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, \"3\")))\nprint(check_type((1, 2, \"3\", 4)))\nprint(check_type((1, 2, \"3\", 4.0)))\nprint(check_type((1, 2, \"3\", 4.0, \"5\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 'b', 'c', 1)))\nprint(check_type(()))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nTrue\nFalse\nTrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 'a')))\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 'a')))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, \"4\")))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"10\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a')))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True, False)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5, 6)))\nprint(check_type((\"Hello\", \"World\", \"!\")))\nprint(check_type((\"Hello\", 1, \"World\", 2, \"!\")))\nprint(check_type((1, 2, 3, 4, 5, 6, \"Hello\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return test_tuple and len(set(type(i) for i in test_tuple)) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\")))\nprint(check_type((1, \"a\", 2, \"b\")))\nprint(check_type((1, 2, 3, 4.5)))\nprint(check_type((1, 2, 3, 4.5, \"a\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nTrue\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, 3.0, \"a\")))\nprint(check_type((1, 2, 3.0, \"a\", True)))\nprint(check_type((1, 2, 3.0, \"a\", True, None)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1,2,3)))\nprint(check_type((1,2,'3')))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\")))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", 1)))\nprint(check_type((1, 2, 3, 4, 5.0)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, 'a')))\nprint(check_type((1, 2, 3, 4.0, 'a', True)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b')))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False, 1)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False, 1, 1.0)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False, 1, 1.0, 'c')))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False, 1, 1.0, 'c', True)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1.0, 1, 1.0, 'b', False, 1, 1.0, 'c', True, 1)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpwux3n6iw.py\", line 23\n    print(check_type((1, 2, 3, 4.0, 'a', True, 1\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(i) for i in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, \"7\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 'b', 1)))\nprint(check_type((1, 2, 3.0)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        for i in range(len(test_tuple) - 1):\n            if type(test_tuple[i]) != type(test_tuple[i + 1]):\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, 3.0, \"a\")))\nprint(check_type(()))\nprint(check_type((1, 2, 3, [1, 2, 3])))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if type(test_tuple) is not tuple:\n        return False\n    if len(test_tuple) == 0:\n        return True\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type(('a', 'b', 'c', 'd')))\nprint(check_type(('a', 'b', 'c', 1)))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6)))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd', 'e')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd', 'e', 'f')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(check_type((1, 2, 3, 4.0, 5.0, 6, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(check_type((1, 2, 3, 4.0, 5.\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpyy8qhl2e.py\", line 24\n    print(check_type((1, 2, 3, 4.0, 5.\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type(('a', 'b', 'c', 'd')))\nprint(check_type(('a', 'b', 'c', 'd', 1)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(check_type((1, 2, 3, 4, 5,\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpj5ketnxg.py\", line 22\n    print(check_type((1, 2, 3, 4, 5,\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(test_tuple[i]) for i in range(1, len(test_tuple)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return test_tuple and all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a')))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type(()))\nprint(check_type((\"a\", \"b\", \"c\")))\nprint(check_type((\"a\", \"b\", \"c\", 1)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8,\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp5zds308e.py\", line 30\n    print(check_type((\"a\", \"b\", \"c\", 1, 2, 3, 4, 5, 6, 7, 8,\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(i) for i in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, '3')))\nprint(check_type((1, 2, '3', 4)))\nprint(check_type((1, 2, '3', 4.0)))\nprint(check_type((1, 2, '3', 4.0, 5)))\nprint(check_type((1, 2, '3', 4.0, 5.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)))\nprint(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpvc7yw8xe.py\", line 26\n    print(check_type((1, 2, '3', 4.0, 5.0, 6.0, 7.0, 8.0, 9\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0, \"6\")))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return test_tuple == () or all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(check_type((1, \"a\", 3, \"b\", 5)))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nTrue\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4)))\nprint(check_type((1, 2, 3, 4.0)))\nprint(check_type((1, 2, 3, 4.0, 'a')))\nprint(check_type((1, 2, 3, 4.0, 'a', True)))\nprint(check_type((1, 2, 3, 4.0, 'a', True, [1, 2, 3])))\nprint(check_type((1, 2, 3, 4.0, 'a', True, [1, 2, 3], (1, 2, 3))))\nprint(check_type((1, 2, 3, 4.0, 'a', True, [1, 2, 3], (1, 2, 3), {'a': 1, 'b': 2})))\nprint(check_type((1, 2, 3, 4.0, 'a', True, [1, 2, 3], (1, 2, 3), {'a': 1, 'b': 2}, {1, 2, 3})))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(type(x) for x in test_tuple)) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, '5')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp7syunbm4.py\", line 17\n    print(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44\n                     ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1,2,3,4,5)))\nprint(check_type((1,2,3,4,5.0)))\nprint(check_type((1,2,3,4,5.0, 'a')))\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(type(x) for x in test_tuple)) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(type(x) for x in test_tuple)) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, '5')))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0)))\nprint(check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, '10')))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "True\nFalse\nFalse\nTrue\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set([type(x) for x in test_tuple])) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(item) for item in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(i) for i in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a')))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True, False)))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True, False, (1, 2, 3))))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True, False, (1, 2, 3), [1, 2, 3])))\nprint(check_type((1, 2, 3, 4, 5.0, 'a', True, False, (1, 2, 3), [1, 2, 3], {'a': 1, 'b': 2})))\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "True\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return False\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n    return len(set(map(type, test_tuple))) == 1\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}