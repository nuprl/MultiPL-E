{
  "name": "mbpp_4_heap_queue_largest",
  "language": "py",
  "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]\n\ndef test_check():\n    check(heap_queue_largest)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(n)]\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return sorted(heap, reverse=True)\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return sorted(heap, reverse=True)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return sorted(heap, reverse=True)\n",
    "    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n\n",
    "    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(n)]\n",
    "    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n\n",
    "    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(n)]\n",
    "    heapq.heapify(nums)\n    return heapq.nlargest(n, nums)\n"
  ]
}