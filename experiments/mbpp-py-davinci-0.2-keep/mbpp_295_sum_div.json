{
  "name": "mbpp_295_sum_div",
  "language": "py",
  "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(8) == 7\n    assert candidate(12) == 16\n    assert candidate(7) == 1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum([i for i in range(1, number) if number % i == 0])\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(\n        [\n            divisor\n            for divisor in range(1, number + 1)\n            if number % divisor == 0\n        ]\n    )\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number) if number % i == 0])\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([x for x in range(1, number + 1) if number % x == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n",
    "    return sum([i for i in range(1, number + 1) if number % i == 0])\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(i for i in range(1, number + 1) if number % i == 0)\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(divisors(number))\n\n",
    "    return sum(get_divisors(number))\n\n",
    "    return sum(divisors(number))\n\n"
  ]
}