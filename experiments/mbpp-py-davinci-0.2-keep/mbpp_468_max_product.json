{
  "name": "mbpp_468_max_product",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == 3000\n    assert candidate([4, 42, 55, 68, 80]) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_prod *= arr[i]\n    return max_prod\n",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2]) * arr[i]\n    return max(dp[-1], dp[-2])",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)\n",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] * arr[i], arr[i])\n    return dp[-1]\n\n",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    if len(arr) == 3:\n        return max(arr[0] * arr[1], arr[1] * arr[2], arr[0] * arr[2])\n\n    max_product_so_far = 1\n    for i in range(len(arr)):\n        max_product_so_far = max(max_product_so_far, max_product_so_far * arr[i])\n\n    return max_product_so_far\n\n",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_prod\n        max_prod = max(max_prod * arr[i], min_prod * arr[i], arr[i])\n        min_prod = min(temp * arr[i], min_prod * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_prod)\n    return max_so_far\n\n",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    max_product = arr[0] * arr[1]\n    max_product_so_far = max_product\n    for i in range(2, len(arr)):\n        max_product = max(arr[i], max_product * arr[i], max_product_so_far * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product)\n    return max_product_so_far\n",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_prod\n        max_prod = max(max_prod * arr[i], min_prod * arr[i], arr[i])\n        min_prod = min(temp * arr[i], min_prod * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_prod)\n    return max_so_far",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    max_prod = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_prod = max(max_prod, max_prod * arr[i])\n        else:\n            max_prod = max(max_prod, arr[i-1] * arr[i])\n    return max_prod\n",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_prod = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n        max_prod = max(max_prod, max_so_far)\n    return max_prod",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)\n",
    "    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)\n\n",
    "    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)\n",
    "    if len(arr) < 2:\n        return 0\n\n    # initialize max product\n    max_prod = 0\n\n    # initialize two arrays to store products of increasing and decreasing subsequences\n    inc = [0] * len(arr)\n    dec = [0] * len(arr)\n\n    # initialize first element of both arrays\n    inc[0] = dec[0] = arr[0]\n\n    # loop through the array\n    for i in range(1, len(arr)):\n        # if current element is greater than previous element, then multiply it with previous element\n        if arr[i] > arr[i - 1]:\n            inc[i] = inc[i - 1] * arr[i]\n            dec[i] = dec[i - 1] * arr[i]\n\n        # if current element is less than previous element, then multiply it with previous element\n        elif arr[i] < arr[i - 1]:\n            inc[i] = dec[i - 1] * arr[i]\n            dec[i] = inc[i - 1] * arr[i]\n\n        # if current element is equal to previous element, then copy previous element\n        else:\n            inc[i] = dec[i] = arr[i]\n\n        # update max product\n        max_prod = max(max_prod, inc[i], dec[i])\n\n    return max_prod\n\n",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_prod = arr[0]\n    max_prod_so_far = arr[0]\n    min_prod_so_far = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], max_prod_so_far * arr[i], min_prod_so_far * arr[i])\n        curr_min = min(arr[i], max_prod_so_far * arr[i], min_prod_so_far * arr[i])\n        max_prod = max(max_prod, curr_max)\n        max_prod_so_far = curr_max\n        min_prod_so_far = curr_min\n    return max_prod\n\nprint(max_product([-1, -3, -10, 0, 60]))\nprint(max_product([-2, -3, 0, -2, -40]))",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_prod = arr[0]\n    max_prod_so_far = arr[0]\n    min_prod_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_prod_so_far, min_prod_so_far = max(\n            max_prod_so_far * arr[i], min_prod_so_far * arr[i], arr[i]), min(\n                max_prod_so_far * arr[i], min_prod_so_far * arr[i], arr[i])\n        max_prod = max(max_prod, max_prod_so_far)\n\n    return max_prod\n\n",
    "    if len(arr) == 1:\n        return arr[0]\n\n    max_prod = arr[0]\n    curr_prod = arr[0]\n    for i in range(1, len(arr)):\n        curr_prod = max(curr_prod * arr[i], arr[i])\n        max_prod = max(max_prod, curr_prod)\n\n    return max_prod\n",
    "    if not arr:\n        return 0\n\n    # dp[i] = max product of increasing subsequence ending at arr[i]\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)",
    "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    max_product = arr[0] * arr[1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            max_product = max(max_product, arr[i] * arr[i - 1], arr[i] * arr[i + 1])\n    return max_product\n\n",
    "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] * arr[i], arr[i])\n    return dp[-1]\n"
  ]
}