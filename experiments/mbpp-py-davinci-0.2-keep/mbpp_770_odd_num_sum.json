{
  "name": "mbpp_770_odd_num_sum",
  "language": "py",
  "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\ndef test_check():\n    check(odd_num_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum(map(lambda x: x ** 4, range(1, n * 2, 2)))\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum(i**4 for i in range(1, n*2, 2))\n\n",
    "    return sum(i ** 4 for i in range(1, n * 2, 2))\n\n",
    "    return sum(map(lambda x: x ** 4, range(1, n * 2, 2)))\n\n",
    "    return sum(map(lambda x: x ** 4, range(1, n * 2, 2)))\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum(map(lambda x: x**4, range(1, n*2, 2)))\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum([i**4 for i in range(1, n*2, 2)])\n\n",
    "    return sum([x ** 4 for x in range(1, n * 2, 2)])\n\n",
    "    return sum([i**4 for i in range(1, n*2, 2)])\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n",
    "    return sum([i**4 for i in range(1, n*2, 2)])\n\n",
    "    return sum(map(lambda x: x ** 4, range(1, n * 2, 2)))\n\n",
    "    return sum([i ** 4 for i in range(1, n * 2, 2)])\n\n"
  ]
}