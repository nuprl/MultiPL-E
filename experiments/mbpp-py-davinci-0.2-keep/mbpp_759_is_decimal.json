{
  "name": "mbpp_759_is_decimal",
  "language": "py",
  "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n\t\"\"\"\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "def check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('e666.86') == False\n    assert candidate('3.124587') == False\n    assert candidate('1.11') == True\n    assert candidate('1.1.11') == False\n\ndef test_check():\n    check(is_decimal)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n\n",
    "    try:\n        float(num)\n        if num.count('.') == 1 and len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n\n    if \".\" in num:\n        return len(num.split(\".\")[1]) == 2\n\n    return True\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if \".\" in num:\n            return len(num.split(\".\")[1]) == 2\n        else:\n            return True\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n\n",
    "    try:\n        float(num)\n        if num.count(\".\") == 1 and len(num.split(\".\")[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n",
    "    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n\n",
    "    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n"
  ]
}