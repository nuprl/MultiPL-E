{
  "name": "mbpp_622_get_median",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpli5k5uod.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli5k5uod.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n * 2];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < n && j < n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t\tarr3[k++] = arr1[i++]; \n\t\telse\n\t\t\tarr3[k++] = arr2[j++]; \n\t} \n\twhile (i < n) \n\t\tarr3[k++] = arr1[i++]; \n\twhile (j < n) \n\t\tarr3[k++] = arr2[j++]; \n\treturn arr3[n - 1]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpikrc33_a.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42843d]\n??:? void tmpikrc33_a.__unittest_L25_C1() [0x42801f]\n??:? void tmpikrc33_a.__modtest() [0x4281bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430615]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]\n??:? runModuleUnitTests [0x42c2cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428900]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and n in  \n    the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements  \n        of ar1[] are smaller than smallest(or first)  \n        element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements  \n        of ar2[] are smaller than smallest(or first)  \n        element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpli5k5uod.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli5k5uod.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor(count = 0; count <= n; count++) \n\t{\n\t\tif(i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpli5k5uod.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli5k5uod.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_rr8d45s.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp_rr8d45s.__unittest_L52_C1() [0x42801c]\n??:? void tmp_rr8d45s.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqa6ms2m_.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpqa6ms2m_.__unittest_L56_C1() [0x42801c]\n??:? void tmpqa6ms2m_.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n    be average of elements at index n-1 and \n    n in the array obtained after merging arr1 \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n        elements of ar1[] are smaller than \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n        elements of ar2[] are smaller than \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n * 2];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < n && j < n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t\tarr3[k++] = arr1[i++]; \n\t\telse\n\t\t\tarr3[k++] = arr2[j++]; \n\t} \n\twhile (i < n) \n\t\tarr3[k++] = arr1[i++]; \n\twhile (j < n) \n\t\tarr3[k++] = arr2[j++]; \n\treturn arr3[n - 1]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpikrc33_a.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42843d]\n??:? void tmpikrc33_a.__unittest_L25_C1() [0x42801f]\n??:? void tmpikrc33_a.__modtest() [0x4281bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430615]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]\n??:? runModuleUnitTests [0x42c2cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428900]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmp8fwg6js4.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8fwg6js4.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fwg6js4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and  \n        ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2 + 1], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and  \n        ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n    return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 .. n], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpdvjy_v5h.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdvjy_v5h.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvjy_v5h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and n in \n    the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements \n        of ar1[] are smaller than smallest(or first) \n        element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements \n        of ar2[] are smaller than smallest(or first) \n        element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n * 2];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < n && j < n) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tarr3[k] = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tarr3[k] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\twhile (i < n) {\n\t\tarr3[k] = arr1[i];\n\t\ti++;\n\t\tk++;\n\t}\n\twhile (j < n) {\n\t\tarr3[k] = arr2[j];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn (arr3[n - 1] + arr3[n]) / 2.0;\n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    for (count = 0; count <= n; count++) \n    { \n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and n in  \n    the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements  \n        of ar1[] are smaller than smallest(or first)  \n        element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements  \n        of ar2[] are smaller than smallest(or first)  \n        element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2.0; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1..$], arr2[0..n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2..$], arr2[0..n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n / 2 + 1], arr2[n / 2 - 1..$], n - n / 2 + 1); \n    return get_median(arr1[0..n / 2], arr2[n / 2..$], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \n  \n/* Driver program\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmp82mhjl8s.d(47): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82mhjl8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n * 2];\n\tlong i = 0, j = 0, k = 0; \n\twhile (i < n && j < n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t\tarr3[k++] = arr1[i++]; \n\t\telse\n\t\t\tarr3[k++] = arr2[j++]; \n\t} \n\twhile (i < n) \n\t\tarr3[k++] = arr1[i++]; \n\twhile (j < n) \n\t\tarr3[k++] = arr2[j++]; \n\treturn (n % 2 != 0) ? (float)arr3[n - 1] : (float)(arr3[n - 1] + arr3[n]) / 2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpp_hgubr4.d(23): Error: C style cast illegal, use `cast(float)arr3[n - 1]`\n/tmp/tmpp_hgubr4.d(23): Error: C style cast illegal, use `cast(float)(arr3[n - 1] + arr3[n])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_hgubr4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and n in \n    the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements  \n        of ar1[] are smaller than smallest(or first)  \n        element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements  \n        of ar2[] are smaller than smallest(or first)  \n        element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1_1qd36y.d(63): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp1_1qd36y.__unittest_L58_C1() [0x42801c]\n??:? void tmp1_1qd36y.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    for (count = 0; count <= n; count++) \n    { \n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n * 2];\n\tfor (long i = 0; i < n; i++) {\n\t\tarr3[i] = arr1[i];\n\t\tarr3[i + n] = arr2[i];\n\t}\n\t\n\tarr3.sort();\n\t\n\treturn arr3[n - 1];\n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpajh0rgwv.d(16): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajh0rgwv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    float m1 = median(arr1, n); \n    float m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr2[n / 2 - 1 .. n], arr1[0 .. n / 2 + 1], n - n / 2 + 1); \n    return get_median(arr2[n / 2 .. n], arr1[0 .. n / 2], n - n / 2); \n} \n  \nfloat median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpwrmvxkc0.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpwrmvxkc0.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrmvxkc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_rr8d45s.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp_rr8d45s.__unittest_L52_C1() [0x42801c]\n??:? void tmp_rr8d45s.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++)\n\t{\n\t\tif (i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. $], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. $], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. $], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. $], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \n  \n/* Driver program to test above function\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpre_quoc2.d(47): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre_quoc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n);  \n    long m2 = median(arr2, n);  \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1..n], arr2[0..n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2..n], arr2[0..n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr1[0..n / 2 + 1], arr2[n / 2 - 1..n], n - n / 2 + 1); \n    return get_median(arr1[0..n / 2], arr2[n / 2..n], n - n / 2); \n} \n  \nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \n  \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp4czdu77a.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4czdu77a.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4czdu77a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n        return get_median(arr1[n/2..$], arr2[0..n/2+1], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n    return get_median(arr1[0..n/2+1], arr2[n/2..$], n - n/2); \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp92aaptgb.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp92aaptgb.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp92aaptgb.d(18): Error: undefined identifier `median`\n/tmp/tmp92aaptgb.d(21): Error: undefined identifier `median`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92aaptgb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n       be average of elements at index n-1 and \n       n in the array obtained after merging arr1 \n       and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n          elements of arr1[] are smaller than \n          smallest(or first) element of arr2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n           elements of arr2[] are smaller than \n           smallest(or first) element of arr1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    float m1 = median(arr1, n); /* get the median of the first array */\n    float m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n%2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2]; \n} \n  \n/* Driver program to test above function\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpkdkj1iyg.d(47): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdkj1iyg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    float m1 = median(arr1, n); \n    float m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr2[n / 2 - 1 .. n], arr1[0 .. n / 2 + 1], n - n / 2 + 1); \n    return get_median(arr2[n / 2 .. n], arr1[0 .. n / 2], n - n / 2); \n} \n  \nfloat median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "/tmp/tmpwrmvxkc0.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpwrmvxkc0.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrmvxkc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp07s3ruq0.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07s3ruq0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    for (count = 0; count <= n; count++) \n    { \n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++)\n\t{\n\t\tif (i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n    of elements at index n-1 and n in the array obtained after \n    merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2.0; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and  ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2, n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2, n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr2[n/2-1..$], arr1, n - n/2 + 1); \n    return get_median(arr2[n/2..$], arr1, n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n%2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp426jo7cw.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp426jo7cw.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp426jo7cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n       be average of elements at index n-1 and \n       n in the array obtained after merging arr1 \n       and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n          elements of ar1[] are smaller than \n          smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n           elements of ar2[] are smaller than \n           smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++)\n\t{\n\t\tif (i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor(count = 0; count <= n; count++)\n\t{\n\t\tif(i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvesfgvxp.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpvesfgvxp.__unittest_L52_C1() [0x42801c]\n??:? void tmpvesfgvxp.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++)\n\t{\n\t\tif (i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) {\n\t\tif (i == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t} else if (j == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); \n    long m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. n], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n} \n  \nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpej060c4e.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpej060c4e.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej060c4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(arr1[0] < arr2[0])\n\t\t\t{\n\t\t\t\tm1 = arr1[0];\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm1 = arr2[0];\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr1[i] < arr2[j])\n\t\t\t{\n\t\t\t\tm2 = m1;\n\t\t\t\tm1 = arr1[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm2 = m1;\n\t\t\t\tm1 = arr2[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp5ucfkv4k.d(15): Error: variable `i` is shadowing variable `tmp5ucfkv4k.get_median.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ucfkv4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will \n\tbe average of elements at index n-1 and \n\tn in the array obtained after merging arr1 \n\tand arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/*Below is to handle case where all \n\t\telements of ar1[] are smaller than \n\t\tsmallest(or first) element of ar2[]*/\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/*Below is to handle case where all \n\t\telements of ar2[] are smaller than \n\t\tsmallest(or first) element of ar1[]*/\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n    be average of elements at index n-1 and \n    n in the array obtained after merging arr1 \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n        elements of arr1[] are smaller than \n        smallest(or first) element of arr2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n        elements of arr2[] are smaller than \n        smallest(or first) element of arr1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvesfgvxp.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpvesfgvxp.__unittest_L52_C1() [0x42801c]\n??:? void tmpvesfgvxp.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (long count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average \n\tof elements at index n-1 and n in the array obtained after \n\tmerging ar1 and ar2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/* Below is to handle case where all elements of ar1[] are \n\t\tsmaller than smallest(or first) element of ar2[] */\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/* Below is to handle case where all elements of ar2[] are \n\t\tsmaller than smallest(or first) element of ar1[] */\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; ++count) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\t++i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\t++j;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \n  \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor(long count = 0; count <= n; count++)\n\t{\n\t\tif(i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in arr1[m1....] and \n        arr2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in arr1[....m1] and \n        arr2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. n], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \n  \n//\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp9w0hkg8p.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9w0hkg8p.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9w0hkg8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    long m1 = median(arr1, n);  \n  \n    /* get the median of the second array */\n    long m2 = median(arr2, n);  \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n / 2 + 1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n / 2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2]; \n} \n  \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpustamapq.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpustamapq.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpustamapq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    long m1 = median(arr1, n);  \n  \n    /* get the median of the second array */\n    long m2 = median(arr2, n);  \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and \n        ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and \n        ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n%2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2];\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpcntbu85q.d(50): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcntbu85q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average \n\tof elements at index n-1 and n in the array obtained after \n\tmerging arr1 and arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/*Below is to handle case where all elements of ar1[] are \n\t\tsmaller than smallest(or first) element of ar2[]*/\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/*Below is to handle case where all elements of ar2[] are \n\t\tsmaller than smallest(or first) element of ar1[]*/\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) { \n        /* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n        if (i == n) { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n        else if (j == n) { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2) / 2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tarr3[k] = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tarr3[k] = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t\tk++; \n\t} \n\twhile (i < n) \n\t{ \n\t\tarr3[k] = arr1[i]; \n\t\ti++; \n\t\tk++; \n\t} \n\twhile (j < n) \n\t{ \n\t\tarr3[k] = arr2[j]; \n\t\tj++; \n\t\tk++; \n\t} \n\treturn arr3[n - 1]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdrq18ij8.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x4284de]\n??:? float tmpdrq18ij8.get_median(long[], long[], long) [0x427e01]\n??:? void tmpdrq18ij8.__unittest_L42_C1() [0x427fed]\n??:? void tmpdrq18ij8.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b351]\n??:? runModuleUnitTests [0x42c2bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong[] arr3 = new long[n*2];\n\tint i = 0, j = 0, k = 0; \n\twhile (i<n && j <n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t\tarr3[k++] = arr1[i++]; \n\t\telse\n\t\t\tarr3[k++] = arr2[j++]; \n\t} \n\twhile (i < n) \n\t\tarr3[k++] = arr1[i++]; \n\twhile (j < n) \n\t\tarr3[k++] = arr2[j++]; \n\treturn (arr3[n-1] + arr3[n])/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tm1 = max(arr1[i], arr2[i]);\n\t\t}\n\t\telse if(i == n)\n\t\t{\n\t\t\tm2 = min(arr1[i], arr2[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = min(arr1[i], arr2[i]);\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpd0xz9amt.d(15): Error: variable `i` is shadowing variable `tmpd0xz9amt.get_median.i`\n/tmp/tmpd0xz9amt.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpd0xz9amt.d(23): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpd0xz9amt.d(28): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0xz9amt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    long m1 = median(arr1, n);  \n  \n    /* get the median of the second array */\n    long m2 = median(arr2, n);  \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and \n        ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and \n        ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n%2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2];\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpcntbu85q.d(50): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcntbu85q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpxsxxjdu1.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpxsxxjdu1.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpxsxxjdu1.d(17): Error: undefined identifier `median`\n/tmp/tmpxsxxjdu1.d(18): Error: undefined identifier `median`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxsxxjdu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will be average \n\tof elements at index n-1 and n in the array obtained after \n\tmerging arr1 and arr2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/*Below is to handle case where all elements of ar1[] are \n\t\tsmaller than smallest(or first) element of ar2[]*/\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/*Below is to handle case where all elements of ar2[] are \n\t\tsmaller than smallest(or first) element of ar1[]*/\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++)\n\t{\n\t\tif (i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1..$], arr2[0..n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2..$], arr2[0..n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n / 2 + 1], arr2[n / 2 - 1..$], n - n / 2 + 1); \n    return get_median(arr1[0..n / 2], arr2[n / 2..$], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \n  \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmp4ps0mbcv.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4ps0mbcv.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ps0mbcv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor(count = 0; count <= n; count++)\n\t{\n\t\tif(i == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n)\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    long m1 = median(arr1, n);  \n  \n    /* get the median of the second array */\n    long m2 = median(arr2, n);  \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmp8jmvewj1.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8jmvewj1.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp8jmvewj1.d(18): Error: undefined identifier `median`\n/tmp/tmp8jmvewj1.d(21): Error: undefined identifier `median`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jmvewj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2.0; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1..$], arr2[0..n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2..$], arr2[0..n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n / 2 + 1], arr2[n / 2 - 1..$], n - n / 2 + 1); \n    return get_median(arr1[0..n / 2], arr2[n / 2..$], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2.0; \n    else\n        return arr[n / 2];\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpvcluhvbf.d(48): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcluhvbf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvesfgvxp.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpvesfgvxp.__unittest_L52_C1() [0x42801c]\n??:? void tmpvesfgvxp.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n        return get_median(arr1[n/2..$], arr2[0..n/2 + 1], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n    return get_median(arr1[0..n/2 + 1], arr2[n/2..$], n - n/2); \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmp9vsjgozd.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9vsjgozd.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp9vsjgozd.d(18): Error: undefined identifier `median`\n/tmp/tmp9vsjgozd.d(21): Error: undefined identifier `median`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vsjgozd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of arr1[] are smaller than  \n        smallest(or first) element of arr2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of arr2[] are smaller than  \n        smallest(or first) element of arr1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    float m1 = median(arr1, n); \n  \n    /* get the median of the second array */\n    float m2 = median(arr2, n); \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n/2-1..$], arr2[0..n/2+1], n - n/2 +1); \n        return get_median(arr1[n/2..$], arr2[0..n/2], n - n/2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..n/2+1], arr2[n/2-1..$], n - n/2 + 1); \n    return get_median(arr1[0..n/2], arr2[n/2..$], n - n/2); \n} \n  \n/* Function to get median of a sorted array */\nfloat median(long[] arr, long n) \n{ \n    if (n%2 == 0) \n        return (arr[n/2] + arr[n/2-1])/2; \n    else\n        return arr[n/2]; \n} \n  \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpa2udc8y9.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpa2udc8y9.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2udc8y9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n       be average of elements at index n-1 and \n       n in the array obtained after merging ar1 \n       and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n          elements of ar1[] are smaller than \n          smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n           elements of ar2[] are smaller than \n           smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n     of elements at index n-1 and n in the array obtained after \n     merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ntt5wl7.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp3ntt5wl7.__unittest_L56_C1() [0x42801c]\n??:? void tmp3ntt5wl7.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    /* get the median of the first array */\n    long m1 = median(arr1, n);  \n  \n    /* get the median of the second array */\n    long m2 = median(arr2, n);  \n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[(n / 2)..$], arr2[0..(n / 2)], n - n / 2); \n        return get_median(arr1[(n / 2)..$], arr2[0..(n / 2) + 1], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0..(n / 2)], arr2[(n / 2)..$], n - n / 2); \n    return get_median(arr1[0..(n / 2) + 1], arr2[(n / 2)..$], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n /\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpa9fg7p9s.d(48): Error: expression expected, not `unittest`\n/tmp/tmpa9fg7p9s.d(49): Error: found `{` when expecting `,`\n/tmp/tmpa9fg7p9s.d(50): Error: expression expected, not `alias`\n/tmp/tmpa9fg7p9s.d(50): Error: found `candidate` when expecting `,`\n/tmp/tmpa9fg7p9s.d(50): Error: expression expected, not `=`\n/tmp/tmpa9fg7p9s.d(50): Error: found `get_median` when expecting `,`\n/tmp/tmpa9fg7p9s.d(50): Error: expression expected, not `;`\n/tmp/tmpa9fg7p9s.d(52): Error: found `assert` when expecting `,`\n/tmp/tmpa9fg7p9s.d(52): Error: found `;` when expecting `,`\n/tmp/tmpa9fg7p9s.d(53): Error: found `;` when expecting `,`\n/tmp/tmpa9fg7p9s.d(54): Error: found `;` when expecting `,`\n/tmp/tmpa9fg7p9s.d(55): Error: expression expected, not `}`\n/tmp/tmpa9fg7p9s.d(56): Error: found `void` when expecting `,`\n/tmp/tmpa9fg7p9s.d(56): Error: found `{` when expecting `,`\n/tmp/tmpa9fg7p9s.d(56): Error: expression expected, not `}`\n/tmp/tmpa9fg7p9s.d(56): Error: found `End of File` when expecting `,`\n/tmp/tmpa9fg7p9s.d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\t/* Since there are 2n elements, median will \n\tbe average of elements at index n-1 and \n\tn in the array obtained after merging ar1 \n\tand ar2 */\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\t/*Below is to handle case where all \n\t\telements of ar1[] are smaller than \n\t\tsmallest(or first) element of ar2[]*/\n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t/*Below is to handle case where all \n\t\telements of ar2[] are smaller than \n\t\tsmallest(or first) element of ar1[]*/\n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\t/* Store the prev median */\n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5utyk9g8.d(64): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5utyk9g8.__unittest_L59_C1() [0x42801c]\n??:? void tmp5utyk9g8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n       be average of elements at index n-1 and \n       n in the array obtained after merging ar1 \n       and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n          elements of ar1[] are smaller than \n          smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n           elements of ar2[] are smaller than \n           smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); \n    long m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. n], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n} \n  \nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "/tmp/tmpej060c4e.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpej060c4e.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej060c4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2.0; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \n  \n    float m1 = median(arr1, n); \n    float m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. n], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpj2_1u0et.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpj2_1u0et.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpj2_1u0et.d(17): Error: undefined identifier `median`\n/tmp/tmpj2_1u0et.d(18): Error: undefined identifier `median`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2_1u0et.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \n  \n// Driver program to test above function \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2.0; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; \n  \n    long m1 = median(arr1, n); /* get the median of the first array */\n    long m2 = median(arr2, n); /* get the median of the second array */\n  \n    /* If medians are equal then return either m1 or m2 */\n    if (m1 == m2) \n        return m1; \n  \n    /* if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2] */\n    if (m1 < m2) \n    { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1 .. n], arr2[0 .. n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2 .. n], arr2[0 .. n / 2], n - n / 2); \n    } \n  \n    /* if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...] */\n    if (n % 2 == 0) \n        return get_median(arr1[0 .. n / 2 + 1], arr2[n / 2 - 1 .. n], n - n / 2 + 1); \n    return get_median(arr1[0 .. n / 2], arr2[n / 2 .. n], n - n / 2); \n} \n  \n/* Function to get median of a sorted array */\nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmpjt8uunie.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpjt8uunie.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt8uunie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvewfkoty.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvewfkoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvesfgvxp.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpvesfgvxp.__unittest_L52_C1() [0x42801c]\n??:? void tmpvesfgvxp.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b276]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430409]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430395]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b24d]\n??:? runModuleUnitTests [0x42c1b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n       be average of elements at index n-1 and \n       n in the array obtained after merging arr1 \n       and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n          elements of ar1[] are smaller than \n          smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n           elements of ar2[] are smaller than \n           smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n    if (n <= 0) \n        return -1; \n    if (n == 1) \n        return (arr1[0] + arr2[0]) / 2; \n    if (n == 2) \n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2; \n  \n    long m1 = median(arr1, n); \n    long m2 = median(arr2, n); \n  \n    if (m1 == m2) \n        return m1; \n  \n    if (m1 < m2) { \n        if (n % 2 == 0) \n            return get_median(arr1[n / 2 - 1..$], arr2[0..n / 2 + 1], n - n / 2 + 1); \n        return get_median(arr1[n / 2..$], arr2[0..n / 2], n - n / 2); \n    } \n  \n    if (n % 2 == 0) \n        return get_median(arr2[n / 2 - 1..$], arr1[0..n / 2 + 1], n - n / 2 + 1); \n    return get_median(arr2[n / 2..$], arr1[0..n / 2], n - n / 2); \n} \n  \nlong median(long[] arr, long n) \n{ \n    if (n % 2 == 0) \n        return (arr[n / 2] + arr[n / 2 - 1]) / 2; \n    else\n        return arr[n / 2]; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "/tmp/tmp39j6kzne.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp39j6kzne.d(15): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39j6kzne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} \nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
      "timestamp": 1666123822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}