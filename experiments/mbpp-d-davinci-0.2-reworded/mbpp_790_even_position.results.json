{
  "name": "mbpp_790_even_position",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach (i, num; nums)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(index, value; nums)\n\t{\n\t\tif(index % 2 == 0 && value % 2 != 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,e; nums)\n\t{\n\t\tif(i%2==0 && e%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(index, value; nums)\n\t{\n\t\tif(index % 2 == 0 && value % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif (i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums) \n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\tif(n%2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif (i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(e % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(index, num; nums)\n\t{\n\t\tif(index % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n/*\n\tWrite a dthon function to find the position of the second occurrence of a given array element. Return -1 if the element does not exist in the array.\n*/\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, x; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(x % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,e; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(e%2!=0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2 == 0 && n%2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tif(num % 2 != 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tint i;\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpp6rdx_sp.d(11): Error: variable `i` is shadowing variable `tmpp6rdx_sp.even_position.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6rdx_sp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tint i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(index, num; nums) \n\t{\n\t\tif(index % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}