{
  "name": "mbpp_129_magic_square_test",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\n*/\nbool magic_square_test(long[][] my_matrix) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = magic_square_test;\n\n    assert(candidate([[7L, 12L, 1L, 14L], [2L, 13L, 8L, 11L], [16L, 3L, 10L, 5L], [9L, 6L, 15L, 4L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 8L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 7L]]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\t// Check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the matrix has an odd number of rows/columns\n\tif (my_matrix.length % 2 == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the sum of the rows is equal to the sum of the columns\n\tlong sum = 0;\n\tforeach (row; my_matrix)\n\t{\n\t\tsum += row[0];\n\t}\n\t\n\tforeach (row; my_matrix)\n\t{\n\t\tlong row_sum = 0;\n\t\tforeach (col; row)\n\t\t{\n\t\t\trow_sum += col;\n\t\t}\n\t\tif (row_sum != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tforeach (col; my_matrix[0])\n\t{\n\t\tlong col_sum = 0;\n\t\tforeach (row; my_matrix)\n\t\t{\n\t\t\tcol_sum += row[col];\n\t\t}\n\t\tif (col_sum != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Check if the sum of the diagonals is equal to the sum of the rows/columns\n\tlong diag_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tdiag_sum += my_matrix[i][i];\n\t}\n\tif (diag_sum != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\tdiag_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tdiag_sum += my_matrix[i][my_matrix.length - 1 - i];\n\t}\n\tif (diag_sum != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint[] sum_rows = new int[n];\n\tint[] sum_cols = new int[n];\n\tint sum_diag1 = 0;\n\tint sum_diag2 = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tsum_rows[i] += my_matrix[i][j];\n\t\t\tsum_cols[j] += my_matrix[i][j];\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tsum_diag1 += my_matrix[i][j];\n\t\t\t}\n\t\t\tif (i + j == n - 1) \n\t\t\t{\n\t\t\t\tsum_diag2 += my_matrix[i][j];\n\t\t\t}\n\t\t}\n\t}\n\tsum = sum_rows[0];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (sum_rows[i] != sum || sum_cols[i] != sum) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (sum_diag1 != sum || sum_diag2 != sum) \n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_row = 0;\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum_row += col;\n\t\t}\n\t\tif(sum == 0)\n\t\t{\n\t\t\tsum = sum_row;\n\t\t}\n\t\telse if(sum != sum_row)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_col = 0;\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum_col += my_matrix[col][row];\n\t\t}\n\t\tif(sum != sum_col)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_diag += my_matrix[row][row];\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_diag2 += my_matrix[row][my_matrix.length - row - 1];\n\t}\n\t\n\tif(sum != sum_diag || sum != sum_diag2)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\t// Check if the matrix is a square matrix\n\tif (my_matrix.length != my_matrix[0].length)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the matrix is a magic square\n\tlong sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tlong row_sum = 0;\n\t\tlong col_sum = 0;\n\t\tfor (int j = 0; j < my_matrix[0].length; j++)\n\t\t{\n\t\t\trow_sum += my_matrix[i][j];\n\t\t\tcol_sum += my_matrix[j][i];\n\t\t}\n\t\tif (row_sum != sum || col_sum != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\tint sum_row = 0;\n\tint sum_col = 0;\n\t\n\t// Sum the first row\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\t// Check the sum of the diagonals\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t\tsum_diag2 += my_matrix[i][n - i - 1];\n\t}\n\t\n\t// Check the sum of the rows\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t}\n\t\tif (sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_row = 0;\n\t}\n\t\n\t// Check the sum of the columns\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif (sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_col = 0;\n\t}\n\t\n\t// Check the sum of the diagonals\n\tif (sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag_1 = 0;\n\tlong sum_diag_2 = 0;\n\t\n\t// Check if the matrix is a square matrix\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t// Check if the matrix is a magic square\n\tforeach (row; my_matrix)\n\t{\n\t\tlong row_sum = 0;\n\t\tforeach (col; row)\n\t\t{\n\t\t\trow_sum += col;\n\t\t}\n\t\tif (sum == 0)\n\t\t\tsum = row_sum;\n\t\telse if (sum != row_sum)\n\t\t\treturn false;\n\t}\n\t\n\t// Check if the matrix is a magic square\n\tforeach (col; my_matrix[0])\n\t{\n\t\tlong col_sum = 0;\n\t\tforeach (row; my_matrix)\n\t\t{\n\t\t\tcol_sum += my_matrix[row][col];\n\t\t}\n\t\tif (sum != col_sum)\n\t\t\treturn false;\n\t}\n\t\n\t// Check if the matrix is a magic square\n\tforeach (row; my_matrix)\n\t{\n\t\tsum_diag_1 += my_matrix[row][row];\n\t\tsum_diag_2 += my_matrix[row][my_matrix.length - row - 1];\n\t}\n\tif (sum != sum_diag_1 || sum != sum_diag_2)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tlong[][] magic_matrix = [\n\t\t[16, 3, 2, 13],\n\t\t[5, 10, 11, 8],\n\t\t[9, 6, 7, 12],\n\t\t[4, 15, 14, 1]\n\t];\n\t\n\tlong sum = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag_rev = 0;\n\t\n\tforeach(row; magic_matrix)\n\t{\n\t\tsum_row = 0;\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum_row += col;\n\t\t}\n\t\tif(sum == 0)\n\t\t{\n\t\t\tsum = sum_row;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(sum != sum_row)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(col; magic_matrix[0])\n\t{\n\t\tsum_col = 0;\n\t\tforeach(row; magic_matrix)\n\t\t{\n\t\t\tsum_col += row[col];\n\t\t}\n\t\tif(sum != sum_col)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < magic_matrix.length; i++)\n\t{\n\t\tsum_diag += magic_matrix[i][i];\n\t}\n\t\n\tif(sum != sum_diag)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < magic_matrix.length; i++)\n\t{\n\t\tsum_diag_rev += magic_matrix[i][magic_matrix.length - 1 - i];\n\t}\n\t\n\tif(sum != sum_diag_rev)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\tint sum_row = 0;\n\tint sum_col = 0;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum += my_matrix[i][i];\n\t\tsum_diag2 += my_matrix[i][n-i-1];\n\t}\n\t\n\tif (sum != sum_diag2) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif (sum_row != sum || sum_col != sum) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_of_diagonals = 0;\n\tlong sum_of_rows = 0;\n\tlong sum_of_columns = 0;\n\tlong n = my_matrix.length;\n\t\n\t// calculate the sum of the first row\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum_of_rows += my_matrix[0][i];\n\t}\n\t\n\t// calculate the sum of the first column\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum_of_columns += my_matrix[i][0];\n\t}\n\t\n\t// calculate the sum of the diagonals\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum_of_diagonals += my_matrix[i][i];\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the columns\n\tif(sum_of_rows != sum_of_columns)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the diagonals is equal to the sum of the rows\n\tif(sum_of_diagonals != sum_of_rows)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the columns\n\tif(sum_of_rows != sum_of_columns)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the columns\n\tif(sum_of_rows != sum_of_columns)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the columns\n\tif(sum_of_rows != sum_of_columns)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the columns\n\tif(sum_of_rows != sum_of_columns)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is",
    "{\n\t//check if the matrix is a square\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t//check if the sum of the rows is equal\n\tlong row_sum = 0;\n\tforeach(row; my_matrix)\n\t{\n\t\tlong temp_sum = 0;\n\t\tforeach(element; row)\n\t\t{\n\t\t\ttemp_sum += element;\n\t\t}\n\t\tif (row_sum == 0)\n\t\t\trow_sum = temp_sum;\n\t\telse if (row_sum != temp_sum)\n\t\t\treturn false;\n\t}\n\t\n\t//check if the sum of the columns is equal\n\tlong column_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tlong temp_sum = 0;\n\t\tfor (int j = 0; j < my_matrix.length; j++)\n\t\t{\n\t\t\ttemp_sum += my_matrix[j][i];\n\t\t}\n\t\tif (column_sum == 0)\n\t\t\tcolumn_sum = temp_sum;\n\t\telse if (column_sum != temp_sum)\n\t\t\treturn false;\n\t}\n\t\n\t//check if the sum of the diagonals is equal\n\tlong diagonal_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tlong temp_sum = 0;\n\t\ttemp_sum += my_matrix[i][i];\n\t\tif (diagonal_sum == 0)\n\t\t\tdiagonal_sum = temp_sum;\n\t\telse if (diagonal_sum != temp_sum)\n\t\t\treturn false;\n\t}\n\t\n\tlong diagonal_sum2 = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tlong temp_sum = 0;\n\t\ttemp_sum += my_matrix[i][my_matrix.length - i - 1];\n\t\tif (diagonal_",
    "{\n\tint n = my_matrix.length;\n\tlong sum = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_col = 0;\n\tlong sum_row = 0;\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diag2 += my_matrix[i][n-i-1];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_col += my_matrix[i][j];\n\t\t\tsum_row += my_matrix[j][i];\n\t\t}\n\t\tif (sum_col != sum || sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_col = 0;\n\t\tsum_row = 0;\n\t}\n\t\n\tif (sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag1 = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\tint size = my_matrix.length;\n\t\n\t// Calculate the sum of the first row\n\tforeach(i; 0 .. size)\n\t{\n\t\tsum_row += my_matrix[0][i];\n\t}\n\t\n\t// Calculate the sum of the first column\n\tforeach(i; 0 .. size)\n\t{\n\t\tsum_col += my_matrix[i][0];\n\t}\n\t\n\t// Calculate the sum of the diagonal from top left to bottom right\n\tforeach(i; 0 .. size)\n\t{\n\t\tsum_diag1 += my_matrix[i][i];\n\t}\n\t\n\t// Calculate the sum of the diagonal from top right to bottom left\n\tforeach(i; 0 .. size)\n\t{\n\t\tsum_diag2 += my_matrix[i][size - i - 1];\n\t}\n\t\n\t// Check if the sum of the diagonals is equal to the sum of the rows and columns\n\tif(sum_diag1 != sum_diag2 || sum_diag1 != sum_row || sum_diag1 != sum_col)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Calculate the sum of the rows\n\tforeach(i; 1 .. size)\n\t{\n\t\tsum = 0;\n\t\tforeach(j; 0 .. size)\n\t\t{\n\t\t\tsum += my_matrix[i][j];\n\t\t}\n\t\tif(sum != sum_row)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Calculate the sum of the columns\n\tforeach(i; 1 .. size)\n\t{\n\t\tsum = 0;\n\t\tforeach(j; 0 .. size)\n\t\t{\n\t\t\tsum += my_matrix[j][i];\n\t\t}\n\t\tif(sum != sum_col)\n",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t// check if the matrix is odd\n\tif (my_matrix.length % 2 == 0)\n\t\treturn false;\n\t\n\t// check if the matrix is a magic square\n\tlong sum = 0;\n\tforeach (row; my_matrix)\n\t\tsum += row[0];\n\t\n\tforeach (row; my_matrix)\n\t{\n\t\tlong row_sum = 0;\n\t\tforeach (col; row)\n\t\t\trow_sum += col;\n\t\tif (row_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tforeach (col; my_matrix[0])\n\t{\n\t\tlong col_sum = 0;\n\t\tforeach (row; my_matrix)\n\t\t\tcol_sum += row[col];\n\t\tif (col_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tlong diag_sum = 0;\n\tforeach (i; my_matrix.length)\n\t\tdiag_sum += my_matrix[i][i];\n\tif (diag_sum != sum)\n\t\treturn false;\n\t\n\tdiag_sum = 0;\n\tforeach (i; my_matrix.length)\n\t\tdiag_sum += my_matrix[i][my_matrix.length - i - 1];\n\tif (diag_sum != sum)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_of_diagonals = 0;\n\tint sum_of_rows = 0;\n\tint sum_of_columns = 0;\n\t\n\t// sum of first diagonal\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_of_diagonals += my_matrix[i][i];\n\t}\n\t\n\t// sum of second diagonal\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_of_diagonals += my_matrix[i][n - i - 1];\n\t}\n\t\n\t// sum of rows\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_of_rows += my_matrix[i][j];\n\t\t}\n\t}\n\t\n\t// sum of columns\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_of_columns += my_matrix[j][i];\n\t\t}\n\t}\n\t\n\tif (sum_of_diagonals == sum_of_rows && sum_of_diagonals == sum_of_columns)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\tlong n = my_matrix.length;\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum += my_matrix[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t\tsum_diag2 += my_matrix[i][n - i - 1];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif (sum_row != sum || sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t}\n\t\n\tif (sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t// check if the matrix is odd\n\tif (my_matrix.length % 2 == 0)\n\t\treturn false;\n\t\n\t// check if the matrix is a magic square\n\tlong magic_number = my_matrix.length * (my_matrix.length * my_matrix.length + 1) / 2;\n\tlong sum_row = 0;\n\tlong sum_column = 0;\n\tlong sum_diagonal = 0;\n\tlong sum_reverse_diagonal = 0;\n\t\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tfor (int j = 0; j < my_matrix[0].length; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_column += my_matrix[j][i];\n\t\t\tif (i == j)\n\t\t\t\tsum_diagonal += my_matrix[i][j];\n\t\t\tif (i + j == my_matrix.length - 1)\n\t\t\t\tsum_reverse_diagonal += my_matrix[i][j];\n\t\t}\n\t\tif (sum_row != magic_number || sum_column != magic_number)\n\t\t\treturn false;\n\t\tsum_row = 0;\n\t\tsum_column = 0;\n\t}\n\tif (sum_diagonal != magic_number || sum_reverse_diagonal != magic_number)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong[] sums = new long[my_matrix.length];\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n\t\tsum = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum += col;\n\t\t}\n\t\tsums ~= sum;\n",
    "{\n\tint sum = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\tint n = my_matrix.length;\n\t\n\t// sum of the first row\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\t// sum of the first column\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum += my_matrix[i][0];\n\t}\n\t\n\t// sum of the diagonal\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\t\n\t// sum of the other diagonal\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum_diag2 += my_matrix[i][n - i - 1];\n\t}\n\t\n\t// sum of the rows\n\tforeach(i; 1 .. n)\n\t{\n\t\tint sum_row = 0;\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t}\n\t\tif(sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// sum of the columns\n\tforeach(i; 1 .. n)\n\t{\n\t\tint sum_col = 0;\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif(sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check diagonals\n\tif(sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint[] sums = new int[2 * n + 2];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tsum += my_matrix[i][j];\n\t\t\tsums[i] += my_matrix[i][j];\n\t\t\tsums[n + j] += my_matrix[i][j];\n\t\t\tif (i == j)\n\t\t\t\tsums[2 * n] += my_matrix[i][j];\n\t\t\tif (i + j == n - 1)\n\t\t\t\tsums[2 * n + 1] += my_matrix[i][j];\n\t\t}\n\t}\n\t\n\tforeach(int s; sums)\n\t{\n\t\tif (s != sum)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum2 = 0;\n\tint sum3 = 0;\n\tint sum4 = 0;\n\tint sum5 = 0;\n\tint sum6 = 0;\n\tint sum7 = 0;\n\tint sum8 = 0;\n\tint sum9 = 0;\n\tint sum10 = 0;\n\tint sum11 = 0;\n\tint sum12 = 0;\n\tint sum13 = 0;\n\tint sum14 = 0;\n\tint sum15 = 0;\n\tint sum16 = 0;\n\tint sum17 = 0;\n\tint sum18 = 0;\n\tint sum19 = 0;\n\tint sum20 = 0;\n\tint sum21 = 0;\n\tint sum22 = 0;\n\tint sum23 = 0;\n\tint sum24 = 0;\n\tint sum25 = 0;\n\tint sum26 = 0;\n\tint sum27 = 0;\n\tint sum28 = 0;\n\tint sum29 = 0;\n\tint sum30 = 0;\n\tint sum31 = 0;\n\tint sum32 = 0;\n\tint sum33 = 0;\n\tint sum34 = 0;\n\tint sum35 = 0;\n\tint sum36 = 0;\n\tint sum37 = 0;\n\tint sum38 = 0;\n\tint sum39 = 0;\n\tint sum40 = 0;\n\tint sum41 = 0;\n\tint sum42 = 0;\n\tint sum43 = 0;\n\tint sum44 = 0;\n\tint sum45 = 0;\n\tint sum46 = 0;\n\tint sum47 = 0;\n\tint sum48 = 0;\n\tint sum49 = 0;\n\tint sum50 = 0;\n\tint sum51 = 0;\n\tint sum52 = 0;\n\tint sum53 = 0;\n\tint sum54 = 0;\n\tint sum55 = 0;\n\tint sum56 = 0;\n\tint sum57 = 0;\n\tint sum58 = 0;\n\tint sum59 = 0;\n\tint sum60 = 0;\n\tint sum61 = 0;\n\tint sum62 = 0;\n\tint"
  ]
}