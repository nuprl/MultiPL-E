{
  "name": "mbpp_760_unique_Element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i;1..arr_copy.length)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto result = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tresult = result ^ arr[i];\n\t}\n\treturn result == 0;\n}",
    "{\n\tint len = arr.length;\n\tint count = 0;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tfor(int j = 0; j < len; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr[];\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\t\n\tforeach(i;arr)\n\t{\n\t\tif(arr.count(i)>1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i, elem; arr_copy)\n\t{\n\t\tif(i < arr_copy.length - 1)\n\t\t{\n\t\t\tif(elem == arr_copy[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i;arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}"
  ]
}