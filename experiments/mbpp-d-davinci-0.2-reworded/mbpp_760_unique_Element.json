{
  "name": "mbpp_760_unique_Element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i;1..arr_copy.length)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto result = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tresult = result ^ arr[i];\n\t}\n\treturn result == 0;\n}",
    "{\n\tint len = arr.length;\n\tint count = 0;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tfor(int j = 0; j < len; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr[];\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\t\n\tforeach(i;arr)\n\t{\n\t\tif(arr.count(i)>1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i, elem; arr_copy)\n\t{\n\t\tif(i < arr_copy.length - 1)\n\t\t{\n\t\t\tif(elem == arr_copy[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i;arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\tfor(i = 0; i < arr.length; i++)\n\t{\n\t\tfor(j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tbool flag = true;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tauto n = arr.length;\n\tint i;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i, j; zip(arr_copy[0 .. $ - 1], arr_copy[1 .. $]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\t//return arr.length == arr.sort.uniq.length;\n\treturn arr.length == arr.sort.uniq.length;\n}",
    "{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(!unique_arr.canFind(i))\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tsort(arr);\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif (first != arr[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tsort(arr);\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp[0] == temp[$-1];\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto result = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tresult = result ^ i;\n\t}\n\treturn result == 0;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.length = unique.length.uniq;\n\treturn unique.length == 1;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tbool result = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} ",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tcount = 0;\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool[] check = new bool[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(check[i] == true)\n\t\t\treturn false;\n\t\tcheck[i] = true;\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(element; arr)\n\t{\n\t\tif(element != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}",
    "{\n\tbool result = false;\n\tlong[] unique_arr = arr.dup;\n\tunique_arr = unique_arr.sort;\n\tunique_arr = unique_arr.uniq;\n\tif (unique_arr.length == 1) \n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\t\n\tfor (int i = 0; i < temp.length - 1; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 1..arr.length-1)\n\t\t{\n\t\t\tif (arr[i] != arr[0])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t\treturn false;\n\t\telse\n\t\t\tunique_arr ~= i;\n\t}\n\treturn true;\n}",
    "{\n\tbool isUnique = true;\n\tlong[] sorted = arr.dup.sort();\n\tforeach(i, v; sorted)\n\t{\n\t\tif(i != 0 && v == sorted[i - 1])\n\t\t{\n\t\t\tisUnique = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; i+1..arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tfor(int i = 0; i < arr_copy.length; i++)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool flag = false;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res ^= arr[i]; \n    return res == 0; \n} ",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 0..arr.length)\n\t\t{\n\t\t\tforeach(j; 0..arr.length)\n\t\t\t{\n\t\t\t\tif(i != j)\n\t\t\t\t{\n\t\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n    if (arr.length == 1)\n        return true;\n    else\n    {\n        long[] temp = arr.dup;\n        temp.sort;\n        for (int i = 0; i < temp.length - 1; i++)\n        {\n            if (temp[i] == temp[i + 1])\n                return false;\n        }\n        return true;\n    }\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(i; arr)\n\t{\n\t\tset.insert(i);\n\t}\n\treturn set.length == 1;\n}",
    "{\n\tauto a = arr.dup;\n\ta.sort;\n\tforeach(i;0..a.length-1)\n\t{\n\t\tif(a[i]==a[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n    return (res == 0); \n} ",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. arr.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i;arr)\n\t{\n\t\tif(unique_arr.length == 0)\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach(j;unique_arr)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint[] count = new int[arr.length];\n\tint i = 0;\n\tforeach(long a; arr)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(long b; arr)\n\t\t{\n\t\t\tif(a == b)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tforeach(int c; count)\n\t{\n\t\tif(c > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tauto len = arr.length;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tfor (int j = i + 1; j < len; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tisUnique = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i!=j)\n\t\t\t{\n\t\t\t\tif(arr[i]==arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach (i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach (j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif (i != j)\n\t\t\t\t{\n\t\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n    long[] arr2 = arr.dup;\n    arr2.sort;\n    return arr2.length == arr2.uniq.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tint[] count = new int[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n    long[] unique_arr;\n    foreach(elem; arr)\n    {\n        if(elem in unique_arr)\n        {\n            return false;\n        }\n        else\n        {\n            unique_arr ~= elem;\n        }\n    }\n    return true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tint[] count = new int[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(element; arr)\n\t{\n\t\tif(element != arr[0])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.uniq;\n\treturn arr.length == unique_arr.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} ",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!result)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] distinct_arr = arr.dup;\n\tdistinct_arr.sort;\n\tdistinct_arr.unique;\n\treturn distinct_arr.length == 1;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr = unique_arr.uniq;\n\tif (unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tauto set = arr.sort().unique;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] unique_arr = [];\n\tforeach(i; arr)\n\t{\n\t\tif(!unique_arr.canFind(i))\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}",
    "{\n\tlong[] distinct_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(!distinct_arr.canFind(i))\n\t\t{\n\t\t\tdistinct_arr ~= i;\n\t\t}\n\t}\n\treturn distinct_arr.length == 1;\n}",
    "{\n\tint len = arr.length;\n\tint i, j;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tfor (j = 0; j < len; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool flag = false;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == true)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tlong[] arr1 = arr.dup;\n\tarr1.sort;\n\tforeach(i; 0 .. arr1.length - 1)\n\t{\n\t\tif(arr1[i] == arr1[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto arr_set = arr.sort().uniq;\n\treturn arr_set.length == 1;\n}",
    "{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t\treturn false;\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n\tbool flag = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tbool result = false;\n\tlong[] distinct_arr = arr.dup;\n\tdistinct_arr.sort;\n\tdistinct_arr.unique;\n\tif (arr.length == distinct_arr.length)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] temp = arr.dup;\n    temp.sort;\n    for (int i = 0; i < temp.length - 1; i++) \n    {\n        if (temp[i] == temp[i + 1]) \n        {\n            return false;\n        }\n    }\n    return true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort();\n\tforeach(i; 1..temp.length)\n\t{\n\t\tif(temp[i] == temp[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint[] count = new int[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < count.length; i++)\n\t{\n\t\tif (count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (i != j) \n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j]) \n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\t//int[] arr = [1,2,3,4,5,6,7,8,9,10];\n\tint[] arr2 = [1,2,3,4,5,6,7,8,9,10,1];\n\tint[] arr3 = [1,2,3,4,5,6,7,8,9,10,1,2];\n\tint[] arr4 = [1,2,3,4,5,6,7,8,9,10,1,2,3];\n\tint[] arr5 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4];\n\tint[] arr6 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5];\n\tint[] arr7 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6];\n\tint[] arr8 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7];\n\tint[] arr9 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8];\n\tint[] arr10 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9];\n\tint[] arr11 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\n\tint[] arr12 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1];\n\tint[] arr13 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tauto result = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tresult = result ^ arr[i];\n\t}\n\treturn result == 0;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique = arr.dup.sort.uniq;\n\treturn unique.length == 1;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} ",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == false)\n\t\t\tbreak;\n\t}\n\treturn flag;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} ",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr = unique_arr.dup.removeDuplicates;\n\tif (unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i!=0 && e==arr2[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = false;\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    if (n == 1) \n        return true; \n    sort(arr); \n    for (int i = 1; i < n; i++) \n        if (arr[i] == arr[i - 1]) \n            return false; \n    return true; \n} ",
    "{\n\t//long[] arr = [1,2,3,4,5,6,7,8,9,10];\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; arr_copy)\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n    long[] arr_copy = arr.dup;\n    arr_copy.sort;\n    foreach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n    {\n        if(i == j)\n        {\n            return false;\n        }\n    }\n    return true;\n}",
    "{\n\tauto hash = new HashSet!(long)();\n\tforeach(i;arr)\n\t{\n\t\tif(hash.insert(i))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = 0; j < n; j++) \n        { \n            if (arr[i] == arr[j]) \n                count++; \n        } \n        if (count > 1) \n            return false; \n        count = 0; \n    } \n    return true; \n} ",
    "{\n\treturn arr.length == 1;\n}",
    "{\n    bool flag = true;\n    for (int i = 0; i < arr.length; i++) \n    {\n        for (int j = i + 1; j < arr.length; j++) \n        {\n            if (arr[i] == arr[j]) \n            {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}",
    "{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(i; arr)\n\t{\n\t\tset.insert(i);\n\t}\n\treturn set.length == 1;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n  \n    return res == 0; \n} ",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{ \n\tlong n = arr.length; \n\tlong count = 0; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tfor (long j = 0; j < n; j++) \n\t\t{ \n\t\t\tif (arr[i] == arr[j]) \n\t\t\t\tcount++; \n\t\t} \n\t\tif (count > 1) \n\t\t\treturn false; \n\t\tcount = 0; \n\t} \n\treturn true; \n} ",
    "{\n\tbool result = false;\n\tif (arr.length == 1) \n\t{\n\t\tresult = true;\n\t}\n\telse \n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort();\n\t\tfor (int i = 0; i < temp.length - 1; i++) \n\t\t{\n\t\t\tif (temp[i] == temp[i + 1]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tunique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!unique)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tint i, j;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}",
    "{\n\tbool result = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] unique_arr = arr.dup;\n    unique_arr.sort;\n    unique_arr = unique_arr.dup.uniq;\n    if(unique_arr.length == 1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
    "{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(unique_arr.length == 0)\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool found = false;\n\t\t\tforeach(j; unique_arr)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!found)\n\t\t\t{\n\t\t\t\tunique_arr ~= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t\treturn false;\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tauto result = true;\n\tauto set = new Set!(long)();\n\tforeach(i; arr)\n\t{\n\t\tif(!set.insert(i))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tforeach(i; 0 .. arr2.length)\n\t{\n\t\tif(i == arr2.length - 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.uniq;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tfor(i = 0; i < arr.length; i++)\n\t{\n\t\tfor(j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}"
  ]
}