{
  "name": "mbpp_471_find_remainder",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr) \n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long rem = 1; \n    foreach(long i; arr) \n    { \n        rem = (rem * i) % n; \n    } \n    return rem; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(long i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t\tprod = (prod * i) % n; \n\treturn prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    }\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp824o0i85.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp824o0i85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach(i; arr) \n        result = (result * i) % n; \n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(elem; arr) \n    { \n        prod = (prod * elem) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i;arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong remainder = 1;\n\tforeach(i; arr)\n\t{\n\t\tremainder = (remainder * i) % n;\n\t}\n\treturn remainder;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach (i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n    long result = 1;\n    foreach (i; arr) \n    {\n        result = (result * i) % n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t\tprod = (prod * i) % n;\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product % n;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(elem; arr)\n    {\n        prod = (prod * elem) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) \n        prod = (prod * (arr[i] % n)) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tprod = (prod * i) % n;\n\t}\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr) \n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach(i; arr)\n    {\n        result = (result * i) % n; \n    }\n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(elem; arr) \n    { \n        prod = (prod * elem) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach (i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong remainder = 1;\n\tforeach(i; arr)\n\t{\n\t\tremainder = (remainder * i) % n;\n\t}\n\treturn remainder;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(long i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach(i; arr) \n    { \n        result = (result * i) % n; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr) \n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t\tprod = (prod * i) % n; \n\treturn prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tprod = (prod * i) % n;\n\t}\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(elem; arr) \n\t{\n\t\tresult = (result * elem) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong remainder = 1;\n\tforeach(i; arr)\n\t{\n\t\tremainder = (remainder * i) % n;\n\t}\n\treturn remainder;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tprod = (prod * i) % n;\n\t}\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach (i; arr) \n    { \n        result = (result * i) % n; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t\tprod = (prod * i) % n;\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach(i; arr) \n    { \n        result = (result * i) % n; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tprod = (prod * i) % n;\n\t}\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach (i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i;arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i;arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr) \n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) \n        prod = (prod * (arr[i] % n)) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach (i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long product = 1; \n    foreach(i; arr) \n        product = (product * i) % n; \n    return product; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tresult = (result * arr[i]) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t{ \n\t\tprod = (prod * (i % n)) % n; \n\t} \n\treturn prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t\tprod = (prod * i) % n; \n\treturn prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t\tprod = (prod * i) % n; \n\treturn prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr) \n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(long i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t\tresult = (result * i) % n;\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n  \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long result = 1; \n    foreach(i; arr)\n    {\n        result = (result * i) % n; \n    }\n    return result; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach (i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach (item; arr)\n\t{\n\t\tresult = (result * item) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tprod = (prod * i) % n;\n\t}\n\treturn prod;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 1;\n\tforeach(var i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "/tmp/tmp6o6yahwp.d(11): Error: undefined identifier `var`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6o6yahwp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} \nunittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}