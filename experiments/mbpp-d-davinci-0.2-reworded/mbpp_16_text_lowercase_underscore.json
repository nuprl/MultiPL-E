{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tif(text.length == 1)\n\t\treturn islower(text[0]);\n\t\n\tif(text[0] == '_')\n\t\treturn false;\n\t\n\tif(!islower(text[0]))\n\t\treturn false;\n\t\n\tfor(int i = 1; i < text.length; i++)\n\t{\n\t\tif(!islower(text[i]) && text[i] != '_')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' ||",
    "{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif (len == 0)\n\t\treturn false;\n\t\t\n\tif (text[i] == '_')\n\t\treturn false;\n\t\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == len - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == ' ')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\t')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\n')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\r')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\0')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\v')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\f')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\b')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\a')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\e')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\x1b')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\x1f')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i",
    "{\n\treturn text.match(\"^[a-z_]+$\");\n}",
    "{\n\tif (text.length == 0) return false;\n\t\n\tbool result = true;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tbool underscore = false;\n\tbool lowercase = false;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn underscore && lowercase;\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\treturn underscore_count == lowercase_count - 1;\n}",
    "{\n\treturn text.match(\"^[a-z_]+$\");\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\treturn (underscore_count == lowercase_count - 1);\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i - 1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (i == len - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i + 1] == '_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == ' ')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] == '\\t')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i] == '\\n')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i] == '\\r')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tif(text[0] < 'a' || text[0] > 'z')\n\t\treturn false;\n\t\n\tfor(int i = 1; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i + 1 < text.length)\n\t\t\t{\n\t\t\t\tif(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isalpha(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint len = text.length;\n\tbool result = false;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif(text.length == 0) return false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_') continue;\n\t\tif(c >= 'a' && c <= 'z') continue;\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}"
  ]
}