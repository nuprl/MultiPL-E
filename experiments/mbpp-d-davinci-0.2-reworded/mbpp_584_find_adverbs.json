{
  "name": "mbpp_584_find_adverbs",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\n*/\nstring find_adverbs(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_adverbs;\n\n    assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");\n    assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");\n    assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length > 0)\n\t{\n\t\treturn \"First adverb ending with ly: \" ~ result ~ \" at position: \" ~ text.find(result);\n\t}\n\telse\n\t{\n\t\treturn \"No adverb ending with ly found\";\n\t}\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring adverbs = \"\";\n\tint[] positions = new int[0];\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tadverbs ~= word;\n\t\t\tpositions ~= index;\n\t\t}\n\t\tindex++;\n\t}\n\treturn adverbs + \" \" + positions;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\t\n\twhile(pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos - 1;\n\t\t\twhile(pos_start >= 0 && isalpha(text[pos_start]))\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tpos_start++;\n\t\t\tadverbs += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\twhile (pos < text.length)\n\t{\n\t\tif (text[pos] == ' ')\n\t\t{\n\t\t\tpos_start = pos + 1;\n\t\t}\n\t\telse if (text[pos] == 'l' && text[pos + 1] == 'y')\n\t\t{\n\t\t\tpos_end = pos + 2;\n\t\t\tresult += text.substr(pos_start, pos_end - pos_start) + \" \";\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint start = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos > 0)\n\t\t{\n\t\t\tchar c = text[pos - 1];\n\t\t\tif(isalpha(c))\n\t\t\t{\n\t\t\t\tadverbs += text.substr(pos - 1, 2);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos - 1);\n\t\t\t\tadverbs += \" \";\n\t\t\t}\n\t\t}\n\t\tstart = pos + 1;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos == 0)\n\t\t{\n\t\t\tresult += \"0 \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(text[pos - 1] == ' ')\n\t\t{\n\t\t\tresult += to!string(pos) + \" \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length();\n\twhile (pos < len)\n\t{\n\t\tint space = text.find(\" \", pos);\n\t\tif (space == -1)\n\t\t\tspace = len;\n\t\tstring word = text.substr(pos, space - pos);\n\t\tif (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult += word + \" \";\n\t\t}\n\t\tpos = space + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(text);\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len) \n\t{\n\t\tint start = text.findFirst(\" \", pos);\n\t\tif (start == -1)\n\t\t\tstart = len;\n\t\tint end = text.findFirst(\" \", start + 1);\n\t\tif (end == -1)\n\t\t\tend = len;\n\t\tstring word = text[start + 1 .. end];\n\t\tif (word.length > 2 && word.endsWith(\"ly\")) \n\t\t{\n\t\t\tresult ~= word ~ \" \" ~ start ~ \" \" ~ end ~ \" \";\n\t\t}\n\t\tpos = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.length + 1;\n\t}\n\treturn result + \" \" + pos;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(text);\n\tstring result = \"\";\n\tforeach(string word; words) \n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\")) \n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}