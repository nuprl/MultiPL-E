{
  "name": "mbpp_584_find_adverbs",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\n*/\nstring find_adverbs(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_adverbs;\n\n    assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");\n    assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");\n    assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length > 0)\n\t{\n\t\treturn \"First adverb ending with ly: \" ~ result ~ \" at position: \" ~ text.find(result);\n\t}\n\telse\n\t{\n\t\treturn \"No adverb ending with ly found\";\n\t}\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring adverbs = \"\";\n\tint[] positions = new int[0];\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tadverbs ~= word;\n\t\t\tpositions ~= index;\n\t\t}\n\t\tindex++;\n\t}\n\treturn adverbs + \" \" + positions;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\t\n\twhile(pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos - 1;\n\t\t\twhile(pos_start >= 0 && isalpha(text[pos_start]))\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tpos_start++;\n\t\t\tadverbs += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\twhile (pos < text.length)\n\t{\n\t\tif (text[pos] == ' ')\n\t\t{\n\t\t\tpos_start = pos + 1;\n\t\t}\n\t\telse if (text[pos] == 'l' && text[pos + 1] == 'y')\n\t\t{\n\t\t\tpos_end = pos + 2;\n\t\t\tresult += text.substr(pos_start, pos_end - pos_start) + \" \";\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint start = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos > 0)\n\t\t{\n\t\t\tchar c = text[pos - 1];\n\t\t\tif(isalpha(c))\n\t\t\t{\n\t\t\t\tadverbs += text.substr(pos - 1, 2);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos - 1);\n\t\t\t\tadverbs += \" \";\n\t\t\t}\n\t\t}\n\t\tstart = pos + 1;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos == 0)\n\t\t{\n\t\t\tresult += \"0 \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(text[pos - 1] == ' ')\n\t\t{\n\t\t\tresult += to!string(pos) + \" \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length();\n\twhile (pos < len)\n\t{\n\t\tint space = text.find(\" \", pos);\n\t\tif (space == -1)\n\t\t\tspace = len;\n\t\tstring word = text.substr(pos, space - pos);\n\t\tif (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult += word + \" \";\n\t\t}\n\t\tpos = space + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(text);\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len) \n\t{\n\t\tint start = text.findFirst(\" \", pos);\n\t\tif (start == -1)\n\t\t\tstart = len;\n\t\tint end = text.findFirst(\" \", start + 1);\n\t\tif (end == -1)\n\t\t\tend = len;\n\t\tstring word = text[start + 1 .. end];\n\t\tif (word.length > 2 && word.endsWith(\"ly\")) \n\t\t{\n\t\t\tresult ~= word ~ \" \" ~ start ~ \" \" ~ end ~ \" \";\n\t\t}\n\t\tpos = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.length + 1;\n\t}\n\treturn result + \" \" + pos;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(text);\n\tstring result = \"\";\n\tforeach(string word; words) \n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\")) \n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverb = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result ~ \" \" ~ i;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\treturn \"The first adverb is \" + word + \" and it is on position \" + text.find(word);\n\t\t}\n\t}\n\treturn \"There is no adverb in the text\";\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring adverb = \"\";\n\tint position = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[$-2..$] == \"ly\")\n\t\t\t{\n\t\t\t\tadverb = word;\n\t\t\t\tposition = text.find(word);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn adverb ~ \" \" ~ position;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult += word + \" \" + i + \" \";\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length();\n\twhile (pos < len)\n\t{\n\t\tint start = text.find(\" \", pos);\n\t\tif (start == -1)\n\t\t\tstart = len;\n\t\tint end = text.find(\" \", start + 1);\n\t\tif (end == -1)\n\t\t\tend = len;\n\t\tstring word = text.substr(start + 1, end - start - 1);\n\t\tif (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text[pos - 1 .. pos + 1] + \" \" + to!string(pos) + \" \";\n\t\t\t}\n\t\t}\n\t\tpos += 2;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text[pos - 1];\n\t\t\t\tresult += text[pos];\n\t\t\t\tresult += text[pos + 1];\n\t\t\t\tresult += \" \";\n\t\t\t\tresult += to!string(pos);\n\t\t\t\tresult += \" \";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\tif (count == 0)\n\t\treturn \"No adverbs found\";\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true) {\n\t\tint pos_start = text.find(\" \", pos);\n\t\tif (pos_start == -1) break;\n\t\tint pos_end = text.find(\" \", pos_start + 1);\n\t\tif (pos_end == -1) pos_end = text.length();\n\t\tstring word = text[pos_start + 1 .. pos_end];\n\t\tif (word.length > 2 && word.substr(word.length - 2, 2) == \"ly\") {\n\t\t\tresult += word + \" \" + to!string(pos_start + 1) + \" \" + to!string(pos_end) + \"\\n\";\n\t\t}\n\t\tpos = pos_end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint position = 0;\n\tint count = 0;\n\t\n\tforeach(string word; text.split)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tposition = count;\n\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\t\n\treturn \"The first adverb ending with ly is \" ~ result ~ \" and its position is \" ~ position.to!string;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-1] == 'y' && word[$-2] == 'l')\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint index = 0;\n\tint index_end = 0;\n\tint index_start = 0;\n\tint count = 0;\n\tint count_end = 0;\n\tint count_start = 0;\n\tint length = 0;\n\tint length_end = 0;\n\tint length_start = 0;\n\tint length_word = 0;\n\tint length_word_end = 0;\n\tint length_word_start = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tint index = 0;\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.endsWith(\"ly\"))\n\t\t{\n\t\t\treturn adverb ~ \" \" ~ index;\n\t\t}\n\t\tindex++;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring adverb = \"\";\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tadverb = word;\n\t\t\tindex = text.find(word);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn adverb + \" \" + index;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.length + 1;\n\t}\n\treturn result + \" \" + pos;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\tint pos_end_prev = 0;\n\tint pos_start_prev = 0;\n\tint pos_end_prev_prev = 0;\n\tint pos_start_prev_prev = 0;\n\tint pos_end_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tint pos_end_prev_prev_prev_prev_",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += \" \" + to!string(pos);\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = split(text);\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\t\n\twhile (pos < text.length)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tpos_end = pos;\n\t\tpos_start = pos_end - 1;\n\t\t\n\t\twhile (pos_start >= 0 && text[pos_start] != ' ')\n\t\t\tpos_start--;\n\t\t\n\t\tresult += text.substr(pos_start + 1, pos_end - pos_start) + \" \" + to!string(pos_start + 1) + \" \" + to!string(pos_end) + \"\\n\";\n\t\t\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\twhile(pos < text.length)\n\t{\n\t\tif(text[pos] == ' ')\n\t\t{\n\t\t\tend = pos;\n\t\t\tstring word = text.substr(start, end - start);\n\t\t\tif(word.length > 2 && word[word.length - 1] == 'y' && word[word.length - 2] == 'l')\n\t\t\t{\n\t\t\t\tresult = word;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstart = pos + 1;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tpos_end = i;\n\t\t\tif (text[pos_end - 1] == 'y' && text[pos_end - 2] == 'l' && text[pos_end - 3] == 'l' && text[pos_end - 4] == 'a')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos_start, pos_end - pos_start);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos_start = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len)\n\t{\n\t\tint word_start = text.findFirstNotOf(\" \\t\", pos);\n\t\tif (word_start == -1)\n\t\t\tbreak;\n\t\tint word_end = text.findFirstOf(\" \\t\", word_start);\n\t\tif (word_end == -1)\n\t\t\tword_end = len;\n\t\tstring word = text.substr(word_start, word_end - word_start);\n\t\tif (word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult += word + \" \" + word_start + \" \" + word_end + \"\\n\";\n\t\t}\n\t\tpos = word_end;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint count = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos--;\n\t\t\twhile (text[pos] != ' ' && text[pos] != '.' && text[pos] != ',' && text[pos] != '!' && text[pos] != '?' && text[pos] != ';' && text[pos] != ':' && text[pos] != '-' && text[pos] != '(' && text[pos] != ')')\n\t\t\t{\n\t\t\t\tpos--;\n\t\t\t}\n\t\t\tpos++;\n\t\t\tresult += text.substr(pos, pos_end - pos + 1) + \" \";\n\t\t\tcount++;\n\t\t\tpos = pos_end + 1;\n\t\t}\n\t}\n\tif (count == 0)\n\t{\n\t\treturn \"There is no adverbs in this text\";\n\t}\n\telse\n\t{\n\t\treturn result;\n\t}\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint count2 = 0;\n\tint count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\tint count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\tint count55 = 0;\n\tint count56 = 0;\n\tint count57 = 0;\n\tint count58 = 0;\n\tint count59 = 0;\n\tint count60 = 0;\n\tint count61 = 0;\n\t",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'y')\n\t\t\t{\n\t\t\t\tadverbs += text.substr(pos, i - pos) + \" \";\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tfor(int i = 0; i < adverbs.length; i++)\n\t{\n\t\tif(adverbs[i].length > 2 && adverbs[i].substr(adverbs[i].length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverbs[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint position = 0;\n\tint count = 0;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tposition = count;\n\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\t\n\treturn \"The first adverb ending with ly is: \" ~ result ~ \" and its position is: \" ~ to!string(position);\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\t\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\t\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos_end - 1;\n\t\t\t\n\t\t\twhile (text[pos_start] != ' ' && pos_start > 0)\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[pos_start] == ' ')\n\t\t\t{\n\t\t\t\tpos_start++;\n\t\t\t}\n\t\t\t\n\t\t\tresult += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\t\tpos++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\tif (pos == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstart = pos + 2;\n\t\t\tend = pos;\n\t\t\twhile (end >= 0)\n\t\t\t{\n\t\t\t\tif (text[end] == ' ')\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tend--;\n\t\t\t}\n\t\t\tend++;\n\t\t\tresult += text.substr(end, pos - end + 2) + \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2 .. $-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint start = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text.substr(pos - 1, 2) + \" \" + to!string(pos - 1) + \" \";\n\t\t\t}\n\t\t}\n\t\tstart = pos + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (text[i + 1] == 'l' && text[i + 2] == 'y')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos, i - pos);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint len = text.length;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == ' ')\n\t\t{\n\t\t\tif(text[i+1] == 'l' && text[i+2] == 'y')\n\t\t\t{\n\t\t\t\tadverbs += text.substr(pos, i-pos+1);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(i);\n\t\t\t\tadverbs += \" \";\n\t\t\t}\n\t\t\tpos = i+1;\n\t\t}\n\t\ti++;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tpos_end = text.find_first_of(\" ,.!?\", pos);\n\t\tif (pos_end == -1)\n\t\t\tpos_end = text.length();\n\t\tif (pos_end - pos == 2)\n\t\t{\n\t\t\tresult += text.substr(pos - 1, pos_end - pos + 1) + \" \";\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach (string word; words)\n\t{\n\t\tif (word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult += word + \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2 .. $-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result + \" \" + i;\n}",
    "{\n    string[] words = text.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        if(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n        {\n            result = word;\n            break;\n        }\n    }\n    return result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint pos_start_prev = 0;\n\tint pos_end_prev = 0;\n\tint count = 0;\n\t\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos_end;\n\t\t\twhile (pos_start != 0)\n\t\t\t{\n\t\t\t\tif (text[pos_start] == ' ')\n\t\t\t\t{\n\t\t\t\t\tpos_start_prev = pos_start;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tif (pos_start_prev == 0)\n\t\t\t{\n\t\t\t\tpos_start_prev = -1;\n\t\t\t}\n\t\t\tadverbs += text.substr(pos_start_prev + 1, pos_end - pos_start_prev);\n\t\t\tadverbs += \" \";\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result + \" \" + index;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[$-2..$-1] == \"ly\")\n\t\t\t{\n\t\t\t\tresult = word;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos != 0)\n\t\t{\n\t\t\tif(isalpha(text[pos-1]))\n\t\t\t{\n\t\t\t\tadverbs += text[pos-1];\n\t\t\t\tadverbs += text[pos];\n\t\t\t\tadverbs += text[pos+1];\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos-1);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tadverbs += to!string(pos+1);\n\t\t\t\tadverbs += \" \";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\tif(count == 0)\n\t\treturn \"No adverbs found!\";\n\treturn adverbs;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tadverbs += to!string(pos) + \" \";\n\t\t\tcount++;\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn \"Found \" + to!string(count) + \" adverbs: \" + adverbs;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text[pos - 1..pos + 1] + \" \" + to!string(pos - 1) + \" \";\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\t\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text.substr(pos - 1, 2) + \" \" + to!string(pos - 1) + \" \";\n\t\t\t}\n\t\t}\n\t\t\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result + \" \" + index;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint count = 0;\n\tint len = text.length;\n\twhile (pos < len)\n\t{\n\t\tint pos2 = text.find(\"ly\", pos);\n\t\tif (pos2 == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (pos2 > 0)\n\t\t{\n\t\t\tchar c = text[pos2 - 1];\n\t\t\tif (c == ' ' || c == ',' || c == '.' || c == '?' || c == '!')\n\t\t\t{\n\t\t\t\tif (count > 0)\n\t\t\t\t{\n\t\t\t\t\tadverbs += \",\";\n\t\t\t\t}\n\t\t\t\tadverbs += text.substr(pos2 - 1, 2);\n\t\t\t\tadverbs += \"(\" + to!string(pos2 - 1) + \")\";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tpos = pos2 + 1;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint position = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tposition = text.find(word);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn \"Adverb: \" ~ result ~ \" Position: \" ~ position;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint count = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\treturn result ~ \" \" ~ count;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0 && isalpha(text[pos - 1]))\n\t\t{\n\t\t\tresult += \" \" + to!string(pos);\n\t\t\tcount++;\n\t\t}\n\t\tpos++;\n\t}\n\tif (count == 0)\n\t\treturn \"\";\n\treturn to!string(count) + result;\n}",
    "{\n\tstring adverb = \"\";\n\tint pos = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (adverb.length > 2 && adverb[adverb.length - 2] == 'l' && adverb[adverb.length - 1] == 'y')\n\t\t\t{\n\t\t\t\treturn adverb + \" \" + to!string(pos);\n\t\t\t}\n\t\t\tadverb = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tadverb ~= text[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true) {\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1) {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tstart = text.rfind(\" \", pos);\n\t\tend = text.find(\" \", pos);\n\t\t\n\t\tif (start == -1) {\n\t\t\tstart = 0;\n\t\t}\n\t\t\n\t\tif (end == -1) {\n\t\t\tend = text.length;\n\t\t}\n\t\t\n\t\tadverbs += text.substr(start, end - start) + \" \";\n\t\tpos++;\n\t}\n\t\n\treturn adverbs;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (text[i + 1] == 'l' && text[i + 2] == 'y')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos, i - pos + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result ~ \" \" ~ i;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint index = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result + \" \" + index;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result ~ \" \" ~ i;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile(true) \n\t{\n\t\tint pos = text.find(\"ly\", pos);\n\t\tif(pos == -1) break;\n\t\tif(pos > 0 && isalpha(text[pos-1])) \n\t\t{\n\t\t\tresult += text.substr(pos-1, 2) + \" \" + to!string(pos-1) + \" \";\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint len = text.length;\n\t\n\twhile (pos < len)\n\t{\n\t\tif (text[pos] == ' ')\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tif (text[pos_end - 1] == 'y' && text[pos_end - 2] == 'l')\n\t\t\t{\n\t\t\t\tpos_start = pos_end - 1;\n\t\t\t\twhile (text[pos_start] != ' ')\n\t\t\t\t{\n\t\t\t\t\tpos_start--;\n\t\t\t\t}\n\t\t\t\tresult = text.substr(pos_start + 1, pos_end - pos_start - 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tif(pos > 0)\n\t\t{\n\t\t\tif(isalpha(text[pos - 1]))\n\t\t\t{\n\t\t\t\tresult += text[pos - 1..pos + 1] + \" \" + to!string(pos) + \" \";\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos > 0 && isalpha(text[pos - 1]))\n\t\t{\n\t\t\tresult += text.substr(pos - 1, 2) + \" \" + to!string(pos - 1) + \" \";\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\tint length = text.length();\n\twhile (pos < length)\n\t{\n\t\tif (text[pos] == ' ')\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tif (text[pos_end - 1] == 'y' && text[pos_end - 2] == 'l' && text[pos_end - 3] == 'l')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos_start, pos_end - pos_start);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos_start = pos + 1;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\t\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-1] == 'y' && word[$-2] == 'l')\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.length + 1;\n\t}\n\treturn result + \" \" + pos;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_start = 0;\n\tint pos_end = 0;\n\t\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tpos_start = pos;\n\t\tpos_end = pos;\n\t\t\n\t\twhile(pos_start > 0 && isalpha(text[pos_start - 1]))\n\t\t\tpos_start--;\n\t\t\n\t\twhile(pos_end < text.length() - 1 && isalpha(text[pos_end + 1]))\n\t\t\tpos_end++;\n\t\t\n\t\tresult += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\t\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\t\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tpos_end = pos;\n\t\tpos_start = pos;\n\t\t\n\t\twhile(pos_start > 0 && isalpha(text[pos_start - 1]))\n\t\t\tpos_start--;\n\t\t\n\t\tresult += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (text[i] == 'a' || text[i] == 'A')\n\t\t{\n\t\t\tif (text[i + 1] == 'd' || text[i + 1] == 'D')\n\t\t\t{\n\t\t\t\tif (text[i + 2] == 'v' || text[i + 2] == 'V')\n\t\t\t\t{\n\t\t\t\t\tif (text[i + 3] == 'e' || text[i + 3] == 'E')\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i + 4] == 'r' || text[i + 4] == 'R')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (text[i + 5] == 'b' || text[i + 5] == 'B')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (text[i + 6] == ' ')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (text[i + 7] == 'e' || text[i + 7] == 'E')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (text[i + 8] == 'n' || text[i + 8] == 'N')\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (text[i + 9] == 'd' || text[i + 9] == 'D')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (text[i + 10] == 'i' || text[i + 10] == 'I')\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (text[i + 11] == 'n",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2,2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint len = 0;\n\t\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos_end - 1;\n\t\t\twhile (pos_start >= 0 && isalpha(text[pos_start]))\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tpos_start++;\n\t\t\tlen = pos_end - pos_start + 1;\n\t\t\tadverbs += text.substr(pos_start, len) + \" \" + toString(pos_start) + \" \" + toString(pos_end) + \"\\n\";\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverb = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n    string[] words = text.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        if(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n        {\n            result = word;\n            break;\n        }\n    }\n    return result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\t\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\t\t\n\t\tpos_end = pos;\n\t\tpos--;\n\t\t\n\t\twhile(text[pos] != ' ' && pos > 0)\n\t\t\tpos--;\n\t\t\t\n\t\tif(text[pos] == ' ')\n\t\t\tpos++;\n\t\t\t\n\t\tresult += text.substr(pos, pos_end - pos + 2) + \" \";\n\t\tpos = pos_end + 2;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring[] adverbs = [];\n\tint[] positions = [];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tadverbs ~= word;\n\t\t\tpositions ~= text.indexOf(word);\n\t\t}\n\t}\n\treturn adverbs.length > 0 ? \"Adverb: \" ~ adverbs[0] ~ \" Position: \" ~ positions[0] : \"No adverbs found.\";\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\treturn word;\n\t\t}\n\t}\n\treturn \"\";\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\tint count = 0;\n\twhile(pos < len)\n\t{\n\t\tint next = text.find(\"ly\", pos);\n\t\tif(next != -1)\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tresult += text.substr(next, 2);\n\t\t\t\tresult += \" \";\n\t\t\t\tresult += to!string(next);\n\t\t\t\tresult += \" \";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult += to!string(next);\n\t\t\t\tresult += \" \";\n\t\t\t}\n\t\t\tpos = next + 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint end = text.length;\n\tint start = 0;\n\t\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\t\n\t\tif (pos != -1)\n\t\t{\n\t\t\tif (pos > 0)\n\t\t\t{\n\t\t\t\tif (text[pos - 1] == ' ')\n\t\t\t\t{\n\t\t\t\t\tresult += text.substr(start, pos - start + 2) + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstart = pos + 2;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_prev = 0;\n\twhile(pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos_prev);\n\t\tif(pos != -1)\n\t\t{\n\t\t\tif(pos != 0)\n\t\t\t{\n\t\t\t\tif(text[pos - 1] == ' ')\n\t\t\t\t{\n\t\t\t\t\tresult += text.substr(pos_prev, pos - pos_prev + 2) + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult += text.substr(pos_prev, pos - pos_prev + 2) + \" \";\n\t\t\t}\n\t\t\tpos_prev = pos + 2;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\t",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos != -1)\n\t\t{\n\t\t\tend = pos;\n\t\t\tpos--;\n\t\t\twhile(text[pos] != ' ' && pos > 0)\n\t\t\t{\n\t\t\t\tpos--;\n\t\t\t}\n\t\t\tstart = pos;\n\t\t\tadverbs += text.substr(start, end - start + 2) + \" \";\n\t\t\tcount++;\n\t\t\tpos++;\n\t\t}\n\t}\n\t\n\tif(count == 0)\n\t{\n\t\treturn \"There are no adverbs in the text.\";\n\t}\n\telse\n\t{\n\t\treturn \"The adverbs are: \" + adverbs;\n\t}\n}",
    "{\n\tstring adverb = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length > 0)\n\t{\n\t\tint index = text.find(result);\n\t\tresult = \"First adverb ending with ly: \" + result + \" at position \" + index;\n\t}\n\telse\n\t{\n\t\tresult = \"There is no adverb ending with ly in the given text.\";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length >= 2)\n\t\t{\n\t\t\tif(adverb[$-1] == 'y' && adverb[$-2] == 'l')\n\t\t\t{\n\t\t\t\tresult = adverb;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpos += adverb.length + 1;\n\t}\n\treturn format(\"%s %d\", result, pos);\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint position = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tposition += word.length + 1;\n\t}\n\treturn result + \" \" + position;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len) \n\t{\n\t\tint next = text.find(\" \", pos);\n\t\tif (next == -1)\n\t\t\tnext = len;\n\t\tstring word = text[pos..next];\n\t\tif (word.length > 2 && word.substr(word.length - 2, 2) == \"ly\") \n\t\t{\n\t\t\tresult += word + \" \" + pos + \" \";\n\t\t}\n\t\tpos = next + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring adverbs = \"\";\n\tint index = 0;\n\tint pos = 0;\n\twhile (index < text.length)\n\t{\n\t\tindex = text.find(\"ly\", index);\n\t\tif (index == -1)\n\t\t\tbreak;\n\t\tif (index > 0 && text[index - 1] != ' ')\n\t\t{\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (index + 2 < text.length && text[index + 2] != ' ')\n\t\t{\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tadverbs += text.substr(index - pos, 2);\n\t\tadverbs += \" \";\n\t\tadverbs += to!string(index);\n\t\tadverbs += \" \";\n\t\tpos = index + 2;\n\t\tindex++;\n\t}\n\treturn adverbs;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult ~= adverb ~ \" \" ~ i ~ \" \";\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (text[i-1] == 'y' && text[i-2] == 'l' && text[i-3] == 'y')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos, i - pos);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == ' ')\n\t\t{\n\t\t\tif(text[i-1] == 'y' && text[i-2] == 'l')\n\t\t\t{\n\t\t\t\tresult = text.substr(pos, i-pos);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = i+1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint index = 0;\n\tint index_of_adverb = 0;\n\tint length_of_adverb = 0;\n\tint length_of_text = text.length;\n\t\n\twhile (index < length_of_text)\n\t{\n\t\tif (text[index] == ' ')\n\t\t{\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (text[index] == 'l' && text[index + 1] == 'y')\n\t\t{\n\t\t\tindex_of_adverb = index;\n\t\t\tlength_of_adverb = 0;\n\t\t\twhile (text[index_of_adverb] != ' ')\n\t\t\t{\n\t\t\t\tlength_of_adverb++;\n\t\t\t\tindex_of_adverb++;\n\t\t\t}\n\t\t\t\n\t\t\tresult = text.substr(index - length_of_adverb, length_of_adverb);\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tif (pos == 0)\n\t\t{\n\t\t\tresult += \"0 \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (text[pos - 1] == ' ')\n\t\t{\n\t\t\tresult += to!string(pos) + \" \";\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\t\n\twhile(true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tpos_end = pos;\n\t\tpos_start = pos_end - 1;\n\t\t\n\t\twhile(pos_start >= 0)\n\t\t{\n\t\t\tif(text[pos_start] == ' ')\n\t\t\t\tbreak;\n\t\t\tpos_start--;\n\t\t}\n\t\t\n\t\tresult += text.substr(pos_start + 1, pos_end - pos_start) + \" \";\n\t\tpos++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len)\n\t{\n\t\tint pos_start = text.findFirst(\" \", pos);\n\t\tif (pos_start == -1)\n\t\t\tpos_start = len;\n\t\tint pos_end = text.findFirst(\" \", pos_start + 1);\n\t\tif (pos_end == -1)\n\t\t\tpos_end = len;\n\t\tstring word = text.substr(pos_start + 1, pos_end - pos_start - 1);\n\t\tif (word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult += \"adverb: \" + word + \" position: \" + pos_start + \"-\" + pos_end + \"\\n\";\n\t\t}\n\t\tpos = pos_end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverb = \"\";\n\tint position = 0;\n\tint i = 0;\n\tint j = 0;\n\tbool found = false;\n\t\n\tfor (i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tif (adverb.length > 2)\n\t\t\t{\n\t\t\t\tif (adverb[adverb.length - 1] == 'y' && adverb[adverb.length - 2] == 'l')\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tadverb = \"\";\n\t\t\tposition = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tadverb += text[i];\n\t\t\tposition++;\n\t\t}\n\t}\n\t\n\tif (adverb.length > 2)\n\t{\n\t\tif (adverb[adverb.length - 1] == 'y' && adverb[adverb.length - 2] == 'l')\n\t\t{\n\t\t\tfound = true;\n\t\t}\n\t}\n\t\n\tif (found)\n\t{\n\t\treturn adverb + \" \" + i;\n\t}\n\telse\n\t{\n\t\treturn \"Not found\";\n\t}\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == ' ')\n\t\t{\n\t\t\tif(text[i-1] == 'y' && text[i-2] == 'l' && text[i-3] == 'y')\n\t\t\t{\n\t\t\t\tpos_end = i;\n\t\t\t\tresult += text.substr(pos, pos_end - pos) + \" \";\n\t\t\t}\n\t\t\tpos = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(int i, string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint length = text.length;\n\t\n\twhile (pos < length)\n\t{\n\t\tint word_start = text.findFirstNotOf(\" \\t\\n\\r\", pos);\n\t\tif (word_start == -1)\n\t\t\tbreak;\n\t\t\t\n\t\tint word_end = text.findFirstOf(\" \\t\\n\\r\", word_start);\n\t\tif (word_end == -1)\n\t\t\tword_end = length;\n\t\t\t\n\t\tstring word = text.substr(word_start, word_end - word_start);\n\t\tif (word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult += word + \" \" + word_start + \" \" + word_end + \"\\n\";\n\t\t}\n\t\t\n\t\tpos = word_end;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.substr(adverb.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length;\n\twhile (pos < len) \n\t{\n\t\tint pos_start = text.find(\" \", pos);\n\t\tif (pos_start == -1) \n\t\t{\n\t\t\tpos_start = len;\n\t\t}\n\t\tint pos_end = text.find(\" \", pos_start + 1);\n\t\tif (pos_end == -1) \n\t\t{\n\t\t\tpos_end = len;\n\t\t}\n\t\tstring word = text[pos_start + 1 .. pos_end];\n\t\tif (word.length > 2 && word[$ - 2 .. $ - 1] == \"ly\") \n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos = pos_end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverb = \"\";\n\tint position = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n\tstring[] adverbs = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string adverb; adverbs)\n\t{\n\t\tif(adverb.length > 2 && adverb.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = adverb;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint count = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos_end - 1;\n\t\t\twhile (pos_start >= 0 && isalpha(text[pos_start]))\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tpos_start++;\n\t\t\tresult += text.substr(pos_start, pos_end - pos_start + 1) + \" \" + to!string(pos_start) + \" \" + to!string(pos_end) + \"\\n\";\n\t\t\tpos++;\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 0)\n\t{\n\t\tresult = \"No adverbs found\";\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tif (pos == 0)\n\t\t\t{\n\t\t\t\tresult += \"Position: \" + to!string(pos) + \"\\n\";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if (text[pos - 1] == ' ')\n\t\t\t{\n\t\t\t\tresult += \"Position: \" + to!string(pos) + \"\\n\";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t}\n\tif (count == 0)\n\t{\n\t\tresult = \"No adverbs found\";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 3 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = split(text);\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach (string word; words)\n\t{\n\t\tif (word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tstart = pos;\n\t\twhile (text[start] != ' ' && start > 0)\n\t\t\tstart--;\n\t\tend = pos;\n\t\twhile (text[end] != ' ' && end < text.length())\n\t\t\tend++;\n\t\tresult += text.substr(start, end - start) + \" \";\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint len = 0;\n\tint len_end = 0;\n\tint len_start = 0;\n\t\n\tstring[] words = text.split(\" \");\n\t\n\tforeach(string word; words)\n\t{\n\t\tlen = word.length;\n\t\t\n\t\tif(len > 2)\n\t\t{\n\t\t\tlen_end = len - 2;\n\t\t\tlen_start = len - 3;\n\t\t\t\n\t\t\tpos_end = word.find(\"ly\", len_end);\n\t\t\tpos_start = word.find(\"ly\", len_start);\n\t\t\t\n\t\t\tif(pos_end != -1 && pos_start != -1)\n\t\t\t{\n\t\t\t\tresult = word;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\tint length = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint count_end = 0;\n\tint count_start = 0;\n\tint count_length = 0;\n\tint count_pos = 0;\n\tint count_pos_end = 0;\n\tint count_pos_start = 0;\n\tint count_i = 0;\n\tint count_j = 0;\n\tint count_k = 0;\n\tint count_text = 0;\n\tint count_result = 0;\n\t\n\tcount_text = text.length();\n\t\n\tfor(i = 0; i < count_text; i++)\n\t{\n\t\tcount_i++;\n\t\tif(text[i] == ' ')\n\t\t{\n\t\t\tcount_j++;\n\t\t\tfor(j = i; j < count_text; j++)\n\t\t\t{\n\t\t\t\tcount_j++;\n\t\t\t\tif(text[j] == ' ')\n\t\t\t\t{\n\t\t\t\t\tcount_k++;\n\t\t\t\t\tfor(k = j; k < count_text; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcount_k++;\n\t\t\t\t\t\tif(text[k] == ' ')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount_pos_start++;\n\t\t\t\t\t\t\tpos_start = i;\n\t\t\t\t\t\t\tcount_pos_end++;\n\t\t\t\t\t\t\tpos_end = k;\n\t\t\t\t\t\t\tcount_length++;\n\t\t\t\t\t\t\tlength = pos_end - pos_start;\n\t\t\t\t\t\t\tcount_pos++;\n\t\t\t\t\t\t\tpos = pos_start;\n\t\t\t\t\t\t\tcount_result++;\n\t\t\t\t\t\t\tresult = text.substr(pos, length);\n\t\t\t\t\t",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint count = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tresult += to!string(pos) + \" \";\n\t\t\tcount++;\n\t\t\tpos++;\n\t\t}\n\t}\n\tif (count == 0)\n\t\treturn \"There are no adverbs in this text\";\n\telse\n\t\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tstring word = \"\";\n\tint i = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == ' ')\n\t\t{\n\t\t\tpos = i + 1;\n\t\t\tword = text[pos..$];\n\t\t\t\n\t\t\tif (word.find(\"ly\") != -1)\n\t\t\t{\n\t\t\t\tpos_end = word.find(\"ly\") + pos + 1;\n\t\t\t\tresult = text[pos..pos_end];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tint pos_start = 0;\n\t\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tpos_end = pos;\n\t\t\tpos_start = pos_end;\n\t\t\twhile (pos_start > 0 && text[pos_start] != ' ')\n\t\t\t{\n\t\t\t\tpos_start--;\n\t\t\t}\n\t\t\tif (pos_start != 0)\n\t\t\t{\n\t\t\t\tpos_start++;\n\t\t\t}\n\t\t\tresult += text.substr(pos_start, pos_end - pos_start + 1) + \" \";\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto words = text.split(\" \");\n\tforeach(word; words) \n\t{\n\t\tif(word.endsWith(\"ly\")) \n\t\t{\n\t\t\treturn word;\n\t\t}\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length();\n\twhile (pos < len)\n\t{\n\t\tint start = text.find(\" \", pos);\n\t\tif (start == -1)\n\t\t\tstart = len;\n\t\tint end = text.find(\" \", start + 1);\n\t\tif (end == -1)\n\t\t\tend = len;\n\t\tstring word = text.substr(start + 1, end - start - 1);\n\t\tif (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word + \" \" + to!string(start + 1) + \" \" + to!string(end);\n\t\t\tbreak;\n\t\t}\n\t\tpos = end;\n\t}\n\treturn result;\n}",
    "{\n\tstring adverb = \"\";\n\tint position = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = text.split(\" \");\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}