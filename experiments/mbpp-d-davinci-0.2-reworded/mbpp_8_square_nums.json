{
  "name": "mbpp_8_square_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find squares of individual elements in an array.\n\t\n*/\nlong[] square_nums(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tsquares.length = nums.length;\n\tforeach(i, ref num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] result;\n\tresult.length = nums.length;\n\tforeach(i, ref e; nums)\n\t{\n\t\tresult[i] = e * e;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] squares;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tsquares ~= nums[i] * nums[i];\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tsquares.length = nums.length;\n\tforeach(i, ref num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}",
    "{\n\tlong[] squares;\n\tsquares.length = nums.length;\n\tforeach(i, ref num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}"
  ]
}