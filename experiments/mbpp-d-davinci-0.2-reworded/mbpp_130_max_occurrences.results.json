{
  "name": "mbpp_130_max_occurrences",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong count = 0;\n\tlong item = 0;\n\tlong i = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\titem = num;\n\t\t\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num2 == item)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts;\n\tlong[] items;\n\tlong count;\n\tlong item;\n\tlong i;\n\t\n\tcounts = new long[nums.length];\n\titems = new long[nums.length];\n\t\n\tfor (i = 0; i < nums.length; i++)\n\t{\n\t\titem = nums[i];\n\t\tcount = 0;\n\t\t\n\t\tfor (j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (item == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmprtsy6nki.d(25): Error: undefined identifier `j`\n/tmp/tmprtsy6nki.d(25): Error: undefined identifier `j`\n/tmp/tmprtsy6nki.d(25): Error: undefined identifier `j`\n/tmp/tmprtsy6nki.d(27): Error: undefined identifier `j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtsy6nki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(n; nums)\n\t{\n\t\tif(n == max)\n\t\t{\n\t\t\tmax_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount = 0;\n\t\t\tforeach(m; nums)\n\t\t\t{\n\t\t\t\tif(n == m)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max_count)\n\t\t\t{\n\t\t\t\tmax_count = count;\n\t\t\t\tmax = n;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[nums[i]]++;\n\t\tif (counts[nums[i]] > max_count)\n\t\t{\n\t\t\tmax_count = counts[nums[i]];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu5f7utez.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283de]\n??:? long tmpu5f7utez.max_occurrences(long[]) [0x427da2]\n??:? void tmpu5f7utez.__unittest_L25_C1() [0x427fe3]\n??:? void tmpu5f7utez.__modtest() [0x4280b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b275]\n??:? runModuleUnitTests [0x42c1e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpziqufbua.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpziqufbua.__unittest_L29_C1() [0x427eda]\n??:? void tmpziqufbua.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\toccurrences[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqxcgo2io.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpqxcgo2io.max_occurrences(long[]) [0x427da0]\n??:? void tmpqxcgo2io.__unittest_L23_C1() [0x427f83]\n??:? void tmpqxcgo2io.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_value = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tforeach(i, v; nums)\n\t{\n\t\tcounts[v]++;\n\t\tif(counts[v] > max)\n\t\t{\n\t\t\tmax = counts[v];\n\t\t\tmax_index = v;\n\t\t}\n\t}\n\t\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpp28q9oyt.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpp28q9oyt.max_occurrences(long[]) [0x427da0]\n??:? void tmpp28q9oyt.__unittest_L25_C1() [0x427f83]\n??:? void tmpp28q9oyt.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpec9mcu8j.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpec9mcu8j.max_occurrences(long[]) [0x427da0]\n??:? void tmpec9mcu8j.__unittest_L23_C1() [0x427f83]\n??:? void tmpec9mcu8j.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp15pk7e4u.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp15pk7e4u.max_occurrences(long[]) [0x427da0]\n??:? void tmp15pk7e4u.__unittest_L24_C1() [0x427f83]\n??:? void tmp15pk7e4u.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong count = 0;\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0vewu4gy.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp0vewu4gy.max_occurrences(long[]) [0x427da0]\n??:? void tmp0vewu4gy.__unittest_L23_C1() [0x427f83]\n??:? void tmp0vewu4gy.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\t\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\t\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhjhfg85.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpuhjhfg85.max_occurrences(long[]) [0x427da0]\n??:? void tmpuhjhfg85.__unittest_L27_C1() [0x427f83]\n??:? void tmpuhjhfg85.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong num_items = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong index = 0;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(item == num)\n\t\t\t{\n\t\t\t\toccurrences[index]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tif(index == num_items)\n\t\t{\n\t\t\titems[index] = num;\n\t\t\toccurrences[index] = 1;\n\t\t\tnum_items++;\n\t\t}\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = items[index];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122560,
      "stdout": "",
      "stderr": "/tmp/tmpfwyb8y96.d(40): Error: undefined identifier `index`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwyb8y96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tcounts[num] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphf5jliwf.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmphf5jliwf.max_occurrences(long[]) [0x427de9]\n??:? void tmphf5jliwf.__unittest_L29_C1() [0x427f9b]\n??:? void tmphf5jliwf.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max_count = 0;\n\tlong max_index = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn nums[max_index];\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4g_4yns9.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp4g_4yns9.max_occurrences(long[]) [0x427da0]\n??:? void tmp4g_4yns9.__unittest_L25_C1() [0x427f83]\n??:? void tmp4g_4yns9.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcounts[n]++;\n\t}\n\tlong max = 0;\n\tlong max_index = 0;\n\tforeach(i, c; counts)\n\t{\n\t\tif(c > max)\n\t\t{\n\t\t\tmax = c;\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1p7_gxln.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp1p7_gxln.max_occurrences(long[]) [0x427d91]\n??:? void tmp1p7_gxln.__unittest_L26_C1() [0x427f7f]\n??:? void tmp1p7_gxln.__modtest() [0x42804c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\toccurrences[i] = 0;\n\t}\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_value = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq2hz8ir1.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpq2hz8ir1.max_occurrences(long[]) [0x427da0]\n??:? void tmpq2hz8ir1.__unittest_L23_C1() [0x427f83]\n??:? void tmpq2hz8ir1.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tcounts[i] = 0;\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif(counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_num = occurrences.indexOf(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmp9da4v_v2.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9da4v_v2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4g_4yns9.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp4g_4yns9.max_occurrences(long[]) [0x427da0]\n??:? void tmp4g_4yns9.__unittest_L25_C1() [0x427f83]\n??:? void tmp4g_4yns9.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqxcgo2io.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpqxcgo2io.max_occurrences(long[]) [0x427da0]\n??:? void tmpqxcgo2io.__unittest_L23_C1() [0x427f83]\n??:? void tmpqxcgo2io.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n    long max = 0;\n    long max_num = 0;\n    foreach (num; nums)\n    {\n        long count = 0;\n        foreach (n; nums)\n        {\n            if (n == num)\n                count++;\n        }\n        if (count > max)\n        {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqxcgo2io.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpqxcgo2io.max_occurrences(long[]) [0x427da0]\n??:? void tmpqxcgo2io.__unittest_L23_C1() [0x427f83]\n??:? void tmpqxcgo2io.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2o_vjd0g.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2o_vjd0g.max_occurrences(long[]) [0x427da0]\n??:? void tmp2o_vjd0g.__unittest_L23_C1() [0x427f83]\n??:? void tmp2o_vjd0g.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_num = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmptxq7eehc.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxq7eehc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax = occurrences.indexOf(occurrence);\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmps0alavc7.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0alavc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpai3ay1xc.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpai3ay1xc.max_occurrences(long[]) [0x427da0]\n??:? void tmpai3ay1xc.__unittest_L23_C1() [0x427f83]\n??:? void tmpai3ay1xc.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\t\n\tforeach(count; counts)\n\t{\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[count];\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf2qzod7j.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282e5]\n??:? void tmpf2qzod7j.__unittest_L29_C1() [0x427f02]\n??:? void tmpf2qzod7j.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\toccurrences[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] count = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn nums[max_index];\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t}\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tif (counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_freq = 0;\n\tlong max_item = 0;\n\tlong[] freq = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfreq[num] = count;\n\t}\n\t\n\tforeach(f; freq)\n\t{\n\t\tif(f > max_freq)\n\t\t{\n\t\t\tmax_freq = f;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmp6jhmdhbf.d(31): Error: undefined identifier `num`, did you mean variable `nums`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jhmdhbf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq2hz8ir1.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpq2hz8ir1.max_occurrences(long[]) [0x427da0]\n??:? void tmpq2hz8ir1.__unittest_L23_C1() [0x427f83]\n??:? void tmpq2hz8ir1.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcount = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++) \n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++) \n\t\t{\n\t\t\tif (nums[i] == nums[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count) \n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvejmg_t8.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpvejmg_t8.max_occurrences(long[]) [0x427da0]\n??:? void tmpvejmg_t8.__unittest_L25_C1() [0x427f83]\n??:? void tmpvejmg_t8.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpec9mcu8j.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpec9mcu8j.max_occurrences(long[]) [0x427da0]\n??:? void tmpec9mcu8j.__unittest_L23_C1() [0x427f83]\n??:? void tmpec9mcu8j.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount[num]++;\n\t\tif(count[num] > max)\n\t\t{\n\t\t\tmax = count[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz7f1v6ds.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpz7f1v6ds.max_occurrences(long[]) [0x427da0]\n??:? void tmpz7f1v6ds.__unittest_L24_C1() [0x427f83]\n??:? void tmpz7f1v6ds.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8x15_7wp.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp8x15_7wp.max_occurrences(long[]) [0x427da0]\n??:? void tmp8x15_7wp.__unittest_L23_C1() [0x427f83]\n??:? void tmp8x15_7wp.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax = num;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmcnp0qpg.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpmcnp0qpg.max_occurrences(long[]) [0x427da0]\n??:? void tmpmcnp0qpg.__unittest_L25_C1() [0x427f83]\n??:? void tmpmcnp0qpg.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcount[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t\tcount[i]++;\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n    long max_count = 0;\n    long max_item = 0;\n    long[] counts = new long[nums.length];\n    foreach(long num; nums)\n    {\n        counts[num]++;\n        if(counts[num] > max_count)\n        {\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp70j0issy.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp70j0issy.max_occurrences(long[]) [0x427da0]\n??:? void tmp70j0issy.__unittest_L23_C1() [0x427f83]\n??:? void tmp70j0issy.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong item = nums[i];\n\t\tlong occurrences_item = 0;\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[j] == item)\n\t\t\t{\n\t\t\t\toccurrences_item++;\n\t\t\t}\n\t\t}\n\t\toccurrences[i] = occurrences_item;\n\t\tif(occurrences_item > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences_item;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_num = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmptxq7eehc.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxq7eehc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_occur)\n\t\t{\n\t\t\tmax_occur = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvyl4gw33.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpvyl4gw33.max_occurrences(long[]) [0x427da0]\n??:? void tmpvyl4gw33.__unittest_L25_C1() [0x427f83]\n??:? void tmpvyl4gw33.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[n] = count;\n\t}\n\t\n\tforeach(c; counts)\n\t{\n\t\tif(c > max_count)\n\t\t{\n\t\t\tmax_count = c;\n\t\t\tmax = c;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3znqc8fw.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmp3znqc8fw.__unittest_L38_C1() [0x427f5a]\n??:? void tmp3znqc8fw.__modtest() [0x4280c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcounts[n]++;\n\t\tif(counts[n] > max_count)\n\t\t{\n\t\t\tmax_count = counts[n];\n\t\t\tmax_item = n;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplnm2g20p.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmplnm2g20p.max_occurrences(long[]) [0x427da0]\n??:? void tmplnm2g20p.__unittest_L25_C1() [0x427f83]\n??:? void tmplnm2g20p.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor(long i = 0; i < nums.length; i++)\n\t{\n\t\tfor(long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif(counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(num in items)\n\t\t{\n\t\t\toccurrences[occurrences_index]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titems[items_index] = num;\n\t\t\toccurrences[occurrences_index] = 1;\n\t\t\titems_index++;\n\t\t\toccurrences_index++;\n\t\t}\n\t}\n\t\n\tforeach(long occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = items[occurrences_index];\n\t\t}\n\t\toccurrences_index++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmpu729yahf.d(18): Error: incompatible types for `(num) in (items)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu729yahf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tforeach(i, n; nums)\n\t{\n\t\tcounts[n]++;\n\t\tif(counts[n] > max)\n\t\t{\n\t\t\tmax = counts[n];\n\t\t\tmax_index = n;\n\t\t}\n\t}\n\t\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpi6hmbi_q.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpi6hmbi_q.max_occurrences(long[]) [0x427da0]\n??:? void tmpi6hmbi_q.__unittest_L25_C1() [0x427f83]\n??:? void tmpi6hmbi_q.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] nums_copy = nums.dup;\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor(int j = 0; j < nums_copy.length; j++)\n\t\t{\n\t\t\tif(nums[i] == nums_copy[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t\tnums_copy[j] = -1;\n\t\t\t}\n\t\t}\n\t\tif(counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcounts[n]++;\n\t\tif(counts[n] > max_count)\n\t\t{\n\t\t\tmax_count = counts[n];\n\t\t\tmax_num = n;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpiiu43clq.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpiiu43clq.max_occurrences(long[]) [0x427da0]\n??:? void tmpiiu43clq.__unittest_L25_C1() [0x427f83]\n??:? void tmpiiu43clq.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2_oqodxa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2_oqodxa.max_occurrences(long[]) [0x427da0]\n??:? void tmp2_oqodxa.__unittest_L25_C1() [0x427f83]\n??:? void tmp2_oqodxa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4xmm1_86.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp4xmm1_86.max_occurrences(long[]) [0x427da0]\n??:? void tmp4xmm1_86.__unittest_L25_C1() [0x427f83]\n??:? void tmp4xmm1_86.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] nums_copy = nums.dup;\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_num = nums_copy[occurrence];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp54w15yh0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x429461]\n??:? void tmp54w15yh0.__unittest_L30_C1() [0x4280fe]\n??:? void tmp54w15yh0.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e09f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4290ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ae29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aeb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42adb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4290c1]\n??:? runModuleUnitTests [0x42de75]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9yw4o58r.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9yw4o58r.max_occurrences(long[]) [0x427da0]\n??:? void tmp9yw4o58r.__unittest_L25_C1() [0x427f83]\n??:? void tmp9yw4o58r.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax = occurrences.indexOf(num);\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmpd7jsjzfv.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7jsjzfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences_num = 0;\n\t\tforeach(num_2; nums)\n\t\t{\n\t\t\tif(num == num_2)\n\t\t\t{\n\t\t\t\toccurrences_num++;\n\t\t\t}\n\t\t}\n\t\toccurrences ~= occurrences_num;\n\t\tif(occurrences_num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences_num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpai3ay1xc.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpai3ay1xc.max_occurrences(long[]) [0x427da0]\n??:? void tmpai3ay1xc.__unittest_L23_C1() [0x427f83]\n??:? void tmpai3ay1xc.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5jab3hl4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp5jab3hl4.max_occurrences(long[]) [0x427da0]\n??:? void tmp5jab3hl4.__unittest_L25_C1() [0x427f83]\n??:? void tmp5jab3hl4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. occurrences.length)\n\t{\n\t\tif(occurrences[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = occurrences[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax = occurrences.indexOf(occurrence);\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmps0alavc7.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0alavc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tlong item_occurrences = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\titem_occurrences++;\n\t\t}\n\t\toccurrences[num] = item_occurrences;\n\t\tif(item_occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = item_occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1ctr7hdb.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmp1ctr7hdb.max_occurrences(long[]) [0x427de9]\n??:? void tmp1ctr7hdb.__unittest_L29_C1() [0x427f9b]\n??:? void tmp1ctr7hdb.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqxcgo2io.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpqxcgo2io.max_occurrences(long[]) [0x427da0]\n??:? void tmpqxcgo2io.__unittest_L23_C1() [0x427f83]\n??:? void tmpqxcgo2io.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpw0mowca1.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpw0mowca1.max_occurrences(long[]) [0x427da0]\n??:? void tmpw0mowca1.__unittest_L24_C1() [0x427f83]\n??:? void tmpw0mowca1.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\toccurrences++;\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_item = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = n;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occurrences = occurrences;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9yw4o58r.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9yw4o58r.max_occurrences(long[]) [0x427da0]\n??:? void tmp9yw4o58r.__unittest_L25_C1() [0x427f83]\n??:? void tmp9yw4o58r.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong item_index = 0;\n\tlong occurrences_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong item_index = 0;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(num == item)\n\t\t\t{\n\t\t\t\toccurrences[item_index]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\titem_index++;\n\t\t}\n\t\tif(item_index == items.length)\n\t\t{\n\t\t\titems[item_index] = num;\n\t\t\toccurrences[item_index]++;\n\t\t}\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = items[occurrences_index];\n\t\t}\n\t\toccurrences_index++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "/tmp/tmp2lf5hbwj.d(18): Error: variable `item_index` is shadowing variable `tmp2lf5hbwj.max_occurrences.item_index`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lf5hbwj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\tforeach(num; counts)\n\t{\n\t\tif(num > max)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0yqooh36.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmp0yqooh36.__unittest_L26_C1() [0x427eda]\n??:? void tmp0yqooh36.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong count = 0;\n\tlong item = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < nums.length; i++)\n\t{\n\t\titem = nums[i];\n\t\tcount = 0;\n\t\tfor (j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (item == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(num == max)\n\t\t{\n\t\t\tmax_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount = 1;\n\t\t\tforeach(long num2; nums)\n\t\t\t{\n\t\t\t\tif(num == num2)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max_count)\n\t\t\t{\n\t\t\t\tmax = num;\n\t\t\t\tmax_count = count;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(items_index == 0)\n\t\t{\n\t\t\titems[items_index] = num;\n\t\t\toccurrences[occurrences_index] = 1;\n\t\t\titems_index++;\n\t\t\toccurrences_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool found = false;\n\t\t\tforeach(long item; items)\n\t\t\t{\n\t\t\t\tif(item == num)\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t{\n\t\t\t\tlong index = 0;\n\t\t\t\tforeach(long item; items)\n\t\t\t\t{\n\t\t\t\t\tif(item == num)\n\t\t\t\t\t{\n\t\t\t\t\t\toccurrences[index]++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titems[items_index] = num;\n\t\t\t\toccurrences[occurrences_index] = 1;\n\t\t\t\titems_index++;\n\t\t\t\toccurrences_index++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(long occur; occurrences)\n\t{\n\t\tif(occur > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occur;\n\t\t\tmax_occurrences_item = items[index];\n\t\t}\n\t\tindex++;\n\t}\n\t\n\treturn max_occurrences_item;\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmpbs0m63w5.d(71): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbs0m63w5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpziqufbua.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpziqufbua.__unittest_L29_C1() [0x427eda]\n??:? void tmpziqufbua.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcounts[n]++;\n\t}\n\t\n\tforeach(i; 0 .. counts.length)\n\t{\n\t\tif(counts[i] > max_count)\n\t\t{\n\t\t\tmax = i;\n\t\t\tmax_count = counts[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx1_h6ms3.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283a6]\n??:? long tmpx1_h6ms3.max_occurrences(long[]) [0x427d98]\n??:? void tmpx1_h6ms3.__unittest_L29_C1() [0x427fab]\n??:? void tmpx1_h6ms3.__modtest() [0x428078]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b266]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43047d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b23d]\n??:? runModuleUnitTests [0x42c1a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tlong prev = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num == prev)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount = 1;\n\t\t}\n\t\t\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t\t\n\t\tprev = num;\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwvaqhyc0.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42826d]\n??:? void tmpwvaqhyc0.__unittest_L36_C1() [0x427f39]\n??:? void tmpwvaqhyc0.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c27b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]\n??:? runModuleUnitTests [0x42c051]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long item2; nums)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occurrences = occurrences[num];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcsjzeo_e.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcsjzeo_e.max_occurrences(long[]) [0x427da0]\n??:? void tmpcsjzeo_e.__unittest_L25_C1() [0x427f83]\n??:? void tmpcsjzeo_e.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max_count = 0;\n\tlong max_index = 0;\n\t\n\tforeach(i, v; nums)\n\t{\n\t\tcounts[v]++;\n\t\tif(counts[v] > max_count)\n\t\t{\n\t\t\tmax_count = counts[v];\n\t\t\tmax_index = v;\n\t\t}\n\t}\n\t\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpupibfei_.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpupibfei_.max_occurrences(long[]) [0x427da0]\n??:? void tmpupibfei_.__unittest_L25_C1() [0x427f83]\n??:? void tmpupibfei_.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_freq = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong freq = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tfreq++;\n\t\t}\n\t\tif(freq > max_freq)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_freq = freq;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1seojtjj.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp1seojtjj.max_occurrences(long[]) [0x427da0]\n??:? void tmp1seojtjj.__unittest_L23_C1() [0x427f83]\n??:? void tmp1seojtjj.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor(long i = 0; i < nums.length; i++)\n\t{\n\t\tif(occurrences[nums[i]] == 0)\n\t\t{\n\t\t\toccurrences[nums[i]] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toccurrences[nums[i]]++;\n\t\t}\n\t\t\n\t\tif(occurrences[nums[i]] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[nums[i]];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqfupq9pd.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42848e]\n??:? long tmpqfupq9pd.max_occurrences(long[]) [0x427d98]\n??:? void tmpqfupq9pd.__unittest_L33_C1() [0x428093]\n??:? void tmpqfupq9pd.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b34e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430565]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b325]\n??:? runModuleUnitTests [0x42c291]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2_oqodxa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2_oqodxa.max_occurrences(long[]) [0x427da0]\n??:? void tmp2_oqodxa.__unittest_L25_C1() [0x427f83]\n??:? void tmp2_oqodxa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcf0ilju4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpcf0ilju4.max_occurrences(long[]) [0x427da0]\n??:? void tmpcf0ilju4.__unittest_L25_C1() [0x427f83]\n??:? void tmpcf0ilju4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n    long max = 0;\n    long max_occurrences = 0;\n    foreach(num; nums)\n    {\n        long occurrences = 0;\n        foreach(n; nums)\n        {\n            if(n == num)\n                occurrences++;\n        }\n        if(occurrences > max_occurrences)\n        {\n            max_occurrences = occurrences;\n            max = num;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2_oqodxa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2_oqodxa.max_occurrences(long[]) [0x427da0]\n??:? void tmp2_oqodxa.__unittest_L25_C1() [0x427f83]\n??:? void tmp2_oqodxa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tbool found = false;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(num == item)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(found)\n\t\t{\n\t\t\toccurrences[occurrences_index]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toccurrences[occurrences_index] = 1;\n\t\t\titems[items_index] = num;\n\t\t\titems_index++;\n\t\t}\n\t\toccurrences_index++;\n\t}\n\t\n\tforeach(long occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = items[items_index];\n\t\t}\n\t\titems_index++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp563au03z.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428445]\n??:? void tmp563au03z.__unittest_L52_C1() [0x42805e]\n??:? void tmp563au03z.__modtest() [0x4281c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b38d]\n??:? runModuleUnitTests [0x42c2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428908]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max_count = 0;\n\tlong max_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_index = num;\n\t\t}\n\t}\n\t\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9j_1xadk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9j_1xadk.max_occurrences(long[]) [0x427da0]\n??:? void tmp9j_1xadk.__unittest_L25_C1() [0x427f83]\n??:? void tmp9j_1xadk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(item; nums)\n\t\t{\n\t\t\tif(item == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcount[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkne1hxrz.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkne1hxrz.max_occurrences(long[]) [0x427da0]\n??:? void tmpkne1hxrz.__unittest_L23_C1() [0x427f83]\n??:? void tmpkne1hxrz.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tcount = 0;\n\t}\n\t\n\tfor (long i = 0; i < counts.length; i++)\n\t{\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcounts[n]++;\n\t\tif(counts[n] > max_occur)\n\t\t{\n\t\t\tmax = n;\n\t\t\tmax_occur = counts[n];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0zr46lje.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp0zr46lje.max_occurrences(long[]) [0x427da0]\n??:? void tmp0zr46lje.__unittest_L24_C1() [0x427f83]\n??:? void tmp0zr46lje.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occur = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\toccur++;\n\t\t}\n\t\tif(occur > max_occur)\n\t\t{\n\t\t\tmax_occur = occur;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = occurrences.indexOf(occurrence);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmpdc1ft7e_.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc1ft7e_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_value = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmpifuxwevt.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifuxwevt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkne1hxrz.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkne1hxrz.max_occurrences(long[]) [0x427da0]\n??:? void tmpkne1hxrz.__unittest_L23_C1() [0x427f83]\n??:? void tmpkne1hxrz.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tcounts[i] = count(nums, item);\n\t\tif(counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmpcci75r5s.d(14): Error: undefined identifier `count`, did you mean variable `counts`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcci75r5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2_oqodxa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2_oqodxa.max_occurrences(long[]) [0x427da0]\n??:? void tmp2_oqodxa.__unittest_L25_C1() [0x427f83]\n??:? void tmp2_oqodxa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5jab3hl4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp5jab3hl4.max_occurrences(long[]) [0x427da0]\n??:? void tmp5jab3hl4.__unittest_L25_C1() [0x427f83]\n??:? void tmp5jab3hl4.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx3n_sn70.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmpx3n_sn70.max_occurrences(long[]) [0x427d98]\n??:? void tmpx3n_sn70.__unittest_L29_C1() [0x427fc7]\n??:? void tmpx3n_sn70.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_value = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = counts[num];\n\t\t\tmax_value = num;\n\t\t}\n\t}\n\t\n\treturn max_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3azmn6ag.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp3azmn6ag.max_occurrences(long[]) [0x427da0]\n??:? void tmp3azmn6ag.__unittest_L25_C1() [0x427f83]\n??:? void tmp3azmn6ag.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpziqufbua.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpziqufbua.__unittest_L29_C1() [0x427eda]\n??:? void tmpziqufbua.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong count = 0;\n\tlong num = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] nums_copy = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tnums_copy[i] = nums[i];\n\t}\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tnum = nums[i];\n\t\tcount = 0;\n\t\tfor (long j = 0; j < nums_copy.length; j++)\n\t\t{\n\t\t\tif (num == nums_copy[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tnums_copy[j] = -1;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t}\n\t\n\tfor (long i = 0; i < counts.length; i++)\n\t{\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = occurrences.indexof(occurrence);\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmprlxs216g.d(21): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlxs216g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcount[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4g_4yns9.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp4g_4yns9.max_occurrences(long[]) [0x427da0]\n??:? void tmp4g_4yns9.__unittest_L25_C1() [0x427f83]\n??:? void tmp4g_4yns9.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\t\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphjj38k9d.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmphjj38k9d.max_occurrences(long[]) [0x427da0]\n??:? void tmphjj38k9d.__unittest_L26_C1() [0x427f83]\n??:? void tmphjj38k9d.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2_oqodxa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2_oqodxa.max_occurrences(long[]) [0x427da0]\n??:? void tmp2_oqodxa.__unittest_L25_C1() [0x427f83]\n??:? void tmp2_oqodxa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(item; nums)\n\t\t{\n\t\t\tif(item == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_item = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong index = 0;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(num == item)\n\t\t\t{\n\t\t\t\toccurrences[index]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\t\n\t\tif(index == items_index)\n\t\t{\n\t\t\titems[items_index] = num;\n\t\t\toccurrences[occurrences_index] = 1;\n\t\t\titems_index++;\n\t\t\toccurrences_index++;\n\t\t}\n\t}\n\t\n\tforeach(long occur; occurrences)\n\t{\n\t\tif(occur > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occur;\n\t\t\tmax_occurrences_item = items[occurrences_index];\n\t\t}\n\t\toccurrences_index++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppnx87moh.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x428445]\n??:? void tmppnx87moh.__unittest_L50_C1() [0x428062]\n??:? void tmppnx87moh.__modtest() [0x4281c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b38d]\n??:? runModuleUnitTests [0x42c2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428908]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] nums_copy = new long[nums.length];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tnums_copy[i] = nums[i];\n\t}\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums_copy[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < occurrences.length; i++)\n\t{\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums_copy[i];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif (n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occurrences = occurrences;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(m == n)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor(long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor(long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif(counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2o_vjd0g.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2o_vjd0g.max_occurrences(long[]) [0x427da0]\n??:? void tmp2o_vjd0g.__unittest_L23_C1() [0x427f83]\n??:? void tmp2o_vjd0g.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < occurrences.length; i++)\n\t{\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong count = 0;\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn nums[max_index];\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++) \n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++) \n\t\t{\n\t\t\tif (nums[i] == nums[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max) \n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_value = occurrences.indexOf(occurrence);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "/tmp/tmp2j2vkjee.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2j2vkjee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tfor(int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < counts.length; i++)\n\t{\n\t\tif(counts[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = counts[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6oj7udt4.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmp6oj7udt4.max_occurrences(long[]) [0x427d98]\n??:? void tmp6oj7udt4.__unittest_L29_C1() [0x427fc7]\n??:? void tmp6oj7udt4.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num == max)\n\t\t{\n\t\t\tmax_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount = 0;\n\t\t\tforeach(n; nums)\n\t\t\t{\n\t\t\t\tif(num == n)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max_count)\n\t\t\t{\n\t\t\t\tmax_count = count;\n\t\t\t\tmax = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}