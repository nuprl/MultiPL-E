{
  "name": "mbpp_608_bell_Number",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbdzas6ug.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpbdzas6ug.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdzas6ug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7m53rsnn.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7m53rsnn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp4cnaco6k.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmp4cnaco6k.d(11): Error: only one index allowed to index `long`\n/tmp/tmp4cnaco6k.d(14): Error: only one index allowed to index `long`\n/tmp/tmp4cnaco6k.d(17): Error: only one index allowed to index `long`\n/tmp/tmp4cnaco6k.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cnaco6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7gzg1uwx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp7gzg1uwx.d(16): Error: found `unittest` instead of statement\n/tmp/tmp7gzg1uwx.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gzg1uwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7gzg1uwx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp7gzg1uwx.d(16): Error: found `unittest` instead of statement\n/tmp/tmp7gzg1uwx.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gzg1uwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpwf4astuz.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwf4astuz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i-j-1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpldy798kw.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldy798kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp9my01enn.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9my01enn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmphl5gp35o.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmphl5gp35o.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl5gp35o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) { \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpgp_2sgfm.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpgp_2sgfm.d(15): Error: found `unittest` instead of statement\n/tmp/tmpgp_2sgfm.d(23): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgp_2sgfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp9my01enn.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9my01enn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbdzas6ug.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpbdzas6ug.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdzas6ug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpqzurcle1.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzurcle1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp7wxmmbgt.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wxmmbgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long];\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpxbdzkm9r.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbdzkm9r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbdzas6ug.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpbdzas6ug.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdzas6ug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong dp[][] = new long[n+1][n+1]; \n\tdp[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tdp[i][0] = dp[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tdp[i][j] = dp[i-1][j-1] + dp[i][j-1]; \n\t} \n\treturn dp[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpp6e2e5_r.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpp6e2e5_r.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6e2e5_r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpjs129ua0.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpjs129ua0.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjs129ua0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpqzurcle1.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzurcle1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp9my01enn.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9my01enn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7gzg1uwx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp7gzg1uwx.d(16): Error: found `unittest` instead of statement\n/tmp/tmp7gzg1uwx.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gzg1uwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbdzas6ug.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpbdzas6ug.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdzas6ug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long][long](n + 1); \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp4c34peyk.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c34peyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbdzas6ug.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpbdzas6ug.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdzas6ug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpktzs17om.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktzs17om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpiobp93u4.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiobp93u4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7gzg1uwx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp7gzg1uwx.d(16): Error: found `unittest` instead of statement\n/tmp/tmp7gzg1uwx.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gzg1uwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpphfnhrsl.d(16): Error: found `unittest` instead of statement\n/tmp/tmpphfnhrsl.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphfnhrsl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpcc004wt3.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpcc004wt3.d(11): Error: only one index allowed to index `long`\n/tmp/tmpcc004wt3.d(15): Error: only one index allowed to index `long`\n/tmp/tmpcc004wt3.d(19): Error: only one index allowed to index `long`\n/tmp/tmpcc004wt3.d(21): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcc004wt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp2whq5wyo.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2whq5wyo.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2whq5wyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpiyhjxqd4.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyhjxqd4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long](n+1); \n  \n    // Initialize first and second number of the series \n    bell[0] = 1; \n    bell[1] = 1; \n  \n    // Calculate the sum and update the series \n    for (long i = 2; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i-j-1]; \n    } \n  \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmptmp8kecq.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmp8kecq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmph5w7t8j0.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5w7t8j0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; ++j)\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpaq0snw7h.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaq0snw7h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long](n + 1); \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i - j - 1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpvto0qhy_.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvto0qhy_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp9my01enn.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9my01enn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpqw6vac_p.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpqw6vac_p.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw6vac_p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp7gzg1uwx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp7gzg1uwx.d(16): Error: found `unittest` instead of statement\n/tmp/tmp7gzg1uwx.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gzg1uwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] dp = new long[long][n + 1]; \n\tdp[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tdp[i][0] = dp[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tdp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]; \n\t} \n\treturn dp[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpw91er8ss.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpw91er8ss.d(11): Error: only one index allowed to index `long`\n/tmp/tmpw91er8ss.d(15): Error: only one index allowed to index `long`\n/tmp/tmpw91er8ss.d(18): Error: only one index allowed to index `long`\n/tmp/tmpw91er8ss.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw91er8ss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpiyhjxqd4.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyhjxqd4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++)\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpwc3hnpjg.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc3hnpjg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpiobp93u4.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiobp93u4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpjs129ua0.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpjs129ua0.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjs129ua0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long](n + 1); \n    bell[0] = 1; \n  \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n  \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp_yo026fh.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_yo026fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp_hvba2_t.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hvba2_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpiyhjxqd4.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyhjxqd4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) { \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpjkslr2v2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpjkslr2v2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkslr2v2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpjs129ua0.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpjs129ua0.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjs129ua0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i][0] = bell[i - 1][i - 1]; \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp0jbj8zn7.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmp0jbj8zn7.d(11): Error: only one index allowed to index `long`\n/tmp/tmp0jbj8zn7.d(14): Error: only one index allowed to index `long`\n/tmp/tmp0jbj8zn7.d(16): Error: only one index allowed to index `long`\n/tmp/tmp0jbj8zn7.d(18): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jbj8zn7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp2whq5wyo.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2whq5wyo.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2whq5wyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpqw6vac_p.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpqw6vac_p.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw6vac_p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n+1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i-j-1];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpi1k1tpyt.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1k1tpyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong bell[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp43wbr9t7.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp43wbr9t7.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43wbr9t7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmp1uqka8uj.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp1uqka8uj.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqka8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "/tmp/tmpu_wkwak2.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpu_wkwak2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_wkwak2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpebnokgtx.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpebnokgtx.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnokgtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpypszqhxf.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpypszqhxf.d(16): Error: found `unittest` instead of statement\n/tmp/tmpypszqhxf.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypszqhxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}