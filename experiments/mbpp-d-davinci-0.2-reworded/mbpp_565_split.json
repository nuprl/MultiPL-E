{
  "name": "mbpp_565_split",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach (c; word) \n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\n/*\n\tWrite a dthon function to count the number of characters (character frequency) in a string.\n\t\n*/",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(character; word) \n\t{\n\t\tresult ~= character;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(c; word)\n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split(\"\");\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach (i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split(\"\");\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(c; word)\n\t\tsplitted ~= c;\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(immutable c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c;word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tresult.length = len;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint[] word_length = word.length;\n\tstring[] word_split = new string[word_length];\n\t\n\tforeach(i; 0 .. word_length)\n\t{\n\t\tword_split[i] = word[i];\n\t}\n\treturn word_split;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c;word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\n/*",
    "{\n\tint len = word.length;\n\tstring[] chars = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tchars[i] = word[i..i];\n\t}\n\treturn chars;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] letters;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tletters ~= word[i..i+1];\n\t}\n\treturn letters;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(char c; word)\n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len) \n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len) \n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result = new string[length];\n\tforeach(i, c; word)\n\t{\n\t\tresult[i] = c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] chars = new string[len];\n\tforeach(i; 0 .. len) \n\t{\n\t\tchars[i] = word[i .. i];\n\t}\n\treturn chars;\n}",
    "{\n\treturn word.split(\"\");\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tresult[i] = word[i..i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(i, c; word)\n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] chars;\n\tforeach(c; word)\n\t{\n\t\tchars ~= c;\n\t}\n\treturn chars;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result = new string[length];\n\t\n\tforeach(i; 0..length)\n\t{\n\t\tresult[i] = word[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] split_word;\n\tforeach(i, letter; word)\n\t{\n\t\tsplit_word ~= letter;\n\t}\n\treturn split_word;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new string[];\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (i, c; word)\n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(c; word)\n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result = new string[length];\n\tfor (int i = 0; i < length; i++) \n\t{\n\t\tresult[i] = word[i..i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}"
  ]
}