{
  "name": "mbpp_565_split",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach (c; word) \n\t{\n\t\tsplitted ~= c;\n\t}\n\treturn splitted;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\n/*\n\tWrite a dthon function to count the number of characters (character frequency) in a string.\n\t\n*/"
  ]
}