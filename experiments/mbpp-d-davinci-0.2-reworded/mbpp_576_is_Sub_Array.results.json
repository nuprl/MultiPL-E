{
  "name": "mbpp_576_is_Sub_Array",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpdfqu0tlq.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpdfqu0tlq.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfqu0tlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\twhile (i < len_A && j < len_B) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == len_B) \n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpumxftqyq.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpumxftqyq.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\n/tmp/tmpumxftqyq.d(37): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumxftqyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n)\n\t\treturn false;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tif (j == m - 1)\n\t\t\t\treturn true;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t\tj = 0;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmp7twitp6y.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp7twitp6y.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7twitp6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length) \n\t{\n\t\tif(A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\tif(j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < len_A)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (count == len_A)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmphtjog7k0.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmphtjog7k0.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtjog7k0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A[0 .. A.length - B.length];\n\treturn C == B;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps29w4044.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmps29w4044.__unittest_L13_C1() [0x427fb1]\n??:? void tmps29w4044.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43042d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint count = 0;\n\tint n = A.length;\n\tint m = B.length;\n\tint l = m;\n\tif(n < m)\n\t\treturn false;\n\telse\n\t{\n\t\twhile(i < n)\n\t\t{\n\t\t\tif(A[i] == B[j])\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == l)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag == 1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpiaubc1yp.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpiaubc1yp.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaubc1yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpwt5e218w.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwt5e218w.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5e218w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint j = 0;\n\t\n\tfor (int i = 0; i < B.length; i++) \n\t{\n\t\tif (A[j] == B[i]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == A.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\ti++;\n\t\t}\n\t\tif (j == m) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmp3qctvppp.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp3qctvppp.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qctvppp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i, a; A) \n\t{\n\t\tif (a != B[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach(i; 0 .. B.length - A.length + 1)\n\t{\n\t\tif(A[0] == B[i])\n\t\t{\n\t\t\tbool is_Sub = true;\n\t\t\tforeach(j; 0 .. A.length)\n\t\t\t{\n\t\t\t\tif(A[j] != B[i + j])\n\t\t\t\t{\n\t\t\t\t\tis_Sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_Sub)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{ \n\tint m = A.length; \n\tint n = B.length; \n\tfor (int i = 0; i <= n - m; i++) \n\t{ \n\t\tint j; \n\t\tfor (j = 0; j < m; j++) \n\t\t\tif (B[i + j] != A[j]) \n\t\t\t\tbreak; \n\t\tif (j == m) \n\t\t\treturn true; \n\t} \n\treturn false; \n} \nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpltkz5iaj.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpltkz5iaj.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltkz5iaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpxtqhtjmv.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpxtqhtjmv.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxtqhtjmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor(i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif(A[k] == B[j])\n\t\t\t\t{\n\t\t\t\t\tk++;\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tflag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag == 1)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3y9rn0js.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428356]\n??:? bool tmp3y9rn0js.is_Sub_Array(long[], long[]) [0x427dd3]\n??:? void tmp3y9rn0js.__unittest_L41_C1() [0x427ffd]\n??:? void tmp3y9rn0js.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c327]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43034d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b191]\n??:? runModuleUnitTests [0x42c0fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tC.sort;\n\tlong[] D = B.dup;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp2u772fc1.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp2u772fc1.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u772fc1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif(m > n)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < n)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif(j == m)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpeoyg19h4.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpeoyg19h4.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoyg19h4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tj++;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\ti = ++k;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif(j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong i = 0, j = 0;\n\tlong n = A.length;\n\tlong m = B.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0 .. A.length];\n\tsort(C);\n\t\n\tlong[] D = B[0 .. B.length];\n\tsort(D);\n\t\n\tlong[] E = C[0 .. C.length];\n\t\n\tlong[] F = D[0 .. D.length];\n\t\n\treturn E == F;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpi6yb522o.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpi6yb522o.d(17): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6yb522o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif(A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52kbsdj1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp52kbsdj1.__unittest_L20_C1() [0x428005]\n??:? void tmp52kbsdj1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif(j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\tif (C.length < D.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (C[i] > D[j])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (j < D.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpqbtqll0x.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpqbtqll0x.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqbtqll0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpsgdevwoq.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgdevwoq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\tif (C.length < D.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach(i, val; C)\n\t{\n\t\tif (val == D[0])\n\t\t{\n\t\t\tlong[] temp = C[i..$];\n\t\t\tif (temp.length < D.length)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (temp[0..D.length] == D)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp1_3ueorp.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmp1_3ueorp.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_3ueorp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tfor (k = i, j = 0; j < len_B && k < len_A; j++, k++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == len_B)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpftyi2_gj.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpftyi2_gj.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftyi2_gj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < B.length && j < A.length)\n\t{\n\t\tif (B[i] == A[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == A.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool is_Sub_Array = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp78iygb2m.d(77): Error: semicolon expected, not `unittest`\n/tmp/tmp78iygb2m.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78iygb2m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < len_A)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == len_B)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpz97a9b5e.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpz97a9b5e.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz97a9b5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i; 0 .. A.length) \n\t{\n\t\tif (A[i] != B[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl9p32rfn.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpl9p32rfn.__unittest_L20_C1() [0x428005]\n??:? void tmpl9p32rfn.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0, j = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpwhf7lrvc.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwhf7lrvc.d(12): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhf7lrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i; 0 .. A.length) \n\t{\n\t\tif (A[i] != B[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tif (C == B)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A[1 .. $], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\t\n\tforeach(i; 0..B.length)\n\t{\n\t\tif(B[i] == C[0])\n\t\t{\n\t\t\tlong[] D = B[i..$].dup;\n\t\t\tlong[] E = C.dup;\n\t\t\t\n\t\t\tforeach(j; 0..C.length)\n\t\t\t{\n\t\t\t\tif(D[j] != E[j])\n\t\t\t\t\tbreak;\n\t\t\t\telse if(j == C.length - 1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool is_Sub_Array = false;\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn is_Sub_Array;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (j = 0; j < A.length; j++)\n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == A.length)\n\t\t\t{\n\t\t\t\tis_Sub_Array = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_Sub_Array;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0, j = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\twhile(i < n && j < m)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpqn36xanr.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpqn36xanr.d(12): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqn36xanr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tif (A.length == B.length)\n\t\treturn A == B;\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < A.length; j++)\n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == A.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == m) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp7k8l2l8n.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp7k8l2l8n.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k8l2l8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = new long[A.length];\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (i + A.length > B.length)\n\t\t\tbreak;\n\t\t\n\t\tC = B[i..i+A.length];\n\t\t\n\t\tif (C == A)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpnm8fh34t.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpnm8fh34t.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm8fh34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0, j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0, j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t\treturn false;\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t\tj++;\n\t}\n\t\n\tif (i < C.length)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp_4oaio6v.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmp_4oaio6v.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4oaio6v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpjle3687q.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjle3687q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool is_Sub_Array = false;\n\t\n\tif(A.length < B.length)\n\t{\n\t\treturn is_Sub_Array;\n\t}\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif(A[i .. i + B.length - 1] == B)\n\t\t{\n\t\t\tis_Sub_Array = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_Sub_Array;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdb2l_j8w.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpdb2l_j8w.__unittest_L28_C1() [0x428009]\n??:? void tmpdb2l_j8w.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430485]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430934]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430411]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tbool flag = true;\n\t\t\tfor(int j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif(A[i+j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuuoxg6mj.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpuuoxg6mj.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpuuoxg6mj.__unittest_L32_C1() [0x427ff1]\n??:? void tmpuuoxg6mj.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a != B[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\t\n\tforeach(i; 0..B.length)\n\t{\n\t\tif (B[i] == C[0])\n\t\t{\n\t\t\tlong[] D = B[i..$];\n\t\t\tif (D.length < C.length)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tlong[] E = D[0..C.length];\n\t\t\tif (E == C)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < len_B; j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpy2jsz3g0.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpy2jsz3g0.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2jsz3g0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length - 1] == B)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9qvprqh9.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp9qvprqh9.__unittest_L25_C1() [0x428005]\n??:? void tmp9qvprqh9.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmppx6buu49.d(34): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppx6buu49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\t\n\t\tif(j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint count = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < len_A && j < len_B)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj++;\n\t\t\tflag = 0;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpxh61fdiy.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpxh61fdiy.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxh61fdiy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpjle3687q.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjle3687q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == m) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpwlfdi2kn.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwlfdi2kn.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlfdi2kn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (B.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < B.length)\n\t{\n\t\tif (A[j] == B[i])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == A.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length == 0)\n\t\treturn true;\n\tif(B.length == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6we1cupr.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42825d]\n??:? void tmp6we1cupr.__unittest_L37_C1() [0x427e95]\n??:? void tmp6we1cupr.__modtest() [0x427fe0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b172]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430305]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430291]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b149]\n??:? runModuleUnitTests [0x42c0b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428720]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < len_B; j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpy2jsz3g0.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpy2jsz3g0.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2jsz3g0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor(i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif(A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4j0tlber.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp4j0tlber.is_Sub_Array(long[], long[]) [0x427dcf]\n??:? void tmp4j0tlber.__unittest_L37_C1() [0x427ff1]\n??:? void tmp4j0tlber.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmp0vq74vbr.d(78): Error: no identifier for declarator `int`\n/tmp/tmp0vq74vbr.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vq74vbr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t\treturn false;\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t\tj++;\n\t}\n\t\n\tif (i < C.length)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp3_c666um.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmp3_c666um.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_c666um.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpc_76hmh5.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_76hmh5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tif(A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(j == m)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpiasny4e0.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpiasny4e0.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiasny4e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpjle3687q.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjle3687q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < m)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == n)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp0168ca_e.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp0168ca_e.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0168ca_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif(len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(i = 0; i < len_A; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < len_B; j++)\n\t\t\t{\n\t\t\t\tif(A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp2795x04z.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp2795x04z.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2795x04z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\tif (A == C) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_Sub_Array(A, B[1 .. $]);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\t/*\n\t\tIf n is greater than m then A cannot be a subarray of B\n\t*/\n\tif (n > m)\n\t\treturn false;\n\t\n\t/*\n\t\tIf n is equal to m then A can be a subarray of B only if all the elements of A are equal to the elements of B\n\t*/\n\tif (n == m)\n\t{\n\t\tfor (i = 0; i < n; i++)\n\t\t{\n\t\t\tif (A[i] != B[i])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/*\n\t\tIf n is less than m then we need to check if all the elements of A are present in B\n\t*/\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (A[i] == B[j])\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0)\n\t\t\treturn false;\n\t\tflag = 0;\n\t}\n\t\n\t/*\n\t\tIf all the elements of A are present in B then we need to check if the elements of A are present in the same order in B\n\t*/\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (A[i] == B[j])\n\t\t\t{\n\t\t\t\tfor (k = 0; k < n; k++)\n\t\t\t\t{\n\t\t\t\t\tif (A[k] != B[j + k])\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (k == n)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpese9i7ym.d(72): Error: found `unittest` instead of statement\n/tmp/tmpese9i7ym.d(80): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpese9i7ym.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpese9i7ym.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = new long[A.length];\n\t\n\tforeach(i; 0..A.length)\n\t{\n\t\tC[i] = A[i];\n\t}\n\t\n\tforeach(i; 0..B.length)\n\t{\n\t\tif(C[0] == B[i])\n\t\t{\n\t\t\tlong[] D = new long[A.length];\n\t\t\tforeach(j; 0..A.length)\n\t\t\t{\n\t\t\t\tD[j] = B[i+j];\n\t\t\t}\n\t\t\tif(C == D)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tif (C == B) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_Sub_Array(A[1 .. $], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < B.length; i++)\n\t{\n\t\tif (A[j] == B[i])\n\t\t{\n\t\t\tfor (k = i, j = 0; j < A.length && k < B.length; j++, k++)\n\t\t\t{\n\t\t\t\tif (A[j] != B[k])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == A.length)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = new long[A.length];\n\t\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tC[i] = A[i];\n\t}\n\t\n\tlong[] D = new long[B.length];\n\t\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tD[i] = B[i];\n\t}\n\t\n\tsort(C);\n\tsort(D);\n\t\n\tlong[] E = new long[A.length];\n\t\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tE[i] = C[i];\n\t}\n\t\n\tlong[] F = new long[B.length];\n\t\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tF[i] = D[i];\n\t}\n\t\n\tlong[] G = new long[A.length];\n\t\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tG[i] = C[i];\n\t}\n\t\n\tlong[] H = new long[B.length];\n\t\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tH[i] = D[i];\n\t}\n\t\n\tlong[] I = new long[A.length];\n\t\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tI[i] = C[i];\n\t}\n\t\n\tlong[] J = new long[B.length];\n\t\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tJ[i] = D[i];\n\t}\n\t\n\tlong[] K = new long[A.length];\n\t\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tK[i] = C[i];\n\t}\n\t\n\tlong[] L = new long[B.length];\n\t\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tL[i] = D[i];\n\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpoe7q24kf.d(85): Error: found `unittest` instead of statement\n/tmp/tmpoe7q24kf.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe7q24kf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\tif (B.length == 0)\n\t\treturn false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp31lq2mr_.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmp31lq2mr_.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31lq2mr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t\treturn false;\n\t\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length) \n\t{\n\t\tif(A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\t\n\t\tif(j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++) \n\t{\n\t\tif (A[0] == B[i]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < A.length; j++) \n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length) return false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(i < C.length && j < D.length)\n\t{\n\t\tif(C[i] < D[j])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if(C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\t\n\tif(i < C.length)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpa81odquq.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpa81odquq.d(16): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa81odquq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t\ti++;\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (C[i] > D[j])\n\t\t\treturn false;\n\t}\n\t\n\tif (i < C.length)\n\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp28ru6xd6.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmp28ru6xd6.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28ru6xd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint count = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tfor (i = 0; i < len_A; i++)\n\t\t{\n\t\t\tif (A[i] == B[j])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj = 0;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif (count == len_B)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmptgxbiydh.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmptgxbiydh.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgxbiydh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif(len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < len_A && j < len_B)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj++;\n\t\t\ti = 0;\n\t\t}\n\t}\n\t\n\tif(i == len_A)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpq_glqjsc.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpq_glqjsc.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_glqjsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t\treturn false;\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t\tj++;\n\t}\n\t\n\tif (i < A.length)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp9517ond3.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmp9517ond3.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9517ond3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i, j;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (A[i+j] != B[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == m)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpd63xh2mc.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpd63xh2mc.d(12): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd63xh2mc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpwt5e218w.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwt5e218w.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5e218w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n) \n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == n) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmprrlo09xv.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmprrlo09xv.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrlo09xv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool is_Sub = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n)\n\t\treturn false;\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == m) \n\t\t{\n\t\t\tis_Sub = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_Sub;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpkv8a64hi.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpkv8a64hi.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv8a64hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\tint c = 0;\n\t\n\tif (n < m)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < n)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tc++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t\tc = 0;\n\t\t}\n\t\t\n\t\tif (c == m)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmprob48_p6.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmprob48_p6.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprob48_p6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\t\n\tC.sort;\n\t\n\tforeach (i; 0 .. B.length - A.length + 1) \n\t{\n\t\tlong[] D = B[i .. i + A.length - 1].dup;\n\t\t\n\t\tD.sort;\n\t\t\n\t\tif (C == D) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpkirhucp0.d(17): Error: no property `sort` for type `long[]`\n/tmp/tmpkirhucp0.d(23): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkirhucp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == m) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpf5a5s9d8.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpf5a5s9d8.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5a5s9d8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif(j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; i++) {\n\t\tif (A[i] == B[j]) {\n\t\t\tj++;\n\t\t} else {\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpci7taoff.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpci7taoff.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpci7taoff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tforeach (i; 0 .. A.length)\n\t{\n\t\tif (A[i] != B[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tC.sort;\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\treturn C.equal(D);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpa1v0s_5h.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpa1v0s_5h.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpa1v0s_5h.d(15): Error: no property `equal` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1v0s_5h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) return false;\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] != B[i]) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpjle3687q.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjle3687q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < B.length - A.length + 1; i++)\n\t{\n\t\tint j = 0;\n\t\tfor (j = 0; j < A.length; j++)\n\t\t{\n\t\t\tif (B[i + j] != A[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == A.length)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint lenA = A.length;\n\tint lenB = B.length;\n\t\n\tif (lenA < lenB)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < lenA)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == lenB)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmppgz1dtbw.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmppgz1dtbw.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgz1dtbw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tC.removeDuplicates;\n\t\n\tforeach(i; 0..B.length)\n\t{\n\t\tif(C[i] != B[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpjw9azjov.d(11): Error: no property `removeDuplicates` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjw9azjov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\t\n\tC.sort;\n\t\n\tforeach(long i; B)\n\t{\n\t\tif(C.length == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(C[0] == i)\n\t\t{\n\t\t\tC = C[1..$];\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpcvmigopt.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvmigopt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\t\n\treturn i == A.length;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\twhile (i < m && j < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpym40d59c.d(13): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpym40d59c.d(14): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym40d59c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp31lq2mr_.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmp31lq2mr_.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31lq2mr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach (i,v; A)\n\t{\n\t\tif (v == B[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (int k = i; k < i + B.length; k++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp6i3oyuae.d(18): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i3oyuae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\tif (C.length < D.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length) \n\t{\n\t\tif (C[i] < D[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (C[i] == D[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (C[i] > D[j]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (j < D.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpx56_t051.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpx56_t051.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx56_t051.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach (i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yqkc7yg.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp9yqkc7yg.__unittest_L21_C1() [0x428005]\n??:? void tmp9yqkc7yg.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp31lq2mr_.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmp31lq2mr_.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31lq2mr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpwqt_uqz8.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwqt_uqz8.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqt_uqz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpwqt_uqz8.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwqt_uqz8.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqt_uqz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0, j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpoap9lvb9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpoap9lvb9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoap9lvb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint n = A.length;\n\tint m = B.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpzclbr5sx.d(12): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpzclbr5sx.d(13): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzclbr5sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\tflag = 1;\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp6wj65ous.d(33): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wj65ous.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf1hxzohj.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpf1hxzohj.__unittest_L21_C1() [0x428005]\n??:? void tmpf1hxzohj.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] != B[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < len_A)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == len_B)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpz97a9b5e.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpz97a9b5e.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz97a9b5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length) \n\t{\n\t\tif (C[i] < D[j]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (C[i] == D[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\t\n\tif (i < C.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp41hnjh2c.d(16): Error: no property `sort` for type `long[]`\n/tmp/tmp41hnjh2c.d(19): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41hnjh2c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach(i; 0 .. A.length - B.length + 1) \n\t{\n\t\tif (A[i .. i + B.length - 1] == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8z4nsyrx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp8z4nsyrx.__unittest_L25_C1() [0x428005]\n??:? void tmp8z4nsyrx.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tif(A.length == 0)\n\t\treturn true;\n\t\n\tlong[] C = B[0..A.length];\n\t\n\tif(A == C)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A, B[1..$]);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = new long[B.length - A.length + 1];\n\t\n\tforeach (i; 0 .. C.length) \n\t{\n\t\tC[i] = B[i .. i + A.length - 1];\n\t}\n\t\n\treturn A in C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp1fv836fw.d(19): Error: cannot implicitly convert expression `B[i..i + A.length - 1LU]` of type `long[]` to `long`\n/tmp/tmp1fv836fw.d(22): Error: incompatible types for `(A) in (C)`: both operands are of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fv836fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpjle3687q.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjle3687q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\t\n\tC.sort;\n\t\n\tforeach(i; 0 .. B.length - A.length + 1) \n\t{\n\t\tlong[] D = B[i .. i + A.length - 1];\n\t\t\n\t\tD.sort;\n\t\t\n\t\tif (C == D) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpd10w1y2v.d(17): Error: no property `sort` for type `long[]`\n/tmp/tmpd10w1y2v.d(23): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd10w1y2v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp31lq2mr_.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmp31lq2mr_.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31lq2mr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A[0 .. A.length];\n\t\n\tsort(C);\n\t\n\tforeach(i; 0 .. B.length - A.length + 1)\n\t{\n\t\tlong[] D = B[i .. i + A.length];\n\t\tsort(D);\n\t\t\n\t\tif (equal(C, D))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpsxwqzik4.d(17): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsxwqzik4.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsxwqzik4.d(24): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsxwqzik4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0..B.length];\n\t\n\tif (C == B)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A[1..$], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0..A.length)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tforeach(j; 0..B.length)\n\t\t\t{\n\t\t\t\tif(A[i+j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp08dp13jn.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42835e]\n??:? bool tmp08dp13jn.is_Sub_Array(long[], long[]) [0x427de9]\n??:? void tmp08dp13jn.__unittest_L32_C1() [0x428005]\n??:? void tmp08dp13jn.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c32f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430355]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b199]\n??:? runModuleUnitTests [0x42c105]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif (a == B[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tforeach(j, b; B)\n\t\t\t{\n\t\t\t\tif (i + j >= A.length)\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (A[i + j] != b)\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif(len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < len_A && j < len_B)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = j - i + 1;\n\t\t\ti = 0;\n\t\t}\n\t}\n\t\n\tif(i == len_A)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpifr6xozh.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpifr6xozh.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifr6xozh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\t\n\tint[] C = new int[A.length];\n\tint[] D = new int[B.length];\n\t\n\t\n\tforeach(i; 0..A.length)\n\t{\n\t\tC[i] = A[i];\n\t}\n\t\n\tforeach(i; 0..B.length)\n\t{\n\t\tD[i] = B[i];\n\t}\n\t\n\tsort(C);\n\tsort(D);\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(C[i] < D[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(C[i] > D[j])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(j < B.length)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n\t\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp25tl7twf.d(17): Error: cannot implicitly convert expression `A[i]` of type `long` to `int`\n/tmp/tmp25tl7twf.d(22): Error: cannot implicitly convert expression `B[i]` of type `long` to `int`\n/tmp/tmp25tl7twf.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp25tl7twf.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25tl7twf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\twhile(i < n && j < m)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif(j == m)\n\t{\n\t\tflag = 1;\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp7lp5nd1j.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp7lp5nd1j.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\n/tmp/tmp7lp5nd1j.d(35): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lp5nd1j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach(i; 0 .. A.length) \n\t{\n\t\tif (A[i] != B[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpbkbjq_86.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpbkbjq_86.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkbjq_86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\twhile(i < n && j < m) \n\t{\n\t\tif(A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == m) \n\t{\n\t\tflag = 1;\n\t}\n\t\n\treturn flag;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpbnbp805j.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpbnbp805j.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\n/tmp/tmpbnbp805j.d(37): Error: cannot implicitly convert expression `flag` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnbp805j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl9p32rfn.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpl9p32rfn.__unittest_L20_C1() [0x428005]\n??:? void tmpl9p32rfn.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = A.length;\n\tlong m = B.length;\n\t\n\twhile(i < n && j < m) \n\t{\n\t\tif(A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D[0..A.length];\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpyh9ekiwv.d(16): Error: no property `sort` for type `long[]`\n/tmp/tmpyh9ekiwv.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyh9ekiwv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmp31lq2mr_.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmp31lq2mr_.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31lq2mr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tforeach (i; 0 .. A.length) \n\t{\n\t\tif (C[i] != D[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpfjat8jhx.d(16): Error: no property `sort` for type `long[]`\n/tmp/tmpfjat8jhx.d(19): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjat8jhx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i; 0 .. A.length) \n\t{\n\t\tif (A[i] != B[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "/tmp/tmpnm8fh34t.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpnm8fh34t.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm8fh34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tforeach(i; 0 .. A.length) \n\t{\n\t\tif (C[i] != D[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpz2m0xk2q.d(16): Error: no property `sort` for type `long[]`\n/tmp/tmpz2m0xk2q.d(19): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2m0xk2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tauto len_A = A.length;\n\tauto len_B = B.length;\n\t\n\tif (len_B > len_A)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < len_B && A[i + j] == B[j])\n\t\t\t\tj++;\n\t\t\tif (j == len_B)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp02yd1s3x.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp02yd1s3x.is_Sub_Array(long[], long[]) [0x427dda]\n??:? void tmp02yd1s3x.__unittest_L29_C1() [0x427ff1]\n??:? void tmp02yd1s3x.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor (i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[k] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (flag == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwa7p89ce.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpwa7p89ce.is_Sub_Array(long[], long[]) [0x427dcf]\n??:? void tmpwa7p89ce.__unittest_L37_C1() [0x427ff1]\n??:? void tmpwa7p89ce.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpwqt_uqz8.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwqt_uqz8.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqt_uqz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\twhile (i < B.length && j < A.length)\n\t{\n\t\tif (B[i] == A[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmp3z9u605k.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp3z9u605k.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z9u605k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0, j = 0;\n\tint n = A.length;\n\tint m = B.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpye7awnry.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpye7awnry.d(12): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpye7awnry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif(A[i .. i + B.length - 1] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52kbsdj1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp52kbsdj1.__unittest_L20_C1() [0x428005]\n??:? void tmp52kbsdj1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = B[0..A.length];\n\t\n\treturn A == C;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tC.sort;\n\t\n\tlong[] D = B.dup;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(i < C.length && j < D.length)\n\t{\n\t\tif(C[i] < D[j])\n\t\t\treturn false;\n\t\telse if(C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t\tj++;\n\t}\n\t\n\tif(i < C.length)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpng8_zirs.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpng8_zirs.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng8_zirs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0, j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\tif (B.length == 0)\n\t\treturn false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array is subarray of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A[0..$-1];\n\tforeach(i; 0..A.length)\n\t{\n\t\tif(A[i..$] == B)\n\t\t\treturn true;\n\t\tA = A[1..$];\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkudb74a7.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4284ce]\n??:? bool tmpkudb74a7.is_Sub_Array(long[], long[]) [0x427e9c]\n??:? void tmpkudb74a7.__unittest_L19_C1() [0x427fa8]\n??:? void tmpkudb74a7.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}