{
  "name": "mbpp_249_intersection_array",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(n; array_nums1)\n\t{\n\t\tforeach(m; array_nums2)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tintersection_array[index] = n;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}",
    "{\n\tlong[] array_intersection = new long[0];\n\tlong[] array_nums1_copy = array_nums1;\n\tlong[] array_nums2_copy = array_nums2;\n\t\n\tforeach(long num; array_nums1_copy)\n\t{\n\t\tforeach(long num2; array_nums2_copy)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tarray_intersection ~= num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}",
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tlong[] array_nums1_sorted = array_nums1_copy.sort();\n\tlong[] array_nums2_sorted = array_nums2_copy.sort();\n\t\n\tlong[] array_nums1_sorted_unique = array_nums1_sorted.uniq;\n\tlong[] array_nums2_sorted_unique = array_nums2_sorted.uniq;\n\t\n\tlong[] array_nums1_sorted_unique_copy = array_nums1_sorted_unique.dup;\n\tlong[] array_nums2_sorted_unique_copy = array_nums2_sorted_unique.dup;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted = array_nums1_sorted_unique_copy.sort();\n\tlong[] array_nums2_sorted_unique_copy_sorted = array_nums2_sorted_unique_copy.sort();\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique = array_nums1_sorted_unique_copy_sorted.uniq;\n\tlong[] array_nums2_sorted_unique_copy_sorted_unique = array_nums2_sorted_unique_copy_sorted.uniq;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique_copy = array_nums1_sorted_unique_copy_sorted_unique.dup;\n\tlong[] array_nums2_sorted_unique_copy_sorted_unique_copy = array_nums2_sorted_unique_copy_sorted_unique.dup;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique_copy_sorted = array_nums",
    "{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}",
    "{\n\tlong[] result;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tsort(array_nums1_copy);\n\tsort(array_nums2_copy);\n\t\n\tforeach(num; array_nums1_copy)\n\t{\n\t\tif(binarySearch(array_nums2_copy, num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] result_final = new long[array_nums1.length];\n\tint count = 0;\n\tint count_final = 0;\n\t\n\tforeach(int i; 0 .. array_nums1.length)\n\t{\n\t\tforeach(int j; 0 .. array_nums2.length)\n\t\t{\n\t\t\tif(array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tresult[count] = array_nums1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(int i; 0 .. result.length)\n\t{\n\t\tif(result[i] != 0)\n\t\t{\n\t\t\tresult_final[count_final] = result[i];\n\t\t\tcount_final++;\n\t\t}\n\t}\n\t\n\treturn result_final;\n}",
    "{\n\tlong[] result = new long[0];\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\tintersection_array_index++;\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}",
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\tlong[] array_nums1_copy_sorted = array_nums1_copy.dup;\n\tlong[] array_nums2_copy_sorted = array_nums2_copy.dup;\n\tarray_nums1_copy_sorted.sort;\n\tarray_nums2_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique = array_nums1_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique = array_nums2_copy_sorted.dup;\n\tarray_nums1_copy_sorted_unique.unique;\n\tarray_nums2_copy_sorted_unique.unique;\n\tlong[] array_nums1_copy_sorted_unique_copy = array_nums1_copy_sorted_unique.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy = array_nums2_copy_sorted_unique.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted = array_nums1_copy_sorted_unique_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted = array_nums2_copy_sorted_unique_copy.dup;\n\tarray_nums1_copy_sorted_unique_copy_sorted.sort;\n\tarray_nums2_copy_sorted_unique_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique = array_nums1_copy_sorted_unique_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique = array_nums2_copy_",
    "{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tlong[] array_nums4 = new long[array_nums2.length];\n\tlong[] array_nums5 = new long[array_nums1.length];\n\tlong[] array_nums6 = new long[array_nums2.length];\n\tlong[] array_nums7 = new long[array_nums1.length];\n\tlong[] array_nums8 = new long[array_nums2.length];\n\tlong[] array_nums9 = new long[array_nums1.length];\n\tlong[] array_nums10 = new long[array_nums2.length];\n\tlong[] array_nums11 = new long[array_nums1.length];\n\tlong[] array_nums12 = new long[array_nums2.length];\n\tlong[] array_nums13 = new long[array_nums1.length];\n\tlong[] array_nums14 = new long[array_nums2.length];\n\tlong[] array_nums15 = new long[array_nums1.length];\n\tlong[] array_nums16 = new long[array_nums2.length];\n\tlong[] array_nums17 = new long[array_nums1.length];\n\tlong[] array_nums18 = new long[array_nums2.length];\n\tlong[] array_nums19 = new long[array_nums1.length];\n\tlong[] array_nums20 = new long[array_nums2.length];\n\tlong[] array_nums21 = new long[array_nums1.length];\n\tlong[] array_nums22 = new long[array_nums2.length];\n\tlong[] array_nums23 = new long[array_nums1.length];\n\tlong[] array_nums24 = new long[array_nums2.length];\n\tlong[] array_nums25 = new long[array_nums1.length];\n\tlong[] array_nums26 = new long[array_nums2.length];\n\tlong[] array_",
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}",
    "{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}",
    "{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}",
    "{\n\tlong[] intersection_array;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}",
    "{\n\tlong[] array_nums_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_nums_intersection;\n}",
    "{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tarray_nums1_copy.sort;\n\tarray_nums2_copy.sort;\n\t\n\tlong[] array_nums1_copy_unique = array_nums1_copy.unique;\n\tlong[] array_nums2_copy_unique = array_nums2_copy.unique;\n\t\n\tlong[] array_nums1_copy_unique_copy = array_nums1_copy_unique.dup;\n\tlong[] array_nums2_copy_unique_copy = array_nums2_copy_unique.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy = array_nums1_copy_unique_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy = array_nums2_copy_unique_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy = array_nums1_copy_unique_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy = array_nums2_copy_unique_copy_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy_copy = array_nums1_copy_unique_copy_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy_copy = array_nums2_copy_unique_copy_copy_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy_copy_copy = array_nums1_copy_unique_copy_copy_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy_copy_copy = array_nums2_copy_unique_copy_copy_",
    "{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection ~= num;\n\t\t}\n\t}\n\treturn intersection;\n}",
    "{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}"
  ]
}