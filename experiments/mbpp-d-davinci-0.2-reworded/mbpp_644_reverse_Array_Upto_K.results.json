{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpwaticoyt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaticoyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < input.length; i++) \n\t{\n\t\tif (i < k) \n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\toutput[i] = input[i];\n\t\t}\n\t}\n\tfor (long i = k - 1; i >= 0; i--) \n\t{\n\t\toutput[j] = temp[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong z = 0;\n\tlong y = 0;\n\tfor (i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (j = k; j < input.length; j++) \n\t{\n\t\ttemp2[z] = input[j];\n\t\tz++;\n\t}\n\tfor (i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\tfor (j = k; j < input.length; j++) \n\t{\n\t\tresult[j] = temp2[y];\n\t\ty++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpex0qur_5.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex0qur_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i >= 0; i--)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor(long i = input.length - 1; i > k; i--)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8_e1gecv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp8_e1gecv.__unittest_L24_C1() [0x427ff3]\n??:? void tmp8_e1gecv.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\tfor (long i = 0; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result;\n\tresult = new long[input.length];\n\t\n\tforeach(i,e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\tresult[i] = input[k-i-1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = input[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k-i-1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\t\n\twhile(i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\t\n\twhile(j < input.length - k)\n\t{\n\t\ttemp2[j] = input[k + j];\n\t\tj++;\n\t}\n\t\n\twhile(l < k)\n\t{\n\t\toutput[l] = temp2[l];\n\t\tl++;\n\t}\n\t\n\twhile(l < input.length)\n\t{\n\t\toutput[l] = temp[l - k];\n\t\tl++;\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp019ae38u.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x42863e]\n??:? long[] tmp019ae38u.reverse_Array_Upto_K(long[], long) [0x427f8e]\n??:? void tmp019ae38u.__unittest_L43_C1() [0x428078]\n??:? void tmp019ae38u.__modtest() [0x42830c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c647]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430765]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b1]\n??:? runModuleUnitTests [0x42c41d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tforeach(i,e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\ttemp[i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i-k] = e;\n\t\t}\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tforeach(i,e; temp)\n\t{\n\t\tresult[i] = e;\n\t}\n\t\n\tforeach(i,e; temp2)\n\t{\n\t\tresult[i+k] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpa_61r5ef.d(26): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_61r5ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length-k; i++) \n\t{\n\t\ttemp2[i] = input[i+k];\n\t}\n\t\n\ttemp = reverse(temp);\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length-k; i++) \n\t{\n\t\tresult[i+k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmp0n15akwk.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n15akwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong i;\n\toutput = new long[input.length];\n\tfor (i = 0; i < k; i++) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\tfor (i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\t// copy the first k elements to temp\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\t// reverse the first k elements\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = temp[k - i - 1];\n\t}\n\t\n\t// copy the remaining elements to temp2\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\t// copy the reversed elements to output\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\t// copy the remaining elements to output\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyqs0_moa.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmpyqs0_moa.__unittest_L46_C1() [0x42816f]\n??:? void tmpyqs0_moa.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] reversed = new long[k];\n\tlong[] remaining = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\treversed[i] = input[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\tremaining[i] = input[k + i];\n\t}\n\t\n\toutput = reversed ~ remaining;\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpub1mvwdc.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpub1mvwdc.__unittest_L24_C1() [0x427ff3]\n??:? void tmpub1mvwdc.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpl8jixjiu.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8jixjiu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < temp.length; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++) \n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpy4mbuqc0.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4mbuqc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpcf3_1fv9.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf3_1fv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[j] = temp[k - i - 1];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz2ro4fd9.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428515]\n??:? void tmpz2ro4fd9.__unittest_L29_C1() [0x42807b]\n??:? void tmpz2ro4fd9.__modtest() [0x428298]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b462]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430679]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b439]\n??:? runModuleUnitTests [0x42c3a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse();\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = temp[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpmrdfk0ee.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrdfk0ee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor(long i = k+1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeapnio_4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpeapnio_4.__unittest_L24_C1() [0x427ff3]\n??:? void tmpeapnio_4.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\twhile (i < k)\n\t{\n\t\toutput[i] = input[k-i-1];\n\t\ti++;\n\t}\n\twhile (i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpex0qur_5.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex0qur_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[input.length];\n\tlong[] temp1 = new long[input.length];\n\tlong[] temp2 = new long[input.length];\n\t\n\ttemp = input[0..k];\n\ttemp1 = input[k..$];\n\t\n\ttemp2 = temp[$..0];\n\toutput = temp2 ~ temp1;\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp688696u4.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428536]\n??:? long[] tmp688696u4.reverse_Array_Upto_K(long[], long) [0x427eda]\n??:? void tmp688696u4.__unittest_L23_C1() [0x427f74]\n??:? void tmp688696u4.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpxskut6wi.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxskut6wi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] first_part = new long[k];\n\tlong[] second_part = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tfirst_part[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tsecond_part[i - k] = input[i];\n\t}\n\t\n\tfirst_part = first_part.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = first_part[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = second_part[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmp7z_4fcly.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7z_4fcly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = k-1; i >= 0; i--)\n\t{\n\t\ttemp[j] = input[i];\n\t\tj++;\n\t}\n\tj = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[j];\n\t\tj++;\n\t}\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result;\n\tresult = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\tresult[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\twhile(i < input.length)\n\t{\n\t\tresult[i] = input[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn_5te8gs.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpn_5te8gs.__unittest_L27_C1() [0x427ffb]\n??:? void tmpn_5te8gs.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (long i = k - 1; i >= 0; i--) \n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong i;\n\toutput = new long[$];\n\ti = 0;\n\twhile (i < k) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti = i + 1;\n\t}\n\twhile (i < $) \n\t{\n\t\toutput[i] = input[i];\n\t\ti = i + 1;\n\t}\n\treturn output;\n}\n/*\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmploe_evfj.d(19): Error: `$` is valid only inside [] of index or slice\n/tmp/tmploe_evfj.d(26): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmploe_evfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti++;\n\t}\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_8f82w7.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp4_8f82w7.__unittest_L24_C1() [0x427ff3]\n??:? void tmp4_8f82w7.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpk5blvp8m.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5blvp8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\tj = input.length - 1;\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp640z1c0l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp640z1c0l.__unittest_L28_C1() [0x427ff7]\n??:? void tmp640z1c0l.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\t\n\tforeach(i, ref e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\toutput[i] = input[k-i-1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput[i] = input[i];\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpcf3_1fv9.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf3_1fv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmp65lk31xm.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65lk31xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmptk7q606m.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptk7q606m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < input.length; i++) \n\t{\n\t\tif (i < k) \n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = input[i];\n\t\t}\n\t}\n\tfor (long i = k - 1; i >= 0; i--) \n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\tlong i;\n\tfor (i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k-i-1];\n\t}\n\tfor (i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{ \n\tlong[] output = new long[input.length];\n\t\n\tforeach(i,e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\toutput[i] = input[k-i-1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput[i] = input[i];\n\t\t}\n\t}\n\t\n\treturn output;\n} \nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\twhile (i < k) \n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\twhile (i < input.length) \n\t{\n\t\ttemp2[j] = input[i];\n\t\ti++;\n\t\tj++;\n\t}\n\ti = 0;\n\twhile (i < k) \n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t\ti++;\n\t}\n\twhile (i < input.length) \n\t{\n\t\toutput[i] = temp2[l];\n\t\ti++;\n\t\tl++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[input.length];\n\tlong[] temp2 = new long[input.length];\n\tlong[] temp3 = new long[input.length];\n\tlong[] temp4 = new long[input.length];\n\tlong[] temp5 = new long[input.length];\n\tlong[] temp6 = new long[input.length];\n\tlong[] temp7 = new long[input.length];\n\tlong[] temp8 = new long[input.length];\n\tlong[] temp9 = new long[input.length];\n\tlong[] temp10 = new long[input.length];\n\tlong[] temp11 = new long[input.length];\n\tlong[] temp12 = new long[input.length];\n\tlong[] temp13 = new long[input.length];\n\tlong[] temp14 = new long[input.length];\n\tlong[] temp15 = new long[input.length];\n\tlong[] temp16 = new long[input.length];\n\tlong[] temp17 = new long[input.length];\n\tlong[] temp18 = new long[input.length];\n\tlong[] temp19 = new long[input.length];\n\tlong[] temp20 = new long[input.length];\n\tlong[] temp21 = new long[input.length];\n\tlong[] temp22 = new long[input.length];\n\tlong[] temp23 = new long[input.length];\n\tlong[] temp24 = new long[input.length];\n\tlong[] temp25 = new long[input.length];\n\tlong[] temp26 = new long[input.length];\n\tlong[] temp27 = new long[input.length];\n\tlong[] temp28 = new long[input.length];\n\tlong[] temp29 = new long[input.length];\n\tlong[] temp30 = new long[input.length];\n\tlong[] temp31 = new long[input.length];\n\tlong[] temp32 = new long[input.length];\n\tlong[] temp33 = new long[input.length];\n\tlong[] temp34 = new long[input.length];\n\tlong[] temp35 = new long[input.length];\n\tlong[] temp36 = new\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp8w5eunwo.d(47): Error: basic type expected, not `unittest`\n/tmp/tmp8w5eunwo.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmp8w5eunwo.d(47): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w5eunwo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpwaticoyt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaticoyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpex0qur_5.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex0qur_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < input.length; i++)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = input[i];\n\t\t}\n\t}\n\tfor(long i = k - 1; i >= 0; i--)\n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tint i = 0;\n\tint j = 0;\n\tint m = 0;\n\tint n = 0;\n\t\n\t// Copy the first k elements into temp\n\twhile (i < k) {\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\t\n\t// Reverse the temp array\n\ttemp = temp.reverse();\n\t\n\t// Copy the remaining elements into temp2\n\twhile (j < input.length - k) {\n\t\ttemp2[j] = input[k + j];\n\t\tj++;\n\t}\n\t\n\t// Copy the temp array into the output array\n\twhile (m < temp.length) {\n\t\toutput[m] = temp[m];\n\t\tm++;\n\t}\n\t\n\t// Copy the temp2 array into the output array\n\twhile (n < temp2.length) {\n\t\toutput[k + n] = temp2[n];\n\t\tn++;\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpbsa32aqb.d(25): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsa32aqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tfor(i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\tfor(i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpu4qkqkiw.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4qkqkiw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmp65lk31xm.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65lk31xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i > 0; i--)\n\t{\n\t\toutput[j] = input[i-1];\n\t\tj++;\n\t}\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpnkw789ui.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkw789ui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong i;\n\tlong j;\n\t\n\toutput = new long[$];\n\t\n\tfor (i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\t\n\tfor (j = k; j < input.length; j++)\n\t{\n\t\toutput[j] = input[j];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpmn2jzaim.d(14): Error: undefined identifier `__dollar`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn2jzaim.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpxskut6wi.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxskut6wi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] reversed = new long[k];\n\tlong[] remaining = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\treversed[i] = input[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tremaining[i] = input[k + i];\n\t}\n\t\n\toutput = reversed ~ remaining;\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor(long i=0;i<k;i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i=k;i<input.length;i++)\n\t{\n\t\ttemp2[i-k] = input[i];\n\t}\n\t\n\tfor(long i=0;i<k;i++)\n\t{\n\t\toutput[i] = temp[k-i-1];\n\t}\n\t\n\tfor(long i=k;i<input.length;i++)\n\t{\n\t\toutput[i] = temp2[i-k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy461t3ui.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpy461t3ui.__unittest_L24_C1() [0x427ff3]\n??:? void tmpy461t3ui.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy41h1e8b.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpy41h1e8b.__unittest_L24_C1() [0x427ff3]\n??:? void tmpy41h1e8b.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpohqv8a4r.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohqv8a4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_8f82w7.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp4_8f82w7.__unittest_L24_C1() [0x427ff3]\n??:? void tmp4_8f82w7.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[input.length];\n\t\n\tforeach(i; 0..input.length)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tforeach(i; 0..k)\n\t{\n\t\tresult[i] = temp[k-i];\n\t}\n\t\n\tforeach(i; k..input.length)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbgd9lqms.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmpbgd9lqms.__unittest_L30_C1() [0x4280bf]\n??:? void tmpbgd9lqms.__modtest() [0x4282dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c617]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430735]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b481]\n??:? runModuleUnitTests [0x42c3ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpac9sargt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac9sargt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpohqv8a4r.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohqv8a4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\tresult[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\twhile(i < input.length)\n\t{\n\t\tresult[i] = input[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8p401f60.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp8p401f60.__unittest_L26_C1() [0x427feb]\n??:? void tmp8p401f60.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor(long i=0;i<k;i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i=k;i<input.length;i++)\n\t{\n\t\ttemp2[i-k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i=0;i<k;i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i=k;i<input.length;i++)\n\t{\n\t\tresult[i] = temp2[i-k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpiq75sdm6.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq75sdm6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpac9sargt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac9sargt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdfafh2se.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpdfafh2se.__unittest_L26_C1() [0x427feb]\n??:? void tmpdfafh2se.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[j] = input[i];\n\t\tj++;\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tj = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[j];\n\t\tj++;\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpumevdar0.d(19): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumevdar0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tfor (i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (j = k; j < input.length; j++) \n\t{\n\t\ttemp2[l] = input[j];\n\t\tl++;\n\t}\n\tfor (m = 0; m < temp.length; m++) \n\t{\n\t\toutput[m] = temp[temp.length - m - 1];\n\t}\n\tfor (m = k; m < input.length; m++) \n\t{\n\t\toutput[m] = temp2[m - k];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i >= 0; i--)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor(long i = k+1; i < input.length; i++)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpws6k4fam.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpws6k4fam.__unittest_L24_C1() [0x427ff3]\n??:? void tmpws6k4fam.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\ttemp2[i] = input[i+k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\toutput[i+k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpzldpziu0.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzldpziu0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] reversed = new long[k];\n\tlong[] remaining = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\treversed[i] = input[k - 1 - i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tremaining[i] = input[k + i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = reversed[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = remaining[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\ttemp = temp.reverse;\n\ti = 0;\n\twhile(i < k)\n\t{\n\t\toutput[i] = temp[i];\n\t\ti++;\n\t}\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpj_00lk64.d(19): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_00lk64.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tforeach(long x; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\ttemp[i] = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput[j] = x;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\ti = k - 1;\n\twhile(i >= 0)\n\t{\n\t\toutput[j] = temp[i];\n\t\ti--;\n\t\tj++;\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphxk78yya.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmphxk78yya.__unittest_L39_C1() [0x428057]\n??:? void tmphxk78yya.__modtest() [0x428274]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong i;\n\tlong j;\n\t\n\toutput = new long[$];\n\t\n\ti = 0;\n\t\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti = i + 1;\n\t}\n\t\n\tj = k;\n\t\n\twhile(j < input.length)\n\t{\n\t\toutput[j] = input[j];\n\t\tj = j + 1;\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmps_bl98fk.d(14): Error: undefined identifier `__dollar`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_bl98fk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = input.dup;\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\tresult[i] = input[k - i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpccrb2jkm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x429591]\n??:? void tmpccrb2jkm.__unittest_L19_C1() [0x428173]\n??:? void tmpccrb2jkm.__modtest() [0x428504]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42921a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aed9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42af68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ae65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291f1]\n??:? runModuleUnitTests [0x42df25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp8_imqfmi.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_imqfmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmptat1syt0.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptat1syt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp8itz8nnt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8itz8nnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmps93i_4cu.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps93i_4cu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\tlong m = 0;\n\twhile(i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\twhile(j < input.length - k)\n\t{\n\t\ttemp2[j] = input[j + k];\n\t\tj++;\n\t}\n\twhile(l < k)\n\t{\n\t\tresult[l] = temp[k - l - 1];\n\t\tl++;\n\t}\n\twhile(m < input.length - k)\n\t{\n\t\tresult[m + k] = temp2[m];\n\t\tm++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tforeach(i, e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\ttemp[i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i - k] = e;\n\t\t}\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tforeach(i, e; temp)\n\t{\n\t\tresult[i] = e;\n\t}\n\t\n\tforeach(i, e; temp2)\n\t{\n\t\tresult[i + k] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp61st9s0o.d(26): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61st9s0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpl8jixjiu.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8jixjiu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse();\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpd044wz0t.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd044wz0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = temp.length; i < result.length; i++)\n\t{\n\t\tresult[i] = temp2[i - temp.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpzpnvq74q.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpnvq74q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp1xvufc3w.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xvufc3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\t\n\tforeach(i; 0..k)\n\t{\n\t\toutput[i] = input[k-i];\n\t}\n\t\n\tforeach(i; k..input.length)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv5856fvc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmpv5856fvc.__unittest_L25_C1() [0x428017]\n??:? void tmpv5856fvc.__modtest() [0x428234]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpohqv8a4r.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohqv8a4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor(long i = k+1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeapnio_4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpeapnio_4.__unittest_L24_C1() [0x427ff3]\n??:? void tmpeapnio_4.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\ttemp2[i] = input[i+k];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k-i-1];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\toutput[i+k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdfafh2se.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpdfafh2se.__unittest_L26_C1() [0x427feb]\n??:? void tmpdfafh2se.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpcxkc06te.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxkc06te.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp15euf0l7.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15euf0l7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpex0qur_5.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex0qur_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tint j = 0;\n\tfor (int i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (int i = k - 1; i >= 0; i--)\n\t{\n\t\toutput[j] = temp[i];\n\t\tj++;\n\t}\n\tfor (int i = k; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpqd8a2gkk.d(17): Error: cannot implicitly convert expression `k - 1L` of type `long` to `int`\n/tmp/tmpqd8a2gkk.d(22): Error: cannot implicitly convert expression `k` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd8a2gkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < input.length; i++) \n\t{\n\t\tif (i < k) \n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttemp2[i - k] = input[i];\n\t\t}\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < input.length; i++) \n\t{\n\t\tif (i < k) \n\t\t{\n\t\t\tresult[i] = temp[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = temp2[i - k];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpdkxz4gef.d(26): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkxz4gef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[input.length];\n\tlong[] temp2 = new long[input.length];\n\tlong[] temp3 = new long[input.length];\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tforeach(i; k .. input.length)\n\t{\n\t\ttemp2[i] = input[i];\n\t}\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\ttemp3[i] = temp2[k-i];\n\t}\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\toutput[i] = temp3[i];\n\t}\n\t\n\tforeach(i; k .. input.length)\n\t{\n\t\toutput[i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp537dbnm4.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x428705]\n??:? void tmp537dbnm4.__unittest_L42_C1() [0x42826b]\n??:? void tmp537dbnm4.__modtest() [0x428488]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b652]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430869]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]\n??:? runModuleUnitTests [0x42c595]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp8_imqfmi.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_imqfmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = input.dup;\n\tforeach(i; 0..k) \n\t{\n\t\tresult[i] = input[k-i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf55kpfz7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x429591]\n??:? void tmpf55kpfz7.__unittest_L17_C1() [0x428173]\n??:? void tmpf55kpfz7.__modtest() [0x428504]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42921a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aed9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42af68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ae65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291f1]\n??:? runModuleUnitTests [0x42df25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\ttemp = input[0..k];\n\ttemp2 = input[k..$];\n\t\n\ttemp = temp.reverse;\n\t\n\tresult = temp ~ temp2;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpar5hwhth.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpar5hwhth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmp3yb5y9_u.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yb5y9_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput.length = input.length;\n\tforeach(i, ref e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\toutput[i] = input[k - i - 1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput[i] = input[i];\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpysg6xb3z.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysg6xb3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong i, j;\n\t\n\toutput = input.dup;\n\t\n\tif (k > input.length)\n\t\tk = input.length;\n\t\n\tfor (i = 0, j = k - 1; i < j; i++, j--)\n\t{\n\t\toutput[i] = input[j];\n\t\toutput[j] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "/tmp/tmpwaticoyt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaticoyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpac9sargt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac9sargt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\t\n\tforeach(i,e; input)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\toutput[i] = input[k - i - 1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput[i] = input[i];\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < input.length; i++)\n\t{\n\t\tif (i < k)\n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = input[i];\n\t\t}\n\t}\n\tfor (long i = k - 1; i >= 0; i--)\n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_8f82w7.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp4_8f82w7.__unittest_L24_C1() [0x427ff3]\n??:? void tmp4_8f82w7.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(int i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(int i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(int i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpxjtaz97m.d(23): Error: cannot implicitly convert expression `k` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjtaz97m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp1xvufc3w.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xvufc3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[input.length];\n\tlong[] temp2 = new long[input.length];\n\tlong[] temp3 = new long[input.length];\n\tlong[] temp4 = new long[input.length];\n\tlong[] temp5 = new long[input.length];\n\tlong[] temp6 = new long[input.length];\n\tlong[] temp7 = new long[input.length];\n\tlong[] temp8 = new long[input.length];\n\tlong[] temp9 = new long[input.length];\n\tlong[] temp10 = new long[input.length];\n\tlong[] temp11 = new long[input.length];\n\tlong[] temp12 = new long[input.length];\n\tlong[] temp13 = new long[input.length];\n\tlong[] temp14 = new long[input.length];\n\tlong[] temp15 = new long[input.length];\n\tlong[] temp16 = new long[input.length];\n\tlong[] temp17 = new long[input.length];\n\tlong[] temp18 = new long[input.length];\n\tlong[] temp19 = new long[input.length];\n\tlong[] temp20 = new long[input.length];\n\tlong[] temp21 = new long[input.length];\n\tlong[] temp22 = new long[input.length];\n\tlong[] temp23 = new long[input.length];\n\tlong[] temp24 = new long[input.length];\n\tlong[] temp25 = new long[input.length];\n\tlong[] temp26 = new long[input.length];\n\tlong[] temp27 = new long[input.length];\n\tlong[] temp28 = new long[input.length];\n\tlong[] temp29 = new long[input.length];\n\tlong[] temp30 = new long[input.length];\n\tlong[] temp31 = new long[input.length];\n\tlong[] temp32 = new long[input.length];\n\tlong[] temp33 = new long[input.length];\n\tlong[] temp34 = new long[input.length];\n\tlong[] temp35 = new long[input.length];\n\tlong[] temp36 = new\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpm0jym29o.d(47): Error: basic type expected, not `unittest`\n/tmp/tmpm0jym29o.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmpm0jym29o.d(47): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0jym29o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i > 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg58q1_uo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpg58q1_uo.__unittest_L24_C1() [0x427ff3]\n??:? void tmpg58q1_uo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k-i-1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < k) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti = i + 1;\n\t}\n\twhile (i < input.length) \n\t{\n\t\toutput[i] = input[i];\n\t\ti = i + 1;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdxbbc41v.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpdxbbc41v.__unittest_L24_C1() [0x427ff3]\n??:? void tmpdxbbc41v.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpu4qkqkiw.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4qkqkiw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i-k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i-k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpncb_zqia.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncb_zqia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpul38h0rc.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul38h0rc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\tlong[] temp;\n\tlong i;\n\tlong j;\n\tlong n;\n\t\n\tn = input.length;\n\t\n\toutput = new long[n];\n\ttemp = new long[k];\n\t\n\tfor(i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(i = k; i < n; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmp65lk31xm.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65lk31xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tint j = 0;\n\tfor (int i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (int i = k - 1; i >= 0; i--) \n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\tfor (int i = k; i < input.length; i++) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpuibu4j_3.d(17): Error: cannot implicitly convert expression `k - 1L` of type `long` to `int`\n/tmp/tmpuibu4j_3.d(22): Error: cannot implicitly convert expression `k` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuibu4j_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[input.length];\n\ttemp = input[0..k];\n\ttemp = temp.reverse;\n\toutput[0..k] = temp;\n\toutput[k..$] = input[k..$];\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpu9vf6s1p.d(13): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9vf6s1p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpydcqqg6t.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydcqqg6t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdxbbc41v.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpdxbbc41v.__unittest_L24_C1() [0x427ff3]\n??:? void tmpdxbbc41v.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmph_c95lnp.d(78): Error: no identifier for declarator `long`\n/tmp/tmph_c95lnp.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_c95lnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpp7d87_x1.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7d87_x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < input.length; i++)\n\t{\n\t\tif(i < k)\n\t\t{\n\t\t\ttemp[i] = input[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = input[i];\n\t\t}\n\t}\n\tfor(long i = k - 1; i >= 0; i--)\n\t{\n\t\tresult[j++] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong i = 0;\n\tfor (; i < k; i++)\n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\tfor (; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti++;\n\t}\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpq9_z55_l.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9_z55_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[k + i] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse();\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\toutput[i] = temp[i];\n\t}\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmp9axongo_.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9axongo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp1xvufc3w.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xvufc3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse();\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpc96kv9w0.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc96kv9w0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tauto result = input.dup;\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\tfor (long i = k - 1; i >= 0; i--)\n\t{\n\t\toutput[j] = temp[i];\n\t\tj++;\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpscznqo9y.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscznqo9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmp1xvufc3w.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xvufc3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = input[k-i-1];\n\t}\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) \n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tfor (long i = 0; i < k; i++) {\n\t\ttemp[i] = input[i];\n\t}\n\tfor (long i = 0; i < k; i++) {\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\tfor (long i = k; i < input.length; i++) {\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpac9sargt.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac9sargt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tlong i;\n\tlong j;\n\tlong l;\n\t\n\tfor(i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(j = 0; j < input.length - k; j++)\n\t{\n\t\ttemp2[j] = input[j + k];\n\t}\n\t\n\tfor(l = 0; l < k; l++)\n\t{\n\t\toutput[l] = temp[k - l - 1];\n\t}\n\t\n\tfor(l = 0; l < input.length - k; l++)\n\t{\n\t\toutput[l + k] = temp2[l];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpz20f431g.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz20f431g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpysg6xb3z.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysg6xb3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong j = 0;\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\ttemp = temp.reverse();\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpd044wz0t.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd044wz0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpq9_z55_l.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9_z55_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\tlong m = 0;\n\twhile(i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\twhile(j < input.length - k)\n\t{\n\t\ttemp2[j] = input[k + j];\n\t\tj++;\n\t}\n\twhile(m < k)\n\t{\n\t\toutput[m] = temp[k - m - 1];\n\t\tm++;\n\t}\n\twhile(l < input.length - k)\n\t{\n\t\toutput[k + l] = temp2[l];\n\t\tl++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\twhile (i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti = i + 1;\n\t}\n\ttemp = temp.reverse;\n\twhile (j < k)\n\t{\n\t\toutput[j] = temp[j];\n\t\tj = j + 1;\n\t}\n\twhile (l < input.length - k)\n\t{\n\t\toutput[j] = input[k];\n\t\tj = j + 1;\n\t\tk = k + 1;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpl2c_k_y2.d(20): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2c_k_y2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor(long i = k; i >= 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor(long i = k + 1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps17fbhbm.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmps17fbhbm.__unittest_L24_C1() [0x427ff3]\n??:? void tmps17fbhbm.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = input.length - 1; i > k; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_8f82w7.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp4_8f82w7.__unittest_L24_C1() [0x427ff3]\n??:? void tmp4_8f82w7.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\ttemp = input[0..k];\n\ttemp2 = input[k..$];\n\t\n\ttemp = temp.reverse;\n\t\n\toutput = temp ~ temp2;\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmph4qu42sb.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4qu42sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result;\n\tlong i,j;\n\t\n\tresult = new long[input.length];\n\t\n\ti = 0;\n\tj = k;\n\t\n\twhile(i < k)\n\t{\n\t\tresult[i] = input[j];\n\t\ti = i + 1;\n\t\tj = j - 1;\n\t}\n\t\n\twhile(i < input.length)\n\t{\n\t\tresult[i] = input[i];\n\t\ti = i + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4tj_w8km.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmp4tj_w8km.__unittest_L33_C1() [0x42801b]\n??:? void tmp4tj_w8km.__modtest() [0x428238]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output;\n\toutput = new long[input.length];\n\tlong i;\n\tfor (i = 0; i < k; i++) \n\t{\n\t\toutput[i] = input[k - i - 1];\n\t}\n\tfor (i = k; i < input.length; i++) \n\t{\n\t\toutput[i] = input[i];\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\tresult[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\twhile(i < input.length)\n\t{\n\t\tresult[i] = input[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8p401f60.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp8p401f60.__unittest_L26_C1() [0x427feb]\n??:? void tmp8p401f60.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) {\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmp25ie2irp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25ie2irp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tint i = 0;\n\tint j = k;\n\twhile (i < j) \n\t{\n\t\tinput[i] = input[i] ^ input[j];\n\t\tinput[j] = input[i] ^ input[j];\n\t\tinput[i] = input[i] ^ input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\treturn input;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpt9e5b1cl.d(11): Error: cannot implicitly convert expression `k` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9e5b1cl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong[] temp3 = new long[input.length];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp3 = temp.reverse();\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp3[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\toutput[i + k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpvxwxcu63.d(25): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxwxcu63.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45lr6zvo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp45lr6zvo.__unittest_L24_C1() [0x427ff3]\n??:? void tmp45lr6zvo.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[k + i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[k + i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpqvp08umy.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvp08umy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++) {\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) {\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\tfor (long i = 0; i < k; i++) {\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++) {\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result;\n\tlong i;\n\tresult = new long[$];\n\tfor(i = 0; i < k; i++)\n\t{\n\t\tresult[i] = input[k-i-1];\n\t}\n\tfor(i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpm19t2c0v.d(12): Error: undefined identifier `__dollar`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm19t2c0v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\ttemp = input[0..k];\n\ttemp2 = input[k..$];\n\t\n\ttemp = temp.reverse;\n\toutput = temp ~ temp2;\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmp6u6m6p8v.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u6m6p8v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length-k];\n\tlong[] temp3 = new long[k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\ttemp2[i] = input[i+k];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp3[i] = temp[k-i-1];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp3[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length-k; i++)\n\t{\n\t\toutput[i+k] = temp2[i];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++) \n\t{\n\t\tresult[i] = input[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmp0f17c585.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f17c585.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tforeach(i; k .. input.length)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tforeach(i; 0 .. k)\n\t{\n\t\toutput[i] = temp[i];\n\t}\n\t\n\tforeach(i; k .. input.length)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}\nunittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmplbt90aeu.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbt90aeu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}