{
  "name": "mbpp_807_first_odd",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 == 1) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 != 0) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif (num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 == 1) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif (num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\treturn n;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 != 0) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 == 1) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 == 1) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n;nums)\n\t{\n\t\tif(n%2!=0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif (n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif (num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums) \n\t{\n\t\tif(n % 2 == 1) \n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif (num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(i; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\treturn i;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\treturn n;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif (num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\treturn num;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\treturn n;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n\t\n*/\nlong first_odd(long[] nums) \n{\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\treturn num;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}