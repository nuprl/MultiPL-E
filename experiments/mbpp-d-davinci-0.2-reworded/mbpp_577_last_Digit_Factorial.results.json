{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (int i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++)\n\t\tres = (res * i) % 10;\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfact = fact * i;\n\t}\n\treturn fact % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm4lpa4mt.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmpm4lpa4mt.__unittest_L16_C1() [0x427a9c]\n??:? void tmpm4lpa4mt.__modtest() [0x427ad0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tif (n < 0) \n\t\treturn 0;\n\tif (n <= 1) \n\t\treturn 1;\n\treturn (n * last_Digit_Factorial(n - 1)) % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    // Initialize result \n    long res = 1; \n  \n    // Calculate value of [1*(2)*---*(n-k+1)] / [k*(k-1)*---*1] \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfactorial *= i;\n\t\tfactorial %= 10;\n\t}\n\treturn factorial;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfactorial *= i;\n\t}\n\treturn factorial % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd1503vfm.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmpd1503vfm.__unittest_L16_C1() [0x427a9c]\n??:? void tmpd1503vfm.__modtest() [0x427ad0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tif (n < 0) \n\t\treturn 0;\n\tif (n <= 1) \n\t\treturn 1;\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10;\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tresult = (result * i) % 10;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor(long i = 2; i <= n; i++)\n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpdurvipyl.d(11): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdurvipyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    // Initialize result \n    long res = 1; \n  \n    // Calculate value of [1*(2)*---*(n-k+1)] / [k*(k-1)*---*1] \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver program to test above function \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10;\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong i, fact = 1;\n\tfor (i = 1; i <= n; i++) \n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n  \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    // Initialize result \n    long res = 1; \n  \n    // Calculate value of [1*(2)*---*(n-k+1)] / [k*(k-1)*---*1] \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfactorial *= i;\n\t}\n\treturn factorial % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7e6l9s3.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmpn7e6l9s3.__unittest_L16_C1() [0x427a9c]\n??:? void tmpn7e6l9s3.__modtest() [0x427ad0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfactorial *= i;\n\t\tfactorial %= 10;\n\t}\n\treturn factorial;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \n \n// Driver code \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    // Initialize result \n    long res = 1; \n  \n    // Calculate value of [1*(2)*---*(n-k+1)] / [k*(k-1)*---*1] \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res % 10; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res % 10; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tif (n < 0) \n\t\treturn 0;\n\tif (n <= 1) \n\t\treturn 1;\n\treturn (n * last_Digit_Factorial(n - 2)) % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe61cn070.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d55]\n??:? void tmpe61cn070.__unittest_L15_C1() [0x427a84]\n??:? void tmpe61cn070.__modtest() [0x427ad8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a90e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]\n??:? runModuleUnitTests [0x42b851]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res % 10; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong lastDigit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlastDigit = (lastDigit * i) % 10;\n\t}\n\treturn lastDigit;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10;\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (int i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpdurvipyl.d(11): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdurvipyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n    if (n < 0) \n        return 0;\n    if (n <= 1) \n        return 1;\n    return (last_Digit_Factorial(n - 1) * n) % 10;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong fact = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfact = (fact * i) % 10;\n\t}\n\treturn fact;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong i;\n\tlong factorial = 1;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tfactorial = (factorial * i) % 10;\n\t}\n\t\n\treturn factorial;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong lastDigit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlastDigit = (lastDigit * i) % 10;\n\t}\n\treturn lastDigit;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res % 10; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfactorial *= i;\n\t\tfactorial = factorial % 10;\n\t}\n\treturn factorial;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \n  \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong res = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tres = (res * i) % 10;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n  \n    if (n <= 1) \n        return 1; \n  \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n  \n    return res; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tfactorial *= i;\n\t\tfactorial %= 10;\n\t}\n\treturn factorial;\n}\nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (int i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    if (n < 0) \n        return 0; \n    if (n <= 1) \n        return 1; \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} \nunittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}