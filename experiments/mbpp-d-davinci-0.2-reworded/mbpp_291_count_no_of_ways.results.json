{
  "name": "mbpp_291_count_no_of_ways",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_count = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = diff_color_counts * (k - 1);\n\t\tsame_color_counts = total_count - diff_color_counts;\n\t\ttotal_count = diff_color_counts + same_color_counts;\n\t}\n\treturn total_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45v9tbvk.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp45v9tbvk.__unittest_L25_C1() [0x427adf]\n??:? void tmp45v9tbvk.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\tlong total_count = diff_color_count + same_color_count;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = total_count * (k - 1);\n\t\ttotal_count = diff_color_count + same_color_count;\n\t}\n\treturn total_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptfa08pp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmptfa08pp4.__unittest_L25_C1() [0x427aeb]\n??:? void tmptfa08pp4.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_count = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; ++i) \n\t{\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = total_count * (k - 1);\n\t\ttotal_count = diff_color_counts + same_color_counts;\n\t}\n\treturn total_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk6_d_j1m.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpk6_d_j1m.__unittest_L25_C1() [0x427aeb]\n??:? void tmpk6_d_j1m.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // table[i] will store count of solutions for i posts and k colors \n    long table[] = new long[n + 1]; \n    table[0] = 0; \n    table[1] = k; \n    table[2] = k + k * (k - 1); \n  \n    // Fill rest of the entries in table using recursive \n    // formula \n    for (long i = 3; i <= n; i++) \n        table[i] = (k - 1) * (table[i - 1] + table[i - 2]); \n  \n    return table[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "/tmp/tmpes_uanrk.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[] table`\n/tmp/tmpes_uanrk.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[] table`\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post (there is only one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There are 0 ways for other posts to violate (the rules). \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i][0] = 0; \n\t\n\t// Fill rest of the entries in table using recursive relation \n\t// same[i][c] = diff[i-1][c-1] + diff[i-1][c] \n\t// diff[i][c] = sum(same[i-1][k]) + sum(diff[i-1][k]) \n\t//\t\t\t\t- same[i-1][c] \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 1; c <= k; c++) \n\t\t{ \n\t\t\t// Find the ways to color current post same as color c + \n\t\t\t// previous post not colored same as c. \n\t\t\tlong same = dp[i-1][c-1]; \n\t\t\t\n\t\t\t// Find the ways to color current post not same as \n\t\t\t// color c + previous post colored same as c. \n\t\t\tlong diff = (dp[i-1][k] - dp[i-1][c-1]); \n\t\t\t\n\t\t\t// total count is sum of ways to color current post \n\t\t\t// same as c and not same as c. \n\t\t\tdp[i][c] = (same + diff) % 1000000007; \n\t\t} \n\t} \n\t\n\tlong ans = 0; \n\tfor (long c = 1; c <= k; c++) \n\t\tans = (ans + dp[n][c]) % 1000000007; \n\t\n\treturn ans; \n\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "/tmp/tmp4ays_aox.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp4ays_aox.d(49): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ays_aox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // dp[i] will store count of ways for i posts and k colors \n    long dp[n + 1]; \n    memset(dp, 0, sizeof(dp)); \n  \n    // There are k ways to paint 0th post \n    dp[0] = k; \n  \n    // There are 0 ways for single post to \n    // violate (same color_count) property \n    dp[1] = k; \n  \n    // There are 0 ways for 2 posts to have same \n    // colors \n    dp[2] = k * (k - 1); \n  \n    // Fill for 3 to n posts \n    for (long i = 3; i <= n; i++) \n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]); \n  \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "/tmp/tmpfltbf12s.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpfltbf12s.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfltbf12s.d(13): Error: undefined identifier `memset`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfltbf12s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn diff_color_counts + same_color_counts;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same, diff; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpgg3d07id.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpgg3d07id.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg3d07id.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n + 1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpl3mt3b1y.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpl3mt3b1y.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3mt3b1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn (diff + same);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k-1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong[] dp = new long[n + 1]; \n\t// There are k ways to paint 0th post \n\tdp[0] = k; \n\t// There are 0 ways for single post to paint \n\t// same color as previous one \n\tdp[1] = k; \n\t// There are 0 ways for 2 posts to paint same \n\t// color as previous one \n\tdp[2] = k * (k - 1); \n\t// Fill for 3 to n posts \n\tfor (long i = 3; i <= n; i++) \n\t\tdp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]); \n\treturn dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjx49hr69.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmpjx49hr69.__unittest_L26_C1() [0x427e45]\n??:? void tmpjx49hr69.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c123]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]\n??:? runModuleUnitTests [0x42bef9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n+1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpnll7j73u.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpnll7j73u.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll7j73u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t{\n\t\treturn k;\n\t}\n\tif (n == 2) \n\t{\n\t\treturn k * k;\n\t}\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (int i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_count = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = diff_color_counts * (k - 1);\n\t\tsame_color_counts = total_count - diff_color_counts;\n\t\ttotal_count = diff_color_counts + same_color_counts;\n\t}\n\treturn total_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp45v9tbvk.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp45v9tbvk.__unittest_L25_C1() [0x427adf]\n??:? void tmp45v9tbvk.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (int i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn (diff + same);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_counts = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = total_counts * (k - 1);\n\t\ttotal_counts = diff_color_counts + same_color_counts;\n\t}\n\treturn total_counts;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv_map_96.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpv_map_96.__unittest_L25_C1() [0x427aeb]\n??:? void tmpv_map_96.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong[] dp = new long[n + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp9qn13ley.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qn13ley.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k-1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post \n\tfor (long i = 1; i <= k; i++) \n\t\tdp[1][i] = i; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp45vr3wtf.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp45vr3wtf.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45vr3wtf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // table[i] will store count of solutions for i posts and k colors \n    long table[n+1]; \n    memset(table, 0, sizeof(table)); \n  \n    // Initialize first column with all 1s. There is only one way to paint 0'th post with any color. \n    for (long i = 0; i <= n; i++) \n        table[i] = 0; \n  \n    // Initialize first row with all 1s. There is only one way to paint n'th post with any color. \n    for (long j=0; j<=k; j++) \n        table[0] = 0; \n  \n    // Fill entries in table using recursive relation \n    // table[i] = (table[i - 1] * (k - 1)) + (table[i - 2] * (k - 1)); \n    for (long i = 1; i <= n; i++) \n    { \n        for (long j = 1; j <= k; j++) \n        { \n            // There are two cases for every post: \n            // a) Previous post has same color, so we can't use same color \n            // b) Previous post has different color \n            long diffColorCount = table[i-1] * (k-1); \n            long sameColorCount = table[i-2] * (k-1); \n  \n            // Total count is sum of both cases \n            table[i] += (diffColorCount + sameColorCount); \n        } \n    } \n  \n    return table[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpehaqq114.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] table`\n/tmp/tmpehaqq114.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpehaqq114.d(13): Error: undefined identifier `memset`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehaqq114.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\t\n\tfor (long i = 3; i <= n; ++i) {\n\t\tlong temp = diff_color_count;\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = temp;\n\t}\n\t\n\treturn diff_color_count + same_color_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0;\n\tlong diff = k;\n\tlong total = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n+1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpnll7j73u.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpnll7j73u.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll7j73u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong[] dp = new long[n+1]; \n\t\n\t// There are k ways to paint the first post \n\tdp[1] = k; \n\t\n\t// There are 0 ways for single post to paint \n\t// the same color as previous post \n\tlong same = 0, diff = k; \n\t\n\t// Fill for 2 posts onwards \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\t// Current same is same as previous diff \n\t\tsame = diff; \n\t\t\n\t\t// We always have k-1 choices for next post \n\t\tdiff = dp[i-1] * (k-1); \n\t\t\n\t\t// Total choices till i. \n\t\tdp[i] = (same + diff); \n\t} \n\t\n\treturn dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff_color_count;\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = temp;\n\t}\n\t\n\treturn diff_color_count + same_color_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\telse if (n == 2)\n\t\treturn k * k;\n\telse\n\t{\n\t\tlong same = k;\n\t\tlong diff = k * (k - 1);\n\t\tfor (long i = 3; i <= n; i++)\n\t\t{\n\t\t\tlong temp = diff;\n\t\t\tdiff = (same + diff) * (k - 1);\n\t\t\tsame = temp;\n\t\t}\n\t\treturn same + diff;\n\t}\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    long dp[][] = new long[n+1][k+1]; \n  \n    // There are k ways to color first post (there is only one post). \n    for (long c = 1; c <= k; c++) \n        dp[1][c] = 1; \n  \n    // There are 0 ways for other posts to violate (the problem statement). \n    for (long i = 2; i <= n; i++) \n        dp[i][0] = 0; \n  \n    // Fill rest of the entries in table using recursive relation \n    // described above. \n    for (long i = 2; i <= n; i++) \n    { \n        for (long c = 1; c <= k; c++) \n        { \n            dp[i][c] = (k-1) * (dp[i-1][c-1] + dp[i-1][c]); \n        } \n    } \n  \n    // Return last entry \n    return dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpna40l25v.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpna40l25v.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpna40l25v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    long same = 0, diff = k; \n  \n    for (int i = 2; i <= n; i++) \n    { \n        long temp = diff; \n        diff = (same + diff) * (k-1); \n        same = temp; \n    } \n  \n    return same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post (there is only \n\t// one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpu9jcq8bk.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpu9jcq8bk.d(17): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9jcq8bk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\telse if (n == 2)\n\t\treturn k * k;\n\telse\n\t{\n\t\tlong same = k;\n\t\tlong diff = k * (k - 1);\n\t\tfor (long i = 3; i <= n; i++)\n\t\t{\n\t\t\tlong temp = diff;\n\t\t\tdiff = (same + diff) * (k - 1);\n\t\t\tsame = temp;\n\t\t}\n\t\treturn same + diff;\n\t}\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1) return k;\n\tif(n == 2) return k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor(long i = 3; i <= n; i++) {\n\t\tlong temp = diff;\n\t\tdiff = (same + diff)*(k-1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tfor (long i = 3; i <= n; ++i) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\t// if n == 0 then there is no posts to paint\n\tif (n == 0)\n\t\treturn 0;\n\t\n\t// if n == 1 then there is only one way to paint\n\tif (n == 1)\n\t\treturn k;\n\t\n\t// if n == 2 then there are two ways to paint\n\t// 1. same color\n\t// 2. different color\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\t// if n > 2 then there are two ways to paint\n\t// 1. same color\n\t// 2. different color\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\telse if (n == 2)\n\t\treturn k * k;\n\telse\n\t\treturn k * (k - 1) * pow(k - 2, n - 2);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppe67mhd3.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmppe67mhd3.__unittest_L17_C1() [0x427ae7]\n??:? void tmppe67mhd3.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; ++i)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\t\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tfor (long i = 0; i <= n; i++) \n\t\tdp[i][0] = 0; \n\tfor (long j = 0; j <= k; j++) \n\t\tdp[0][j] = 0; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tfor (long j = 1; j <= k; j++) \n\t\t{ \n\t\t\t// There are 2 cases, \n\t\t\t// a) Last two posts have same color. \n\t\t\t// b) Last two posts have diff color. \n\t\t\tdp[i][j] = (j * dp[i - 1][j] + (j - 1) * dp[i - 1][j - 1]) % 1000000007; \n\t\t} \n\t} \n\treturn dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpe4om7jcb.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpe4om7jcb.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4om7jcb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There is only one way to color zero post \n\tfor (long i = 0; i <= k; i++) \n\t\tdp[0][i] = 0; \n\t\n\t// Fill rest of the entries in table using recursive \n\t// formula \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 1; c <= k; c++) \n\t\t{ \n\t\t\tlong temp = (k - 1) * dp[i - 1][c]; \n\t\t\t\n\t\t\t// If current color and previous are same \n\t\t\tif (c == 1) \n\t\t\t\ttemp += dp[i - 1][k]; \n\t\t\telse\n\t\t\t\ttemp += dp[i - 1][c - 1]; \n\t\t\t\n\t\t\tdp[i][c] = temp; \n\t\t} \n\t} \n\t\n\t// Return last entry \n\treturn dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpwamh1njj.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpwamh1njj.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwamh1njj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tlong total = same + diff;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tauto same = k;\n\tauto diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diffColorCounts = k * (k - 1);\n\tlong sameColorCounts = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diffColorCounts;\n\t\tdiffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n\t\tsameColorCounts = temp;\n\t}\n\treturn (diffColorCounts + sameColorCounts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t{\n\t\treturn k;\n\t}\n\tif (n == 2) \n\t{\n\t\treturn k * k;\n\t}\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_counts = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = diff_color_counts * (k - 1);\n\t\tsame_color_counts = total_counts - diff_color_counts;\n\t\ttotal_counts = diff_color_counts + same_color_counts;\n\t}\n\treturn total_counts;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdcwf7g6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmptdcwf7g6.__unittest_L29_C1() [0x427adf]\n??:? void tmptdcwf7g6.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same = 0, diff = k; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp51yns_2l.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp51yns_2l.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51yns_2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) {\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    long same = 0, diff = k; \n  \n    for (long i = 2; i <= n; i++) \n    { \n        long temp = diff; \n        diff = (same + diff) * (k-1); \n        same = temp; \n    } \n  \n    return same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post (there is only one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There are 0 ways for other posts to violate (the problem statement). \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i][0] = 0; \n\t\n\t// Fill rest of the entries in table using recursive relation \n\t// described above. \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 1; c <= k; c++) \n\t\t{ \n\t\t\t// Initialize result \n\t\t\tlong ans = 0; \n\t\n\t\t\t// Find ways to color current post using cth color \n\t\t\t// with (i-1)th post colored with one of the (k-1) \n\t\t\t// colors other than cth \n\t\t\tfor (long p = 1; p <= k; p++) \n\t\t\t{ \n\t\t\t\tif (p != c) \n\t\t\t\t\tans += dp[i - 1][p]; \n\t\t\t} \n\t\t\tdp[i][c] = ans; \n\t\t} \n\t} \n\t\n\t// Sum up all the ways to color nth post using any of the \n\t// k colors. \n\tlong ans = 0; \n\tfor (long c = 1; c <= k; c++) \n\t\tans += dp[n][c]; \n\treturn ans; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmphf6szy73.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmphf6szy73.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphf6szy73.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp4xbqd_6g.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp4xbqd_6g.d(12): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbqd_6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1)\n\t\treturn k;\n\telse if(n == 2)\n\t\treturn k * k;\n\telse\n\t{\n\t\tlong same = k;\n\t\tlong diff = k * (k - 1);\n\t\tlong total = same + diff;\n\t\tfor(long i = 3; i <= n; i++)\n\t\t{\n\t\t\tsame = diff;\n\t\t\tdiff = total * (k - 1);\n\t\t\ttotal = same + diff;\n\t\t}\n\t\treturn total;\n\t}\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_count;\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = temp;\n\t}\n\t\n\treturn diff_color_count + same_color_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // dp[i] will store count of ways for i posts and k colors \n    long dp[n + 1]; \n    memset(dp, 0, sizeof(dp)); \n  \n    // There are k ways to color first post \n    dp[1] = k; \n  \n    // There are 0 ways for single post to \n    // violate (same color_count) condition \n    long same = 0, diff = k; \n  \n    // Fill for 2 posts onwards \n    for (long i = 2; i <= n; i++) { \n        // Current same is same as previous diff \n        same = diff; \n  \n        // We always have k-1 choices for next post \n        diff = dp[i - 1] * (k - 1); \n  \n        // Total choices till i. \n        dp[i] = (same + diff); \n    } \n  \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpm3pu0rdk.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpm3pu0rdk.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpm3pu0rdk.d(13): Error: undefined identifier `memset`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3pu0rdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn k; \n\tlong diffColorCounts = k * (k - 1); \n\tlong sameColorCounts = k; \n\tfor (long i = 2; i < n; i++) \n\t{ \n\t\tlong temp = diffColorCounts; \n\t\tdiffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1); \n\t\tsameColorCounts = temp; \n\t} \n\treturn diffColorCounts + sameColorCounts; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1)\n\t\treturn k;\n\tif(n == 2)\n\t\treturn k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor(long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k-1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post \n\tfor (long i = 1; i <= k; i++) \n\t\tdp[1][i] = i; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp45vr3wtf.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp45vr3wtf.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45vr3wtf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same = 0, diff = k; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp51yns_2l.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp51yns_2l.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51yns_2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\tif (n == 1) \n\t{\n\t\treturn k;\n\t}\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\t// There are k ways to color first post\n\tlong same = k;\n\t// There are k-1 ways to color first post different from the second post\n\tlong diff = k * (k - 1);\n\t\n\t// Fill for 2 posts onwards\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\t// Current same is same as previous diff\n\t\tlong temp = diff;\n\t\t\n\t\t// We always have k-1 choices for next post\n\t\tdiff = (same + diff) * (k - 1);\n\t\t\n\t\t// And the number of ways next post has same color as previous is same\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n+1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpnll7j73u.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpnll7j73u.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll7j73u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0;\n\tlong diff = k;\n\tlong total = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k - 1); \n\t\tsame = temp; \n\t} \n\treturn (same + diff); \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t{\n\t\treturn k;\n\t}\n\tif (n == 2) \n\t{\n\t\treturn k * k;\n\t}\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // One extra row and column are used for simpilicity \n    // (Number of columns is equal to number of colors \n    // of the fence plus 1) \n    long[][] dp = new long[n+1][k+1]; \n  \n    // There are k ways to color first post \n    for (long c = 1; c <= k; c++) \n        dp[1][c] = 1; \n  \n    // There is only one way to color 0'th post i.e., \n    // do not color it \n    for (long i = 0; i <= n; i++) \n        dp[i][0] = 0; \n  \n    // Fill rest of the entries in table using recursive \n    // formula \n    for (long i = 2; i <= n; i++) \n        for (long c = 1; c <= k; c++) \n            dp[i][c] = (dp[i-1][c-1] + dp[i-1][c]) % 1000000007; \n  \n    // There will be n*k entries in table. \n    // Out of these n*k entries, exactly n entries \n    // will have same value. \n    return n*dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpdyv06x11.d(14): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyv06x11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 0) \n\t\treturn 0;\n\tif(n == 1) \n\t\treturn k;\n\tif(n == 2) \n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor(long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k - 1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There are 0 ways for any other post to \n\t// violate (same color_count) condition \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i][1] = dp[i][k] = 0; \n\t\n\t// Fill rest of the entries in table using \n\t// recursive formula \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 2; c <= k; c++) \n\t\t{ \n\t\t\tdp[i][c] = (k - 1) * (dp[i - 1][c] + \n\t\t\t\t\t\t\t\tdp[i - 1][c - 1]); \n\t\t} \n\t} \n\t\n\t// required number of ways \n\tlong res = 0; \n\tfor (long c = 1; c <= k; c++) \n\t\tres += dp[n][c]; \n\treturn res; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmp4jp75ll0.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp4jp75ll0.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jp75ll0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_counts = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = total_counts * (k - 1);\n\t\tsame_color_counts = diff_color_counts;\n\t\ttotal_counts = diff_color_counts + same_color_counts;\n\t}\n\treturn total_counts;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu_h_i8pd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpu_h_i8pd.__unittest_L25_C1() [0x427adb]\n??:? void tmpu_h_i8pd.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp4xbqd_6g.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp4xbqd_6g.d(12): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbqd_6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (int i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k-1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same, diff; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpgg3d07id.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpgg3d07id.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg3d07id.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong[] dp = new long[n + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp9qn13ley.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qn13ley.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post (there is only one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpn5iv_3b8.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpn5iv_3b8.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5iv_3b8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post (there is only one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There are 0 ways for other posts to violate (the rules). \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i][0] = 0; \n\t\n\t// Fill rest of the entries in table using recursive relation \n\t// described above. \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 1; c <= k; c++) \n\t\t{ \n\t\t\tlong temp = dp[i-1][c] * (k-1); \n\t\t\t\n\t\t\t// If current color and previous are same, then we \n\t\t\t// should exclude previous color as it is already \n\t\t\t// counted in the value of dp[i-1][c] \n\t\t\tif (c == 1) \n\t\t\t\tdp[i][c] = temp; \n\t\t\telse\n\t\t\t\tdp[i][c] = temp + dp[i-1][c-1] * (k-1); \n\t\t} \n\t} \n\t\n\t// Return the ways when we color the fence with k colors \n\treturn dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpas5kvzc5.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpas5kvzc5.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpas5kvzc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k-1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // dp[i] will store count of ways for i posts and k colors \n    long[] dp = new long[n + 1]; \n    dp[0] = 0; \n    dp[1] = k; \n    dp[2] = k + k * (k - 1); \n  \n    // Fill for 3 to n posts \n    for (long i = 3; i <= n; i++) \n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]); \n  \n    return dp[n]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1) return k;\n\tif(n == 2) return k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor(int i = 3; i <= n; i++) {\n\t\tlong temp = diff;\n\t\tdiff = (same + diff)*(k-1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n + 1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpl3mt3b1y.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpl3mt3b1y.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3mt3b1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\t\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts \n\tlong dp[n + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpseuftrux.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpseuftrux.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseuftrux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n+1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpnll7j73u.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpnll7j73u.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll7j73u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0;\n\tlong diff = k;\n\tlong total = k;\n\t\n\tfor(int i = 2; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) {\n\t\tauto temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same, diff; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpgg3d07id.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpgg3d07id.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg3d07id.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1) return k;\n\tif(n == 2) return k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor(long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff)*(k-1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn (same + diff);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\tlong total_count = diff_color_count + same_color_count;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = total_count * (k - 1);\n\t\ttotal_count = diff_color_count + same_color_count;\n\t}\n\treturn total_count;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptfa08pp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmptfa08pp4.__unittest_L25_C1() [0x427aeb]\n??:? void tmptfa08pp4.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn k;\n\tif(n == 2)\n\t\treturn k*k;\n\t\n\tlong same = k;\n\tlong diff = k*(k-1);\n\t\n\tfor(long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff)*(k-1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn k;\n\tif(n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor(long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diffColorCounts = k * (k - 1);\n\tlong sameColorCounts = k;\n\tlong totalCount = diffColorCounts + sameColorCounts;\n\tfor (int i = 3; i <= n; i++) \n\t{\n\t\tdiffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n\t\tsameColorCounts = totalCount * (k - 1);\n\t\ttotalCount = (diffColorCounts + sameColorCounts);\n\t}\n\treturn totalCount;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpabzorjdy.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpabzorjdy.__unittest_L25_C1() [0x427ae7]\n??:? void tmpabzorjdy.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// There are k ways to color first post \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxyowc5kp.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpxyowc5kp.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyowc5kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (int i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k - 1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\tlong same = 0, diff = k; \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tlong temp = diff; \n\t\tdiff = (same + diff) * (k - 1); \n\t\tsame = temp; \n\t} \n\treturn same + diff; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n + 1]; \n\tmemset(dp, 0, sizeof(dp)); \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpl3mt3b1y.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpl3mt3b1y.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3mt3b1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn (diff_color_counts + same_color_counts);\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n    // Create a table to store results of subproblems. \n    // dp[i] will store count of ways for i posts and k colors \n    long dp[n+1]; \n    memset(dp, 0, sizeof(dp)); \n  \n    // There are k ways to paint 0 posts \n    dp[0] = k; \n  \n    // There are 0 ways for 1 post with k colors \n    dp[1] = k; \n  \n    // There are k*k ways for 2 posts with k colors \n    dp[2] = k*k; \n  \n    // Fill for 3 to n posts \n    for (long i = 3; i <= n; i++) \n        dp[i] = (k - 1) * (dp[i-1] + dp[i-2]); \n  \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpl0ba8n39.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpl0ba8n39.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpl0ba8n39.d(13): Error: undefined identifier `memset`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0ba8n39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n + 1][k + 1]; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp4xbqd_6g.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp4xbqd_6g.d(12): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbqd_6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems.  \n\t// One extra row and column are used for simplicity  \n\t// (Number of posts is directly used as row index and  \n\t// number of colors is directly used as column index).  \n\t// The entries in 0th row and 0th column are never used. \n\tlong[][] dp = new long[n + 1][k + 1]; \n\t\n\t// Initialize first column of dp table \n\tfor (long i = 0; i <= n; i++) \n\t\tdp[i][1] = 1; \n\t\n\t// Initialize first row of dp table \n\tfor (long j = 0; j <= k; j++) \n\t\tdp[1][j] = j; \n\t\n\t// Fill entries in dp table using recursive relation \n\t// dp[i][j] = dp[i][j-1] + dp[i-1][k-1] + dp[i-1][k-2] + ... + dp[i-1][0] \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long j = 2; j <= k; j++) \n\t\t{ \n\t\t\tdp[i][j] = (dp[i][j - 1] + dp[i - 1][j - 1]) % 1000000007; \n\t\t\t\n\t\t\t// Fill rest of the entries in dp[i][j] \n\t\t\tfor (long p = j - 2; p >= 1; p--) \n\t\t\t\tdp[i][j] = (dp[i][j] + dp[i - 1][p]) % 1000000007; \n\t\t} \n\t} \n\t\n\t// Return the result \n\treturn dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmp1h_xz8jl.d(15): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1h_xz8jl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems \n\tlong dp[][] = new long[n + 1][k + 1]; \n\tlong same, diff; \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmp3bhfb5u1.d(11): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmp3bhfb5u1.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bhfb5u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif(n == 1)\n\t\treturn k;\n\tif(n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color = k * (k - 1);\n\tlong same_color = k;\n\t\n\tlong total = diff_color + same_color;\n\t\n\tfor(long i = 3; i <= n; i++)\n\t{\n\t\tsame_color = diff_color;\n\t\tdiff_color = total * (k - 1);\n\t\ttotal = diff_color + same_color;\n\t}\n\t\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems. \n\t// dp[i] will store count of ways for i posts and k colors \n\tlong dp[n+1]; \n\tmemset(dp, 0, sizeof(dp)); \n\t\n\t// There are k-ways to color first post \n\tdp[1] = k; \n\t\n\t// There are 0 ways for single post to \n\t// violate (same color_count) condition \n\tlong same = 0, diff = k; \n\t\n\t// Fill for 2 posts onwards \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\t// Current same is same as previous diff \n\t\tsame = diff; \n\t\t\n\t\t// We always have k-1 choices for next post \n\t\tdiff = dp[i-1] * (k-1); \n\t\t\n\t\t// Total choices till i. \n\t\tdp[i] = (same + diff); \n\t} \n\t\n\treturn dp[n]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpothb_7fo.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpothb_7fo.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpothb_7fo.d(13): Error: undefined identifier `memset`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpothb_7fo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0, diff = k;\n\tlong total = same + diff;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{ \n\t// Create a table to store results of subproblems.  \n\t// One extra row and column are used for simplicity  \n\t// (Number of posts is directly used as row index and number of colors as column index).  \n\tlong dp[][] = new long[n + 1][k + 1]; \n\t\n\t// Initialize first column of dp table \n\tfor (long i = 0; i <= n; i++) \n\t\tdp[i][1] = 1; \n\t\n\t// Initialize first row of dp table \n\tfor (long j = 0; j <= k; j++) \n\t\tdp[1][j] = j; \n\t\n\t// Fill entries in dp table using recursive relation \n\t// dp[i][j] = dp[i][j-1] + dp[i-1][k-1] + dp[i-1][k-2] + ... + dp[i-1][0] \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long j = 2; j <= k; j++) \n\t\t{ \n\t\t\tdp[i][j] = (dp[i][j - 1] + dp[i - 1][j - 1]) % 1000000007; \n\t\t\tfor (long g = 2; g < j; g++) \n\t\t\t\tdp[i][j] = (dp[i][j] + dp[i - 1][j - g]) % 1000000007; \n\t\t} \n\t} \n\t\n\treturn dp[n][k]; \n} \nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "/tmp/tmpi3hec48r.d(13): Deprecation: instead of C-style syntax, use D-style syntax `long[][] dp`\n/tmp/tmpi3hec48r.d(13): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3hec48r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tlong same = 0;\n\tlong diff = k;\n\tlong total = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_counts = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; ++i) \n\t{\n\t\tdiff_color_counts = diff_color_counts * (k - 1);\n\t\tsame_color_counts = total_counts - diff_color_counts;\n\t\ttotal_counts = diff_color_counts + same_color_counts;\n\t}\n\treturn total_counts;\n}\nunittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk26xdkfa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpk26xdkfa.__unittest_L25_C1() [0x427adf]\n??:? void tmpk26xdkfa.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42816b]\n??:? _d_run_main [0x4280d6]\n??:? main [0x427b2b]\n??:? __libc_start_main [0xfe0a6554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}