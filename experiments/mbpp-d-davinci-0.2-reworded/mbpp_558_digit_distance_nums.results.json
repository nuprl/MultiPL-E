{
  "name": "mbpp_558_digit_distance_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong diff = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tdiff = abs(n1_digit - n2_digit);\n\t\tsum += diff;\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\tlong n1_digit_count = 0;\n\tlong n2_digit_count = 0;\n\tlong n1_digit_count_copy = 0;\n\tlong n2_digit_count_copy = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_copy /= 10;\n\t\tn1_digit_count++;\n\t}\n\t\n\twhile (n2_copy > 0) \n\t{\n\t\tn2_copy /= 10;\n\t\tn2_digit_count++;\n\t}\n\t\n\tn1_digit_count_copy = n1_digit_count;\n\tn2_digit_count_copy = n2_digit_count;\n\t\n\twhile (n1_digit_count > 0) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count--;\n\t\t\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count--;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\twhile (n2_digit_count_copy > n1_digit_count_copy) \n\t{\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count_copy--;\n\t\t\n\t\tsum += n2_digit;\n\t}\n\t\n\twhile (n1_digit_count_copy > n2_digit_count_copy) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count_copy--;\n\t\t\n\t\tsum += n1_digit;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1_digits > i ? n1.digits(i) : 0;\n\t\tn2_digit = n2_digits > i ? n2.digits(i) : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "/tmp/tmp8vx34vt5.d(11): Error: no property `digits` for type `long`\n/tmp/tmp8vx34vt5.d(12): Error: no property `digits` for type `long`\n/tmp/tmp8vx34vt5.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vx34vt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = n1.to!string.length;\n\tn2_digits = n2.to!string.length;\n\t\n\tif (n1_digits > n2_digits) \n\t{\n\t\tfor (long i = 0; i < n1_digits; i++) \n\t\t{\n\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\tif (i < n2_digits) \n\t\t\t{\n\t\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < n2_digits; i++) \n\t\t{\n\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\tif (i < n1_digits) \n\t\t\t{\n\t\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "/tmp/tmpddkt1iv9.d(16): Error: no property `to` for type `long`\n/tmp/tmpddkt1iv9.d(17): Error: no property `to` for type `long`\n/tmp/tmpddkt1iv9.d(23): Error: no property `to` for type `long`\n/tmp/tmpddkt1iv9.d(26): Error: no property `to` for type `long`\n/tmp/tmpddkt1iv9.d(39): Error: no property `to` for type `long`\n/tmp/tmpddkt1iv9.d(42): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddkt1iv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\t\n\tif(n1_digits_len > n2_digits_len)\n\t{\n\t\tlong diff = n1_digits_len - n2_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn2_digits.insert(0, 0);\n\t\t}\n\t}\n\telse if(n2_digits_len > n1_digits_len)\n\t{\n\t\tlong diff = n2_digits_len - n1_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn1_digits.insert(0, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n1_digits.length; i++)\n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "/tmp/tmpv1lpe27y.d(11): Error: no property `digits` for type `long`\n/tmp/tmpv1lpe27y.d(12): Error: no property `digits` for type `long`\n/tmp/tmpv1lpe27y.d(13): Error: no property `length` for type `long`\n/tmp/tmpv1lpe27y.d(14): Error: no property `length` for type `long`\n/tmp/tmpv1lpe27y.d(21): Error: no property `insert` for type `long`\n/tmp/tmpv1lpe27y.d(29): Error: no property `insert` for type `long`\n/tmp/tmpv1lpe27y.d(33): Error: no property `length` for type `long`\n/tmp/tmpv1lpe27y.d(35): Error: only one index allowed to index `long`\n/tmp/tmpv1lpe27y.d(35): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1lpe27y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index = 0;\n\tlong n2_digit_index = 0;\n\twhile (n1_digit_index < n1_digits && n2_digit_index < n2_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_digit_index++;\n\t\tn2_digit_index++;\n\t}\n\twhile (n1_digit_index < n1_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tsum += abs(n1_digit);\n\t\tn1_digit_index++;\n\t}\n\twhile (n2_digit_index < n2_digits) \n\t{\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n2_digit);\n\t\tn2_digit_index++;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "/tmp/tmpkd8mw6tj.d(11): Error: no property `digits` for type `long`\n/tmp/tmpkd8mw6tj.d(12): Error: no property `digits` for type `long`\n/tmp/tmpkd8mw6tj.d(19): Error: no property `digits` for type `long`\n/tmp/tmpkd8mw6tj.d(20): Error: no property `digits` for type `long`\n/tmp/tmpkd8mw6tj.d(27): Error: no property `digits` for type `long`\n/tmp/tmpkd8mw6tj.d(33): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd8mw6tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "/tmp/tmpelddom6c.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelddom6c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tdiff = abs(n1 % 10 - n2 % 10);\n\t\tsum += diff;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 && n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs((n1_copy % 10) - (n2_copy % 10));\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tif (n1 == n2)\n\t\treturn 0;\n\t\n\tif (n1 < n2)\n\t{\n\t\tlong temp = n1;\n\t\tn1 = n2;\n\t\tn2 = temp;\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits = n1 % 10;\n\t\tn2_digits = n2 % 10;\n\t\tsum += abs(n1_digits - n2_digits);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) {\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpi9x65r16.d(11): Error: no property `digits` for type `long`\n/tmp/tmpi9x65r16.d(12): Error: no property `digits` for type `long`\n/tmp/tmpi9x65r16.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpi9x65r16.d(16): Error: no property `getDigit` for type `long`\n/tmp/tmpi9x65r16.d(17): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9x65r16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpuhevu3xn.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpuhevu3xn.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhevu3xn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\treturn -1;\n\t}\n\t\n\tforeach (i; 0 .. n1_digits)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpk2100wgd.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpk2100wgd.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2100wgd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_temp = n1;\n\tlong n2_temp = n2;\n\twhile (n1_digits >= 0 && n2_digits >= 0) {\n\t\tn1_digit = n1_temp / pow(10, n1_digits);\n\t\tn2_digit = n2_temp / pow(10, n2_digits);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_temp = n1_temp % pow(10, n1_digits);\n\t\tn2_temp = n2_temp % pow(10, n2_digits);\n\t\tn1_digits -= 1;\n\t\tn2_digits -= 1;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmps67a4o0_.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmps67a4o0_.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps67a4o0_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = n1 - n2;\n\twhile(n != 0)\n\t{\n\t\tsum += abs(n % 10);\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpp92ye1yg.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp92ye1yg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tint sum = 0;\n\tint n1_len = n1.toString().length;\n\tint n2_len = n2.toString().length;\n\tint max_len = max(n1_len, n2_len);\n\tint min_len = min(n1_len, n2_len);\n\t\n\tint n1_arr[];\n\tint n2_arr[];\n\t\n\tif (n1_len > n2_len)\n\t{\n\t\tn1_arr = n1.toString().toArray.to!int;\n\t\tn2_arr = n2.toString().toArray.to!int;\n\t}\n\telse\n\t{\n\t\tn1_arr = n2.toString().toArray.to!int;\n\t\tn2_arr = n1.toString().toArray.to!int;\n\t}\n\t\n\tfor (int i = 0; i < max_len; i++)\n\t{\n\t\tif (i < min_len)\n\t\t{\n\t\t\tsum += abs(n1_arr[i] - n2_arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n1_arr[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp1hg4ta5w.d(16): Deprecation: instead of C-style syntax, use D-style syntax `int[] n1_arr`\n/tmp/tmp1hg4ta5w.d(17): Deprecation: instead of C-style syntax, use D-style syntax `int[] n2_arr`\n/tmp/tmp1hg4ta5w.d(11): Error: no property `toString` for type `long`\n/tmp/tmp1hg4ta5w.d(12): Error: no property `toString` for type `long`\n/tmp/tmp1hg4ta5w.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1hg4ta5w.d(14): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp1hg4ta5w.d(21): Error: no property `toString` for type `long`\n/tmp/tmp1hg4ta5w.d(22): Error: no property `toString` for type `long`\n/tmp/tmp1hg4ta5w.d(26): Error: no property `toString` for type `long`\n/tmp/tmp1hg4ta5w.d(27): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hg4ta5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong distance = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tdistance = n1_digits - n2_digits;\n\t\tn2 = n2.pow(n1_digits);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tdistance = n2_digits - n1_digits;\n\t\tn1 = n1.pow(n2_digits);\n\t}\n\t\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy != 0)\n\t{\n\t\tdistance += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn distance;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp367zesio.d(11): Error: no property `digits` for type `long`\n/tmp/tmp367zesio.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp367zesio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index;\n\tlong n2_digit_index;\n\tlong n1_digit_index_max = n1_len - 1;\n\tlong n2_digit_index_max = n2_len - 1;\n\tlong n1_digit_index_min = 0;\n\tlong n2_digit_index_min = 0;\n\tlong n1_digit_index_diff = n1_digit_index_max - n1_digit_index_min;\n\tlong n2_digit_index_diff = n2_digit_index_max - n2_digit_index_min;\n\tlong n1_digit_index_diff_abs = abs(n1_digit_index_diff);\n\tlong n2_digit_index_diff_abs = abs(n2_digit_index_diff);\n\tlong n1_digit_index_diff_abs_max = max(n1_digit_index_diff_abs, n2_digit_index_diff_abs);\n\tlong n1_digit_index_diff_abs_max_plus_one = n1_digit_index_diff_abs_max + 1;\n\tlong i = 0;\n\twhile (i < n1_digit_index_diff_abs_max_plus_one)\n\t{\n\t\tn1_digit_index = n1_digit_index_min + i;\n\t\tn2_digit_index = n2_digit_index_min + i;\n\t\tif (n1_digit_index < n1_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[n1_digit_index];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\tif (n2_digit\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpr1bclxgp.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmpr1bclxgp.d(51): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr1bclxgp.d(51): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1bclxgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tint n1_len = n1.length;\n\tint n2_len = n2.length;\n\tint max_len = max(n1_len, n2_len);\n\tint min_len = min(n1_len, n2_len);\n\tint i = 0;\n\twhile(i < min_len)\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t\ti++;\n\t}\n\twhile(i < max_len)\n\t{\n\t\tif(n1_len > n2_len)\n\t\t{\n\t\t\tsum += n1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n2[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp2jce44dd.d(11): Error: no property `length` for type `long`\n/tmp/tmp2jce44dd.d(12): Error: no property `length` for type `long`\n/tmp/tmp2jce44dd.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2jce44dd.d(14): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp2jce44dd.d(18): Error: only one index allowed to index `long`\n/tmp/tmp2jce44dd.d(18): Error: only one index allowed to index `long`\n/tmp/tmp2jce44dd.d(25): Error: only one index allowed to index `long`\n/tmp/tmp2jce44dd.d(29): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jce44dd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\twhile (n1_digits_left > 0 || n2_digits_left > 0) \n\t{\n\t\tlong n1_digit = n1_digits_left > 0 ? n1 % 10 : 0;\n\t\tlong n2_digit = n2_digits_left > 0 ? n2 % 10 : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpyyg37801.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpyyg37801.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyg37801.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) {\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp7fygg1ic.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fygg1ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_len = 0;\n\tlong n2_len = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile(n1_copy > 0)\n\t{\n\t\tn1_len++;\n\t\tn1_copy /= 10;\n\t}\n\t\n\twhile(n2_copy > 0)\n\t{\n\t\tn2_len++;\n\t\tn2_copy /= 10;\n\t}\n\t\n\twhile(n1_len > 0 && n2_len > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_len--;\n\t\tn2_len--;\n\t}\n\t\n\twhile(n1_len > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tsum += abs(n1_digit);\n\t\tn1 /= 10;\n\t\tn1_len--;\n\t}\n\t\n\twhile(n2_len > 0)\n\t{\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n2_digit);\n\t\tn2 /= 10;\n\t\tn2_len--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\t\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tresult += abs(d1 - d2);\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpxmoyx12q.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoyx12q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\twhile (n1_digits_left > 0 && n2_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\twhile (n1_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tsum += n1_digit;\n\t\tn1 /= 10;\n\t\tn1_digits_left--;\n\t}\n\twhile (n2_digits_left > 0)\n\t{\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += n2_digit;\n\t\tn2 /= 10;\n\t\tn2_digits_left--;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpet40szmp.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpet40szmp.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet40szmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile (n > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp7t7oznon.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t7oznon.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp7fygg1ic.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fygg1ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp630w30d6.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp630w30d6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp630w30d6.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp630w30d6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(d1, d2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpz7ao27oe.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7ao27oe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1.digits(i);\n\t\tn2_digit = n2.digits(i);\n\t\t\n\t\tif(n1_digit == n2_digit)\n\t\t\tcontinue;\n\t\t\n\t\tif(n1_digit > n2_digit)\n\t\t\tsum += n1_digit - n2_digit;\n\t\telse\n\t\t\tsum += n2_digit - n1_digit;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpb1fv5knt.d(11): Error: no property `digits` for type `long`\n/tmp/tmpb1fv5knt.d(12): Error: no property `digits` for type `long`\n/tmp/tmpb1fv5knt.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1fv5knt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t\tif (i < n2_digits)\n\t\t\t{\n\t\t\t\tn2_digit = n2.digits(i);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t\tif (i < n1_digits)\n\t\t\t{\n\t\t\t\tn1_digit = n1.digits(i);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpqjblmo6l.d(11): Error: no property `digits` for type `long`\n/tmp/tmpqjblmo6l.d(12): Error: no property `digits` for type `long`\n/tmp/tmpqjblmo6l.d(20): Error: no property `digits` for type `long`\n/tmp/tmpqjblmo6l.d(23): Error: no property `digits` for type `long`\n/tmp/tmpqjblmo6l.d(36): Error: no property `digits` for type `long`\n/tmp/tmpqjblmo6l.d(39): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjblmo6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmprbanz5gc.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmprbanz5gc.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbanz5gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i <= max_digits; i++)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpwmg_3qau.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmpwmg_3qau.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\n/tmp/tmpwmg_3qau.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmg_3qau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\tlong i = 0;\n\twhile (i < min_len) \n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\ti++;\n\t}\n\twhile (i < max_len) \n\t{\n\t\tif (n1_len > n2_len) \n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsum += n2_digits[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpul2ietfj.d(11): Error: no property `digits` for type `long`\n/tmp/tmpul2ietfj.d(12): Error: no property `digits` for type `long`\n/tmp/tmpul2ietfj.d(13): Error: no property `length` for type `long`\n/tmp/tmpul2ietfj.d(14): Error: no property `length` for type `long`\n/tmp/tmpul2ietfj.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpul2ietfj.d(16): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpul2ietfj.d(20): Error: only one index allowed to index `long`\n/tmp/tmpul2ietfj.d(20): Error: only one index allowed to index `long`\n/tmp/tmpul2ietfj.d(27): Error: only one index allowed to index `long`\n/tmp/tmpul2ietfj.d(31): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul2ietfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp3pm66yv0.d(11): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pm66yv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tfor (long i = 0; i < n1_digits - n2_digits; i++)\n\t\t\t{\n\t\t\t\tn2 *= 10;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (long i = 0; i < n2_digits - n1_digits; i++)\n\t\t\t{\n\t\t\t\tn1 *= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpy1acuz9e.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmpy1acuz9e.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1acuz9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tforeach(i; 0..n1_digits)\n\t\t{\n\t\t\tif(i < n2_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n1.digits[i];\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tforeach(i; 0..n2_digits)\n\t\t{\n\t\t\tif(i < n1_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n2.digits[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpi51axt84.d(11): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(12): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(20): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(20): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(24): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(34): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(34): Error: no property `digits` for type `long`\n/tmp/tmpi51axt84.d(38): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi51axt84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tif(i < n1.digits.length && i < n2.digits.length)\n\t\t{\n\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t}\n\t\telse if(i < n1.digits.length)\n\t\t{\n\t\t\tsum += n1.digits[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n2.digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpcf3dj0wu.d(12): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf3dj0wu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\t\n\tfor (long i = 0; i < max_len; i++)\n\t{\n\t\tif (i < min_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (n1_len > n2_len)\n\t\t\t{\n\t\t\t\tsum += n1_digits[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n2_digits[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpvp_s2583.d(11): Error: no property `digits` for type `long`\n/tmp/tmpvp_s2583.d(12): Error: no property `digits` for type `long`\n/tmp/tmpvp_s2583.d(13): Error: no property `length` for type `long`\n/tmp/tmpvp_s2583.d(14): Error: no property `length` for type `long`\n/tmp/tmpvp_s2583.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpvp_s2583.d(16): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpvp_s2583.d(22): Error: only one index allowed to index `long`\n/tmp/tmpvp_s2583.d(22): Error: only one index allowed to index `long`\n/tmp/tmpvp_s2583.d(28): Error: only one index allowed to index `long`\n/tmp/tmpvp_s2583.d(32): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp_s2583.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++) {\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpkla27p54.d(11): Error: no property `digits` for type `long`\n/tmp/tmpkla27p54.d(12): Error: no property `digits` for type `long`\n/tmp/tmpkla27p54.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpkla27p54.d(16): Error: no property `digit` for type `long`\n/tmp/tmpkla27p54.d(17): Error: no property `digit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkla27p54.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tn1_digits = n1.toString().length;\n\tn2_digits = n2.toString().length;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpfqs8e98t.d(14): Error: no property `toString` for type `long`\n/tmp/tmpfqs8e98t.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqs8e98t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tlong d2 = n2.digits.front;\n\t\tn2.digits.popFront();\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp7_44lme6.d(11): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_44lme6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong n2_digits_diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, n2_digits_diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong n1_digits_diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, n1_digits_diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpdqhhlow1.d(11): Error: no property `digits` for type `long`\n/tmp/tmpdqhhlow1.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqhhlow1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmppsneb_8r.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsneb_8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits == n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tlong n1_copy = n1;\n\t\tlong n2_copy = n2;\n\t\t\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\t\tn1 /= 10;\n\t\t\t\tn2 /= 10;\n\t\t\t}\n\t\t\t\n\t\t\tfor (long i = 0; i < n1_digits - n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1_copy % 10);\n\t\t\t\tn1_copy /= 10;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\t\tn1 /= 10;\n\t\t\t\tn2 /= 10;\n\t\t\t}\n\t\t\t\n\t\t\tfor (long i = 0; i < n2_digits - n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n2_copy % 10);\n\t\t\t\tn2_copy /= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpa5p0p2no.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpa5p0p2no.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5p0p2no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\t\n\twhile (n1_digits_left != 0 || n2_digits_left != 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\t\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpabxx_d2s.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpabxx_d2s.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabxx_d2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * 10.pow(diff);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * 10.pow(diff);\n\t}\n\t\n\twhile(n1 > 0)\n\t{\n\t\tsum += abs(n1.popFront() - n2.popFront());\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpio14vhsa.d(11): Error: no property `digits` for type `long`\n/tmp/tmpio14vhsa.d(12): Error: no property `digits` for type `long`\n/tmp/tmpio14vhsa.d(27): Error: no property `popFront` for type `long`\n/tmp/tmpio14vhsa.d(27): Error: no property `popFront` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpio14vhsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = n1;\n\twhile (n != 0)\n\t{\n\t\tsum += abs(n % 10 - n2 % 10);\n\t\tn /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp0v5ojeeg.d(11): Error: no property `digits` for type `long`\n/tmp/tmp0v5ojeeg.d(12): Error: no property `digits` for type `long`\n/tmp/tmp0v5ojeeg.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0v5ojeeg.d(17): Error: no property `getDigit` for type `long`\n/tmp/tmp0v5ojeeg.d(18): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v5ojeeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tn2 *= pow(10, n1_digits - n2_digits);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn1 *= pow(10, n2_digits - n1_digits);\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. n1.digits)\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpino17jpg.d(11): Error: no property `digits` for type `long`\n/tmp/tmpino17jpg.d(12): Error: no property `digits` for type `long`\n/tmp/tmpino17jpg.d(26): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpino17jpg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach (digit1, digit2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(digit1 - digit2);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp13hwroqj.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13hwroqj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp3pm66yv0.d(11): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pm66yv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tdiff = abs(n1 % 10 - n2 % 10);\n\t\tsum += diff;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tlong d1 = n1.length > i ? n1[i] : 0;\n\t\tlong d2 = n2.length > i ? n2[i] : 0;\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpge_upr76.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpge_upr76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif(n1_digits < n2_digits)\n\t{\n\t\tlong temp = n1;\n\t\tn1 = n2;\n\t\tn2 = temp;\n\t\t\n\t\tn1_digits = n1.digits;\n\t\tn2_digits = n2.digits;\n\t}\n\t\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\t\n\twhile(n1_digits_copy > 0)\n\t{\n\t\tlong n1_digit = n1.getDigit(n1_digits_copy);\n\t\tlong n2_digit = n2.getDigit(n2_digits_copy);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_digits_copy--;\n\t\tn2_digits_copy--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpabgm1obz.d(11): Error: no property `digits` for type `long`\n/tmp/tmpabgm1obz.d(12): Error: no property `digits` for type `long`\n/tmp/tmpabgm1obz.d(20): Error: no property `digits` for type `long`\n/tmp/tmpabgm1obz.d(21): Error: no property `digits` for type `long`\n/tmp/tmpabgm1obz.d(29): Error: no property `getDigit` for type `long`\n/tmp/tmpabgm1obz.d(30): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabgm1obz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tresult += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpxgkfjx1z.d(12): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgkfjx1z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = n1;\n\tlong m = n2;\n\twhile (n > 0) {\n\t\tsum += abs(n % 10 - m % 10);\n\t\tn /= 10;\n\t\tm /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile(n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpjn2cvzpg.d(11): Error: no property `digits` for type `long`\n/tmp/tmpjn2cvzpg.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn2cvzpg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit;\n\tlong n2_digit;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp_87bgj9r.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmp_87bgj9r.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_87bgj9r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpy6vtd57v.d(11): Error: no property `digits` for type `long`\n/tmp/tmpy6vtd57v.d(12): Error: no property `digits` for type `long`\n/tmp/tmpy6vtd57v.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpy6vtd57v.d(17): Error: no property `getDigit` for type `long`\n/tmp/tmpy6vtd57v.d(18): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6vtd57v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0 .. max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits()[i];\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits()[i];\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp8viqwv9v.d(11): Error: no property `digits` for type `long`\n/tmp/tmp8viqwv9v.d(12): Error: no property `digits` for type `long`\n/tmp/tmp8viqwv9v.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8viqwv9v.d(22): Error: no property `digits` for type `long`\n/tmp/tmp8viqwv9v.d(27): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8viqwv9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tint n1_len = n1.length;\n\tint n2_len = n2.length;\n\tint len = max(n1_len, n2_len);\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tint n1_digit = n1_len > i ? n1[i] : 0;\n\t\tint n2_digit = n2_len > i ? n2[i] : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp76mq4uc1.d(11): Error: no property `length` for type `long`\n/tmp/tmp76mq4uc1.d(12): Error: no property `length` for type `long`\n/tmp/tmp76mq4uc1.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp76mq4uc1.d(17): Error: only one index allowed to index `long`\n/tmp/tmp76mq4uc1.d(18): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76mq4uc1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1 < 0)\n\t\tn1 = -n1;\n\tif (n2 < 0)\n\t\tn2 = -n2;\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits++;\n\t\tn1 /= 10;\n\t}\n\twhile (n2 > 0)\n\t{\n\t\tn2_digits++;\n\t\tn2 /= 10;\n\t}\n\t\n\tn1 = n1_digits;\n\tn2 = n2_digits;\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptq6ra3hw.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmptq6ra3hw.__unittest_L48_C1() [0x427b59]\n??:? void tmptq6ra3hw.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_mod;\n\tlong n2_mod;\n\t\n\twhile (n1_digits > 0 || n2_digits > 0) \n\t{\n\t\tn1_mod = n1 % 10;\n\t\tn2_mod = n2 % 10;\n\t\t\n\t\tif (n1_digits > 0) \n\t\t{\n\t\t\tn1_digit = n1_mod;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\t\n\t\tif (n2_digits > 0) \n\t\t{\n\t\t\tn2_digit = n2_mod;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpy9rzqzsc.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpy9rzqzsc.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9rzqzsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t}\n\t\t\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpfy4serp5.d(11): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(12): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfy4serp5.d(22): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(27): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy4serp5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\t// Get the number of digits in n1\n\tn1_digits = (long)log10(n1) + 1;\n\t\n\t// Get the number of digits in n2\n\tn2_digits = (long)log10(n2) + 1;\n\t\n\t// Get the digits of n1 and n2\n\tfor (long i = 0; i < n1_digits; i++)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\t// Add the difference between the digits to the sum\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\t// Remove the last digit from n1 and n2\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp4wytkgcs.d(17): Error: C style cast illegal, use `cast(long)log10(n1)`\n/tmp/tmp4wytkgcs.d(20): Error: C style cast illegal, use `cast(long)log10(n2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4wytkgcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile(n > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp0bdak3ay.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0bdak3ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit;\n\tlong n2_digit;\n\t\n\twhile (n1_digits != 0 && n2_digits != 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\tif (n1_digits_copy > n2_digits_copy)\n\t{\n\t\twhile (n1_digits_copy != 0)\n\t\t{\n\t\t\tn1_digit = n1_copy % 10;\n\t\t\t\n\t\t\tsum += n1_digit;\n\t\t\t\n\t\t\tn1_copy /= 10;\n\t\t\t\n\t\t\tn1_digits_copy--;\n\t\t}\n\t}\n\telse if (n1_digits_copy < n2_digits_copy)\n\t{\n\t\twhile (n2_digits_copy != 0)\n\t\t{\n\t\t\tn2_digit = n2_copy % 10;\n\t\t\t\n\t\t\tsum += n2_digit;\n\t\t\t\n\t\t\tn2_copy /= 10;\n\t\t\t\n\t\t\tn2_digits_copy--;\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpbf0_9lyu.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpbf0_9lyu.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf0_9lyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tint n1_size = n1.stringof.length;\n\tint n2_size = n2.stringof.length;\n\tint size = max(n1_size, n2_size);\n\tint n1_digit, n2_digit;\n\t\n\tforeach(i; 0 .. size)\n\t{\n\t\tif(i < n1_size)\n\t\t\tn1_digit = n1.stringof[i] - '0';\n\t\telse\n\t\t\tn1_digit = 0;\n\t\t\t\n\t\tif(i < n2_size)\n\t\t\tn2_digit = n2.stringof[i] - '0';\n\t\telse\n\t\t\tn2_digit = 0;\n\t\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp0q0754th.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0q0754th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_min = min(n1_digits_len, n2_digits_len);\n\tlong n1_digits_len_max = max(n1_digits_len, n2_digits_len);\n\t\n\tforeach(i, n1_digit; n1_digits)\n\t{\n\t\tif(i < n1_digits_len_min)\n\t\t{\n\t\t\tresult += abs(n1_digit - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += n1_digit;\n\t\t}\n\t}\n\t\n\tforeach(i, n2_digit; n2_digits)\n\t{\n\t\tif(i >= n1_digits_len_min)\n\t\t{\n\t\t\tresult += n2_digit;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp3q2b10la.d(11): Error: no property `digits` for type `long`\n/tmp/tmp3q2b10la.d(12): Error: no property `digits` for type `long`\n/tmp/tmp3q2b10la.d(13): Error: no property `length` for type `long`\n/tmp/tmp3q2b10la.d(14): Error: no property `length` for type `long`\n/tmp/tmp3q2b10la.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp3q2b10la.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp3q2b10la.d(18): Error: invalid `foreach` aggregate `n1_digits`\n/tmp/tmp3q2b10la.d(30): Error: invalid `foreach` aggregate `n2_digits`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q2b10la.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile(n > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\tsum += abs(d1 - d2);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp5s671oqo.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5s671oqo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpx_b5vofd.d(12): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_b5vofd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\t\n\twhile(n1_digits > 0 && n2_digits > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tif(n1_digits > n2_digits)\n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\telse if(n2_digits > n1_digits)\n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpeflt4901.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpeflt4901.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeflt4901.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\tlong n1_digit_index = 0;\n\tlong n2_digit_index = 0;\n\t\n\twhile (n1_digit_index < n1_digits && n2_digit_index < n2_digits)\n\t{\n\t\tn1_digit = n1.getDigit(n1_digit_index);\n\t\tn2_digit = n2.getDigit(n2_digit_index);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_digit_index++;\n\t\tn2_digit_index++;\n\t}\n\t\n\twhile (n1_digit_index < n1_digits)\n\t{\n\t\tn1_digit = n1.getDigit(n1_digit_index);\n\t\tsum += abs(n1_digit);\n\t\tn1_digit_index++;\n\t}\n\t\n\twhile (n2_digit_index < n2_digits)\n\t{\n\t\tn2_digit = n2.getDigit(n2_digit_index);\n\t\tsum += abs(n2_digit);\n\t\tn2_digit_index++;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp2g_bzo47.d(11): Error: no property `digits` for type `long`\n/tmp/tmp2g_bzo47.d(12): Error: no property `digits` for type `long`\n/tmp/tmp2g_bzo47.d(20): Error: no property `getDigit` for type `long`\n/tmp/tmp2g_bzo47.d(21): Error: no property `getDigit` for type `long`\n/tmp/tmp2g_bzo47.d(29): Error: no property `getDigit` for type `long`\n/tmp/tmp2g_bzo47.d(36): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2g_bzo47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_min = min(n1_digits_len, n2_digits_len);\n\t\n\tfor (long i = 0; i < n1_digits_len_min; i++) \n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\tif (n1_digits_len > n2_digits_len) \n\t{\n\t\tfor (long i = n2_digits_len; i < n1_digits_len; i++) \n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t}\n\telse if (n1_digits_len < n2_digits_len) \n\t{\n\t\tfor (long i = n1_digits_len; i < n2_digits_len; i++) \n\t\t{\n\t\t\tsum += n2_digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmphy_0_kt7.d(11): Error: no property `digits` for type `long`\n/tmp/tmphy_0_kt7.d(12): Error: no property `digits` for type `long`\n/tmp/tmphy_0_kt7.d(13): Error: no property `length` for type `long`\n/tmp/tmphy_0_kt7.d(14): Error: no property `length` for type `long`\n/tmp/tmphy_0_kt7.d(15): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmphy_0_kt7.d(19): Error: only one index allowed to index `long`\n/tmp/tmphy_0_kt7.d(19): Error: only one index allowed to index `long`\n/tmp/tmphy_0_kt7.d(26): Error: only one index allowed to index `long`\n/tmp/tmphy_0_kt7.d(33): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy_0_kt7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0 .. max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tn2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpdjg3g04c.d(11): Error: no property `digits` for type `long`\n/tmp/tmpdjg3g04c.d(12): Error: no property `digits` for type `long`\n/tmp/tmpdjg3g04c.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjg3g04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n = n1;\n\twhile(n != 0)\n\t{\n\t\tsum += abs(n % 10 - n2 % 10);\n\t\tn /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\tsum += abs(d1 - d2);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tif(n1_copy > 0)\n\t\t{\n\t\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\t\tn1_copy /= 10;\n\t\t}\n\t\tif(n2_copy > 0)\n\t\t{\n\t\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\t\tn2_copy /= 10;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9ulfsn7e.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp9ulfsn7e.__unittest_L28_C1() [0x427b21]\n??:? void tmp9ulfsn7e.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t}\n\t\t\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpfy4serp5.d(11): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(12): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfy4serp5.d(22): Error: no property `digits` for type `long`\n/tmp/tmpfy4serp5.d(27): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy4serp5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\t\n\twhile (n1_digits_left > 0 || n2_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1_digits_left > 0 ? n1 % 10 : 0;\n\t\tlong n2_digit = n2_digits_left > 0 ? n2 % 10 : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmps3a11ek0.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmps3a11ek0.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3a11ek0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tlong n1_digit = n1.length > i ? n1[$-i-1] : 0;\n\t\tlong n2_digit = n2.length > i ? n2[$-i-1] : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmppowxxx8r.d(12): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppowxxx8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpnsz0jrn4.d(11): Error: no property `digits` for type `long`\n/tmp/tmpnsz0jrn4.d(12): Error: no property `digits` for type `long`\n/tmp/tmpnsz0jrn4.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpnsz0jrn4.d(17): Error: no property `digit` for type `long`\n/tmp/tmpnsz0jrn4.d(18): Error: no property `digit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsz0jrn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp7fygg1ic.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fygg1ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tlong n2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpnre518u7.d(11): Error: no property `digits` for type `long`\n/tmp/tmpnre518u7.d(12): Error: no property `digits` for type `long`\n/tmp/tmpnre518u7.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpnre518u7.d(17): Error: no property `digits` for type `long`\n/tmp/tmpnre518u7.d(18): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnre518u7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong num1 = n1;\n\tlong num2 = n2;\n\twhile(num1 > 0 || num2 > 0)\n\t{\n\t\tsum += abs(num1 % 10 - num2 % 10);\n\t\tnum1 /= 10;\n\t\tnum2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp630w30d6.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp630w30d6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= 10.pow(diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= 10.pow(diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1.popFront() - n2.popFront());\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp60h_7wk1.d(11): Error: no property `digits` for type `long`\n/tmp/tmp60h_7wk1.d(12): Error: no property `digits` for type `long`\n/tmp/tmp60h_7wk1.d(27): Error: no property `popFront` for type `long`\n/tmp/tmp60h_7wk1.d(27): Error: no property `popFront` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60h_7wk1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp_1zm2j3o.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmp_1zm2j3o.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1zm2j3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tn1_digits = n1.toString().length;\n\tn2_digits = n2.toString().length;\n\t\n\tif(n1_digits == n2_digits)\n\t{\n\t\tfor(int i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(n1_digits > n2_digits)\n\t\t{\n\t\t\tfor(int i = 0; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t\t}\n\t\t\tfor(int i = n2_digits; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - 0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t\t}\n\t\t\tfor(int i = n1_digits; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(0 - n2.toString()[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp2cm8mllu.d(14): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(15): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(21): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(21): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(30): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(30): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(32): Error: cannot implicitly convert expression `n2_digits` of type `long` to `int`\n/tmp/tmp2cm8mllu.d(34): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(41): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(41): Error: no property `toString` for type `long`\n/tmp/tmp2cm8mllu.d(43): Error: cannot implicitly convert expression `n1_digits` of type `long` to `int`\n/tmp/tmp2cm8mllu.d(45): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cm8mllu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tdiff = abs(d1 - d2);\n\t\t\tsum += diff;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpxlonxc1d.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlonxc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits(), n2.digits()))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp9968x5a3.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9968x5a3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp3pm66yv0.d(11): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pm66yv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits == n2_digits)\n\t{\n\t\tforeach (i, n; n1_digits)\n\t\t{\n\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tlong diff = abs(n1_digits - n2_digits);\n\t\t\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tforeach (i, n; n2_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t\t}\n\t\t\t\n\t\t\tforeach (i, n; diff)\n\t\t\t{\n\t\t\t\tsum += n1[n2_digits + i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach (i, n; n1_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t\t}\n\t\t\t\n\t\t\tforeach (i, n; diff)\n\t\t\t{\n\t\t\t\tsum += n2[n1_digits + i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpg4vcokfe.d(11): Error: no property `digits` for type `long`\n/tmp/tmpg4vcokfe.d(12): Error: no property `digits` for type `long`\n/tmp/tmpg4vcokfe.d(16): Error: invalid `foreach` aggregate `n1_digits`\n/tmp/tmpg4vcokfe.d(27): Error: invalid `foreach` aggregate `n2_digits`\n/tmp/tmpg4vcokfe.d(32): Error: invalid `foreach` aggregate `diff`\n/tmp/tmpg4vcokfe.d(39): Error: invalid `foreach` aggregate `n1_digits`\n/tmp/tmpg4vcokfe.d(44): Error: invalid `foreach` aggregate `diff`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4vcokfe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = log10(n1);\n\tn2_digits = log10(n2);\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\twhile (n1 > 0)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\twhile (n2 > 0)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpukp1mbd6.d(16): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmpukp1mbd6.d(17): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukp1mbd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits) \n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits) \n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0) \n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpjb8kfql4.d(11): Error: no property `digits` for type `long`\n/tmp/tmpjb8kfql4.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjb8kfql4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp2jly885g.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmp2jly885g.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jly885g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tint n1_size = n1.stringof.length;\n\tint n2_size = n2.stringof.length;\n\tint max_size = max(n1_size, n2_size);\n\t\n\tforeach(i; 0..max_size)\n\t{\n\t\tif(i < n1_size && i < n2_size)\n\t\t{\n\t\t\tint n1_digit = n1.stringof[i] - '0';\n\t\t\tint n2_digit = n2.stringof[i] - '0';\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t\telse if(i < n1_size)\n\t\t{\n\t\t\tint n1_digit = n1.stringof[i] - '0';\n\t\t\tsum += n1_digit;\n\t\t}\n\t\telse if(i < n2_size)\n\t\t{\n\t\t\tint n2_digit = n2.stringof[i] - '0';\n\t\t\tsum += n2_digit;\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpx2nrg3i8.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2nrg3i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0 .. max_digits)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tlong n2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmpbrx94e3n.d(11): Error: no property `digits` for type `long`\n/tmp/tmpbrx94e3n.d(12): Error: no property `digits` for type `long`\n/tmp/tmpbrx94e3n.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpbrx94e3n.d(17): Error: no property `digits` for type `long`\n/tmp/tmpbrx94e3n.d(18): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrx94e3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong diff;\n\t\n\tforeach(i; 0 .. max(n1_len, n2_len))\n\t{\n\t\tn1_digit = n1_digits[i];\n\t\tn2_digit = n2_digits[i];\n\t\tdiff = abs(n1_digit - n2_digit);\n\t\tsum += diff;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmpre5uexvg.d(11): Error: no property `digits` for type `long`\n/tmp/tmpre5uexvg.d(12): Error: no property `digits` for type `long`\n/tmp/tmpre5uexvg.d(13): Error: no property `length` for type `long`\n/tmp/tmpre5uexvg.d(14): Error: no property `length` for type `long`\n/tmp/tmpre5uexvg.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre5uexvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\t//convert to strings\n\tstring n1_str = to!string(n1);\n\tstring n2_str = to!string(n2);\n\t\n\t//make sure they are the same length\n\tif(n1_str.length > n2_str.length)\n\t{\n\t\tn2_str = n2_str.padLeft(n1_str.length, '0');\n\t}\n\telse if(n2_str.length > n1_str.length)\n\t{\n\t\tn1_str = n1_str.padLeft(n2_str.length, '0');\n\t}\n\t\n\t//loop through and get the difference\n\tforeach(i, c; n1_str)\n\t{\n\t\tsum += abs(c - n2_str[i]);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmp3e1z0j4v.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmp3e1z0j4v.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmp3e1z0j4v.d(19): Error: no property `padLeft` for type `string`\n/tmp/tmp3e1z0j4v.d(23): Error: no property `padLeft` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3e1z0j4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong result = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit;\n\tlong n2_digit;\n\twhile(n1_digits_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn1_copy /= 10;\n\t\tn1_digits_copy--;\n\t\tif(n2_digits_copy > 0)\n\t\t{\n\t\t\tn2_digit = n2_copy % 10;\n\t\t\tn2_copy /= 10;\n\t\t\tn2_digits_copy--;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\twhile(n2_digits_copy > 0)\n\t{\n\t\tn2_digit = n2_copy % 10;\n\t\tn2_copy /= 10;\n\t\tn2_digits_copy--;\n\t\tresult += abs(n2_digit);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmp4vm1ymu3.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmp4vm1ymu3.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vm1ymu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_max = max(n1_digits_len, n2_digits_len);\n\t\n\tfor (long i = 0; i < n1_digits_len_max; i++)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif (i < n1_digits_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\t\n\t\tif (i < n2_digits_len)\n\t\t{\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmp_2_kzljb.d(11): Error: no property `digits` for type `long`\n/tmp/tmp_2_kzljb.d(12): Error: no property `digits` for type `long`\n/tmp/tmp_2_kzljb.d(13): Error: no property `length` for type `long`\n/tmp/tmp_2_kzljb.d(14): Error: no property `length` for type `long`\n/tmp/tmp_2_kzljb.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp_2_kzljb.d(24): Error: only one index allowed to index `long`\n/tmp/tmp_2_kzljb.d(29): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2_kzljb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "/tmp/tmp0v5ojeeg.d(11): Error: no property `digits` for type `long`\n/tmp/tmp0v5ojeeg.d(12): Error: no property `digits` for type `long`\n/tmp/tmp0v5ojeeg.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0v5ojeeg.d(17): Error: no property `getDigit` for type `long`\n/tmp/tmp0v5ojeeg.d(18): Error: no property `getDigit` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v5ojeeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(digit1; n1.digits)\n\t{\n\t\tforeach(digit2; n2.digits)\n\t\t{\n\t\t\tsum += abs(digit1 - digit2);\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmpp_jspjrz.d(11): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_jspjrz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp630w30d6.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp630w30d6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmprbanz5gc.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmprbanz5gc.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbanz5gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_temp = n1;\n\tlong n2_temp = n2;\n\t\n\twhile (n1_digits >= 0 || n2_digits >= 0)\n\t{\n\t\tlong n1_digit = n1_temp / pow(10, n1_digits);\n\t\tlong n2_digit = n2_temp / pow(10, n2_digits);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_temp -= n1_digit * pow(10, n1_digits);\n\t\tn2_temp -= n2_digit * pow(10, n2_digits);\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmp2____baw.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1)` of type `real` to `long`\n/tmp/tmp2____baw.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2____baw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= 10.pow(diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= 10.pow(diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmpkhp6jec3.d(11): Error: no property `digits` for type `long`\n/tmp/tmpkhp6jec3.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhp6jec3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = log10(n1) + 1;\n\tn2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (int i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmpjx4gfr_u.d(16): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpjx4gfr_u.d(17): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjx4gfr_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "/tmp/tmpchq_wtpq.d(11): Error: cannot implicitly convert expression `log10(cast(real)n1) + 1.00000L` of type `real` to `long`\n/tmp/tmpchq_wtpq.d(12): Error: cannot implicitly convert expression `log10(cast(real)n2) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchq_wtpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}