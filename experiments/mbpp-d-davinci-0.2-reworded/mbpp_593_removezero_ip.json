{
  "name": "mbpp_593_removezero_ip",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to remove leading zeroes from an ip address.\n\t\n*/\nstring removezero_ip(string ip) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = removezero_ip;\n\n    assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");\n    assert(candidate(\"12.01.024\") == \"12.1.24\");\n    assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) \n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0') \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i,j,k,l;\n\tstring result;\n\tint len = ip.length;\n\tfor(i=0;i<len;i++)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tj = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(k=j+1;k<len;k++)\n\t{\n\t\tif(ip[k] == '.')\n\t\t{\n\t\t\tl = k;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(i=0;i<j;i++)\n\t{\n\t\tif(ip[i] != '0')\n\t\t{\n\t\t\tresult = ip[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(i=j+1;i<l;i++)\n\t{\n\t\tif(ip[i] != '0')\n\t\t{\n\t\t\tresult ~= ip[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(i=l+1;i<len;i++)\n\t{\n\t\tif(ip[i] != '0')\n\t\t{\n\t\t\tresult ~= ip[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tif(part.length > 1)\n\t\t{\n\t\t\tif(part[0] == '0')\n\t\t\t{\n\t\t\t\tpart = part[1..$];\n\t\t\t}\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tif(part.length == 1)\n\t\t\tresult ~= part;\n\t\telse\n\t\t\tresult ~= part.lstrip(\"0\");\n\t\tresult ~= \".\";\n\t}\n\treturn result.idup.idup[0..$-1];\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint len = ip.length;\n\tstring newip = \"\";\n\twhile(i < len)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tnewip += ip[i];\n\t\t\ti++;\n\t\t\tj = i;\n\t\t\tk = i;\n\t\t\twhile(ip[k] == '0')\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(k > j)\n\t\t\t{\n\t\t\t\tnewip += ip[k];\n\t\t\t\ti = k + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewip += ip[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewip += ip[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn newip;\n}",
    "{\n\tint i;\n\tstring[] ip_arr;\n\tstring result = \"\";\n\t\n\tip_arr = split(ip, \".\");\n\t\n\tforeach(string s; ip_arr)\n\t{\n\t\ti = to!int(s);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\t\n\treturn result[0..$-1];\n}",
    "{\n\tint i;\n\tstring[] ip_arr;\n\tip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\ti = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr[$-1] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = ip.length;\n\tstring res = \"\";\n\twhile(i < len) {\n\t\tif(ip[i] == '.') {\n\t\t\tres += ip[i];\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(ip[i] == '0') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\twhile(i < len && ip[i] != '.') {\n\t\t\t\tres += ip[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\twhile(part[0] == '0')\n\t\t\tpart = part[1..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr) \n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= format(\"%d.\", i);\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tint i,j,k,l;\n\tstring s;\n\t\n\ti = 0;\n\twhile(ip[i] == '0')\n\t{\n\t\ti++;\n\t}\n\t\n\tj = i;\n\twhile(ip[j] != '.')\n\t{\n\t\tj++;\n\t}\n\t\n\tk = j;\n\twhile(ip[k] == '0')\n\t{\n\t\tk++;\n\t}\n\t\n\tl = k;\n\twhile(ip[l] != '.')\n\t{\n\t\tl++;\n\t}\n\t\n\ts = ip[i..j] ~ ip[k..l] ~ ip[l+1..$];\n\treturn s;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, e; ip_arr)\n\t{\n\t\tint e_int = to!int(e);\n\t\tif(e_int == 0)\n\t\t{\n\t\t\tip_arr[i] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\ts = to!string(to!int(s));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr;\n\tstring result;\n\tint i;\n\t\n\tip_arr = split(ip, \".\");\n\tfor (i = 0; i < ip_arr.length; i++) {\n\t\tif (ip_arr[i][0] == '0') {\n\t\t\tip_arr[i] = ip_arr[i][1..$];\n\t\t}\n\t}\n\tresult = join(ip_arr, \".\");\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(ip_arr[$-1..$], \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = ip.length;\n\tstring ret = \"\";\n\twhile(i < len)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tret ~= \"0.\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tret ~= ip[i..i];\n\t\t\t}\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\telse if(ip[i] == '0')\n\t\t{\n\t\t\tif(j == 0)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tret ~= ip[i..i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret ~= ip[i..i];\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn ret;\n}",
    "{\n\tstring[] ip_parts = ip.split(\".\");\n\tstring[] new_ip_parts;\n\tforeach(string part; ip_parts) \n\t{\n\t\tnew_ip_parts ~= part.lstrip(\"0\");\n\t}\n\treturn new_ip_parts.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\tint i = 0;\n\t\t\twhile(s[i] == '0')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ts = s[i..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}"
  ]
}