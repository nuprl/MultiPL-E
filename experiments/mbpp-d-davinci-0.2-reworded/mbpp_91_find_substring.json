{
  "name": "mbpp_91_find_substring",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if a string is present as a substring in a given array of string values.\n\t\n*/\nbool find_substring(string[] str1, string sub_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_substring;\n\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == true);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == false);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; str1)\n\t{\n\t\tif(i.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(string str; str1)\n\t{\n\t\tif(str.find(sub_str) != string.npos)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; str1)\n\t{\n\t\tif(i.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.indexOf(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.length < sub_str.length)\n\t\t\tcontinue;\n\t\t\n\t\tif(str.length == sub_str.length)\n\t\t{\n\t\t\tif(str == sub_str)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < str.length - sub_str.length + 1; i++)\n\t\t{\n\t\t\tif(str[i .. i + sub_str.length] == sub_str)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; str1)\n\t{\n\t\tif(i.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1) \n\t{\n\t\tif(str.find(sub_str) != -1) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(str; str1)\n\t{\n\t\tif(str.find(sub_str) != -1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}"
  ]
}