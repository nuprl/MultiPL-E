{
  "name": "mbpp_627_find_First_Missing",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn 1;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\t\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}",
    "{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid-1] == mid-1)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong length = array.length;\n\tlong i = 0;\n\twhile (i < length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1)\n\t\t\tbreak;\n\t\ti++;\n\t}\n\treturn i + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\t\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong mid_val = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tmid_val = array[mid];\n\t\t\n\t\tif(mid_val > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse if(mid_val < mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong m = (i + j) / 2;\n\t\n\twhile(i < j)\n\t{\n\t\tif(array[m] > m)\n\t\t{\n\t\t\tj = m;\n\t\t}\n\t\telse if(array[m] < m)\n\t\t{\n\t\t\ti = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = m + 1;\n\t\t}\n\t\tm = (i + j) / 2;\n\t}\n\t\n\treturn i;\n}",
    "{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = first + (last - first) / 2;\n\t\t\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}"
  ]
}