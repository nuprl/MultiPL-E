{
  "name": "mbpp_397_median_numbers",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of three numbers.\n\t\n*/\nfloat median_numbers(long a, long b, long c) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = median_numbers;\n\n    assert(candidate(25L, 55L, 65L) == 55.0);\n    assert(candidate(20L, 10L, 30L) == 20.0);\n    assert(candidate(15L, 45L, 75L) == 45.0);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tfloat result;\n\tif (a > b)\n\t{\n\t\tif (b > c)\n\t\t{\n\t\t\tresult = b;\n\t\t}\n\t\telse if (a > c)\n\t\t{\n\t\t\tresult = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = a;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (a > c)\n\t\t{\n\t\t\tresult = a;\n\t\t}\n\t\telse if (b > c)\n\t\t{\n\t\t\tresult = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = b;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tarr.sort();\n\treturn arr[1];\n}",
    "{\n\tauto arr = [a, b, c];\n\tstd.algorithm.sort(arr);\n\treturn arr[1];\n}",
    "{\n\tfloat median;\n\t\n\tif (a > b)\n\t{\n\t\tif (b > c)\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t\telse if (a > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (a > c)\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t\telse if (b > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t}\n\t\n\treturn median;\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tarr.sort();\n\treturn arr[1];\n}",
    "{\n\tauto arr = [a, b, c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tauto arr = [a,b,c];\n\tstd.algorithm.sort(arr);\n\treturn arr[1];\n}",
    "{\n\tauto arr = [a, b, c];\n\tstd.algorithm.sort(arr);\n\treturn arr[1];\n}",
    "{\n\tfloat median;\n\tlong temp;\n\t\n\tif (a > b)\n\t{\n\t\ttemp = a;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\t\n\tif (b > c)\n\t{\n\t\ttemp = b;\n\t\tb = c;\n\t\tc = temp;\n\t}\n\t\n\tif (a > b)\n\t{\n\t\ttemp = a;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\t\n\tmedian = b;\n\t\n\treturn median;\n}",
    "{\n\tauto arr = [a,b,c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tarr.sort();\n\treturn arr[1];\n}",
    "{\n\tfloat median;\n\t\n\tif (a > b)\n\t{\n\t\tif (b > c)\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t\telse if (a > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (a > c)\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t\telse if (b > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t}\n\treturn median;\n}",
    "{\n\tlong[] numbers = [a, b, c];\n\tnumbers.sort();\n\treturn numbers[1];\n}",
    "{\n\tauto arr = [a,b,c];\n\tstd.algorithm.sort(arr);\n\treturn arr[1];\n}",
    "{\n\tlong[] arr = [a, b, c];\n\tsort(arr);\n\treturn arr[1];\n}",
    "{\n\tfloat median = 0;\n\t\n\tif (a > b)\n\t{\n\t\tif (b > c)\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t\telse if (a > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (a > c)\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t\telse if (b > c)\n\t\t{\n\t\t\tmedian = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmedian = b;\n\t\t}\n\t}\n\t\n\treturn median;\n}",
    "{\n\tfloat median = 0;\n\t\n\tif (a > b)\n\t{\n\t\tif (a < c)\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b > c)\n\t\t\t{\n\t\t\t\tmedian = b;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmedian = c;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (a > c)\n\t\t{\n\t\t\tmedian = a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b < c)\n\t\t\t{\n\t\t\t\tmedian = b;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmedian = c;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn median;\n}"
  ]
}