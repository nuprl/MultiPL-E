{
  "name": "mbpp_128_long_words",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find words that are longer than n characters from a given array of words.\n\t\n*/\nstring[] long_words(long n, string str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = long_words;\n\n    assert(candidate(3L, \"python is a programming language\") == [\"python\", \"programming\", \"language\"]);\n    assert(candidate(2L, \"writing a program\") == [\"writing\", \"program\"]);\n    assert(candidate(5L, \"sorting list\") == [\"sorting\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tauto result = filter!(a => a.length > n)(words);\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\treturn filter!(w => w.length > n)(words);\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\t\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\t\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words;\n\tstring[] long_words;\n\tint i;\n\t\n\twords = str.split(\" \");\n\t\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\t\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tlong_words ~= word;\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tauto words = str.split;\n\treturn words.filter!(a => a.length > n);\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tlong_words ~= word;\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tauto result = filter!(a => a.length > n)(words);\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words = words.filter!(a => a.length > n);\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words = words.filter!(a => a.length > n);\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = words.filter!(a => a.length > n);\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = words.filter!(a => a.length > n);\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tlong_words ~= word;\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\treturn filter!(a => a.length > n)(words);\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tauto res = filter!(a => a.length > n)(words);\n\treturn res;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = words.filter!(a => a.length > n);\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] longWords;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tlongWords ~= word;\n\t}\n\treturn longWords;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\treturn words.filter!(a => a.length > n);\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words) {\n\t\tif(word.length > n) {\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = words.filter!(a => a.length > n);\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n) \n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\treturn filter!(a => a.length > n)(words);\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words = words.filter!(a => a.length > n);\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words) \n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = new string[0];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words = [];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}",
    "{\n\tstring[] words = str.split(\" \");\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = str.split;\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str);\n\tstring[] result = new string[];\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(str, \" \");\n\tstring[] long_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > n)\n\t\t{\n\t\t\tlong_words ~= word;\n\t\t}\n\t}\n\treturn long_words;\n}"
  ]
}