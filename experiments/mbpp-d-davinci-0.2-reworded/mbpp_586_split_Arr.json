{
  "name": "mbpp_586_split_Arr",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] res = new long[l.length];\n\tlong i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tres[i] = l[i];\n\t}\n\tfor (long j = 0; j < l.length - n; j++)\n\t{\n\t\tres[i] = l[j];\n\t\ti++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tret[i] = l[i];\n\t\ti += 1;\n\t}\n\tlong j = 0;\n\twhile (i < l.length) \n\t{\n\t\tret[i] = l[n + j];\n\t\ti += 1;\n\t\tj += 1;\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result;\n\tlong[] first;\n\tlong[] second;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\tfirst = new long[n];\n\tsecond = new long[l.length - n];\n\t\n\tfor (i = 0; i < n; i++) {\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++) {\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (i = 0; i < l.length; i++) {\n\t\tif (i < l.length - n) {\n\t\t\tresult[i] = second[i];\n\t\t} else {\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor (long i = second.length; i < res.length; i++)\n\t{\n\t\tres[i] = first[i - second.length];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < res.length; i++)\n\t{\n\t\tres[i] = first[i - second.length];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\twhile (i < n) {\n\t\tfirst[i] = l[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < l.length - n) {\n\t\tsecond[i] = l[n + i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < second.length) {\n\t\tres[i] = second[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < first.length) {\n\t\tres[second.length + i] = first[i];\n\t\ti++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] ret = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tsecond[j] = l[i];\n\t\tj++;\n\t}\n\t\n\tfor (i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < l.length)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tresult[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tresult = new long[l.length];\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tres[i + second.length] = first[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tb[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tc[i] = b[i];\n\t\tc[i + l.length - n] = a[i];\n\t}\n\t\n\treturn c;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn result;\n}"
  ]
}