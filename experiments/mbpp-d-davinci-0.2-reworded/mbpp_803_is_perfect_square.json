{
  "name": "mbpp_803_is_perfect_square",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\n*/\nbool is_perfect_square(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_perfect_square;\n\n    assert(candidate(10L) == false);\n    assert(candidate(36L) == true);\n    assert(candidate(14L) == false);\n    assert(candidate(196L) == true);\n    assert(candidate(125L) == false);\n    assert(candidate(15625L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of x. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} "
  ]
}