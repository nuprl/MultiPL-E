{
  "name": "mbpp_803_is_perfect_square",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\n*/\nbool is_perfect_square(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_perfect_square;\n\n    assert(candidate(10L) == false);\n    assert(candidate(36L) == true);\n    assert(candidate(14L) == false);\n    assert(candidate(196L) == true);\n    assert(candidate(125L) == false);\n    assert(candidate(15625L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of x. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    if (n < 0) \n        return false; \n  \n    switch ((int)(n & 0x3F)) { \n    case 0x00: case 0x01: case 0x04: case 0x09: case 0x10: case 0x11: \n    case 0x19: case 0x21: case 0x24: case 0x29: case 0x31: case 0x39: \n        long sqrt_n = (long)(sqrt(n)); \n        return (sqrt_n * sqrt_n == n); \n  \n    default: \n        return false; \n    } \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\t\n\tlong t = n / 2;\n\t\n\twhile (t * t > n) \n\t\tt = (t + n / t) / 2;\n\t\n\treturn t * t == n;\n}",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tdouble sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong s = sqrt(n); \n  \n\t// If square root is an integer \n\treturn (s*s == n); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of x. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) t = (t + n / t) / 2;\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of x. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\tif (n == 0 || n == 1)\n\t\treturn true;\n\tlong t = n / 2;\n\twhile (t * t > n)\n\t\tt = (t + n / t) / 2;\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    if (n < 0) \n        return false; \n    if (n == 0 || n == 1) \n        return true; \n    long t = n / 2; \n    while (t * t > n) { \n        t = (t + n / t) / 2; \n    } \n    return t * t == n; \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of x. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong s = sqrt(n); \n  \n\t// If square root is an integer \n\treturn (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of x. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    if (n < 0) \n        return false; \n  \n    switch (n & 0x3F) { \n    case 0x00: case 0x01: case 0x04: case 0x09: case 0x10: case 0x11: \n    case 0x19: case 0x21: case 0x24: case 0x29: case 0x31: case 0x39: \n        long sqrt_n = (long)(sqrt(n)); \n        return (sqrt_n * sqrt_n == n); \n  \n    default: \n        return false; \n    } \n} ",
    "{ \n    long long x = n; \n    while (x * x > n) \n        x = (x + n / x) / 2; \n    return x * x == n; \n} ",
    "{ \n    long long int sr = sqrt(n); \n    return (sr*sr == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tlong double sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tlong double sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0 || n == 1)\n\t\treturn true;\n\t\n\tlong t = n / 2;\n\twhile(t * t > n)\n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\t\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} "
  ]
}