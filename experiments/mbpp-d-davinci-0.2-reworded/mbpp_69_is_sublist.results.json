{
  "name": "mbpp_69_is_sublist",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\telse\n\t{\n\t\tfor(int i = 0; i < l.length; i++)\n\t\t{\n\t\t\tif(l[i] == s[0])\n\t\t\t{\n\t\t\t\tbool found = true;\n\t\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tfound = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(found)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tbool match = true;\n\t\tfor (long j = 0; j < s.length; j++) \n\t\t{\n\t\t\tif (l[i + j] != s[j]) \n\t\t\t{\n\t\t\t\tmatch = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (match)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tlong[] sub = l[0 .. s.length];\n\t\n\tif(sub == s)\n\t\treturn true;\n\t\n\treturn is_sublist(l[1 .. $], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\tif (l_.length < s_.length)\n\t\treturn false;\n\t\n\twhile (l_.length >= s_.length)\n\t{\n\t\tif (l_[0] == s_[0])\n\t\t{\n\t\t\tif (l_[0 .. s_.length] == s_)\n\t\t\t\treturn true;\n\t\t}\n\t\t\n\t\tl_ = l_[1 .. $];\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tbool result = false;\n\t\n\tif(l.length < s.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tresult = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && i + j < l.length)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == s.length) return true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++j;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t++i;\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tlong j = 1;\n\t\t\tfor(; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n    if (s.length > l.length)\n        return false;\n    for (int i = 0; i < l.length - s.length + 1; i++)\n    {\n        if (equal(l[i .. i + s.length], s))\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "/tmp/tmp8a4bu603.d(14): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a4bu603.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tlong[] l_ = l[0..s.length];\n\t\n\tif (l_ == s) return true;\n\t\n\treturn is_sublist(l[1..$], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i+j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tif (s.length == 0)\n\t\treturn true;\n\t\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\tl_.sort;\n\ts_.sort;\n\t\n\tlong[] l_s = l_.intersect(s_);\n\t\n\tif (l_s.length == s_.length)\n\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "/tmp/tmpqjjhhdq_.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmpqjjhhdq_.d(23): Error: no property `sort` for type `long[]`\n/tmp/tmpqjjhhdq_.d(25): Error: no property `intersect` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjjhhdq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t\tj++;\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length && j < s.length)\n\t{\n\t\tif (l[i] == s[j])\n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) break;\n\t\t\t}\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\tif (s.length == 0) return true;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpljnesmts.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmpljnesmts.__unittest_L33_C1() [0x427e3c]\n??:? void tmpljnesmts.__modtest() [0x427f78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length) \n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tif(l[i .. i + s.length] == s) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpljnesmts.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmpljnesmts.__unittest_L33_C1() [0x427e3c]\n??:? void tmpljnesmts.__modtest() [0x427f78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == s.length) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw9xhrzno.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmpw9xhrzno.__unittest_L30_C1() [0x427e44]\n??:? void tmpw9xhrzno.__modtest() [0x427f80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tlong j = 1;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) j++;\n\t\t\t\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < l.length; i++) \n\t\t{\n\t\t\tif (l[i] == s[0]) \n\t\t\t{\n\t\t\t\tlong j = 0;\n\t\t\t\tfor (; j < s.length; j++) \n\t\t\t\t{\n\t\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (j == s.length) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif(j == s.length - 1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tlong[] l_ = l[0 .. l.length - s.length];\n\t\n\tforeach (i, e; l_)\n\t{\n\t\tif (e == s[0])\n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tbool is_sub = true;\n\t\t\tforeach (j, f; s[1 .. $])\n\t\t\t{\n\t\t\t\tif (l[i + j + 1] != f)\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sub) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0)\n\t\treturn true;\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif(l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tfor (; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (auto j = 0; j < s.length; j++) \n\t{\n\t\tif (l[i + j] != s[j]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint n = l.length;\n\tint m = s.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "/tmp/tmprb5873wv.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmprb5873wv.d(14): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb5873wv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tbool result = false;\n\tif (s.length > l.length) \n\t{\n\t\treturn result;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tresult = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] sublist = l[0 .. s.length];\n\t\n\tif (sublist == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1 .. $], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length == s.length) \n\t{\n\t\treturn l == s;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tfor (; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sublist(l[i+1..$], s[1..$])) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvl1qyr7.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpsvl1qyr7.__unittest_L38_C1() [0x427ec4]\n??:? void tmpsvl1qyr7.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b16e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430301]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43028d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b145]\n??:? runModuleUnitTests [0x42c0b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428740]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) return false;\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (long j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (int j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] sublist = l[0..s.length];\n\t\n\tif (sublist == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1..$], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7hjthwx8.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp7hjthwx8.__unittest_L26_C1() [0x427e30]\n??:? void tmp7hjthwx8.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0)\n\t\treturn true;\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\twhile (l_.length >= s_.length)\n\t{\n\t\tif (l_[0] == s_[0])\n\t\t{\n\t\t\tif (l_.length == s_.length)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t{\n\t\t\t\tl_ = l_[1 .. $];\n\t\t\t\ts_ = s_[1 .. $];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tl_ = l_[1 .. $];\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3iwayn9x.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x429441]\n??:? void tmp3iwayn9x.__unittest_L39_C1() [0x428104]\n??:? void tmp3iwayn9x.__modtest() [0x4283b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dfff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4290ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ad89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ad15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4290a1]\n??:? runModuleUnitTests [0x42ddd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (s.length == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (i + s.length > l.length)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif(l[i..i+s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tauto l_iter = l.front;\n\tauto s_iter = s.front;\n\t\n\twhile (l_iter != l.back) \n\t{\n\t\tif (*l_iter == *s_iter) \n\t\t{\n\t\t\t++s_iter;\n\t\t\tif (s_iter == s.back) return true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_iter = s.front;\n\t\t}\n\t\t++l_iter;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "/tmp/tmppfms332d.d(12): Error: no property `front` for type `long[]`\n/tmp/tmppfms332d.d(13): Error: no property `front` for type `long[]`\n/tmp/tmppfms332d.d(15): Error: no property `back` for type `long[]`\n/tmp/tmppfms332d.d(20): Error: no property `back` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfms332d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tforeach(i; 0 .. l.length - s.length + 1)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < l.length && j < s.length)\n\t{\n\t\tif(l[i] == s[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpthsiexw4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpthsiexw4.__unittest_L28_C1() [0x427e30]\n??:? void tmpthsiexw4.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n    if (l.length < s.length) \n\t{\n        return false;\n    }\n    else \n\t{\n        foreach (i; 0 .. l.length - s.length + 1) \n\t\t{\n            if (l[i .. i + s.length] == s) \n\t\t\t{\n                return true;\n            }\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] sub;\n\t\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tsub = l[i .. i + s.length];\n\t\tif (sub == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && i + j < l.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tauto i = 0;\n\tfor (; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tauto j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprq8n_yhg.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmprq8n_yhg.__unittest_L26_C1() [0x427e30]\n??:? void tmprq8n_yhg.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < l.length && j < s.length)\n\t{\n\t\tif(l[i] == s[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(j == s.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjzo80q2u.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmpjzo80q2u.__unittest_L30_C1() [0x427e38]\n??:? void tmpjzo80q2u.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sublist) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tforeach (i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i+j] == s[j])\n\t\t\t\tj++;\n\t\t\t\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tif(s.length == 0)\n\t\treturn true;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tauto l_iter = l.opSlice().front;\n\tauto s_iter = s.opSlice().front;\n\t\n\twhile (l_iter.opSlice().length >= s.length) \n\t{\n\t\tif (l_iter.front == s_iter.front) \n\t\t{\n\t\t\tif (s_iter.opSlice().length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\ts_iter.popFront();\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_iter = s.opSlice().front;\n\t\t}\n\t\t\n\t\tl_iter.popFront();\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "/tmp/tmprolvy91v.d(25): Error: no property `opSlice` for type `long[]`\n/tmp/tmprolvy91v.d(26): Error: no property `opSlice` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprolvy91v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (l[i .. i + s.length] == s) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0) \n\t\treturn true;\n\tif (l.length == 0) \n\t\treturn false;\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tif (j == s.length - 1) \n\t\t\t\treturn true;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tfor (int i = 0; i < l.length; i++) \n\t\t{\n\t\t\tif (l[i] == s[0]) \n\t\t\t{\n\t\t\t\tbool found = true;\n\t\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t\t{\n\t\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t\t{\n\t\t\t\t\t\tfound = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (found) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tauto len = s.length;\n\tif (len > l.length) return false;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i..i+len] == s) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp41kli8jz.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42843e]\n??:? bool tmp41kli8jz.is_sublist(long[], long[]) [0x427e55]\n??:? void tmp41kli8jz.__unittest_L18_C1() [0x427f27]\n??:? void tmp41kli8jz.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "/tmp/tmpayk4ctw9.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayk4ctw9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tforeach(i; 0 .. l.length - s.length + 1)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\t\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (j == s.length - 1) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sublist(l[i+1..$], s[1..$])) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp93dlnqr4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42826d]\n??:? void tmp93dlnqr4.__unittest_L33_C1() [0x427eb4]\n??:? void tmp93dlnqr4.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b15e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43027d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b135]\n??:? runModuleUnitTests [0x42c0a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428730]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (s.length == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tif (s.length == 0)\n\t\treturn true;\n\t\n\tauto it = l.front;\n\t\n\tfor (; it != l.back; it++)\n\t{\n\t\tif (*it == s[0])\n\t\t{\n\t\t\tauto it2 = it;\n\t\t\tfor (int i = 0; i < s.length; i++)\n\t\t\t{\n\t\t\t\tif (*it2 != s[i])\n\t\t\t\t\tbreak;\n\t\t\t\tit2++;\n\t\t\t}\n\t\t\tif (it2 == it + s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmpyd1su9wr.d(16): Error: no property `front` for type `long[]`\n/tmp/tmpyd1su9wr.d(18): Error: no property `back` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd1su9wr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (l[i .. i + s.length] == s)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}