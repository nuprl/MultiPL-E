{
  "name": "mbpp_632_move_zero",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[i - zero_count] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong result_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_list[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult_list[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(i < non_zero_count)\n\t\t{\n\t\t\tresult[i] = non_zero_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = zero_list[i - non_zero_count];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\t\n\twhile (j < num_list.length)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj += 1;\n\t}\n\t\n\treturn num_list;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] num_list_copy_2 = num_list.copy();\n\tlong[] num_list_copy_3 = num_list.copy();\n\tlong[] num_list_copy_4 = num_list.copy();\n\tlong[] num_list_copy_5 = num_list.copy();\n\tlong[] num_list_copy_6 = num_list.copy();\n\tlong[] num_list_copy_7 = num_list.copy();\n\tlong[] num_list_copy_8 = num_list.copy();\n\tlong[] num_list_copy_9 = num_list.copy();\n\tlong[] num_list_copy_10 = num_list.copy();\n\tlong[] num_list_copy_11 = num_list.copy();\n\tlong[] num_list_copy_12 = num_list.copy();\n\tlong[] num_list_copy_13 = num_list.copy();\n\tlong[] num_list_copy_14 = num_list.copy();\n\tlong[] num_list_copy_15 = num_list.copy();\n\tlong[] num_list_copy_16 = num_list.copy();\n\tlong[] num_list_copy_17 = num_list.copy();\n\tlong[] num_list_copy_18 = num_list.copy();\n\tlong[] num_list_copy_19 = num_list.copy();\n\tlong[] num_list_copy_20 = num_list.copy();\n\tlong[] num_list_copy_21 = num_list.copy();\n\tlong[] num_list_copy_22 = num_list.copy();\n\tlong[] num_list_copy_23 = num_list.copy();\n\tlong[] num_list_copy_24 = num_list.copy();\n\tlong[] num_list_copy_25 = num_list.copy();\n\tlong[] num_list_copy_26 = num_list.copy();\n\tlong[] num_list_copy_27 = num_list.copy();\n\tlong[] num_list_copy_28 = num_list.copy();\n\tlong[] num_list_",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint i = 0;\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong j = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\t\n\tforeach(long num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\t\n\treturn non_zero_list ~ zero_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] result = new long[num_list.length];\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tresult[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++) \n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor(long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = len(num_list);\n\twhile (i < len)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count += 1;\n\t\t\ti += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj += 1;\n\t\t\ti += 1;\n\t\t}\n\t}\n\twhile (j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj += 1;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile(i < len)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tfor (i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tfor (i = num_list.length - zero_count; i < num_list.length; i++)\n\t{\n\t\tnum_list[i] = 0;\n\t}\n\t\n\treturn num_list;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count] = 0;\n\t\tcount++;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile(i < len)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint zero_count = 0;\n\tint i = 0;\n\tfor (i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t} else {\n\t\t\tzero_count++;\n\t\t}\n\t}\n\tfor (i = num_list.length - zero_count; i < num_list.length; i++) {\n\t\tresult[i] = 0;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint counter = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[counter] = num_list[i];\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeroes[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zeroes[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] num_list_copy_2 = num_list.copy();\n\tlong[] num_list_copy_3 = num_list.copy();\n\tlong[] num_list_copy_4 = num_list.copy();\n\tlong[] num_list_copy_5 = num_list.copy();\n\tlong[] num_list_copy_6 = num_list.copy();\n\tlong[] num_list_copy_7 = num_list.copy();\n\tlong[] num_list_copy_8 = num_list.copy();\n\tlong[] num_list_copy_9 = num_list.copy();\n\tlong[] num_list_copy_10 = num_list.copy();\n\tlong[] num_list_copy_11 = num_list.copy();\n\tlong[] num_list_copy_12 = num_list.copy();\n\tlong[] num_list_copy_13 = num_list.copy();\n\tlong[] num_list_copy_14 = num_list.copy();\n\tlong[] num_list_copy_15 = num_list.copy();\n\tlong[] num_list_copy_16 = num_list.copy();\n\tlong[] num_list_copy_17 = num_list.copy();\n\tlong[] num_list_copy_18 = num_list.copy();\n\tlong[] num_list_copy_19 = num_list.copy();\n\tlong[] num_list_copy_20 = num_list.copy();\n\tlong[] num_list_copy_21 = num_list.copy();\n\tlong[] num_list_copy_22 = num_list.copy();\n\tlong[] num_list_copy_23 = num_list.copy();\n\tlong[] num_list_copy_24 = num_list.copy();\n\tlong[] num_list_copy_25 = num_list.copy();\n\tlong[] num_list_copy_26 = num_list.copy();\n\tlong[] num_list_copy_27 = num_list.copy();\n\tlong[] num_list_copy_28 = num_list.copy();\n\tlong[] num_list_",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_count = 0;\n    int result_count = 0;\n    for(int i = 0; i < num_list.length; i++)\n    {\n        if(num_list[i] == 0)\n        {\n            zero_list[zero_count] = num_list[i];\n            zero_count++;\n        }\n        else\n        {\n            result[result_count] = num_list[i];\n            result_count++;\n        }\n    }\n    for(int i = 0; i < zero_count; i++)\n    {\n        result[result_count] = zero_list[i];\n        result_count++;\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong non_zero_count = 0;\n\tlong zero_count = 0;\n\tlong i = 0;\n\twhile (i < num_list.length) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < non_zero_count) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < zero_count) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++) \n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = 0;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length-count+i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\t\n\tfor(int i = index; i < result.length; i++)\n\t{\n\t\tresult[i] = 0;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_count] = num_list[i];\n\t\t\tnew_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_count] = zero_list[i];\n\t\tnew_count++;\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\t\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++) {\n\t\tif(num_list[i] == 0) {\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse {\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < zero_count; i++) {\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tint n = num_list.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count] = 0;\n\t\tcount++;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tint n = len(num_list);\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count += 1;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count += 1;\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tint n = num_list.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint num_zeros = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\tlong[] new_list = new long[len];\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_zeros++;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < num_zeros; i++)\n\t{\n\t\tnew_list[j] = 0;\n\t\tj++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zeros[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zeros[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint num_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list_copy[num_count] = num_list[i];\n\t\t\tnum_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnum_list_copy[num_count + i] = zero_list[i];\n\t}\n\treturn num_list_copy;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile (i < len)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint j = 0;\n\tint k = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_list[k] = num_list[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_list.length; i++)\n\t{\n\t\tif (zero_list[i] == 0)\n\t\t{\n\t\t\tresult[j] = zero_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_counter = 0;\n\tint result_counter = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_counter] = num_list[i];\n\t\t\tzero_counter++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_counter] = num_list[i];\n\t\t\tresult_counter++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_counter; i++)\n\t{\n\t\tresult[result_counter] = zero_list[i];\n\t\tresult_counter++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_count = 0;\n    int result_count = 0;\n    foreach(num; num_list)\n    {\n        if(num == 0)\n        {\n            zero_list[zero_count] = num;\n            zero_count++;\n        }\n        else\n        {\n            result[result_count] = num;\n            result_count++;\n        }\n    }\n    return result ~ zero_list[0..zero_count];\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\t\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\t\n\treturn non_zero_list ~ zero_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i=0; i<num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i=0; i<non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i=non_zero_count; i<num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i-non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}"
  ]
}