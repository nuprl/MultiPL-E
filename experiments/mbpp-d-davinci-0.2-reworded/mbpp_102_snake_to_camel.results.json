{
  "name": "mbpp_102_snake_to_camel",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpjj3ih8xl.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj3ih8xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= word[i + 1].toUpper;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4cd4t4k0.d(15): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cd4t4k0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp1i_1b_ds.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i_1b_ds.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpab6s6a7l.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab6s6a7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpcpks74af.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpks74af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmptzwq_63v.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzwq_63v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8n5bcq3p.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n5bcq3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9yf57o3l.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yf57o3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpyrm1vuuo.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrm1vuuo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tfirst = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= toLower(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpm00t_exy.d(22): Error: undefined identifier `toUpper`\n/tmp/tmpm00t_exy.d(27): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm00t_exy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppkzb0o3_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkzb0o3_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpvgk_08ib.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgk_08ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp2jo40z5f.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jo40z5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(w; word.split(\"_\"))\n\t{\n\t\tresult ~= w[0].toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpiiit1vtm.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiiit1vtm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpsrj66itc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrj66itc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmprfmncdk9.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmncdk9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp5jyc3wnu.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jyc3wnu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpcpks74af.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpks74af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpqh4psn4j.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh4psn4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpa7bq3o33.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7bq3o33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach (i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpvy1m2v24.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy1m2v24.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7uckp4r_.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uckp4r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcamel ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpulabucbx.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulabucbx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp2jo40z5f.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jo40z5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpvlgx03ln.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlgx03ln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpvlgx03ln.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlgx03ln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpkx46m91o.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkx46m91o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0) \n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel_word ~= toUpper(c);\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpdwsdypfp.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwsdypfp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tnext_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(next_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpaz5ssb5w.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz5ssb5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxyl4csul.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyl4csul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper) \n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp6spkvhc9.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6spkvhc9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint len = word.length;\n\tstring result = \"\";\n\tbool is_upper = false;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(word[i]);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= word[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7c5ij0c1.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmp7c5ij0c1.d(23): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7c5ij0c1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tupper = false;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp6g5g5g41.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g5g5g41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpzz22au__.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz22au__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tresult ~= word[$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp3_2bgc0o.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_2bgc0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpm0lmxepe.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0lmxepe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp1k345p3e.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1k345p3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i,c;word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp11x2vapy.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11x2vapy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i - 1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpg3v_rv_h.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3v_rv_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpyp5q81yw.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp5q81yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpzecd0ayt.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzecd0ayt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmphnl5_7ib.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnl5_7ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp5r0es56_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r0es56_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp1anyxpo0.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1anyxpo0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpa7bq3o33.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7bq3o33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp56weh07g.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56weh07g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7zx9p8xx.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zx9p8xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpmahe0xso.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmahe0xso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7uckp4r_.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uckp4r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp2jo40z5f.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jo40z5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpvgk_08ib.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgk_08ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp9y113hgc.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9y113hgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word) \n\t{\n\t\tif (ch == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (is_upper) \n\t\t\t{\n\t\t\t\tresult ~= ch.toUpper;\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpja7p3lf1.d(22): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpja7p3lf1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpyp5q81yw.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp5q81yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp4t_9p3p7.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4t_9p3p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpq7zwo_5a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7zwo_5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp2oo364d9.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2oo364d9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first) \n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_first = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpwjtys73t.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjtys73t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpk8bexnos.d(16): Error: undefined identifier `toLower`\n/tmp/tmpk8bexnos.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8bexnos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpy7u1hgjn.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7u1hgjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpnfbunoa6.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfbunoa6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpvlgx03ln.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlgx03ln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach (i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmppjcq6lsc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjcq6lsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpd9h696y7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9h696y7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpyp5q81yw.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp5q81yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpyrm1vuuo.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrm1vuuo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpzecd0ayt.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzecd0ayt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(next_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tnext_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp2l52v_lu.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2l52v_lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpa7bq3o33.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7bq3o33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpbap96r50.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbap96r50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7zx9p8xx.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zx9p8xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= word[i+1].toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpottpin7f.d(15): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpottpin7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpvlgx03ln.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlgx03ln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpqc7xfbhh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc7xfbhh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp9y113hgc.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9y113hgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp7uckp4r_.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uckp4r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpdgr_savn.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgr_savn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tresult ~= word[i+1].toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp6o9jmxgw.d(15): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6o9jmxgw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp710xokqb.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp710xokqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5w54ttlm.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmp5w54ttlm.__unittest_L24_C1() [0x427b72]\n??:? void tmp5w54ttlm.__modtest() [0x427cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430360]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428384]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(immutable char c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpj1id8wg3.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1id8wg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpposj14og.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpposj14og.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp5jsg0eps.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jsg0eps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpuyp57os9.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyp57os9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpl2vniasi.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2vniasi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp1i_1b_ds.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i_1b_ds.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpsa09wbqg.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsa09wbqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$++]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpu3io4lsb.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3io4lsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpjj3ih8xl.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj3ih8xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpnk29re7z.d(16): Error: undefined identifier `toLower`\n/tmp/tmpnk29re7z.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnk29re7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp6lwqrash.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lwqrash.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpx2z4onni.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2z4onni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tint len = word.length;\n\twhile(i < len)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpo3_3twc5.d(12): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmpo3_3twc5.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3_3twc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpyh41kbih.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyh41kbih.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toupper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpfou3ly8k.d(17): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfou3ly8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tcamel_word ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcamel_word ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp_ksrkm0x.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ksrkm0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tfirst = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp_ibn4bch.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ibn4bch.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpnfbunoa6.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfbunoa6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpuyp57os9.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyp57os9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmporq3aeiu.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporq3aeiu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpfps3qz4h.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfps3qz4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpvgk_08ib.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgk_08ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpcpks74af.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpks74af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpxvahbq3a.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvahbq3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t}\n\t\n\treturn result ~ word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp_dwnu7z6.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dwnu7z6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tresult ~= to!string(toUpper(word[$-1]));\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp278w78ry.d(18): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp278w78ry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_letter = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first_letter = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first_letter)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first_letter = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmprb5mscnw.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb5mscnw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach (i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpamoda2mr.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamoda2mr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpa7bq3o33.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7bq3o33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpzecd0ayt.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzecd0ayt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(immutable char c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tresult ~= toupper(word[$-1]);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp05__pa6t.d(19): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05__pa6t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp9ozdwolz.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ozdwolz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpcpks74af.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpks74af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp5jyc3wnu.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jyc3wnu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\t//return word.replace(\"_\", \"\").title();\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= c.toLower();\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= c.toUpper();\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmplu1cluzl.d(17): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmplu1cluzl.d(19): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplu1cluzl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpyrm1vuuo.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrm1vuuo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word) {\n\t\tif(c == '_') {\n\t\t\tupper = true;\n\t\t} else {\n\t\t\tif(upper) {\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t} else {\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp1dnzh1yh.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dnzh1yh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp2jo40z5f.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jo40z5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint len = word.length;\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp0ivfjcgm.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmp0ivfjcgm.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ivfjcgm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i != 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp6r9afmmz.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6r9afmmz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpqc7xfbhh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc7xfbhh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(word[$-1] == '_')\n\t\t\tresult ~= toupper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmppc7o63vy.d(18): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppc7o63vy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp6c9nitox.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c9nitox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmphnl5_7ib.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnl5_7ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpnk29re7z.d(16): Error: undefined identifier `toLower`\n/tmp/tmpnk29re7z.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnk29re7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpj5bsn9vj.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5bsn9vj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[i + 1]).toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmphk8htl7l.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphk8htl7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpqc7xfbhh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc7xfbhh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[i+1]).toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpp1352isl.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1352isl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\t++i;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmptyiqac7o.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyiqac7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpf1iymv43.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1iymv43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp1t7yn4fo.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t7yn4fo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= word[i + 1].toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp5mv8g504.d(15): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mv8g504.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp1nxwa_tr.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nxwa_tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpsa09wbqg.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsa09wbqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp9ozdwolz.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ozdwolz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwmp1ibet.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmp1ibet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(ch);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpvwofm5xk.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwofm5xk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpk8bexnos.d(16): Error: undefined identifier `toLower`\n/tmp/tmpk8bexnos.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8bexnos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpmahe0xso.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmahe0xso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp9gpjez_2.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gpjez_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first = true;\n\t\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpyk43httx.d(23): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk43httx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpqvzad1ma.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvzad1ma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp8baigk53.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8baigk53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpnfbunoa6.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfbunoa6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmp1anyxpo0.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1anyxpo0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "/tmp/tmpuyp57os9.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyp57os9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpx7w5h34g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7w5h34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp86_x2ofb.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86_x2ofb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tupper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpyw3qvg81.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyw3qvg81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpyrm1vuuo.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrm1vuuo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp5wx3lt3j.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5wx3lt3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}