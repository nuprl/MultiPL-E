{
  "name": "mbpp_557_toggle_string",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to toggle the case of all characters in a string.\n\t\n*/\nstring toggle_string(string string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = toggle_string;\n\n    assert(candidate(\"Python\") == \"pYTHON\");\n    assert(candidate(\"Pangram\") == \"pANGRAM\");\n    assert(candidate(\"LIttLE\") == \"liTTle\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(c.isUpper) \n\t\t{\n\t\t\tresult ~= c.toLower;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= c.toLower;\n\t\t}\n\t\telse if(c.isLower)\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i; 0 .. string.length)\n\t{\n\t\tif(string[i] >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tresult ~= string[i].toUpper;\n\t\t}\n\t\telse if(string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tresult ~= string[i].toLower;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= string[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(isUpper(c)) \n\t\t{\n\t\t\tresult ~= toLower(c);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(c.isUpper) \n\t\t{\n\t\t\tresult ~= c.toLower;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string) \n\t{\n\t\tif(isUpper(c)) \n\t\t{\n\t\t\tresult ~= toLower(c);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(isUpper(c))\n\t\t\tresult ~= toLower(c);\n\t\telse\n\t\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif (c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= c.toLower;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(c.isUpper) {\n\t\t\tresult ~= c.toLower;\n\t\t} else {\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif (isUpper(c))\n\t\t{\n\t\t\tresult ~= toLower(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n}"
  ]
}