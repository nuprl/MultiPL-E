{
  "name": "mbpp_562_Find_Max_Length",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach (i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tforeach(j; 0..lst[i].length) \n\t\t{\n\t\t\tif(lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlong count = 0;\n\t\t\t\tforeach(k; j..lst[i].length) \n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 0) \n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpl2z7xyo8.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2z7xyo8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i, lst)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpvk05p46w.d(11): Error: no identifier for declarator `lst`\n/tmp/tmpvk05p46w.d(11): Error: found `)` when expecting `;`\n/tmp/tmpvk05p46w.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvk05p46w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong[] lengths = new long[lst.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong length = 0;\n\t\n\tfor (i = 0; i < lst.length; i++) \n\t{\n\t\tlength = 0;\n\t\tfor (j = 0; j < lst[i].length; j++) \n\t\t{\n\t\t\tif (lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlength += 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (length > max_length) \n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp31ddsh44.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x428f81]\n??:? void tmp31ddsh44.__unittest_L40_C1() [0x427f52]\n??:? void tmp31ddsh44.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db57]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a88c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a789]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c35]\n??:? runModuleUnitTests [0x42d92d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429444]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(max < i.length)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; lst) \n\t{\n\t\tmax_len = max(max_len, i.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpjbonlo5p.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbonlo5p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsoky39yx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428fc9]\n??:? void tmpsoky39yx.__unittest_L32_C1() [0x427f96]\n??:? void tmpsoky39yx.__modtest() [0x4281b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ca6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a878]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c7d]\n??:? runModuleUnitTests [0x42d919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42948c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] sub_lst;\n\tforeach(sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0ji9oypx.d(12): Error: variable `sub_lst` is shadowing variable `tmp0ji9oypx.Find_Max_Length.sub_lst`\n/tmp/tmp0ji9oypx.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ji9oypx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlen = lst[i].length;\n\t\tif(len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurrent_length += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t\tcurrent_length = 0;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq71k6b8l.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428ef1]\n??:? void tmpq71k6b8l.__unittest_L29_C1() [0x427ebe]\n??:? void tmpq71k6b8l.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42da6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a711]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a7a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a69d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ba5]\n??:? runModuleUnitTests [0x42d841]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4293b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong curr_length = 0;\n\tlong[][] curr_lst = [];\n\tforeach(l; lst)\n\t{\n\t\tif(l[0] == l[1])\n\t\t{\n\t\t\tcurr_length += 1;\n\t\t\tcurr_lst ~= l;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(curr_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = curr_length;\n\t\t\t}\n\t\t\tcurr_length = 0;\n\t\t\tcurr_lst = [];\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwui3xx51.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x429052]\n??:? long tmpwui3xx51.Find_Max_Length(long[][]) [0x427df5]\n??:? void tmpwui3xx51.__unittest_L32_C1() [0x427f53]\n??:? void tmpwui3xx51.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e507]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b23c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c55]\n??:? runModuleUnitTests [0x42e2dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpyfp51vix.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfp51vix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] len_lst = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tlen_lst[i] = lst[i].length;\n\t\tmax_len = max(max_len, len_lst[i]);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpwmfgn2v8.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmfgn2v8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9oz8s0lq.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oz8s0lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach (i; 0 .. lst.length) \n\t{\n\t\tlen = 0;\n\t\tforeach (j; 0 .. lst[i].length) \n\t\t{\n\t\t\tif (lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmplivdmxvu.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmplivdmxvu.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplivdmxvu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp43_2gca_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43_2gca_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp1j0t9gy.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j0t9gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tlong[] sub_lst;\n\tforeach(sub_lst; lst)\n\t{\n\t\tlen = sub_lst.length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpc4_mjgt2.d(13): Error: variable `sub_lst` is shadowing variable `tmpc4_mjgt2.Find_Max_Length.sub_lst`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4_mjgt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpwdq56g6q.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdq56g6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif (len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpu7rooald.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7rooald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpr8uy4yuy.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpr8uy4yuy.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8uy4yuy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max_len)\n\t\t\tmax_len = lst[i].length;\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9oz8s0lq.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oz8s0lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach (i; lst) \n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpmwkqlp5r.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwkqlp5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp92560v45.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92560v45.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpq0mwc5ee.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0mwc5ee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3amle7l7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428f71]\n??:? void tmp3amle7l7.__unittest_L33_C1() [0x427f42]\n??:? void tmp3amle7l7.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42daeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a791]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a820]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a71d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c25]\n??:? runModuleUnitTests [0x42d8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429434]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpa2mpjmzz.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2mpjmzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] != 0)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpqitxts5r.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpqitxts5r.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqitxts5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmphxls6ekx.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxls6ekx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp92560v45.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92560v45.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len == 0)\n\t\t\t{\n\t\t\t\tlen = lst[i].length - j;\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpjyumdbrd.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyumdbrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] subarray; lst)\n\t{\n\t\tmax_length = max(max_length, subarray.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpuh35un2b.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh35un2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp1cakx3d9.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cakx3d9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[][] temp = new long[][](lst.length);\n\tforeach(i; 0..lst.length)\n\t{\n\t\ttemp[i] = new long[](lst[i].length);\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\ttemp[i][j] = lst[i][j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(lst[i][j] == 0)\n\t\t\t\t{\n\t\t\t\t\ttemp[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp[i][j] = temp[i-1][j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..lst.length)\n\t{\n\t\ttemp[i] = temp[i].sort;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tmax_len = max(max_len, temp[i][j] * (lst[i].length - j));\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpn27ip_3b.d(37): Error: no property `sort` for type `long[]`\n/tmp/tmpn27ip_3b.d(40): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn27ip_3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(l; lst)\n\t{\n\t\tlength = l.length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp1j0t9gy.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j0t9gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9oz8s0lq.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oz8s0lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tcurrent_length += 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent_length = 0;\n\t\t\t}\n\t\t\tmax_length = max(max_length, current_length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpuns2r_e9.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuns2r_e9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9oz8s0lq.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oz8s0lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; lst)\n\t{\n\t\tlen = i.length;\n\t\tif (len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t{\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk34c__i5.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428fb9]\n??:? void tmpk34c__i5.__unittest_L35_C1() [0x427f86]\n??:? void tmpk34c__i5.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a868]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c6d]\n??:? runModuleUnitTests [0x42d909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42947c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp4f4lhzzx.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4f4lhzzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp9uhlmm30.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uhlmm30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong bv = 0;\n\tlong bw = 0;\n\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp5rn__zcf.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rn__zcf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpviwr3_7t.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpviwr3_7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong count = 0;\n\t\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmprwc8yi2j.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprwc8yi2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(lst_i; lst)\n\t{\n\t\tlong length = lst_i.length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp8vruljs.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8vruljs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength += 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpdxqkpk79.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdxqkpk79.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxqkpk79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tlong[][] sub_lst = [];\n\t\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > 1)\n\t\t{\n\t\t\tsub_lst ~= lst[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0..sub_lst.length)\n\t{\n\t\tlen = sub_lst[i].length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\t\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong cur_length = 0;\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tcur_length = lst[i].length;\n\t\tif (cur_length > max_length)\n\t\t{\n\t\t\tmax_length = cur_length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tmax_length = max(max_length, i.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp4oy6z_2c.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy6z_2c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp1j0t9gy.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j0t9gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp1j0t9gy.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j0t9gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tlength = lst[i].length;\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tif(lst[i].length > 0) \n\t\t{\n\t\t\tlen = lst[i].length;\n\t\t\tif(len > max_len) \n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tmax = max(max, j);\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpulelq7b3.d(17): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulelq7b3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst) \n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpq7i6udau.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7i6udau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(long[] sub; lst) \n\t{\n\t\tmax = max(max, sub.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp6ds2qxkj.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ds2qxkj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i, sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpmb0ldliz.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmb0ldliz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmp9uhlmm30.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uhlmm30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpu7rooald.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7rooald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpu7rooald.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7rooald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max_length)\n\t\t{\n\t\t\tmax_length = i.length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len) \n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = lst[i].length;\n\t\t\tmax_len = max(curr_len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpxml7k1q8.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxml7k1q8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] temp = [];\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\ttemp = [];\n\t\tforeach(long num; sub_lst)\n\t\t{\n\t\t\tif(num != 0)\n\t\t\t{\n\t\t\t\ttemp ~= num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, temp.length);\n\t\t\t\ttemp = [];\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, temp.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpul6ede5v.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpul6ede5v.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul6ede5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpgrdwsdjp.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdwsdjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[][] sub_arrays = [];\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; i..lst.length)\n\t\t{\n\t\t\tsub_arrays ~= lst[i..j];\n\t\t}\n\t}\n\tforeach(arr; sub_arrays)\n\t{\n\t\tif(arr.length > max_len)\n\t\t{\n\t\t\tmax_len = arr.length;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg4s1k0aw.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428fa1]\n??:? void tmpg4s1k0aw.__unittest_L28_C1() [0x427f72]\n??:? void tmpg4s1k0aw.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b25d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c55]\n??:? runModuleUnitTests [0x42e38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429464]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(long[] sub; lst)\n\t{\n\t\tmax = max(max, sub.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpfl3nomad.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl3nomad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmptq9xe2ec.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq9xe2ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpu7rooald.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7rooald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpu7rooald.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7rooald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpm7n04lmp.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpm7n04lmp.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7n04lmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp8vruljs.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8vruljs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpgrdwsdjp.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdwsdjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpz0hyug05.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpz0hyug05.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0hyug05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp8vruljs.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8vruljs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tcurrent_length = 0;\n\t\tforeach(j; i)\n\t\t{\n\t\t\tif(j == 1)\n\t\t\t{\n\t\t\t\tcurrent_length++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent_length = 0;\n\t\t\t}\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpujf4h24n.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428f29]\n??:? void tmpujf4h24n.__unittest_L33_C1() [0x427ef6]\n??:? void tmpujf4h24n.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42da2f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bdd]\n??:? runModuleUnitTests [0x42d805]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429378]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong cur_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tcur_length = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tcur_length++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcur_length = 0;\n\t\t\t}\n\t\t\tmax_length = max(max_length, cur_length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpq74wm1lt.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq74wm1lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpgrdwsdjp.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdwsdjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9oz8s0lq.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oz8s0lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp8vruljs.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8vruljs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) {\n\t\tforeach(j; 0 .. lst[i].length) {\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length) {\n\t\t\t\tif(k < lst.length) {\n\t\t\t\t\tif(j < lst[k].length) {\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length) {\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpop7djj2s.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428f81]\n??:? void tmpop7djj2s.__unittest_L28_C1() [0x427f52]\n??:? void tmpop7djj2s.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a72d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c35]\n??:? runModuleUnitTests [0x42d8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429444]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpgrdwsdjp.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdwsdjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurrent_length = lst[i].length;\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, j - i + 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpmy239cpp.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmy239cpp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = 1;\n\t\t\tforeach(j; i+1 .. lst.length)\n\t\t\t{\n\t\t\t\tif(lst[j].length > 0)\n\t\t\t\t{\n\t\t\t\t\tcurr_len++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(curr_len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = curr_len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9sqhthug.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428f51]\n??:? void tmp9sqhthug.__unittest_L36_C1() [0x427f22]\n??:? void tmp9sqhthug.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a800]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a6fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c05]\n??:? runModuleUnitTests [0x42d8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach (i; 0 .. lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpmg262yst.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg262yst.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(idx, val; lst)\n\t{\n\t\tif(val.length > 0)\n\t\t{\n\t\t\tlen = val.length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlen = 0;\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp5p_nvod_.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5p_nvod_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tforeach(j; 0 .. lst[i].length) \n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length) \n\t\t\t{\n\t\t\t\tif(j >= lst[k].length) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(lst[k][j] == 1) \n\t\t\t\t{\n\t\t\t\t\tlength += 1;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp_nf7q6gm.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nf7q6gm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] sub_lst = [];\n\tforeach(sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpaaz0q4pb.d(12): Error: variable `sub_lst` is shadowing variable `tmpaaz0q4pb.Find_Max_Length.sub_lst`\n/tmp/tmpaaz0q4pb.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaaz0q4pb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpp1j0t9gy.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j0t9gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach (i; 0 .. lst.length)\n\t{\n\t\tforeach (j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach (k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach (l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tlen += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp148m3z2t.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp148m3z2t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41d3jcr0.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428fe9]\n??:? void tmp41d3jcr0.__unittest_L38_C1() [0x427fba]\n??:? void tmp41d3jcr0.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428cc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a898]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c9d]\n??:? runModuleUnitTests [0x42d939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4294ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpumam78x_.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumam78x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong count = 1;\n\t\t\t\tlong k = j + 1;\n\t\t\t\twhile(k < lst[i].length && lst[i][k] == 1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpsyqr4q5c.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyqr4q5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen = max(len, (k-i+1)*(l-j+1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpxtsf5xbk.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpxtsf5xbk.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxtsf5xbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong len = 0;\n\t\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(len > max_len)\n\t\t\t\t{\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1sylco8a.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x429011]\n??:? void tmp1sylco8a.__unittest_L38_C1() [0x427fe2]\n??:? void tmp1sylco8a.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428cee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a831]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a8c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a7bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428cc5]\n??:? runModuleUnitTests [0x42d961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4294d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max_length)\n\t\t{\n\t\t\tmax_length = i.length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t\tlen++;\n\t\t\telse\n\t\t\t\tlen = 0;\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpg1vspsgm.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1vspsgm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] sub_arr;\n\tforeach(sub_arr; lst)\n\t{\n\t\tmax_len = max(max_len, sub_arr.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpdu25h1mm.d(12): Error: variable `sub_arr` is shadowing variable `tmpdu25h1mm.Find_Max_Length.sub_arr`\n/tmp/tmpdu25h1mm.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu25h1mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tlen += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_len = max(max_len, len);\n\t\t\tlen = 0;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpg7eh_7ux.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7eh_7ux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max_length)\n\t\t\tmax_length = lst[i].length;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpywccoys2.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywccoys2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6gbse6d.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428f71]\n??:? void tmpc6gbse6d.__unittest_L33_C1() [0x427f42]\n??:? void tmpc6gbse6d.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42daeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a791]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a820]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a71d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c25]\n??:? runModuleUnitTests [0x42d8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429434]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst) {\n\t\tif (i.length > max) {\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpumam78x_.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumam78x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] arr; lst)\n\t{\n\t\tmax_len = max(max_len, arr.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpnqwoagwc.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqwoagwc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tif(j >= lst[k].length)\n\t\t\t\t\tbreak;\n\t\t\t\tif(lst[k][j] == 1)\n\t\t\t\t\tlen++;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmax_len = max(len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpr7uj4w8j.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uj4w8j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong[] sub_arr = new long[lst.length];\n\tforeach(i, sub_arr; lst)\n\t{\n\t\tsub_arr[i] = sub_arr.length;\n\t\tmax_len = max(max_len, sub_arr[i]);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpk6tkomtt.d(12): Error: variable `sub_arr` is shadowing variable `tmpk6tkomtt.Find_Max_Length.sub_arr`\n/tmp/tmpk6tkomtt.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6tkomtt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpb9vrw_zo.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vrw_zo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "/tmp/tmpnvsdf_ax.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvsdf_ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpgrdwsdjp.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdwsdjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = lst[i].length;\n\t\t\tmax_len = max(max_len, curr_len);\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp19rh1er0.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19rh1er0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(subarray; lst) \n\t{\n\t\tmax_length = max(max_length, subarray.length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpj9n_epdd.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9n_epdd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlength = lst[i].length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t\tlen = 0;\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp5zsfsvml.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp5zsfsvml.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zsfsvml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp0quwhdyn.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0quwhdyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(len > max_len)\n\t\t\t\t{\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl7kz7zdh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428f81]\n??:? void tmpl7kz7zdh.__unittest_L37_C1() [0x427f52]\n??:? void tmpl7kz7zdh.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a72d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c35]\n??:? runModuleUnitTests [0x42d8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429444]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(long[] sublst; lst) \n\t{\n\t\tcurr_len = sublst.length;\n\t\tif(curr_len > max_len) \n\t\t{\n\t\t\tmax_len = curr_len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i, lst)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp8amss6sx.d(11): Error: no identifier for declarator `lst`\n/tmp/tmp8amss6sx.d(11): Error: found `)` when expecting `;`\n/tmp/tmp8amss6sx.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8amss6sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst) {\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpxqi3qpfw.d(12): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqi3qpfw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmp1dchg8re.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dchg8re.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(lst_row; lst)\n\t{\n\t\tlong length = lst_row.length;\n\t\tif (length > max_length)\n\t\t\tmax_length = length;\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpy3e6wgh8.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3e6wgh8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp9jl7tr95.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jl7tr95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tif(lst[k].length > j)\n\t\t\t\t{\n\t\t\t\t\tlength += lst[k][j];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "/tmp/tmpqcbpdypy.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcbpdypy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}\nunittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmcpl65o4.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428fc9]\n??:? void tmpmcpl65o4.__unittest_L30_C1() [0x427f96]\n??:? void tmpmcpl65o4.__modtest() [0x4281b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ca6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a7e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a878]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c7d]\n??:? runModuleUnitTests [0x42d919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42948c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}