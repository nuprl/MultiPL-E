{
  "name": "mbpp_101_kth_element",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\n*/\nlong kth_element(long[] arr, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = kth_element;\n\n    assert(candidate([12L, 3L, 5L, 7L, 19L], 2L) == 3L);\n    assert(candidate([17L, 24L, 8L, 23L], 3L) == 8L);\n    assert(candidate([16L, 21L, 25L, 36L, 4L], 4L) == 36L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (true) \n\t{\n\t\tlong p = partition(arr, left, right);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t}\n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tright = p - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = p + 1;\n\t\t}\n\t}\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0, r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = arr[m];\n\t\tlong i = l, j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < p) \n\t\t\t\ti++;\n\t\t\twhile (arr[j] > p) \n\t\t\t\tj--;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (j < k - 1) \n\t\t\tl = i;\n\t\tif (k - 1 < i) \n\t\t\tr = j;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tarr.sort();\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivot = left + (right - left) / 2;\n\t\tlong new_pivot = partition(arr, left, right, pivot);\n\t\tif (new_pivot == k - 1) \n\t\t{\n\t\t\treturn arr[new_pivot];\n\t\t} \n\t\telse if (new_pivot > k - 1) \n\t\t{\n\t\t\tright = new_pivot - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = new_pivot + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tlong pos = partition(arr, l, r, m);\n\t\tif (pos == k - 1) \n\t\t{\n\t\t\treturn arr[pos];\n\t\t} \n\t\telse if (pos > k - 1) \n\t\t{\n\t\t\tr = pos - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = pos + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\t// Write your code here\n\tlong n = arr.length;\n\tlong[] temp = new long[n];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tlong l = 0;\n\tlong r = n - 1;\n\t\n\twhile(l < r)\n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tlong pivot = temp[m];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile(i <= j)\n\t\t{\n\t\t\twhile(temp[i] < pivot)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(temp[j] > pivot)\n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif(i <= j)\n\t\t\t{\n\t\t\t\tlong t = temp[i];\n\t\t\t\ttemp[i] = temp[j];\n\t\t\t\ttemp[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif(l <= k - 1 && k - 1 <= j)\n\t\t{\n\t\t\tr = j;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = i;\n\t\t}\n\t}\n\treturn temp[k - 1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t}\n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivot = left + (right - left) / 2;\n\t\tlong new_pivot = partition(arr, left, right, pivot);\n\t\tif (new_pivot == k - 1) \n\t\t{\n\t\t\treturn arr[new_pivot];\n\t\t} \n\t\telse if (new_pivot > k - 1) \n\t\t{\n\t\t\tright = new_pivot - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = new_pivot + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tsort(arr);\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n    return arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong pos = partition(arr, l, r, m);\n\t\tif (pos == k - 1) \n\t\t{\n\t\t\treturn arr[pos];\n\t\t} \n\t\telse if (pos > k - 1) \n\t\t{\n\t\t\tr = pos - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = pos + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k - 1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\t\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tlong mid_value = arr[mid];\n\t\tlong num_smaller = 0;\n\t\tlong num_equal = 0;\n\t\t\n\t\tforeach (long val; arr) \n\t\t{\n\t\t\tif (val < mid_value) \n\t\t\t{\n\t\t\t\tnum_smaller++;\n\t\t\t} \n\t\t\telse if (val == mid_value) \n\t\t\t{\n\t\t\t\tnum_equal++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (num_smaller < k && k <= num_smaller + num_equal) \n\t\t{\n\t\t\treturn mid_value;\n\t\t} \n\t\telse if (num_smaller >= k) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk -= num_smaller + num_equal;\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n    long[] arr_copy = arr.dup;\n    arr_copy.sort;\n    return arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivot = left + (right - left) / 2;\n\t\tlong new_pivot = partition(arr, left, right, pivot);\n\t\tif (new_pivot == k - 1) \n\t\t{\n\t\t\treturn arr[new_pivot];\n\t\t} \n\t\telse if (new_pivot > k - 1) \n\t\t{\n\t\t\tright = new_pivot - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = new_pivot + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == k) \n\t\t{\n\t\t\treturn m;\n\t\t} \n\t\telse if (arr[m] < k) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivotIndex = partition(arr, left, right);\n\t\tif (pivotIndex == k - 1) \n\t\t{\n\t\t\treturn arr[pivotIndex];\n\t\t} \n\t\telse if (pivotIndex > k - 1) \n\t\t{\n\t\t\tright = pivotIndex - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = pivotIndex + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tif(k > n)\n\t{\n\t\treturn -1;\n\t}\n\t\n\tlong[] left = new long[n];\n\tlong[] right = new long[n];\n\tlong[] equal = new long[n];\n\t\n\tlong l = 0;\n\tlong r = 0;\n\tlong e = 0;\n\t\n\tlong pivot = arr[0];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] < pivot)\n\t\t{\n\t\t\tleft[l] = arr[i];\n\t\t\tl++;\n\t\t}\n\t\telse if(arr[i] > pivot)\n\t\t{\n\t\t\tright[r] = arr[i];\n\t\t\tr++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tequal[e] = arr[i];\n\t\t\te++;\n\t\t}\n\t}\n\t\n\tif(k <= l)\n\t{\n\t\treturn kth_element(left, k);\n\t}\n\telse if(k > l + e)\n\t{\n\t\treturn kth_element(right, k - l - e);\n\t}\n\telse\n\t{\n\t\treturn equal[0];\n\t}\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tlong pivot = temp[0];\n\tlong[] left = new long[temp.length];\n\tlong[] right = new long[temp.length];\n\tlong left_index = 0;\n\tlong right_index = 0;\n\tfor (long i = 1; i < temp.length; i++)\n\t{\n\t\tif (temp[i] < pivot)\n\t\t{\n\t\t\tleft[left_index] = temp[i];\n\t\t\tleft_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright[right_index] = temp[i];\n\t\t\tright_index++;\n\t\t}\n\t}\n\t\n\tif (k <= left_index)\n\t{\n\t\treturn kth_element(left, k);\n\t}\n\telse if (k == left_index + 1)\n\t{\n\t\treturn pivot;\n\t}\n\telse\n\t{\n\t\treturn kth_element(right, k - left_index - 1);\n\t}\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < arr[m]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > arr[m]) \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (l <= j && k <= j - l + 1) \n\t\t{\n\t\t\tr = j;\n\t\t}\n\t\telse if (i <= r && k > i - l + 1) \n\t\t{\n\t\t\tk -= i - l + 1;\n\t\t\tl = i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn arr[m];\n\t\t}\n\t}\n\treturn arr[l];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\ttemp = arr;\n\tsort(temp);\n\treturn temp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n    return arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\t\n\twhile (left <= right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tlong mid_val = arr[mid];\n\t\t\n\t\tlong left_count = 0;\n\t\tlong right_count = 0;\n\t\t\n\t\tforeach(long i; 0 .. n)\n\t\t{\n\t\t\tif (arr[i] < mid_val)\n\t\t\t{\n\t\t\t\tleft_count++;\n\t\t\t}\n\t\t\telse if (arr[i] > mid_val)\n\t\t\t{\n\t\t\t\tright_count++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (left_count + 1 == k)\n\t\t{\n\t\t\treturn mid_val;\n\t\t}\n\t\telse if (left_count >= k)\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t\tk -= left_count + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// Sort the array\n\tarr.sort();\n\t\n\t// Return the kth element\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tint left = 0;\n\tint right = arr.length - 1;\n\twhile (left < right)\n\t{\n\t\tint pivot = left;\n\t\tint i = left;\n\t\tint j = right;\n\t\twhile (i < j)\n\t\t{\n\t\t\twhile (i < j && temp[i] <= temp[pivot])\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (i < j && temp[j] >= temp[pivot])\n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i < j)\n\t\t\t{\n\t\t\t\tlong t = temp[i];\n\t\t\t\ttemp[i] = temp[j];\n\t\t\t\ttemp[j] = t;\n\t\t\t}\n\t\t}\n\t\tlong t = temp[pivot];\n\t\ttemp[pivot] = temp[j];\n\t\ttemp[j] = t;\n\t\tif (j == k - 1)\n\t\t{\n\t\t\treturn temp[j];\n\t\t}\n\t\telse if (j < k - 1)\n\t\t{\n\t\t\tleft = j + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = j - 1;\n\t\t}\n\t}\n\treturn temp[left];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivotIndex = (left + right) / 2;\n\t\tlong newPivotIndex = partition(arr, left, right, pivotIndex);\n\t\tif (newPivotIndex == k - 1) \n\t\t{\n\t\t\treturn arr[newPivotIndex];\n\t\t} \n\t\telse if (newPivotIndex > k - 1) \n\t\t{\n\t\t\tright = newPivotIndex - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = newPivotIndex + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong[] arr2 = new long[n];\n\tlong[] arr3 = new long[n];\n\tlong[] arr4 = new long[n];\n\tlong[] arr5 = new long[n];\n\tlong[] arr6 = new long[n];\n\tlong[] arr7 = new long[n];\n\tlong[] arr8 = new long[n];\n\tlong[] arr9 = new long[n];\n\tlong[] arr10 = new long[n];\n\tlong[] arr11 = new long[n];\n\tlong[] arr12 = new long[n];\n\tlong[] arr13 = new long[n];\n\tlong[] arr14 = new long[n];\n\tlong[] arr15 = new long[n];\n\tlong[] arr16 = new long[n];\n\tlong[] arr17 = new long[n];\n\tlong[] arr18 = new long[n];\n\tlong[] arr19 = new long[n];\n\tlong[] arr20 = new long[n];\n\tlong[] arr21 = new long[n];\n\tlong[] arr22 = new long[n];\n\tlong[] arr23 = new long[n];\n\tlong[] arr24 = new long[n];\n\tlong[] arr25 = new long[n];\n\tlong[] arr26 = new long[n];\n\tlong[] arr27 = new long[n];\n\tlong[] arr28 = new long[n];\n\tlong[] arr29 = new long[n];\n\tlong[] arr30 = new long[n];\n\tlong[] arr31 = new long[n];\n\tlong[] arr32 = new long[n];\n\tlong[] arr33 = new long[n];\n\tlong[] arr34 = new long[n];\n\tlong[] arr35 = new long[n];\n\tlong[] arr36 = new long[n];\n\tlong[] arr37 = new long[n];\n\tlong[] arr38 = new long[n];\n\tlong[] arr39 = new long[n];\n\tlong[] arr40 = new long[n];\n\tlong[] arr41 = new long[n];\n\tlong[] arr42 = new long[n];\n\tlong[] arr43 = new long",
    "{\n\t// sort the array\n\tsort(arr);\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == k)\n\t\t\treturn m;\n\t\telse if (arr[m] > k)\n\t\t\tr = m - 1;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong pivot = arr[m];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < pivot)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > pivot)\n\t\t\t\tj--;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (l <= k - 1 && k - 1 <= j)\n\t\t\tr = j;\n\t\telse if (i <= k - 1 && k - 1 <= r)\n\t\t\tl = i;\n\t\telse\n\t\t\treturn arr[k - 1];\n\t}\n\treturn -1;\n}",
    "{\n\tint n = arr.length;\n\tint pivot = arr[rand(0, n-1)];\n\tlong[] left = new long[n];\n\tlong[] right = new long[n];\n\tint l = 0;\n\tint r = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < pivot) \n\t\t{\n\t\t\tleft[l] = arr[i];\n\t\t\tl++;\n\t\t}\n\t\telse if (arr[i] > pivot) \n\t\t{\n\t\t\tright[r] = arr[i];\n\t\t\tr++;\n\t\t}\n\t}\n\tif (k <= l) \n\t{\n\t\treturn kth_element(left, k);\n\t}\n\telse if (k > n - r) \n\t{\n\t\treturn kth_element(right, k - (n - r));\n\t}\n\treturn pivot;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn -1;\n\t\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\t\n\twhile (left <= right)\n\t{\n\t\tlong pivot = left + (right - left) / 2;\n\t\tlong pivot_rank = 0;\n\t\t\n\t\tfor (long i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (arr[i] < arr[pivot])\n\t\t\t\tpivot_rank++;\n\t\t}\n\t\t\n\t\tif (pivot_rank == k - 1)\n\t\t\treturn arr[pivot];\n\t\telse if (pivot_rank > k - 1)\n\t\t\tright = pivot - 1;\n\t\telse\n\t\t\tleft = pivot + 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong pivot;\n\twhile (true) \n\t{\n\t\tpivot = left + (right - left) / 2;\n\t\tlong pivot_rank = 0;\n\t\tfor (long i = 0; i < n; i++) \n\t\t{\n\t\t\tif (arr[i] < arr[pivot]) \n\t\t\t{\n\t\t\t\tpivot_rank++;\n\t\t\t}\n\t\t}\n\t\tif (pivot_rank == k - 1) \n\t\t{\n\t\t\treturn arr[pivot];\n\t\t}\n\t\telse if (pivot_rank > k - 1) \n\t\t{\n\t\t\tright = pivot - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{ \n\t// sort the array \n\tsort(arr); \n\t\n\t// return the kth element \n\treturn arr[k - 1]; \n} ",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] sorted = arr.dup;\n\tsorted.sort;\n\treturn sorted[k - 1];\n}",
    "{\n\tlong[] sorted = arr.dup;\n\tsorted.sort;\n\treturn sorted[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\ttemp = arr.dup;\n\ttemp.sort;\n\treturn temp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tsort(arr);\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong pos = partition(arr, l, r, m);\n\t\tif (pos == k - 1) \n\t\t{\n\t\t\treturn arr[pos];\n\t\t} \n\t\telse if (pos > k - 1) \n\t\t{\n\t\t\tr = pos - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = pos + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// Sort the array\n\tarr.sort();\n\t\n\t// Return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn -1;\n\t\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\t\n\twhile (left < right)\n\t{\n\t\tlong pivot = arr[(left + right) / 2];\n\t\tlong i = left;\n\t\tlong j = right;\n\t\t\n\t\twhile (i <= j)\n\t\t{\n\t\t\twhile (arr[i] < pivot)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > pivot)\n\t\t\t\tj--;\n\t\t\t\n\t\t\tif (i <= j)\n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (left < j && k <= j)\n\t\t\tright = j;\n\t\telse if (i < right && k >= i)\n\t\t\tleft = i;\n\t\telse\n\t\t\tbreak;\n\t}\n\t\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tif (k > n)\n\t\treturn -1;\n\tlong pivot = arr[0];\n\tlong left = 1;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\twhile (left <= right && arr[left] < pivot)\n\t\t\tleft++;\n\t\twhile (left <= right && arr[right] > pivot)\n\t\t\tright--;\n\t\tif (left <= right) \n\t\t{\n\t\t\tlong temp = arr[left];\n\t\t\tarr[left] = arr[right];\n\t\t\tarr[right] = temp;\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t}\n\tlong temp = arr[0];\n\tarr[0] = arr[right];\n\tarr[right] = temp;\n\tif (right == k - 1)\n\t\treturn arr[right];\n\telse if (right > k - 1)\n\t\treturn kth_element(arr[0 .. right], k);\n\telse\n\t\treturn kth_element(arr[right + 1 .. n], k - right - 1);\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\t\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tlong pos = partition(arr, l, r, m);\n\t\t\n\t\tif (pos == k - 1)\n\t\t\treturn arr[pos];\n\t\telse if (pos > k - 1)\n\t\t\tr = pos - 1;\n\t\telse\n\t\t\tl = pos + 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0, r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nlong partition(long[] arr, long l, long r) \n{\n\tlong x = arr[r];\n\tlong i = l - 1;\n\tfor (long j = l; j <= r - 1; j++) \n\t{\n\t\tif (arr[j] <= x) \n\t\t{\n\t\t\ti++;\n\t\t\tswap(arr, i, j);\n\t\t}\n\t}\n\tswap(arr, i + 1, r);\n\treturn i + 1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong pivot = 0;\n\tlong pivot_index = 0;\n\twhile (left < right)\n\t{\n\t\tpivot = arr[left];\n\t\tpivot_index = left;\n\t\tfor (long i = left + 1; i <= right; i++)\n\t\t{\n\t\t\tif (arr[i] < pivot)\n\t\t\t{\n\t\t\t\tpivot_index++;\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[pivot_index];\n\t\t\t\tarr[pivot_index] = temp;\n\t\t\t}\n\t\t}\n\t\tlong temp = arr[pivot_index];\n\t\tarr[pivot_index] = arr[left];\n\t\tarr[left] = temp;\n\t\tif (pivot_index + 1 == k)\n\t\t{\n\t\t\treturn arr[pivot_index];\n\t\t}\n\t\telse if (pivot_index + 1 < k)\n\t\t{\n\t\t\tleft = pivot_index + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = pivot_index - 1;\n\t\t}\n\t}\n\treturn arr[left];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivotIndex = left + (right - left) / 2;\n\t\tlong pivotNewIndex = partition(arr, left, right, pivotIndex);\n\t\tif (pivotNewIndex == k - 1) \n\t\t{\n\t\t\treturn arr[pivotNewIndex];\n\t\t} \n\t\telse if (pivotNewIndex > k - 1) \n\t\t{\n\t\t\tright = pivotNewIndex - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = pivotNewIndex + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong temp;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (true) \n\t{\n\t\tlong pivotIndex = left + cast(long)(rand() * (right - left + 1) / (RAND_MAX + 1.0));\n\t\tlong pivotNewIndex = partition(arr, left, right, pivotIndex);\n\t\tlong pivotDist = pivotNewIndex - left + 1;\n\t\tif (pivotDist == k) \n\t\t{\n\t\t\treturn arr[pivotNewIndex];\n\t\t} \n\t\telse if (k < pivotDist) \n\t\t{\n\t\t\tright = pivotNewIndex - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk -= pivotDist;\n\t\t\tleft = pivotNewIndex + 1;\n\t\t}\n\t}\n}\nlong partition(long[] arr, long left, long right, long pivotIndex) \n{\n\tlong pivotValue = arr[pivotIndex];\n\tswap(arr, pivotIndex, right);\n\tlong storeIndex = left;\n\tforeach (i; left..right) \n\t{\n\t\tif (arr[i] < pivotValue) \n\t\t{\n\t\t\tswap(arr, storeIndex, i);\n\t\t\tstoreIndex += 1;\n\t\t}\n\t}\n\tswap(arr, right, storeIndex);\n\treturn storeIndex;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong temp;\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tfor(long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\tlong j = n-1;\n\twhile(i < j)\n\t{\n\t\tlong p = partition(arr, i, j);\n\t\tif(p == k-1)\n\t\t\treturn arr[p];\n\t\telse if(p > k-1)\n\t\t\tj = p-1;\n\t\telse\n\t\t\ti = p+1;\n\t}\n\treturn arr[i];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t}\n\t\tif (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn arr[k - 1];\n}\nlong partition(long[] arr, long l, long r, long m) \n{\n\tlong pivot = arr[m];\n\tlong temp = arr[m];\n\tarr[m] = arr[r];\n\tarr[r] = temp;\n\tlong store_index = l;\n\tfor (long i = l; i < r; i++) \n\t{\n\t\tif (arr[i] < pivot) \n\t\t{\n\t\t\ttemp = arr[i];\n\t\t\tarr[i] = arr[store_index];\n\t\t\tarr[store_index] = temp;\n\t\t\tstore_index++;\n\t\t}\n\t}\n\ttemp = arr[r];\n\tarr[r] = arr[store_index];\n\tarr[store_index] = temp;\n\treturn store_index;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tsort(arr);\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong pivotIndex = left + (right - left) / 2;\n\t\tlong pivotNewIndex = partition(arr, left, right, pivotIndex);\n\t\tif (pivotNewIndex == k - 1) \n\t\t{\n\t\t\treturn arr[pivotNewIndex];\n\t\t} \n\t\telse if (pivotNewIndex > k - 1) \n\t\t{\n\t\t\tright = pivotNewIndex - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = pivotNewIndex + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}"
  ]
}