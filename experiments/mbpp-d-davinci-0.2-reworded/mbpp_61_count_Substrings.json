{
  "name": "mbpp_61_count_Substrings",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate through all substrings \n    for (long i = 0; i < n; i++) \n        for (long j = i + 1; j <= n; j++) \n            if (sumDigits(s[i..j]) == j - i) \n                ans++; \n  \n    return ans; \n} \n  \n// Returns sum of digits in s[i..j] \nlong sumDigits(string s) \n{ \n    long sum = 0; \n    for (long i = 0; i < s.length; i++) \n        sum += s[i] - '0'; \n    return sum; \n} \n  \n// Driver code ",
    "{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} ",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < s.length; i++) \n\t{\n\t\tlong sum = 0;\n\t\tfor (long j = i; j < s.length; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long result = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} ",
    "{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} ",
    "{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting from each index \n    for (long i = 0; i < n; i++) \n    { \n        // Ending at each index \n        for (long j = i; j < n; j++) \n        { \n            // Counting substrings starting \n            // from i and ending at j \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // number of digits in substring \n            // then increase count \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n  \n    return result; \n} ",
    "{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} ",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sum_of_digits(s, i, len)) \n                res++; \n  \n    return res; \n} ",
    "{\n\tint n = s.length;\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n\tlong count = 0; \n\tint n = s.length; \n\tfor (int i = 0; i < n; i++) { \n\t\tint sum = 0; \n\t\tfor (int j = i; j < n; j++) { \n\t\t\tsum += (s[j] - '0'); \n\t\t\tif (sum == (j - i + 1)) \n\t\t\t\tcount++; \n\t\t} \n\t} \n\treturn count; \n} ",
    "{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate through all substrings of length 1 \n    for (long i = 0; i < n; i++) \n        if (s[i] - '0' == 1) \n            ans++; \n  \n    // Iterate through all substrings of length 2 \n    for (long i = 0; i < n - 1; i++) { \n        long sum = 0; \n        sum = (s[i] - '0') + (s[i + 1] - '0'); \n        if (sum == 2) \n            ans++; \n    } \n  \n    // Iterate through all substrings of length 3 and more \n    for (long len = 3; len <= n; len++) { \n        for (long i = 0; i < n - len + 1; i++) { \n            long sum = 0; \n            for (long j = i; j < i + len; j++) \n                sum += (s[j] - '0'); \n            if (sum == len) \n                ans++; \n        } \n    } \n    return ans; \n} \n  \n// Driver code ",
    "{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking the sum of digits \n            // from index 'i' to 'j' \n            // is equal to length of \n            // substring or not \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n  \n    return result; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}