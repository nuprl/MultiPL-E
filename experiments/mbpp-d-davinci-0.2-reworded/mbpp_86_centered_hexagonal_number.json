{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find nth centered hexagonal number.\n\t\n*/\nlong centered_hexagonal_number(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = centered_hexagonal_number;\n\n    assert(candidate(10L) == 271L);\n    assert(candidate(2L) == 7L);\n    assert(candidate(9L) == 217L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n*(2*n-1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}",
    "{\n\treturn n * (2 * n - 1);\n}"
  ]
}