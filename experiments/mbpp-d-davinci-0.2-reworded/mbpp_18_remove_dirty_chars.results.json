{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmptbdpczei.d(10): Error: `string` is used as a type\n/tmp/tmptbdpczei.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbdpczei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp_bdntim3.d(10): Error: `string` is used as a type\n/tmp/tmp_bdntim3.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bdntim3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tint[] chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchars[cast(int)c] = 1;\n\t}\n\tforeach(char c; string)\n\t{\n\t\tif(chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp_2zn6ag7.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2zn6ag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpcngsjz0r.d(10): Error: `string` is used as a type\n/tmp/tmpcngsjz0r.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcngsjz0r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpwjarc6wv.d(10): Error: `string` is used as a type\n/tmp/tmpwjarc6wv.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjarc6wv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tint[] char_set = new int[256];\n\tint string_length = string.length;\n\tint second_string_length = second_string.length;\n\t\n\tfor (int i = 0; i < second_string_length; i++)\n\t{\n\t\tchar_set[second_string[i]] = 1;\n\t}\n\t\n\tfor (int i = 0; i < string_length; i++)\n\t{\n\t\tif (char_set[string[i]] == 0)\n\t\t{\n\t\t\tresult ~= string[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpw7_v8nyt.d(10): Error: `string` is used as a type\n/tmp/tmpw7_v8nyt.d(12): Error: cannot implicitly convert expression `string.length` of type `ulong` to `int`\n/tmp/tmpw7_v8nyt.d(13): Error: cannot implicitly convert expression `second_string.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw7_v8nyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tauto result = string.dup;\n\tforeach(char c; second_string)\n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpcogsayl0.d(13): Error: no property `replace` for type `char[]`\n/tmp/tmpcogsayl0.d(15): Error: cannot implicitly convert expression `result` of type `char[]` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcogsayl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmptyym4pvw.d(10): Error: `string` is used as a type\n/tmp/tmptyym4pvw.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyym4pvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach (char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpjg93803x.d(10): Error: `string` is used as a type\n/tmp/tmpjg93803x.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjg93803x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpyrv6fdjf.d(10): Error: `string` is used as a type\n/tmp/tmpyrv6fdjf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrv6fdjf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp2pbqxw_4.d(10): Error: `string` is used as a type\n/tmp/tmp2pbqxw_4.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pbqxw_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1 && dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpjaeockt4.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjaeockt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpyntra1nb.d(10): Error: `string` is used as a type\n/tmp/tmpyntra1nb.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyntra1nb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] != 1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpfg3csifp.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfg3csifp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpwjarc6wv.d(10): Error: `string` is used as a type\n/tmp/tmpwjarc6wv.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjarc6wv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp92ow5rll.d(10): Error: `string` is used as a type\n/tmp/tmp92ow5rll.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ow5rll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpqoo154_k.d(10): Error: `string` is used as a type\n/tmp/tmpqoo154_k.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqoo154_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpn2vcsg6n.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2vcsg6n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpuvpelvzd.d(10): Error: `string` is used as a type\n/tmp/tmpuvpelvzd.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvpelvzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpfg7s2svj.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfg7s2svj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpyrv6fdjf.d(10): Error: `string` is used as a type\n/tmp/tmpyrv6fdjf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrv6fdjf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpt_i3t95x.d(10): Error: `string` is used as a type\n/tmp/tmpt_i3t95x.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_i3t95x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpxbctt8m8.d(10): Error: `string` is used as a type\n/tmp/tmpxbctt8m8.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbctt8m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach (char c; string)\n\t{\n\t\tif (second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpuog6kgcj.d(10): Error: `string` is used as a type\n/tmp/tmpuog6kgcj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuog6kgcj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmplleuo_jh.d(10): Error: `string` is used as a type\n/tmp/tmplleuo_jh.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplleuo_jh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpq0qh9ppg.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0qh9ppg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpwhkco83_.d(10): Error: `string` is used as a type\n/tmp/tmpwhkco83_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhkco83_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(ch; string)\n\t{\n\t\tif(second_string.find(ch) == -1)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpprs045it.d(10): Error: `string` is used as a type\n/tmp/tmpprs045it.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprs045it.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpti9vss5q.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti9vss5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpjdhv4wjc.d(10): Error: `string` is used as a type\n/tmp/tmpjdhv4wjc.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdhv4wjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpyrv6fdjf.d(10): Error: `string` is used as a type\n/tmp/tmpyrv6fdjf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrv6fdjf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp3fzi1f8s.d(10): Error: `string` is used as a type\n/tmp/tmp3fzi1f8s.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fzi1f8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_set[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_set[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpt3dpn5e_.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3dpn5e_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpcv2y4kk1.d(10): Error: `string` is used as a type\n/tmp/tmpcv2y4kk1.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcv2y4kk1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp5nh97piz.d(10): Error: `string` is used as a type\n/tmp/tmp5nh97piz.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nh97piz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpwhkco83_.d(10): Error: `string` is used as a type\n/tmp/tmpwhkco83_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhkco83_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpqpm851qg.d(10): Error: `string` is used as a type\n/tmp/tmpqpm851qg.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpm851qg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp_bdntim3.d(10): Error: `string` is used as a type\n/tmp/tmp_bdntim3.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bdntim3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmptyym4pvw.d(10): Error: `string` is used as a type\n/tmp/tmptyym4pvw.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyym4pvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[c] == 1 && dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp8vlhhpyn.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vlhhpyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpl6os9k95.d(10): Error: `string` is used as a type\n/tmp/tmpl6os9k95.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6os9k95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpjdhv4wjc.d(10): Error: `string` is used as a type\n/tmp/tmpjdhv4wjc.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdhv4wjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp40rgvhic.d(10): Error: `string` is used as a type\n/tmp/tmp40rgvhic.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40rgvhic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(dchar c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpx1v4k20m.d(10): Error: `string` is used as a type\n/tmp/tmpx1v4k20m.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1v4k20m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr_x0ob5e.d(10): Error: `string` is used as a type\n/tmp/tmpr_x0ob5e.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_x0ob5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpwhkco83_.d(10): Error: `string` is used as a type\n/tmp/tmpwhkco83_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhkco83_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpyrv6fdjf.d(10): Error: `string` is used as a type\n/tmp/tmpyrv6fdjf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrv6fdjf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpvdujpd8i.d(10): Error: `string` is used as a type\n/tmp/tmpvdujpd8i.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdujpd8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) {\n\t\tif (second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp4t0_2g7p.d(10): Error: `string` is used as a type\n/tmp/tmp4t0_2g7p.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4t0_2g7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpvdujpd8i.d(10): Error: `string` is used as a type\n/tmp/tmpvdujpd8i.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdujpd8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpg30upz8s.d(10): Error: `string` is used as a type\n/tmp/tmpg30upz8s.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg30upz8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tchar_set[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(char_set[c] != 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp1xmg1ls5.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xmg1ls5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp1gedi9kf.d(10): Error: `string` is used as a type\n/tmp/tmp1gedi9kf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gedi9kf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp1gedi9kf.d(10): Error: `string` is used as a type\n/tmp/tmp1gedi9kf.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gedi9kf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp40rgvhic.d(10): Error: `string` is used as a type\n/tmp/tmp40rgvhic.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40rgvhic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp92ow5rll.d(10): Error: `string` is used as a type\n/tmp/tmp92ow5rll.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ow5rll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(ch; string)\n\t{\n\t\tif(second_string.find(ch) == -1)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpprs045it.d(10): Error: `string` is used as a type\n/tmp/tmpprs045it.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprs045it.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tauto result = string.dup;\n\tforeach(char c; second_string)\n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpcogsayl0.d(13): Error: no property `replace` for type `char[]`\n/tmp/tmpcogsayl0.d(15): Error: cannot implicitly convert expression `result` of type `char[]` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcogsayl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_count = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_count[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpctb0j1lq.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctb0j1lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpr8y41z8n.d(10): Error: `string` is used as a type\n/tmp/tmpr8y41z8n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8y41z8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tforeach(char c; string)\n\t\tstring_chars[c] = 1;\n\t\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[c] == 1 && dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp_nxnqjcc.d(19): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nxnqjcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpntmn0wmv.d(10): Error: `string` is used as a type\n/tmp/tmpntmn0wmv.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpntmn0wmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpqpm851qg.d(10): Error: `string` is used as a type\n/tmp/tmpqpm851qg.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpm851qg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t\tdirty_chars[cast(int)c] = 1;\n\t\n\tstring result;\n\tforeach(char c; string)\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t\tresult ~= c;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpjk0251e4.d(14): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk0251e4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring ret;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tret ~= c;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmppp9mkvhi.d(10): Error: `string` is used as a type\n/tmp/tmppp9mkvhi.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppp9mkvhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp4lmlujw8.d(10): Error: `string` is used as a type\n/tmp/tmp4lmlujw8.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lmlujw8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp40rgvhic.d(10): Error: `string` is used as a type\n/tmp/tmp40rgvhic.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40rgvhic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach (char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpjg93803x.d(10): Error: `string` is used as a type\n/tmp/tmpjg93803x.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjg93803x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tbool[] dirty_chars = new bool[256];\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[c] = true;\n\t}\n\tforeach(char c; string)\n\t{\n\t\tif(!dirty_chars[c])\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp6ulb28be.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ulb28be.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmplleuo_jh.d(10): Error: `string` is used as a type\n/tmp/tmplleuo_jh.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplleuo_jh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmp7_uf0bja.d(10): Error: `string` is used as a type\n/tmp/tmp7_uf0bja.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_uf0bja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tauto result = string.dup;\n\tforeach(char c; second_string)\n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpcogsayl0.d(13): Error: no property `replace` for type `char[]`\n/tmp/tmpcogsayl0.d(15): Error: cannot implicitly convert expression `result` of type `char[]` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcogsayl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring clean_string = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tclean_string ~= c;\n\t\t}\n\t}\n\treturn clean_string;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbxvp6p6u.d(10): Error: `string` is used as a type\n/tmp/tmpbxvp6p6u.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxvp6p6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpdiehdky2.d(10): Error: `string` is used as a type\n/tmp/tmpdiehdky2.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdiehdky2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmptle9i_gw.d(10): Error: `string` is used as a type\n/tmp/tmptle9i_gw.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptle9i_gw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring ret;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tret ~= c;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpfcmhha8c.d(10): Error: `string` is used as a type\n/tmp/tmpfcmhha8c.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcmhha8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpmilpphrd.d(10): Error: `string` is used as a type\n/tmp/tmpmilpphrd.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmilpphrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "/tmp/tmpsx_co_2s.d(10): Error: `string` is used as a type\n/tmp/tmpsx_co_2s.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx_co_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmp40rgvhic.d(10): Error: `string` is used as a type\n/tmp/tmp40rgvhic.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40rgvhic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpklft9pjy.d(10): Error: `string` is used as a type\n/tmp/tmpklft9pjy.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklft9pjy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "/tmp/tmpbt7j938_.d(10): Error: `string` is used as a type\n/tmp/tmpbt7j938_.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt7j938_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach (char c; string) {\n\t\tif (second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp3_xua290.d(10): Error: `string` is used as a type\n/tmp/tmp3_xua290.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_xua290.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}