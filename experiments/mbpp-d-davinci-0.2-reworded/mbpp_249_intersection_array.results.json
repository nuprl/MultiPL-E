{
  "name": "mbpp_249_intersection_array",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(n; array_nums1)\n\t{\n\t\tforeach(m; array_nums2)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tintersection_array[index] = n;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpestyqpzl.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpestyqpzl.__unittest_L25_C1() [0x428031]\n??:? void tmpestyqpzl.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tlong[] array_nums1_copy = array_nums1;\n\tlong[] array_nums2_copy = array_nums2;\n\t\n\tforeach(long num; array_nums1_copy)\n\t{\n\t\tforeach(long num2; array_nums2_copy)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tarray_intersection ~= num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tlong[] array_nums1_sorted = array_nums1_copy.sort();\n\tlong[] array_nums2_sorted = array_nums2_copy.sort();\n\t\n\tlong[] array_nums1_sorted_unique = array_nums1_sorted.uniq;\n\tlong[] array_nums2_sorted_unique = array_nums2_sorted.uniq;\n\t\n\tlong[] array_nums1_sorted_unique_copy = array_nums1_sorted_unique.dup;\n\tlong[] array_nums2_sorted_unique_copy = array_nums2_sorted_unique.dup;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted = array_nums1_sorted_unique_copy.sort();\n\tlong[] array_nums2_sorted_unique_copy_sorted = array_nums2_sorted_unique_copy.sort();\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique = array_nums1_sorted_unique_copy_sorted.uniq;\n\tlong[] array_nums2_sorted_unique_copy_sorted_unique = array_nums2_sorted_unique_copy_sorted.uniq;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique_copy = array_nums1_sorted_unique_copy_sorted_unique.dup;\n\tlong[] array_nums2_sorted_unique_copy_sorted_unique_copy = array_nums2_sorted_unique_copy_sorted_unique.dup;\n\t\n\tlong[] array_nums1_sorted_unique_copy_sorted_unique_copy_sorted = array_nums\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpv5j_tcq8.d(33): Error: semicolon expected, not `unittest`\n/tmp/tmpv5j_tcq8.d(33): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5j_tcq8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpq3n_7_0f.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3n_7_0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tsort(array_nums1_copy);\n\tsort(array_nums2_copy);\n\t\n\tforeach(num; array_nums1_copy)\n\t{\n\t\tif(binarySearch(array_nums2_copy, num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp1svycrdw.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp1svycrdw.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp1svycrdw.d(19): Error: undefined identifier `binarySearch`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1svycrdw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] result_final = new long[array_nums1.length];\n\tint count = 0;\n\tint count_final = 0;\n\t\n\tforeach(int i; 0 .. array_nums1.length)\n\t{\n\t\tforeach(int j; 0 .. array_nums2.length)\n\t\t{\n\t\t\tif(array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tresult[count] = array_nums1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(int i; 0 .. result.length)\n\t{\n\t\tif(result[i] != 0)\n\t\t{\n\t\t\tresult_final[count_final] = result[i];\n\t\t\tcount_final++;\n\t\t}\n\t}\n\t\n\treturn result_final;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmppijolsgb.d(15): Error: cannot implicitly convert expression `array_nums1.length` of type `ulong` to `int`\n/tmp/tmppijolsgb.d(27): Error: cannot implicitly convert expression `result.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppijolsgb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp8qxem2hv.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qxem2hv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\tintersection_array_index++;\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpva68hfhk.d(15): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva68hfhk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\tlong[] array_nums1_copy_sorted = array_nums1_copy.dup;\n\tlong[] array_nums2_copy_sorted = array_nums2_copy.dup;\n\tarray_nums1_copy_sorted.sort;\n\tarray_nums2_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique = array_nums1_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique = array_nums2_copy_sorted.dup;\n\tarray_nums1_copy_sorted_unique.unique;\n\tarray_nums2_copy_sorted_unique.unique;\n\tlong[] array_nums1_copy_sorted_unique_copy = array_nums1_copy_sorted_unique.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy = array_nums2_copy_sorted_unique.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted = array_nums1_copy_sorted_unique_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted = array_nums2_copy_sorted_unique_copy.dup;\n\tarray_nums1_copy_sorted_unique_copy_sorted.sort;\n\tarray_nums2_copy_sorted_unique_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique = array_nums1_copy_sorted_unique_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique = array_nums2_copy_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzg014btx.d(29): Error: semicolon expected, not `unittest`\n/tmp/tmpzg014btx.d(29): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzg014btx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tlong[] array_nums4 = new long[array_nums2.length];\n\tlong[] array_nums5 = new long[array_nums1.length];\n\tlong[] array_nums6 = new long[array_nums2.length];\n\tlong[] array_nums7 = new long[array_nums1.length];\n\tlong[] array_nums8 = new long[array_nums2.length];\n\tlong[] array_nums9 = new long[array_nums1.length];\n\tlong[] array_nums10 = new long[array_nums2.length];\n\tlong[] array_nums11 = new long[array_nums1.length];\n\tlong[] array_nums12 = new long[array_nums2.length];\n\tlong[] array_nums13 = new long[array_nums1.length];\n\tlong[] array_nums14 = new long[array_nums2.length];\n\tlong[] array_nums15 = new long[array_nums1.length];\n\tlong[] array_nums16 = new long[array_nums2.length];\n\tlong[] array_nums17 = new long[array_nums1.length];\n\tlong[] array_nums18 = new long[array_nums2.length];\n\tlong[] array_nums19 = new long[array_nums1.length];\n\tlong[] array_nums20 = new long[array_nums2.length];\n\tlong[] array_nums21 = new long[array_nums1.length];\n\tlong[] array_nums22 = new long[array_nums2.length];\n\tlong[] array_nums23 = new long[array_nums1.length];\n\tlong[] array_nums24 = new long[array_nums2.length];\n\tlong[] array_nums25 = new long[array_nums1.length];\n\tlong[] array_nums26 = new long[array_nums2.length];\n\tlong[] array_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp3a_czp_h.d(35): Error: semicolon expected, not `unittest`\n/tmp/tmp3a_czp_h.d(35): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a_czp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzevknmz0.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzevknmz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp9j_b3df4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j_b3df4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpe09tcwbh.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe09tcwbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_nums_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp891_pna8.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp891_pna8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tarray_nums1_copy.sort;\n\tarray_nums2_copy.sort;\n\t\n\tlong[] array_nums1_copy_unique = array_nums1_copy.unique;\n\tlong[] array_nums2_copy_unique = array_nums2_copy.unique;\n\t\n\tlong[] array_nums1_copy_unique_copy = array_nums1_copy_unique.dup;\n\tlong[] array_nums2_copy_unique_copy = array_nums2_copy_unique.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy = array_nums1_copy_unique_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy = array_nums2_copy_unique_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy = array_nums1_copy_unique_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy = array_nums2_copy_unique_copy_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy_copy = array_nums1_copy_unique_copy_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy_copy = array_nums2_copy_unique_copy_copy_copy.dup;\n\t\n\tlong[] array_nums1_copy_unique_copy_copy_copy_copy_copy = array_nums1_copy_unique_copy_copy_copy_copy.dup;\n\tlong[] array_nums2_copy_unique_copy_copy_copy_copy_copy = array_nums2_copy_unique_copy_copy_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpbefhmp5a.d(34): Error: semicolon expected, not `unittest`\n/tmp/tmpbefhmp5a.d(34): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbefhmp5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmphoo95niq.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoo95niq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = [];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpmntixb7s.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmntixb7s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection ~= num;\n\t\t}\n\t}\n\treturn intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpymd_a_3_.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymd_a_3_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn intersection[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmplitacds5.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplitacds5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx6b10ibs.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6b10ibs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums_intersection;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums_intersection ~= num;\n\t\t}\n\t}\n\treturn array_nums_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpdbnig8r1.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbnig8r1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tresult ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp6hr7y82q.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hr7y82q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpot1sbawu.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot1sbawu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] array_nums1_sorted = array_nums1.dup;\n\tlong[] array_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\t\n\twhile (i < array_nums1_sorted.length && j < array_nums2_sorted.length) \n\t{\n\t\tif (array_nums1_sorted[i] < array_nums2_sorted[j]) \n\t\t{\n\t\t\ti++;\n\t\t} \n\t\telse if (array_nums1_sorted[i] > array_nums2_sorted[j]) \n\t\t{\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[k] = array_nums1_sorted[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\treturn result[0..k];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpw71fslrw.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpw71fslrw.d(15): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw71fslrw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < array_nums1.length; i++) \n\t{\n\t\tfor (int j = 0; j < array_nums2.length; j++) \n\t\t{\n\t\t\tif (array_nums1[i] == array_nums2[j]) \n\t\t\t{\n\t\t\t\tresult[count] = array_nums1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpgm9rnc5s.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgm9rnc5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp8r7m194h.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r7m194h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzevknmz0.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzevknmz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums_intersection;\n\tlong[] array_nums_intersection_temp;\n\tlong[] array_nums_temp;\n\tlong[] array_nums_temp2;\n\tlong[] array_nums_temp3;\n\tlong[] array_nums_temp4;\n\tlong[] array_nums_temp5;\n\tlong[] array_nums_temp6;\n\tlong[] array_nums_temp7;\n\tlong[] array_nums_temp8;\n\tlong[] array_nums_temp9;\n\tlong[] array_nums_temp10;\n\tlong[] array_nums_temp11;\n\tlong[] array_nums_temp12;\n\tlong[] array_nums_temp13;\n\tlong[] array_nums_temp14;\n\tlong[] array_nums_temp15;\n\tlong[] array_nums_temp16;\n\tlong[] array_nums_temp17;\n\tlong[] array_nums_temp18;\n\tlong[] array_nums_temp19;\n\tlong[] array_nums_temp20;\n\tlong[] array_nums_temp21;\n\tlong[] array_nums_temp22;\n\tlong[] array_nums_temp23;\n\tlong[] array_nums_temp24;\n\tlong[] array_nums_temp25;\n\tlong[] array_nums_temp26;\n\tlong[] array_nums_temp27;\n\tlong[] array_nums_temp28;\n\tlong[] array_nums_temp29;\n\tlong[] array_nums_temp30;\n\tlong[] array_nums_temp31;\n\tlong[] array_nums_temp32;\n\tlong[] array_nums_temp33;\n\tlong[] array_nums_temp34;\n\tlong[] array_nums_temp35;\n\tlong[] array_nums_temp36;\n\tlong[] array_nums_temp37;\n\tlong[] array_nums_temp38;\n\tlong[] array_nums_temp39;\n\tlong[] array_nums_temp40;\n\tlong[] array\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmptwe0pom_.d(53): Error: semicolon expected, not `unittest`\n/tmp/tmptwe0pom_.d(53): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwe0pom_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tlong[] array_intersection_final = new long[array_nums1.length];\n\tint count = 0;\n\tint count_final = 0;\n\t\n\tforeach(i; 0 .. array_nums1.length)\n\t{\n\t\tforeach(j; 0 .. array_nums2.length)\n\t\t{\n\t\t\tif(array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tarray_intersection[count] = array_nums1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. array_intersection.length)\n\t{\n\t\tif(array_intersection[i] != 0)\n\t\t{\n\t\t\tarray_intersection_final[count_final] = array_intersection[i];\n\t\t\tcount_final++;\n\t\t}\n\t}\n\t\n\treturn array_intersection_final;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzezv2jq9.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428695]\n??:? void tmpzezv2jq9.__unittest_L38_C1() [0x428165]\n??:? void tmpzezv2jq9.__modtest() [0x428418]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c74f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43086d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c525]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums_intersection ~= num;\n\t\t}\n\t}\n\treturn array_nums_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpva7gxltc.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva7gxltc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmponazxx1y.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponazxx1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tlong[] array_intersection_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_intersection_final_final_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp964nzpqy.d(25): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp964nzpqy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_result ~= num;\n\t\t}\n\t}\n\t\n\treturn array_result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx32iee05.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx32iee05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < array_nums1.length && j < array_nums2.length)\n\t{\n\t\tif (array_nums1[i] < array_nums2[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (array_nums1[i] > array_nums2[j])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tintersection_array[k] = array_nums1[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t}\n\treturn intersection_array[0..k];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp_280xx0w.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_280xx0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzevknmz0.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzevknmz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn intersection_array[0..i];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp68jtgyis.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68jtgyis.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp_280xx0w.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_280xx0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpkcqtmkab.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkcqtmkab.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpot1sbawu.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot1sbawu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpl3ba47mi.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3ba47mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums2_copy = array_nums2.dup;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums1_copy_sorted = array_nums1_copy.dup;\n\tlong[] array_nums2_copy_sorted = array_nums2_copy.dup;\n\tarray_nums1_copy_sorted.sort;\n\tarray_nums2_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique = array_nums1_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique = array_nums2_copy_sorted.dup;\n\tarray_nums1_copy_sorted_unique.unique;\n\tarray_nums2_copy_sorted_unique.unique;\n\tlong[] array_nums1_copy_sorted_unique_copy = array_nums1_copy_sorted_unique.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy = array_nums2_copy_sorted_unique.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted = array_nums1_copy_sorted_unique_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted = array_nums2_copy_sorted_unique_copy.dup;\n\tarray_nums1_copy_sorted_unique_copy_sorted.sort;\n\tarray_nums2_copy_sorted_unique_copy_sorted.sort;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique = array_nums1_copy_sorted_unique_copy_sorted.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique = array_nums2_copy_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpwp708xv3.d(29): Error: semicolon expected, not `unittest`\n/tmp/tmpwp708xv3.d(29): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp708xv3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tresult ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(i; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp982z3i_j.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp982z3i_j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpe09tcwbh.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe09tcwbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tsort(array_nums1_copy);\n\tsort(array_nums2_copy);\n\t\n\tlong[] array_nums1_copy_unique = array_nums1_copy.dup;\n\tlong[] array_nums2_copy_unique = array_nums2_copy.dup;\n\t\n\tarray_nums1_copy_unique = array_nums1_copy_unique.unique;\n\tarray_nums2_copy_unique = array_nums2_copy_unique.unique;\n\t\n\tforeach(long num; array_nums1_copy_unique)\n\t{\n\t\tif(array_nums2_copy_unique.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpdvd99dt6.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdvd99dt6.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdvd99dt6.d(20): Error: no property `unique` for type `long[]`\n/tmp/tmpdvd99dt6.d(21): Error: no property `unique` for type `long[]`\n/tmp/tmpdvd99dt6.d(25): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvd99dt6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tsort(array_nums1_copy);\n\tsort(array_nums2_copy);\n\t\n\tforeach(num; array_nums1_copy)\n\t{\n\t\tif(binarySearch(array_nums2_copy, num) != -1)\n\t\t\tresult ~= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpt37c26z_.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpt37c26z_.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpt37c26z_.d(19): Error: undefined identifier `binarySearch`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt37c26z_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\tintersection_array_index++;\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpo7l83alf.d(15): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7l83alf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy;\n\tlong[] array_nums2_copy;\n\tlong[] array_nums1_copy_sorted;\n\tlong[] array_nums2_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpwp8oly7x.d(33): Error: semicolon expected, not `unittest`\n/tmp/tmpwp8oly7x.d(33): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8oly7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp1_jaatxc.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_jaatxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\t\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx6b10ibs.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6b10ibs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result;\n\tlong[] array_temp;\n\tlong[] array_temp2;\n\tlong[] array_temp3;\n\tlong[] array_temp4;\n\tlong[] array_temp5;\n\tlong[] array_temp6;\n\tlong[] array_temp7;\n\tlong[] array_temp8;\n\tlong[] array_temp9;\n\tlong[] array_temp10;\n\tlong[] array_temp11;\n\tlong[] array_temp12;\n\tlong[] array_temp13;\n\tlong[] array_temp14;\n\tlong[] array_temp15;\n\tlong[] array_temp16;\n\tlong[] array_temp17;\n\tlong[] array_temp18;\n\tlong[] array_temp19;\n\tlong[] array_temp20;\n\tlong[] array_temp21;\n\tlong[] array_temp22;\n\tlong[] array_temp23;\n\tlong[] array_temp24;\n\tlong[] array_temp25;\n\tlong[] array_temp26;\n\tlong[] array_temp27;\n\tlong[] array_temp28;\n\tlong[] array_temp29;\n\tlong[] array_temp30;\n\tlong[] array_temp31;\n\tlong[] array_temp32;\n\tlong[] array_temp33;\n\tlong[] array_temp34;\n\tlong[] array_temp35;\n\tlong[] array_temp36;\n\tlong[] array_temp37;\n\tlong[] array_temp38;\n\tlong[] array_temp39;\n\tlong[] array_temp40;\n\tlong[] array_temp41;\n\tlong[] array_temp42;\n\tlong[] array_temp43;\n\tlong[] array_temp44;\n\tlong[] array_temp45;\n\tlong[] array_temp46;\n\tlong[] array_temp47;\n\tlong[] array_temp48;\n\tlong[] array_temp49;\n\tlong[] array_temp50;\n\tlong[] array_temp51;\n\tlong[] array_temp52;\n\tlong[] array_temp53;\n\tlong[] array_temp54;\n\tlong[] array_temp55;\n\tlong[] array_temp56\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpsx30gj33.d(67): Error: semicolon expected, not `unittest`\n/tmp/tmpsx30gj33.d(67): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx30gj33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpt8xwt6qi.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt8xwt6qi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn array_intersection[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpeuhjq2wl.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeuhjq2wl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] array_nums2_copy = array_nums2.dup;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums1_copy_sorted = array_nums1_copy.sort;\n\tlong[] array_nums2_copy_sorted = array_nums2_copy.sort;\n\tlong[] array_nums1_copy_sorted_unique = array_nums1_copy_sorted.unique;\n\tlong[] array_nums2_copy_sorted_unique = array_nums2_copy_sorted.unique;\n\tlong[] array_nums1_copy_sorted_unique_copy = array_nums1_copy_sorted_unique.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy = array_nums2_copy_sorted_unique.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_copy = array_nums1_copy_sorted_unique_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_copy = array_nums2_copy_sorted_unique_copy.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_copy_copy = array_nums1_copy_sorted_unique_copy_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_copy_copy = array_nums2_copy_sorted_unique_copy_copy.dup;\n\tlong[] array_nums1_copy_sorted_unique_copy_copy_copy_copy = array_nums1_copy_sorted_unique_copy_copy_copy.dup;\n\tlong[] array_nums2_copy_sorted_unique_copy_copy_copy_copy = array_nums2_copy_sorted_unique_copy_copy_copy.dup;\n\tlong[] array_nums1_copy_s\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmplmhm8lu1.d(26): Error: semicolon expected, not `unittest`\n/tmp/tmplmhm8lu1.d(26): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmhm8lu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpsan3whct.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsan3whct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpfjv2jf35.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjv2jf35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(n in array_nums2)\n\t\t{\n\t\t\tintersection_array ~= n;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpau3o90jy.d(13): Error: incompatible types for `(n) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau3o90jy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tarray_nums1_copy.sort;\n\tarray_nums2_copy.sort;\n\t\n\tresult = array_nums1_copy.intersect(array_nums2_copy);\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpz16j3efa.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpz16j3efa.d(15): Error: no property `sort` for type `long[]`\n/tmp/tmpz16j3efa.d(17): Error: no property `intersect` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz16j3efa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\tintersection_array_index++;\n\t\t}\n\t}\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpzisi8sft.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzisi8sft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(n in array_nums2)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpqb2xb_tu.d(13): Error: incompatible types for `(n) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqb2xb_tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_result ~= num;\n\t\t}\n\t}\n\t\n\treturn array_result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpudcf43o_.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudcf43o_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp6hr7y82q.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hr7y82q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_sorted = array_nums1.dup;\n\tlong[] array_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tlong[] array_nums1_sorted_uniq = array_nums1_sorted.uniq;\n\tlong[] array_nums2_sorted_uniq = array_nums2_sorted.uniq;\n\t\n\tforeach(long num; array_nums1_sorted_uniq)\n\t{\n\t\tif(array_nums2_sorted_uniq.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpztgvlc04.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpztgvlc04.d(15): Error: no property `sort` for type `long[]`\n/tmp/tmpztgvlc04.d(17): Error: no property `uniq` for type `long[]`\n/tmp/tmpztgvlc04.d(18): Error: no property `uniq` for type `long[]`\n/tmp/tmpztgvlc04.d(22): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztgvlc04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp_280xx0w.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_280xx0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn intersection_array[0..i];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp68jtgyis.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68jtgyis.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx6b10ibs.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6b10ibs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp8qxem2hv.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qxem2hv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[0];\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection ~= num;\n\t\t}\n\t}\n\treturn intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmphiehcu2x.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiehcu2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp1_jaatxc.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_jaatxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tintersection_array ~= n;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp8drrvyws.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8drrvyws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp1_jaatxc.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_jaatxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tlong[] array_nums1_sorted;\n\tlong[] array_nums2_sorted;\n\tlong[] array_nums1_sorted_unique;\n\tlong[] array_nums2_sorted_unique;\n\t\n\tarray_nums1_sorted = array_nums1.dup;\n\tarray_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tarray_nums1_sorted_unique = array_nums1_sorted.uniq;\n\tarray_nums2_sorted_unique = array_nums2_sorted.uniq;\n\t\n\tintersection_array = array_nums1_sorted_unique.intersect(array_nums2_sorted_unique);\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpmralhcr4.d(19): Error: no property `sort` for type `long[]`\n/tmp/tmpmralhcr4.d(20): Error: no property `sort` for type `long[]`\n/tmp/tmpmralhcr4.d(22): Error: no property `uniq` for type `long[]`\n/tmp/tmpmralhcr4.d(23): Error: no property `uniq` for type `long[]`\n/tmp/tmpmralhcr4.d(25): Error: no property `intersect` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmralhcr4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn array_intersection[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpi1p1wgc8.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1p1wgc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_temp;\n\tlong[] array_temp2;\n\tlong[] array_temp3;\n\tlong[] array_temp4;\n\tlong[] array_temp5;\n\tlong[] array_temp6;\n\tlong[] array_temp7;\n\tlong[] array_temp8;\n\tlong[] array_temp9;\n\tlong[] array_temp10;\n\tlong[] array_temp11;\n\tlong[] array_temp12;\n\tlong[] array_temp13;\n\tlong[] array_temp14;\n\tlong[] array_temp15;\n\tlong[] array_temp16;\n\tlong[] array_temp17;\n\tlong[] array_temp18;\n\tlong[] array_temp19;\n\tlong[] array_temp20;\n\tlong[] array_temp21;\n\tlong[] array_temp22;\n\tlong[] array_temp23;\n\tlong[] array_temp24;\n\tlong[] array_temp25;\n\tlong[] array_temp26;\n\tlong[] array_temp27;\n\tlong[] array_temp28;\n\tlong[] array_temp29;\n\tlong[] array_temp30;\n\tlong[] array_temp31;\n\tlong[] array_temp32;\n\tlong[] array_temp33;\n\tlong[] array_temp34;\n\tlong[] array_temp35;\n\tlong[] array_temp36;\n\tlong[] array_temp37;\n\tlong[] array_temp38;\n\tlong[] array_temp39;\n\tlong[] array_temp40;\n\tlong[] array_temp41;\n\tlong[] array_temp42;\n\tlong[] array_temp43;\n\tlong[] array_temp44;\n\tlong[] array_temp45;\n\tlong[] array_temp46;\n\tlong[] array_temp47;\n\tlong[] array_temp48;\n\tlong[] array_temp49;\n\tlong[] array_temp50;\n\tlong[] array_temp51;\n\tlong[] array_temp52;\n\tlong[] array_temp53;\n\tlong[] array_temp54;\n\tlong[] array_temp55;\n\tlong[] array_temp56;\n\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmphyrw7oyx.d(68): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphyrw7oyx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy;\n\tlong[] array_nums2_copy;\n\tlong[] array_nums1_copy_sorted;\n\tlong[] array_nums2_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums2_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy;\n\tlong[] array_nums1_copy_sorted_unique_copy_sorted_unique_copy_sorted_unique_copy_sorted;\n\tlong[] array_nums2_copy_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpwp8oly7x.d(33): Error: semicolon expected, not `unittest`\n/tmp/tmpwp8oly7x.d(33): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8oly7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(num in array_nums2)\n\t\t{\n\t\t\tarray_nums3 ~= num;\n\t\t}\n\t}\n\treturn array_nums3;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmps2ktnxlr.d(13): Error: incompatible types for `(num) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2ktnxlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpq3n_7_0f.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3n_7_0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] temp = new long[array_nums1.length];\n\tlong[] temp2 = new long[array_nums1.length];\n\tlong[] temp3 = new long[array_nums1.length];\n\tint count = 0;\n\tint count2 = 0;\n\tint count3 = 0;\n\tint count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tint count7 = 0;\n\tint count8 = 0;\n\tint count9 = 0;\n\tint count10 = 0;\n\tint count11 = 0;\n\tint count12 = 0;\n\tint count13 = 0;\n\tint count14 = 0;\n\tint count15 = 0;\n\tint count16 = 0;\n\tint count17 = 0;\n\tint count18 = 0;\n\tint count19 = 0;\n\tint count20 = 0;\n\tint count21 = 0;\n\tint count22 = 0;\n\tint count23 = 0;\n\tint count24 = 0;\n\tint count25 = 0;\n\tint count26 = 0;\n\tint count27 = 0;\n\tint count28 = 0;\n\tint count29 = 0;\n\tint count30 = 0;\n\tint count31 = 0;\n\tint count32 = 0;\n\tint count33 = 0;\n\tint count34 = 0;\n\tint count35 = 0;\n\tint count36 = 0;\n\tint count37 = 0;\n\tint count38 = 0;\n\tint count39 = 0;\n\tint count40 = 0;\n\tint count41 = 0;\n\tint count42 = 0;\n\tint count43 = 0;\n\tint count44 = 0;\n\tint count45 = 0;\n\tint count46 = 0;\n\tint count47 = 0;\n\tint count48 = 0;\n\tint count49 = 0;\n\tint count50 = 0;\n\tint count51 = 0;\n\tint count52 = 0;\n\tint count53 = 0;\n\tint count54 = 0;\n\tint count55 = 0;\n\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp8zh0xayt.d(70): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zh0xayt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tlong[] array_intersection_final = new long[array_nums1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\t\n\twhile (i < array_nums1.length)\n\t{\n\t\tj = 0;\n\t\twhile (j < array_nums2.length)\n\t\t{\n\t\t\tif (array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tarray_intersection[k] = array_nums1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\twhile (i < array_intersection.length)\n\t{\n\t\tif (array_intersection[i] != 0)\n\t\t{\n\t\t\tarray_intersection_final[l] = array_intersection[i];\n\t\t\tl++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn array_intersection_final;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdjp7eevc.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x42863d]\n??:? void tmpdjp7eevc.__unittest_L45_C1() [0x428109]\n??:? void tmpdjp7eevc.__modtest() [0x4283bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430815]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpe09tcwbh.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe09tcwbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpot1sbawu.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot1sbawu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_sorted = array_nums1.dup;\n\tlong[] array_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tforeach(num; array_nums1_sorted)\n\t{\n\t\tif(array_nums2_sorted.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpb7y9_cbp.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpb7y9_cbp.d(15): Error: no property `sort` for type `long[]`\n/tmp/tmpb7y9_cbp.d(19): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7y9_cbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(num in array_nums2)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpuknhht33.d(14): Error: incompatible types for `(num) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuknhht33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp_280xx0w.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_280xx0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tauto nums1 = array(array_nums1);\n\tauto nums2 = array(array_nums2);\n\t\n\tforeach(num; nums1)\n\t{\n\t\tif(nums2.count(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp4m5lbcid.d(11): Error: undefined identifier `array`\n/tmp/tmp4m5lbcid.d(12): Error: undefined identifier `array`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m5lbcid.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tintersection_array[count] = num;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] result2 = new long[array_nums2.length];\n\tlong[] result3 = new long[array_nums1.length];\n\tlong[] result4 = new long[array_nums2.length];\n\tlong[] result5 = new long[array_nums1.length];\n\tlong[] result6 = new long[array_nums2.length];\n\tlong[] result7 = new long[array_nums1.length];\n\tlong[] result8 = new long[array_nums2.length];\n\tlong[] result9 = new long[array_nums1.length];\n\tlong[] result10 = new long[array_nums2.length];\n\tlong[] result11 = new long[array_nums1.length];\n\tlong[] result12 = new long[array_nums2.length];\n\tlong[] result13 = new long[array_nums1.length];\n\tlong[] result14 = new long[array_nums2.length];\n\tlong[] result15 = new long[array_nums1.length];\n\tlong[] result16 = new long[array_nums2.length];\n\tlong[] result17 = new long[array_nums1.length];\n\tlong[] result18 = new long[array_nums2.length];\n\tlong[] result19 = new long[array_nums1.length];\n\tlong[] result20 = new long[array_nums2.length];\n\tlong[] result21 = new long[array_nums1.length];\n\tlong[] result22 = new long[array_nums2.length];\n\tlong[] result23 = new long[array_nums1.length];\n\tlong[] result24 = new long[array_nums2.length];\n\tlong[] result25 = new long[array_nums1.length];\n\tlong[] result26 = new long[array_nums2.length];\n\tlong[] result27 = new long[array_nums1.length];\n\tlong[] result28 = new long[array_nums2.length];\n\tlong[] result29 =\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmprd4dvr0e.d(39): Error: expression expected, not `unittest`\n/tmp/tmprd4dvr0e.d(40): Error: semicolon expected, not `{`\n/tmp/tmprd4dvr0e.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd4dvr0e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] intersection_array_final = new long[array_nums1.length];\n\tint k = 0;\n\tint l = 0;\n\t\n\tforeach(i; 0 .. array_nums1.length)\n\t{\n\t\tforeach(j; 0 .. array_nums2.length)\n\t\t{\n\t\t\tif(array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tintersection_array[k] = array_nums1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. intersection_array.length)\n\t{\n\t\tif(intersection_array[i] != 0)\n\t\t{\n\t\t\tintersection_array_final[l] = intersection_array[i];\n\t\t\tl++;\n\t\t}\n\t}\n\t\n\treturn intersection_array_final;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu58xuo8t.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428695]\n??:? void tmpu58xuo8t.__unittest_L38_C1() [0x428165]\n??:? void tmpu58xuo8t.__modtest() [0x428418]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c74f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43086d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c525]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp9j_b3df4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j_b3df4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != array_nums2.length)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp0yb3llyo.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yb3llyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] intersection_array2 = new long[array_nums2.length];\n\tlong[] intersection_array3 = new long[array_nums1.length];\n\tlong[] intersection_array4 = new long[array_nums2.length];\n\tlong[] intersection_array5 = new long[array_nums1.length];\n\tlong[] intersection_array6 = new long[array_nums2.length];\n\tlong[] intersection_array7 = new long[array_nums1.length];\n\tlong[] intersection_array8 = new long[array_nums2.length];\n\tlong[] intersection_array9 = new long[array_nums1.length];\n\tlong[] intersection_array10 = new long[array_nums2.length];\n\tlong[] intersection_array11 = new long[array_nums1.length];\n\tlong[] intersection_array12 = new long[array_nums2.length];\n\tlong[] intersection_array13 = new long[array_nums1.length];\n\tlong[] intersection_array14 = new long[array_nums2.length];\n\tlong[] intersection_array15 = new long[array_nums1.length];\n\tlong[] intersection_array16 = new long[array_nums2.length];\n\tlong[] intersection_array17 = new long[array_nums1.length];\n\tlong[] intersection_array18 = new long[array_nums2.length];\n\tlong[] intersection_array19 = new long[array_nums1.length];\n\tlong[] intersection_array20 = new long[array_nums2.length];\n\tlong[] intersection_array21 = new long[array_nums1.length];\n\tlong[] intersection_array22 = new long[array_nums2.length];\n\tlong[] intersection_array23 = new long[array_nums1.length];\n\tlong[] intersection_array24 = new long[array_nums2.length];\n\tlong[] intersection_array25 = new long[array_nums1.length];\n\tlong[] intersection_array26 = new long\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp24j44ecb.d(36): Error: semicolon expected, not `unittest`\n/tmp/tmp24j44ecb.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24j44ecb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzevknmz0.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzevknmz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp1jv2fz3p.d(14): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jv2fz3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\t\n\tforeach(i; array_nums1)\n\t{\n\t\tforeach(j; array_nums2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult ~= i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmphoo95niq.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoo95niq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums3 ~= num;\n\t\t}\n\t}\n\treturn array_nums3;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp5cragxw5.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cragxw5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tfor (int i = 0; i < array_nums1.length; i++) \n\t{\n\t\tfor (int j = 0; j < array_nums2.length; j++) \n\t\t{\n\t\t\tif (array_nums1[i] == array_nums2[j]) \n\t\t\t{\n\t\t\t\tintersection_array[intersection_array_index] = array_nums1[i];\n\t\t\t\tintersection_array_index++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tint j = 0;\n\tfor (int i = 0; i < array_nums1.length; i++) \n\t{\n\t\tif (array_nums1[i] == array_nums2[i]) \n\t\t{\n\t\t\tarray_nums3[j] = array_nums1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn array_nums3;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmm92x191.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42861e]\n??:? long[] tmpmm92x191.intersection_array(long[], long[]) [0x427e92]\n??:? void tmpmm92x191.__unittest_L22_C1() [0x427fd2]\n??:? void tmpmm92x191.__modtest() [0x4282f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c627]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430745]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b491]\n??:? runModuleUnitTests [0x42c3fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpnsy_65rg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsy_65rg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpe09tcwbh.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe09tcwbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums1_sorted = array_nums1.dup;\n\tlong[] array_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tlong[] intersection_array = new long[];\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < array_nums1_sorted.length && j < array_nums2_sorted.length) \n\t{\n\t\tif (array_nums1_sorted[i] == array_nums2_sorted[j]) \n\t\t{\n\t\t\tintersection_array ~= array_nums1_sorted[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (array_nums1_sorted[i] < array_nums2_sorted[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmprocrwrcl.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmprocrwrcl.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmprocrwrcl.d(16): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprocrwrcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(num in array_nums2)\n\t\t{\n\t\t\tarray_result[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn array_result[0..i];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpexp3hlsx.d(14): Error: incompatible types for `(num) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexp3hlsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result_array;\n\tforeach (long num; array_nums1)\n\t{\n\t\tif (array_nums2.canFind(num))\n\t\t{\n\t\t\tresult_array ~= num;\n\t\t}\n\t}\n\treturn result_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp4dxruy_j.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dxruy_j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3;\n\tforeach(num; array_nums1)\n\t{\n\t\tforeach(num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tarray_nums3 ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn array_nums3;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] temp;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint o;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint aa;\n\tint bb;\n\tint cc;\n\tint dd;\n\tint ee;\n\tint ff;\n\tint gg;\n\tint hh;\n\tint ii;\n\tint jj;\n\tint kk;\n\tint ll;\n\tint mm;\n\tint nn;\n\tint oo;\n\tint pp;\n\tint qq;\n\tint rr;\n\tint ss;\n\tint tt;\n\tint uu;\n\tint vv;\n\tint ww;\n\tint xx;\n\tint yy;\n\tint zz;\n\tint aaa;\n\tint bbb;\n\tint ccc;\n\tint ddd;\n\tint eee;\n\tint fff;\n\tint ggg;\n\tint hhh;\n\tint iii;\n\tint jjj;\n\tint kkk;\n\tint lll;\n\tint mmm;\n\tint nnn;\n\tint ooo;\n\tint ppp;\n\tint qqq;\n\tint rrr;\n\tint sss;\n\tint ttt;\n\tint uuu;\n\tint vvv;\n\tint www;\n\tint xxx;\n\tint yyy;\n\tint zzz;\n\tint aaaa;\n\tint bbbb;\n\tint cccc;\n\tint dddd;\n\tint eeee;\n\tint ffff;\n\tint gggg;\n\tint hhhh;\n\tint iiii;\n\tint jjjj;\n\tint kkkk;\n\tint llll;\n\tint mmmm;\n\tint nnnn;\n\tint oooo;\n\tint pppp;\n\t\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp_2milapm.d(99): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2milapm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums3[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn array_nums3[0..i];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmplbzjx1vd.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbzjx1vd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tlong[] intersection_array_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final_final_final_final_final_final_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] intersection_array_final_final_final_final\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpcgz5kmd7.d(26): Error: semicolon expected, not `unittest`\n/tmp/tmpcgz5kmd7.d(26): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgz5kmd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tint count = 0;\n\tfor (int i = 0; i < array_nums1.length; i++)\n\t{\n\t\tfor (int j = 0; j < array_nums2.length; j++)\n\t\t{\n\t\t\tif (array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tarray_nums3[count] = array_nums1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn array_nums3;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ivip829.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmp8ivip829.__unittest_L25_C1() [0x428051]\n??:? void tmp8ivip829.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c63f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43075d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a9]\n??:? runModuleUnitTests [0x42c415]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmphoo95niq.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoo95niq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint counter = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[counter] = num;\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn intersection_array[0..counter];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp_nqydwlp.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nqydwlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[array_nums1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < array_nums1.length && j < array_nums2.length)\n\t{\n\t\tif (array_nums1[i] < array_nums2[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (array_nums1[i] > array_nums2[j])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarray_result[k] = array_nums1[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t}\n\treturn array_result[0..k];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpqtv2yldo.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtv2yldo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(n))\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp0zv98ezg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zv98ezg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn array_intersection[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpmntu50ai.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmntu50ai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmphoo95niq.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoo95niq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tauto set_nums1 = set(array_nums1);\n\tauto set_nums2 = set(array_nums2);\n\t\n\tauto set_intersection = set_nums1.intersection(set_nums2);\n\t\n\treturn set_intersection.array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp1kcvx057.d(10): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\n/tmp/tmp1kcvx057.d(11): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kcvx057.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx6b10ibs.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6b10ibs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint i = 0;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp3lqc2tll.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lqc2tll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile(i < array_nums1.length && j < array_nums2.length)\n\t{\n\t\tif(array_nums1[i] < array_nums2[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(array_nums1[i] > array_nums2[j])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tintersection_array[k] = array_nums1[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t}\n\treturn intersection_array[0..k];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != array_nums2.length)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp0yb3llyo.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yb3llyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tresult ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_sorted = array_nums1.dup;\n\tlong[] array_nums2_sorted = array_nums2.dup;\n\t\n\tarray_nums1_sorted.sort;\n\tarray_nums2_sorted.sort;\n\t\n\tforeach(long num1; array_nums1_sorted)\n\t{\n\t\tforeach(long num2; array_nums2_sorted)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tresult ~= num1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp2g4r7fti.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmp2g4r7fti.d(15): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2g4r7fti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp1_jaatxc.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_jaatxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_result ~= num;\n\t\t}\n\t}\n\t\n\treturn array_result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpx32iee05.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx32iee05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpfjv2jf35.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjv2jf35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn intersection_array[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpzevknmz0.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzevknmz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tint index = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != array_nums2.length)\n\t\t{\n\t\t\tarray_intersection[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn array_intersection[0..index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmparx7_nzz.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparx7_nzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[array_nums1.length];\n\tlong[] temp = new long[array_nums1.length];\n\tlong[] temp2 = new long[array_nums1.length];\n\tlong[] temp3 = new long[array_nums1.length];\n\tlong[] temp4 = new long[array_nums1.length];\n\tlong[] temp5 = new long[array_nums1.length];\n\tlong[] temp6 = new long[array_nums1.length];\n\tlong[] temp7 = new long[array_nums1.length];\n\tlong[] temp8 = new long[array_nums1.length];\n\tlong[] temp9 = new long[array_nums1.length];\n\tlong[] temp10 = new long[array_nums1.length];\n\tlong[] temp11 = new long[array_nums1.length];\n\tlong[] temp12 = new long[array_nums1.length];\n\tlong[] temp13 = new long[array_nums1.length];\n\tlong[] temp14 = new long[array_nums1.length];\n\tlong[] temp15 = new long[array_nums1.length];\n\tlong[] temp16 = new long[array_nums1.length];\n\tlong[] temp17 = new long[array_nums1.length];\n\tlong[] temp18 = new long[array_nums1.length];\n\tlong[] temp19 = new long[array_nums1.length];\n\tlong[] temp20 = new long[array_nums1.length];\n\tlong[] temp21 = new long[array_nums1.length];\n\tlong[] temp22 = new long[array_nums1.length];\n\tlong[] temp23 = new long[array_nums1.length];\n\tlong[] temp24 = new long[array_nums1.length];\n\tlong[] temp25 = new long[array_nums1.length];\n\tlong[] temp26 = new long[array_nums1.length];\n\tlong[] temp27 = new long[array_nums1.length];\n\tlong[] temp28 = new\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpoli13g6q.d(39): Error: basic type expected, not `unittest`\n/tmp/tmpoli13g6q.d(39): Error: semicolon expected, not `unittest`\n/tmp/tmpoli13g6q.d(39): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoli13g6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpw0gtwi3y.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0gtwi3y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpot1sbawu.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot1sbawu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(n in array_nums2)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpqb2xb_tu.d(13): Error: incompatible types for `(n) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqb2xb_tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != array_nums2.length)\n\t\t{\n\t\t\tarray_result ~= num;\n\t\t}\n\t}\n\t\n\treturn array_result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpq50h1mfc.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq50h1mfc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmp6hr7y82q.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hr7y82q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection ~= num;\n\t\t}\n\t}\n\treturn intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpg5myep3i.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5myep3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn intersection_array[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpsiopjn8u.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsiopjn8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[array_nums1.length];\n\tlong[] array_result_temp = new long[array_nums1.length];\n\tlong[] array_result_temp2 = new long[array_nums1.length];\n\tlong[] array_result_temp3 = new long[array_nums1.length];\n\tlong[] array_result_temp4 = new long[array_nums1.length];\n\tlong[] array_result_temp5 = new long[array_nums1.length];\n\tlong[] array_result_temp6 = new long[array_nums1.length];\n\tlong[] array_result_temp7 = new long[array_nums1.length];\n\tlong[] array_result_temp8 = new long[array_nums1.length];\n\tlong[] array_result_temp9 = new long[array_nums1.length];\n\tlong[] array_result_temp10 = new long[array_nums1.length];\n\tlong[] array_result_temp11 = new long[array_nums1.length];\n\tlong[] array_result_temp12 = new long[array_nums1.length];\n\tlong[] array_result_temp13 = new long[array_nums1.length];\n\tlong[] array_result_temp14 = new long[array_nums1.length];\n\tlong[] array_result_temp15 = new long[array_nums1.length];\n\tlong[] array_result_temp16 = new long[array_nums1.length];\n\tlong[] array_result_temp17 = new long[array_nums1.length];\n\tlong[] array_result_temp18 = new long[array_nums1.length];\n\tlong[] array_result_temp19 = new long[array_nums1.length];\n\tlong[] array_result_temp20 = new long[array_nums1.length];\n\tlong[] array_result_temp21 = new long[array_nums1.length];\n\tlong[] array_result_temp22 = new long[array_nums1.length];\n\tlong[] array_result_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpocdo3rsb.d(34): Error: semicolon expected, not `unittest`\n/tmp/tmpocdo3rsb.d(34): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocdo3rsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\t\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpnsy_65rg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsy_65rg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpnsy_65rg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsy_65rg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(n; array_nums1)\n\t{\n\t\tif(n in array_nums2)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpqb2xb_tu.d(13): Error: incompatible types for `(n) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqb2xb_tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(nums1; array_nums1)\n\t{\n\t\tforeach(nums2; array_nums2)\n\t\t{\n\t\t\tif(nums1 == nums2)\n\t\t\t{\n\t\t\t\tintersection_array ~= nums1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_result = new long[array_nums1.length];\n\tlong[] array_result2 = new long[array_nums2.length];\n\tlong[] array_result3 = new long[array_nums1.length];\n\tlong[] array_result4 = new long[array_nums1.length];\n\tlong[] array_result5 = new long[array_nums1.length];\n\tlong[] array_result6 = new long[array_nums1.length];\n\tlong[] array_result7 = new long[array_nums1.length];\n\tlong[] array_result8 = new long[array_nums1.length];\n\tlong[] array_result9 = new long[array_nums1.length];\n\tlong[] array_result10 = new long[array_nums1.length];\n\tlong[] array_result11 = new long[array_nums1.length];\n\tlong[] array_result12 = new long[array_nums1.length];\n\tlong[] array_result13 = new long[array_nums1.length];\n\tlong[] array_result14 = new long[array_nums1.length];\n\tlong[] array_result15 = new long[array_nums1.length];\n\tlong[] array_result16 = new long[array_nums1.length];\n\tlong[] array_result17 = new long[array_nums1.length];\n\tlong[] array_result18 = new long[array_nums1.length];\n\tlong[] array_result19 = new long[array_nums1.length];\n\tlong[] array_result20 = new long[array_nums1.length];\n\tlong[] array_result21 = new long[array_nums1.length];\n\tlong[] array_result22 = new long[array_nums1.length];\n\tlong[] array_result23 = new long[array_nums1.length];\n\tlong[] array_result24 = new long[array_nums1.length];\n\tlong[] array_result25 = new long[array_nums1.length];\n\tlong[] array_result26 = new long\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp4zyws660.d(36): Error: semicolon expected, not `unittest`\n/tmp/tmp4zyws660.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zyws660.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\tintersection_array_index++;\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmpva68hfhk.d(15): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva68hfhk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length];\n\tlong[] array_intersection_final = new long[array_nums1.length];\n\tlong[] array_nums1_final = new long[array_nums1.length];\n\tlong[] array_nums2_final = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted_unique = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique_final = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted_unique_final = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique_final_final = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted_unique_final_final = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique_final_final_final = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted_unique_final_final_final = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_nums2_final_sorted_unique_final_final_final_final = new long[array_nums2.length];\n\tlong[] array_nums1_final_sorted_unique_final_final_final_final_final = new long[array_nums1.length];\n\tlong[] array_nums2_final_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp7yes5bm_.d(28): Error: semicolon expected, not `unittest`\n/tmp/tmp7yes5bm_.d(28): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yes5bm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmplnpn5o2u.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpn5o2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tint i, j;\n\t\n\tintersection_array = new long[array_nums1.length];\n\t\n\tfor (i = 0; i < array_nums1.length; i++)\n\t{\n\t\tfor (j = 0; j < array_nums2.length; j++)\n\t\t{\n\t\t\tif (array_nums1[i] == array_nums2[j])\n\t\t\t{\n\t\t\t\tintersection_array ~= array_nums1[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd3vgbrxm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42859d]\n??:? void tmpd3vgbrxm.__unittest_L28_C1() [0x42806d]\n??:? void tmpd3vgbrxm.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d043]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bed6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ed0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bead]\n??:? runModuleUnitTests [0x42ce19]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a60]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmphoo95niq.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoo95niq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpwm5xihkm.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwm5xihkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums3 = new long[array_nums1.length];\n\tlong[] array_nums4 = new long[array_nums2.length];\n\tlong[] array_nums5 = new long[array_nums1.length];\n\tlong[] array_nums6 = new long[array_nums2.length];\n\tlong[] array_nums7 = new long[array_nums1.length];\n\tlong[] array_nums8 = new long[array_nums2.length];\n\tlong[] array_nums9 = new long[array_nums1.length];\n\tlong[] array_nums10 = new long[array_nums2.length];\n\tlong[] array_nums11 = new long[array_nums1.length];\n\tlong[] array_nums12 = new long[array_nums2.length];\n\tlong[] array_nums13 = new long[array_nums1.length];\n\tlong[] array_nums14 = new long[array_nums2.length];\n\tlong[] array_nums15 = new long[array_nums1.length];\n\tlong[] array_nums16 = new long[array_nums2.length];\n\tlong[] array_nums17 = new long[array_nums1.length];\n\tlong[] array_nums18 = new long[array_nums2.length];\n\tlong[] array_nums19 = new long[array_nums1.length];\n\tlong[] array_nums20 = new long[array_nums2.length];\n\tlong[] array_nums21 = new long[array_nums1.length];\n\tlong[] array_nums22 = new long[array_nums2.length];\n\tlong[] array_nums23 = new long[array_nums1.length];\n\tlong[] array_nums24 = new long[array_nums2.length];\n\tlong[] array_nums25 = new long[array_nums1.length];\n\tlong[] array_nums26 = new long[array_nums2.length];\n\tlong[] array_\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp3a_czp_h.d(35): Error: semicolon expected, not `unittest`\n/tmp/tmp3a_czp_h.d(35): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a_czp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\t\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpjli3a5bz.d(14): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjli3a5bz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_nums_intersection = new long[array_nums1.length];\n\tint count = 0;\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tarray_nums_intersection[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn array_nums_intersection[0..count];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp70dvt1ff.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70dvt1ff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tforeach(long num; array_nums1_copy)\n\t{\n\t\tif(array_nums2_copy.find(num) != -1)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t\tarray_nums2_copy.remove(array_nums2_copy.find(num));\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpthrvinx7.d(16): Error: no property `find` for type `long[]`\n/tmp/tmpthrvinx7.d(19): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthrvinx7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array[intersection_array_index] = num1;\n\t\t\t\tintersection_array_index++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array[0..intersection_array_index];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = [];\n\tforeach(n; array_nums1)\n\t{\n\t\tif(n in array_nums2)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp1_wq7aco.d(13): Error: incompatible types for `(n) in (array_nums2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_wq7aco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpot1sbawu.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot1sbawu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tforeach(num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpjcd9vilt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcd9vilt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp9j_b3df4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j_b3df4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] result;\n\tlong[] array_nums1_copy = array_nums1.dup;\n\tlong[] array_nums2_copy = array_nums2.dup;\n\t\n\tsort(array_nums1_copy);\n\tsort(array_nums2_copy);\n\t\n\tresult = array_nums1_copy.intersection(array_nums2_copy);\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpi6ybk9uo.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpi6ybk9uo.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpi6ybk9uo.d(17): Error: no property `intersection` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6ybk9uo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.canFind(num))\n\t\t{\n\t\t\tintersection_array ~= num;\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "/tmp/tmp9j_b3df4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j_b3df4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint intersection_array_index = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tintersection_array[intersection_array_index] = num;\n\t\t\t\tintersection_array_index++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyg1dgg0p.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpyg1dgg0p.__unittest_L27_C1() [0x428031]\n??:? void tmpyg1dgg0p.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(num1; array_nums1)\n\t{\n\t\tforeach(num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[0];\n\tforeach(long num1; array_nums1)\n\t{\n\t\tforeach(long num2; array_nums2)\n\t\t{\n\t\t\tif(num1 == num2)\n\t\t\t{\n\t\t\t\tintersection_array ~= num1;\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1665517405,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] intersection_array = new long[array_nums1.length];\n\tint counter = 0;\n\t\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.find(num) != -1)\n\t\t{\n\t\t\tintersection_array[counter] = num;\n\t\t\tcounter++;\n\t\t}\n\t}\n\t\n\treturn intersection_array[0 .. counter];\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpuiil2f93.d(15): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiil2f93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[0];\n\tforeach(long num; array_nums1)\n\t{\n\t\tif(array_nums2.count(num) > 0)\n\t\t{\n\t\t\tarray_intersection ~= num;\n\t\t}\n\t}\n\treturn array_intersection;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "/tmp/tmpfjv2jf35.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjv2jf35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the intersection of two arrays.\n\t\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tauto result = new long[](0);\n\tauto set_nums1 = new Set!long();\n\tauto set_nums2 = new Set!long();\n\t\n\tforeach(num; array_nums1)\n\t{\n\t\tset_nums1.insert(num);\n\t}\n\t\n\tforeach(num; array_nums2)\n\t{\n\t\tset_nums2.insert(num);\n\t}\n\t\n\tforeach(num; set_nums1)\n\t{\n\t\tif(set_nums2.find(num) != set_nums2.end)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpn01lc028.d(11): Error: template instance `Set!long` template `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?\n/tmp/tmpn01lc028.d(12): Error: template instance `Set!long` template `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn01lc028.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}