{
  "name": "mbpp_573_unique_product",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to calculate the product of the unique numbers in a given array.\n\t\n*/\nlong unique_product(long[] list_data) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = unique_product;\n\n    assert(candidate([10L, 20L, 30L, 40L, 20L, 50L, 60L, 40L]) == 720000000L);\n    assert(candidate([1L, 2L, 3L, 1L]) == 6L);\n    assert(candidate([7L, 8L, 9L, 0L, 1L, 1L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong product = 1;\n\tforeach(item; list_data)\n\t{\n\t\tif(item != 0)\n\t\t{\n\t\t\tproduct *= item;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long item; list_data)\n\t{\n\t\tif(item != 0)\n\t\t{\n\t\t\tproduct *= item;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(i; list_data)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tauto unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tlong[] unique_data = [];\n\tforeach(data; list_data)\n\t{\n\t\tif(!unique_data.canFind(data))\n\t\t{\n\t\t\tunique_data ~= data;\n\t\t}\n\t}\n\tforeach(data; unique_data)\n\t{\n\t\tresult *= data;\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(product % i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(n; list_data)\n\t{\n\t\tif(list_data.count(n) == 1)\n\t\t{\n\t\t\tproduct *= n;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tauto unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tlong product = 1;\n\tforeach(i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(i; list_data)\n\t{\n\t\tif(!(product % i))\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(list_data.count(i) == 1)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tforeach(i; list_data)\n\t{\n\t\tif(list_data.count(i) == 1)\n\t\t{\n\t\t\tresult *= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(idx, value; list_data)\n\t{\n\t\tif(idx == 0)\n\t\t{\n\t\t\tproduct = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct *= value;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\treturn unique_list.product;\n}",
    "{\n\tlong product = 1;\n\tforeach(item; list_data)\n\t{\n\t\tif(product % item != 0)\n\t\t{\n\t\t\tproduct *= item;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(list_data.count(i) == 1)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tauto list_data_unique = list_data.dup;\n\tlist_data_unique.sort;\n\tlist_data_unique.unique;\n\tforeach(list_data_unique; list_data_unique)\n\t{\n\t\tresult *= list_data_unique;\n\t}\n\treturn result;\n}"
  ]
}