{
  "name": "mbpp_69_is_sublist",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether an array contains the given subarray or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\telse\n\t{\n\t\tfor(int i = 0; i < l.length; i++)\n\t\t{\n\t\t\tif(l[i] == s[0])\n\t\t\t{\n\t\t\t\tbool found = true;\n\t\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tfound = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(found)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tbool match = true;\n\t\tfor (long j = 0; j < s.length; j++) \n\t\t{\n\t\t\tif (l[i + j] != s[j]) \n\t\t\t{\n\t\t\t\tmatch = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (match)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tlong[] sub = l[0 .. s.length];\n\t\n\tif(sub == s)\n\t\treturn true;\n\t\n\treturn is_sublist(l[1 .. $], s);\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\tif (l_.length < s_.length)\n\t\treturn false;\n\t\n\twhile (l_.length >= s_.length)\n\t{\n\t\tif (l_[0] == s_[0])\n\t\t{\n\t\t\tif (l_[0 .. s_.length] == s_)\n\t\t\t\treturn true;\n\t\t}\n\t\t\n\t\tl_ = l_[1 .. $];\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tif(l.length < s.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tresult = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && i + j < l.length)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == s.length) return true;\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++j;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t++i;\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tlong j = 1;\n\t\t\tfor(; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn false;\n}",
    "{\n    if (s.length > l.length)\n        return false;\n    for (int i = 0; i < l.length - s.length + 1; i++)\n    {\n        if (equal(l[i .. i + s.length], s))\n            return true;\n    }\n    return false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tlong[] l_ = l[0..s.length];\n\t\n\tif (l_ == s) return true;\n\t\n\treturn is_sublist(l[1..$], s);\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i+j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tif (s.length == 0)\n\t\treturn true;\n\t\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\tl_.sort;\n\ts_.sort;\n\t\n\tlong[] l_s = l_.intersect(s_);\n\t\n\tif (l_s.length == s_.length)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t\tj++;\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length && j < s.length)\n\t{\n\t\tif (l[i] == s[j])\n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) break;\n\t\t\t}\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\tif (s.length == 0) return true;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(l.length < s.length) \n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(l.length < s.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tif(l[i .. i + s.length] == s) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == s.length) return true;\n\treturn false;\n}",
    "{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tlong j = 1;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) j++;\n\t\t\t\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < l.length; i++) \n\t\t{\n\t\t\tif (l[i] == s[0]) \n\t\t\t{\n\t\t\t\tlong j = 0;\n\t\t\t\tfor (; j < s.length; j++) \n\t\t\t\t{\n\t\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (j == s.length) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif(j == s.length - 1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tlong[] l_ = l[0 .. l.length - s.length];\n\t\n\tforeach (i, e; l_)\n\t{\n\t\tif (e == s[0])\n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tbool is_sub = true;\n\t\t\tforeach (j, f; s[1 .. $])\n\t\t\t{\n\t\t\t\tif (l[i + j + 1] != f)\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sub) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length == 0)\n\t\treturn true;\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif(l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tfor (; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (auto j = 0; j < s.length; j++) \n\t{\n\t\tif (l[i + j] != s[j]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) return false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint n = l.length;\n\tint m = s.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == m)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tif (s.length > l.length) \n\t{\n\t\treturn result;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tresult = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] sublist = l[0 .. s.length];\n\t\n\tif (sublist == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1 .. $], s);\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length == s.length) \n\t{\n\t\treturn l == s;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tfor (; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sublist(l[i+1..$], s[1..$])) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(s.length > l.length) return false;\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (long j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (int j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] sublist = l[0..s.length];\n\t\n\tif (sublist == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1..$], s);\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length == 0)\n\t\treturn true;\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\twhile (l_.length >= s_.length)\n\t{\n\t\tif (l_[0] == s_[0])\n\t\t{\n\t\t\tif (l_.length == s_.length)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t{\n\t\t\t\tl_ = l_[1 .. $];\n\t\t\t\ts_ = s_[1 .. $];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tl_ = l_[1 .. $];\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (s.length == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (i + s.length > l.length)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif(l[i..i+s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tauto l_iter = l.front;\n\tauto s_iter = s.front;\n\t\n\twhile (l_iter != l.back) \n\t{\n\t\tif (*l_iter == *s_iter) \n\t\t{\n\t\t\t++s_iter;\n\t\t\tif (s_iter == s.back) return true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_iter = s.front;\n\t\t}\n\t\t++l_iter;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. l.length - s.length + 1)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < l.length && j < s.length)\n\t{\n\t\tif(l[i] == s[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n    if (l.length < s.length) \n\t{\n        return false;\n    }\n    else \n\t{\n        foreach (i; 0 .. l.length - s.length + 1) \n\t\t{\n            if (l[i .. i + s.length] == s) \n\t\t\t{\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] sub;\n\t\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tsub = l[i .. i + s.length];\n\t\tif (sub == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && i + j < l.length && l[i + j] == s[j])\n\t\t\t\tj++;\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tauto i = 0;\n\tfor (; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tauto j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < l.length && j < s.length)\n\t{\n\t\tif(l[i] == s[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(j == s.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sublist) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tforeach (i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i+j] == s[j])\n\t\t\t\tj++;\n\t\t\t\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) return true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tif(s.length == 0)\n\t\treturn true;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tauto l_iter = l.opSlice().front;\n\tauto s_iter = s.opSlice().front;\n\t\n\twhile (l_iter.opSlice().length >= s.length) \n\t{\n\t\tif (l_iter.front == s_iter.front) \n\t\t{\n\t\t\tif (s_iter.opSlice().length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\ts_iter.popFront();\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_iter = s.opSlice().front;\n\t\t}\n\t\t\n\t\tl_iter.popFront();\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (l[i .. i + s.length] == s) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length == 0) \n\t\treturn true;\n\tif (l.length == 0) \n\t\treturn false;\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tif (j == s.length - 1) \n\t\t\t\treturn true;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tfor (int i = 0; i < l.length; i++) \n\t\t{\n\t\t\tif (l[i] == s[0]) \n\t\t\t{\n\t\t\t\tbool found = true;\n\t\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t\t{\n\t\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t\t{\n\t\t\t\t\t\tfound = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (found) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tauto len = s.length;\n\tif (len > l.length) return false;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i..i+len] == s) return true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. l.length - s.length + 1)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\t\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (j == s.length - 1) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (i + s.length > l.length) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sublist(l[i+1..$], s[1..$])) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (s.length == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length)\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tif (s.length == 0)\n\t\treturn true;\n\t\n\tauto it = l.front;\n\t\n\tfor (; it != l.back; it++)\n\t{\n\t\tif (*it == s[0])\n\t\t{\n\t\t\tauto it2 = it;\n\t\t\tfor (int i = 0; i < s.length; i++)\n\t\t\t{\n\t\t\t\tif (*it2 != s[i])\n\t\t\t\t\tbreak;\n\t\t\t\tit2++;\n\t\t\t}\n\t\t\tif (it2 == it + s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (l[i .. i + s.length] == s)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"
  ]
}