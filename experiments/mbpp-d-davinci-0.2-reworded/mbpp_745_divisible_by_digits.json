{
  "name": "mbpp_745_divisible_by_digits",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array();\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.toString().all!(c => n % c.to!long == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tauto is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.digits;\n\t\tif(digits.all!(d => i % d == 0))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[](0);\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.toString().split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum) \n\t{\n\t\tauto num = i;\n\t\tauto isDivisible = true;\n\t\twhile(num != 0) \n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0) \n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(isDivisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().split(\"\").all!(y => x % y.to!int == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[](0);\n\tforeach (i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(digit; num.toString)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tauto divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}"
  ]
}