{
  "name": "mbpp_602_first_repeated_char",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first repeated character in a given string.\n\t\n*/\nNullable!(string) first_repeated_char(string str1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = first_repeated_char;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"123123\");\n        assert(!result.isNull && result.get == \"1\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_sorted = str_arr.dup;\n\tstr_arr_sorted.sort;\n\t\n\tforeach(i, str; str_arr_sorted)\n\t{\n\t\tif(i < str_arr_sorted.length - 1)\n\t\t{\n\t\t\tif(str_arr_sorted[i] == str_arr_sorted[i + 1])\n\t\t\t{\n\t\t\t\treturn str_arr_sorted[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_sorted = str_arr.dup;\n\tstr_arr_sorted.sort;\n\t\n\tforeach(i, str; str_arr_sorted)\n\t{\n\t\tif(str_arr_sorted[i] == str_arr_sorted[i+1])\n\t\t{\n\t\t\treturn str_arr_sorted[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tstring[] str3 = str1.split(\"\");\n\t\n\tforeach(i, char; str2) \n\t{\n\t\tforeach(j, char2; str3) \n\t\t{\n\t\t\tif(i != j) \n\t\t\t{\n\t\t\t\tif(char == char2) \n\t\t\t\t{\n\t\t\t\t\treturn char;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 0)\n\t\t\tchar_count[c] = 1;\n\t\telse\n\t\t\treturn c;\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[c]++;\n\t\tif(char_count[c] > 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\tint[] arr = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tarr[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[cast(int)c] > 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto str2 = str1.dup;\n\tforeach(i, c; str1)\n\t{\n\t\tstr2.remove(c);\n\t\tif(str2.count(c) > 0)\n\t\t\treturn c;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr[i+1..$].count(str) > 0)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] arr = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tif(arr[cast(int)c] == 1)\n\t\t\treturn c;\n\t\telse\n\t\t\tarr[cast(int)c] = 1;\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(str1[i .. i+1] in str1[i+1 .. $])\n\t\t{\n\t\t\tresult.assign(str1[i .. i+1]);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] > 1)\n\t\t\treturn c;\n\t}\n\treturn null;\n}",
    "{\n\tforeach(i, c; str1)\n\t{\n\t\tif(str1[i+1..$].count(c))\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr_unique.canFind(str))\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique();\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] > 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tforeach(i, ch; str1_arr)\n\t{\n\t\tif(str1_arr[i..$].count(ch) > 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1) \n\t{\n\t\tif(count(str1, c) > 1) \n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(idx, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t\treturn c;\n\t\telse\n\t\t\tchar_count[c] = 1;\n\t}\n\treturn null;\n}"
  ]
}