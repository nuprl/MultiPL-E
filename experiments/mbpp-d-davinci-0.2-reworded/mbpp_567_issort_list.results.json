{
  "name": "mbpp_567_issort_list",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool issort = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tissort = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn issort;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i,j; list1)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqrkt_83.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmplqrkt_83.__unittest_L21_C1() [0x427e66]\n??:? void tmplqrkt_83.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpet3l89h3.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpet3l89h3.__unittest_L19_C1() [0x427e8e]\n??:? void tmpet3l89h3.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif(list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < prev)\n\t\t\treturn false;\n\t\tprev = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i; 0 .. list1.length - 1)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; zip(list1[0..$-1],list1[1..$]))\n\t{\n\t\tif(i>j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmphypq1dsu.d(10): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphypq1dsu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool is_sorted = true;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (i + 1 < list1.length) \n\t\t{\n\t\t\tif (list1[i] > list1[i + 1]) \n\t\t\t{\n\t\t\t\tis_sorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,v; list1)\n\t{\n\t\tif(i+1 < list1.length)\n\t\t{\n\t\t\tif(v > list1[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i == list1.length - 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if(list1[i] > list1[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i;0..list1.length-1)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length-1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] > list1[i+1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmxvb0u10.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmpmxvb0u10.issort_list(long[]) [0x427d4e]\n??:? void tmpmxvb0u10.__unittest_L21_C1() [0x427def]\n??:? void tmpmxvb0u10.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i,j; list1)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqrkt_83.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmplqrkt_83.__unittest_L21_C1() [0x427e66]\n??:? void tmplqrkt_83.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, j; list1)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk5dii89.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpvk5dii89.__unittest_L21_C1() [0x427e66]\n??:? void tmpvk5dii89.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i, item; list1)\n\t{\n\t\tif(i+1 < list1.length)\n\t\t{\n\t\t\tif(list1[i] > list1[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool is_sorted = true;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] > list1[i+1])\n\t\t{\n\t\t\tis_sorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1pw43_kl.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp1pw43_kl.issort_list(long[]) [0x427d4e]\n??:? void tmp1pw43_kl.__unittest_L21_C1() [0x427def]\n??:? void tmp1pw43_kl.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool is_sorted = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i + 1 < list1.length)\n\t\t{\n\t\t\tif(list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tis_sorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i + 1 < list1.length)\n\t\t{\n\t\t\tif(list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8tsh_3j0.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp8tsh_3j0.__unittest_L17_C1() [0x427e8e]\n??:? void tmp8tsh_3j0.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7mvqm7aw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp7mvqm7aw.__unittest_L17_C1() [0x427e8e]\n??:? void tmp7mvqm7aw.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i-1]>list1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdbi5883h.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmpdbi5883h.__unittest_L17_C1() [0x427e96]\n??:? void tmpdbi5883h.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\t\n\tfor (int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8tsh_3j0.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp8tsh_3j0.__unittest_L17_C1() [0x427e8e]\n??:? void tmp8tsh_3j0.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor(i=0;i<list1.length-1;i++)\n\t{\n\t\tif(list1[i]>list1[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif(list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(prev > i)\n\t\t\treturn false;\n\t\tprev = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8tsh_3j0.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp8tsh_3j0.__unittest_L17_C1() [0x427e8e]\n??:? void tmp8tsh_3j0.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\t\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf13zk01x.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpf13zk01x.__unittest_L19_C1() [0x427e8e]\n??:? void tmpf13zk01x.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpet3l89h3.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpet3l89h3.__unittest_L19_C1() [0x427e8e]\n??:? void tmpet3l89h3.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i == list1.length - 1)\n\t\t\tbreak;\n\t\tif(list1[i] > list1[i+1])\n\t\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i-1]>list1[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5cpuuafi.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmp5cpuuafi.__unittest_L19_C1() [0x427e96]\n??:? void tmp5cpuuafi.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif(list1.length == 0)\n\t\treturn true;\n\t\t\n\tfor(int i = 0; i < list1.length-1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i + 1 < list1.length)\n\t\t{\n\t\t\tif(list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tforeach(i, list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmp345j_rmb.d(11): Error: no identifier for declarator `list1`\n/tmp/tmp345j_rmb.d(11): Error: found `)` when expecting `;`\n/tmp/tmp345j_rmb.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp345j_rmb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; zip(list1[0..$-1], list1[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmp1nfdj7rw.d(10): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nfdj7rw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpet3l89h3.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpet3l89h3.__unittest_L19_C1() [0x427e8e]\n??:? void tmpet3l89h3.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_ro1bq1q.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp_ro1bq1q.issort_list(long[]) [0x427d4e]\n??:? void tmp_ro1bq1q.__unittest_L21_C1() [0x427def]\n??:? void tmp_ro1bq1q.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i-1] > list1[i])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; list1)\n\t{\n\t\tif(list1[i] > list1[j])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwdurjd5v.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? bool tmpwdurjd5v.issort_list(long[]) [0x427d66]\n??:? void tmpwdurjd5v.__unittest_L17_C1() [0x427e0f]\n??:? void tmpwdurjd5v.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; zip(list1[0..$-1],list1[1..$]))\n\t{\n\t\tif(i>j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmphypq1dsu.d(10): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphypq1dsu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1;\n\tsort(list2);\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmpgy2qe0jw.d(11): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgy2qe0jw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1) \n\t{\n\t\tif(i > 0) \n\t\t{\n\t\t\tif(list1[i] < list1[i - 1]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif (list1.length <= 1)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (long i = 0; i < list1.length - 1; i++)\n\t\t{\n\t\t\tif (list1[i] > list1[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptypzj0qo.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmptypzj0qo.issort_list(long[]) [0x427d4a]\n??:? void tmptypzj0qo.__unittest_L19_C1() [0x427def]\n??:? void tmptypzj0qo.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool issort = true;\n\tforeach(i,j; list1)\n\t{\n\t\tif(j < i)\n\t\t{\n\t\t\tissort = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn issort;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5402m18f.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp5402m18f.__unittest_L21_C1() [0x427e66]\n??:? void tmp5402m18f.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1[];\n\tsort(list2);\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmpi45mriqp.d(11): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi45mriqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; zip(list1[0..$-1], list1[1..$]))\n\t{\n\t\tif(i > j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmpmvevp3io.d(10): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvevp3io.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool isSorted = true;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < list1.length - 1)\n\t\t{\n\t\t\tif (list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tisSorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn isSorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i-1]>list1[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5cpuuafi.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmp5cpuuafi.__unittest_L19_C1() [0x427e96]\n??:? void tmp5cpuuafi.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor(i=0;i<list1.length-1;i++) \n\t{\n\t\tif(list1[i]>list1[i+1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;0..list1.length-1)\n\t{\n\t\tif(list1[i]>list1[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tint i = 0;\n\twhile(i < list1.length - 1)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool isSorted = true;\n\tforeach(i,j; zip(list1[0..$-1],list1[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tisSorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isSorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmpv0fip3bf.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0fip3bf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i < list1.length - 1)\n\t\t{\n\t\t\tif(list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length-1; i++)\n\t{\n\t\tif (list1[i] > list1[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i == list1.length - 1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = list1.length;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tfor (j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (list1[i] > list1[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "/tmp/tmpcsbcoo6k.d(12): Error: cannot implicitly convert expression `list1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsbcoo6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i, item; list1)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i-1] > list1[i])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_ro1bq1q.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp_ro1bq1q.issort_list(long[]) [0x427d4e]\n??:? void tmp_ro1bq1q.__unittest_L21_C1() [0x427def]\n??:? void tmp_ro1bq1q.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length-1)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvxtj8gkc.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpvxtj8gkc.__unittest_L19_C1() [0x427e8e]\n??:? void tmpvxtj8gkc.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\t\n\tfor(long i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach (i, elem; list1) \n\t{\n\t\tif (i != 0) \n\t\t{\n\t\t\tif (list1[i] < list1[i-1]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool issort = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tissort = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn issort;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpn8lmhz9n.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmpn8lmhz9n.issort_list(long[]) [0x427d4e]\n??:? void tmpn8lmhz9n.__unittest_L21_C1() [0x427def]\n??:? void tmpn8lmhz9n.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool sorted = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif (list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach (long i; list1) \n\t{\n\t\tif (i < prev)\n\t\t\treturn false;\n\t\tprev = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, j; list1)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk5dii89.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpvk5dii89.__unittest_L21_C1() [0x427e66]\n??:? void tmpvk5dii89.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_ro1bq1q.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp_ro1bq1q.issort_list(long[]) [0x427d4e]\n??:? void tmp_ro1bq1q.__unittest_L21_C1() [0x427def]\n??:? void tmp_ro1bq1q.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool issort = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tissort = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn issort;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool is_sorted = true;\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tis_sorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length-1)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xpamtf6.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmp7xpamtf6.__unittest_L17_C1() [0x427e96]\n??:? void tmp7xpamtf6.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\tforeach(i,e;list1)\n\t{\n\t\tif(e != list2[i])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmp9ynho_e0.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ynho_e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(list1[i-1] > list1[i])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 1; i < list1.length; i++)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i; 0..list1.length-1)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8tsh_3j0.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp8tsh_3j0.__unittest_L17_C1() [0x427e8e]\n??:? void tmp8tsh_3j0.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool sorted = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i,j; list1)\n\t{\n\t\tif(list1[i] > list1[j])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk14mmd2z.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? bool tmpk14mmd2z.issort_list(long[]) [0x427d66]\n??:? void tmpk14mmd2z.__unittest_L19_C1() [0x427e0f]\n??:? void tmpk14mmd2z.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tfor (int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif (list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach (long i; list1)\n\t{\n\t\tif (i < prev)\n\t\t\treturn false;\n\t\tprev = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i;0..list1.length-1)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i-1]>list1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdbi5883h.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmpdbi5883h.__unittest_L17_C1() [0x427e96]\n??:? void tmpdbi5883h.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor(i=0;i<list1.length-1;i++)\n\t{\n\t\tif(list1[i]>list1[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort();\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmpw3d9jpx0.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3d9jpx0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpavg_auce.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmpavg_auce.__unittest_L21_C1() [0x427e96]\n??:? void tmpavg_auce.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool sorted = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i;1..list1.length)\n\t{\n\t\tif(list1[i-1] > list1[i])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i,j; list1)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqrkt_83.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmplqrkt_83.__unittest_L21_C1() [0x427e66]\n??:? void tmplqrkt_83.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_ro1bq1q.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp_ro1bq1q.issort_list(long[]) [0x427d4e]\n??:? void tmp_ro1bq1q.__unittest_L21_C1() [0x427def]\n??:? void tmp_ro1bq1q.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_ro1bq1q.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x428246]\n??:? bool tmp_ro1bq1q.issort_list(long[]) [0x427d4e]\n??:? void tmp_ro1bq1q.__unittest_L21_C1() [0x427def]\n??:? void tmp_ro1bq1q.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmpwu8qpp4z.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu8qpp4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i;1..list1.length-1)\n\t{\n\t\tif(list1[i]<list1[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8tsh_3j0.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp8tsh_3j0.__unittest_L17_C1() [0x427e8e]\n??:? void tmp8tsh_3j0.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tfor (int i = 0; i < list1.length - 1; i++) \n\t{\n\t\tif (list1[i] > list1[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tint i;\n\tfor (i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif (list1[i] > list1[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tbool result = true;\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif(list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(prev > i)\n\t\t\treturn false;\n\t\tprev = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "/tmp/tmp0ve4q880.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ve4q880.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tforeach(i; 1..list1.length)\n\t{\n\t\tif(list1[i] < list1[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether a specified array is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n{\n\tif(list1.length == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tlong prev = list1[0];\n\t\tforeach(long i; list1)\n\t\t{\n\t\t\tif(i < prev)\n\t\t\t\treturn false;\n\t\t\tprev = i;\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}