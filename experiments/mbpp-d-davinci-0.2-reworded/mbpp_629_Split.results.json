{
  "name": "mbpp_629_Split",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvothsjbc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvothsjbc.__unittest_L22_C1() [0x427f88]\n??:? void tmpvothsjbc.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:? __libc_start_main [0x59f3d554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i]%2==0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmp8ojhw0yp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ojhw0yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length) \n\t{\n\t\tif(list[i] % 2 == 0) \n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqsffwh8.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpaqsffwh8.__unittest_L22_C1() [0x427f60]\n??:? void tmpaqsffwh8.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tevens ~= item;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint i = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjyip5_or.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpjyip5_or.__unittest_L22_C1() [0x427f60]\n??:? void tmpjyip5_or.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = [];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp92qih91e.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92qih91e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpauh_6zt2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauh_6zt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach (i; 0 .. list.length)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcr0znlzw.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmpcr0znlzw.__unittest_L22_C1() [0x427f98]\n??:? void tmpcr0znlzw.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b362]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430579]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b339]\n??:? runModuleUnitTests [0x42c2a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp_o3030t_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o3030t_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphnw5i5w_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmphnw5i5w_.__unittest_L22_C1() [0x427f60]\n??:? void tmphnw5i5w_.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpq0hmg2sz.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0hmg2sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvothsjbc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvothsjbc.__unittest_L22_C1() [0x427f88]\n??:? void tmpvothsjbc.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:? __libc_start_main [0x59f3d554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint i = 0;\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\teven[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpep8g2yc4.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpep8g2yc4.__unittest_L22_C1() [0x427f60]\n??:? void tmpep8g2yc4.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach (long i; list) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp51z4czpv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp51z4czpv.__unittest_L22_C1() [0x427f88]\n??:? void tmp51z4czpv.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvothsjbc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvothsjbc.__unittest_L22_C1() [0x427f88]\n??:? void tmpvothsjbc.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:? __libc_start_main [0x59f3d554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even_list;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_list ~= i;\n\t\t}\n\t}\n\treturn even_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tlong[] odd = new long[];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpk5nidjok.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpk5nidjok.d(11): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5nidjok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpv1uh9l4c.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1uh9l4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\t\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpv0rvxnq9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0rvxnq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tlong[] odd = new long[list.length];\n\tint even_index = 0;\n\tint odd_index = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[even_index] = i;\n\t\t\teven_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd[odd_index] = i;\n\t\t\todd_index++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp58hb7lff.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmp58hb7lff.__unittest_L29_C1() [0x427fb4]\n??:? void tmp58hb7lff.__modtest() [0x4281b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b382]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b359]\n??:? runModuleUnitTests [0x42c2c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto evens = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpezeq5lkf.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezeq5lkf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp92qih91e.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92qih91e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i;list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tlong[] odds = new long[list.length];\n\tint evens_index = 0;\n\tint odds_index = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tevens[evens_index] = item;\n\t\t\tevens_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todds[odds_index] = item;\n\t\t\todds_index++;\n\t\t}\n\t}\n\tevens = evens[0..evens_index];\n\todds = odds[0..odds_index];\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeycok2ss.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpeycok2ss.__unittest_L22_C1() [0x427f60]\n??:? void tmpeycok2ss.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqsffwh8.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpaqsffwh8.__unittest_L22_C1() [0x427f60]\n??:? void tmpaqsffwh8.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach (i; 0 .. list.length)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpwulj90du.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwulj90du.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i]%2==0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiuh9v4g4.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpiuh9v4g4.__unittest_L22_C1() [0x427f60]\n??:? void tmpiuh9v4g4.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpv0rvxnq9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0rvxnq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp51z4czpv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp51z4czpv.__unittest_L22_C1() [0x427f88]\n??:? void tmp51z4czpv.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpv0rvxnq9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0rvxnq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i;0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmprkjdsxgx.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkjdsxgx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tlong[] odd = new long[list.length];\n\tint even_index = 0;\n\tint odd_index = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven[even_index] = num;\n\t\t\teven_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd[odd_index] = num;\n\t\t\todd_index++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnyxdngi_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmpnyxdngi_.__unittest_L29_C1() [0x427fb4]\n??:? void tmpnyxdngi_.__modtest() [0x4281b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b382]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b359]\n??:? runModuleUnitTests [0x42c2c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp_o3030t_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o3030t_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list) {\n\t\tif(i % 2 == 0) {\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint count = 0;\n\tforeach(i; list) {\n\t\tif(i % 2 == 0) {\n\t\t\tevens[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptizur4wi.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmptizur4wi.__unittest_L20_C1() [0x427f60]\n??:? void tmptizur4wi.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evenList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevenList ~= i;\n\t\t}\n\t}\n\treturn evenList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint i = 0;\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t\teven[i++] = num;\n\t}\n\teven.length = i;\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpauh_6zt2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauh_6zt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvothsjbc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvothsjbc.__unittest_L22_C1() [0x427f88]\n??:? void tmpvothsjbc.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:? __libc_start_main [0x59f3d554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\t\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\t\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6gtpkd4c.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gtpkd4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach (i; 0 .. list.length)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0fccdag9.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmp0fccdag9.__unittest_L22_C1() [0x427f98]\n??:? void tmp0fccdag9.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b362]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430579]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b339]\n??:? runModuleUnitTests [0x42c2a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint i = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjyip5_or.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpjyip5_or.__unittest_L22_C1() [0x427f60]\n??:? void tmpjyip5_or.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpauh_6zt2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauh_6zt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\teven ~= i;\n\t\telse\n\t\t\todd ~= i;\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evenList = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevenList ~= num;\n\t\t}\n\t}\n\treturn evenList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmp9oj_1gjg.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oj_1gjg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven ~= num;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmpksd1x_nz.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksd1x_nz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmpw4gfr7ya.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4gfr7ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeycok2ss.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpeycok2ss.__unittest_L22_C1() [0x427f60]\n??:? void tmpeycok2ss.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; list)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp_o3030t_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o3030t_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tlong[] odds = new long[list.length];\n\tlong[] result = new long[list.length];\n\tint evens_index = 0;\n\tint odds_index = 0;\n\tint result_index = 0;\n\t\n\tforeach(int i, long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens[evens_index] = num;\n\t\t\tevens_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todds[odds_index] = num;\n\t\t\todds_index++;\n\t\t}\n\t}\n\t\n\tforeach(int i, long num; evens)\n\t{\n\t\tresult[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\tforeach(int i, long num; odds)\n\t{\n\t\tresult[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkdpbpg07.d(39): Range violation\n----------------\n??:? _d_arrayboundsp [0x428616]\n??:? long[] tmpkdpbpg07.Split(long[]) [0x428006]\n??:? void tmpkdpbpg07.__unittest_L45_C1() [0x428091]\n??:? void tmpkdpbpg07.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpauh_6zt2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauh_6zt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even_list = new long[];\n\tforeach(i; 0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven_list ~= list[i];\n\t\t}\n\t}\n\treturn even_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmpobtpz_mm.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobtpz_mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp6fpaiihn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fpaiihn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp92qih91e.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92qih91e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqsffwh8.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpaqsffwh8.__unittest_L22_C1() [0x427f60]\n??:? void tmpaqsffwh8.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t\tevens ~= num;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmp92qih91e.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92qih91e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmpknwp58zk.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpknwp58zk.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknwp58zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\t\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\t\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmp1xf1mqmu.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xf1mqmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven ~= num;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpapbkk_g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbkk_g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpiowawwbo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiowawwbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; 0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "/tmp/tmpq0hmg2sz.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0hmg2sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i;list)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\treturn list.filter!(x => x % 2 == 0)();\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "/tmp/tmpxik8n_qm.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxik8n_qm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find even numbers from an array of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}