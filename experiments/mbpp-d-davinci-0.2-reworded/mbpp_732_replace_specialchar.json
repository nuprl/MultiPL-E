{
  "name": "mbpp_732_replace_specialchar",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\n*/\nstring replace_specialchar(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = replace_specialchar;\n\n    assert(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\");\n    assert(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\");\n    assert(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\");\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = text;\n\tforeach(i, c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult[i] = ':';\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif (c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\");\n}",
    "{\n\tstring result;\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\");\n}",
    "{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(ch; text)\n\t{\n\t\tif(ch == ' ' || ch == ',' || ch == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t{\n\t\t\tresult ~= ':';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ' || c == ',' || c == '.')\n\t\t\tresult ~= ':';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}"
  ]
}