{
  "name": "mbpp_406_find_Parity",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x != 0) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x)\n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{ \n\tbool parity = false; \n\twhile (x) \n\t{ \n\t\tparity = !parity; \n\t\tx = x & (x - 1); \n\t} \n\treturn parity; \n} \nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\t\n\tif (x % 2 == 0)\n\t\tparity = false;\n\telse\n\t\tparity = true;\n\t\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x != 0) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile(x != 0) {\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x > 0) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 0x1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x % 2) == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpds37i531.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmpds37i531.__unittest_L12_C1() [0x427a42]\n??:? void tmpds37i531.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp02sorb6q.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp02sorb6q.__unittest_L15_C1() [0x427a46]\n??:? void tmp02sorb6q.__modtest() [0x427a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp02sorb6q.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp02sorb6q.__unittest_L15_C1() [0x427a46]\n??:? void tmp02sorb6q.__modtest() [0x427a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x % 2) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n    return (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile(x != 0) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tint parity = 0;\n\twhile (x) \n\t{\n\t\tparity ^= (x & 1);\n\t\tx >>= 1;\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpxoiqzavd.d(16): Error: cannot implicitly convert expression `parity` of type `int` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxoiqzavd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) != 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x % 2 == 0);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnswc69t7.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmpnswc69t7.__unittest_L12_C1() [0x427a42]\n??:? void tmpnswc69t7.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tif (x % 2 == 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\tbool parity = false;\n\twhile (x) \n\t{\n\t\tparity = !parity;\n\t\tx = x & (x - 1);\n\t}\n\treturn parity;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x & 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp3rxycg02.d(10): Error: cannot implicitly convert expression `x % 2L` of type `long` to `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxycg02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn x % 2 == 0;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08qobw4v.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d15]\n??:? void tmp08qobw4v.__unittest_L12_C1() [0x427a42]\n??:? void tmp08qobw4v.__modtest() [0x427a94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]\n??:? runModuleUnitTests [0x42b811]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428164]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1) == 1;\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find whether the parity of a given number is odd.\n\t\n*/\nbool find_Parity(long x) \n{\n\treturn (x & 1);\n}\nunittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517669,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}