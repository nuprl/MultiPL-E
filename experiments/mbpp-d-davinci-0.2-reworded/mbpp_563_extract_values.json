{
  "name": "mbpp_563_extract_values",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.indexOf('\"', end);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t}\n\treturn values;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", index);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tindex = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile((start = text.find(\"\\\"\", start)) != -1)\n\t{\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start != -1 && end != -1)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(start != -1 && end != -1)\n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = end + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', start + 1);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (i < text.length && text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}"
  ]
}