{
  "name": "mbpp_167_next_power_of_2",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tif (n == 0) return 1;\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517467,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    return pow(2, ceil(log(n) / log(2))); \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmp6t5acq40.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t5acq40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0)\n    {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517467,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\t// First n in the below condition is for the case where n is 0\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    long p = 1; \n    if (n && !(n & (n - 1))) \n        return n; \n  \n    while (p < n) \n        p <<= 1; \n  \n    return p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tn--; \n\tn |= n >> 1; \n\tn |= n >> 2; \n\tn |= n >> 4; \n\tn |= n >> 8; \n\tn |= n >> 16; \n\tn++; \n\treturn n; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0ub0l13.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d55]\n??:? void tmp_0ub0l13.__unittest_L19_C1() [0x427a81]\n??:? void tmp_0ub0l13.__modtest() [0x427ad8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a90e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]\n??:? runModuleUnitTests [0x42b851]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tif (n == 0)\n\t\treturn 1;\n\telse\n\t\treturn 1 << (cast(int) ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tlong p = 1; \n\tif (n && !(n & (n - 1))) \n\t\treturn n; \n\twhile (p < n) \n\t\tp <<= 1; \n\treturn p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n)\n\t\tp <<= 1;\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn  >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\t// First n in the below condition is for the case where n is 0\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2.0, ceil(log(n) / log(2.0)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8m8hc51.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a05]\n??:? void tmpq8m8hc51.__unittest_L12_C1() [0x427e31]\n??:? void tmpq8m8hc51.__modtest() [0x428784]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430945]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430df4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]\n??:? runModuleUnitTests [0x42c6f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e54]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    long p = 1; \n    if (n && !(n & (n - 1))) \n        return n; \n  \n    while (p < n) \n        p <<= 1; \n  \n    return p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile(p < n)\n\t\tp <<= 1;\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log2(n)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmpmixkrv6l.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log2(cast(real)n)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmixkrv6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong i = 1;\n\twhile (i < n)\n\t\ti <<= 1;\n\treturn i;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn (long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmpcsjysmrn.d(10): Error: C style cast illegal, use `cast(long)pow(2, ceil(log(n) / log(2)))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsjysmrn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n)\n\t\tp <<= 1;\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile(p < n)\n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\t/* First n in the below condition is for the case where n is 0*/\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn  >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0) \n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n    long p = 1;\n    while (p < n) \n\t{\n        p <<= 1;\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    return pow(2, ceil(log(n) / log(2))); \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmp6t5acq40.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t5acq40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tlong count = 0; \n\t\n\t/* First n in the below condition is for the case where n is 0*/\n\tif (n && !(n&(n-1))) \n\t\treturn n; \n\t\n\twhile( n != 0) \n\t{ \n\t\tn >>= 1; \n\t\tcount += 1; \n\t} \n\t\n\treturn 1 << count; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong i = 1;\n\twhile (i < n) {\n\t\ti *= 2;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx7oth716.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmpx7oth716.__unittest_L12_C1() [0x427e7d]\n??:? void tmpx7oth716.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tlong p = 1; \n\tif (n && !(n & (n - 1))) \n\t\treturn n; \n\twhile (p < n) \n\t\tp <<= 1; \n\treturn p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0) \n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tif (n == 0) \n\t\treturn 1; \n\tn--; \n\tn |= n >> 1; \n\tn |= n >> 2; \n\tn |= n >> 4; \n\tn |= n >> 8; \n\tn |= n >> 16; \n\tn++; \n\treturn n; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx7oth716.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmpx7oth716.__unittest_L12_C1() [0x427e7d]\n??:? void tmpx7oth716.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\t/* First n in the below condition is for the case where n is 0*/\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx7oth716.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmpx7oth716.__unittest_L12_C1() [0x427e7d]\n??:? void tmpx7oth716.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    if (n == 0) \n        return 1; \n    else if (n & (n - 1) == 0) \n        return n; \n  \n    while ((n & (n - 1)) > 0)  \n        n = n & (n - 1); \n  \n    return (n << 1); \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "/tmp/tmp0vwlgbzl.d(12): Error: `n - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vwlgbzl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn (long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmpcsjysmrn.d(10): Error: C style cast illegal, use `cast(long)pow(2, ceil(log(n) / log(2)))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsjysmrn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    long p = 1; \n    if (n && !(n & (n - 1))) \n        return n; \n  \n    while (p < n) { \n        p <<= 1; \n    } \n    return p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long) pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_j9xo5gk.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp_j9xo5gk.__unittest_L12_C1() [0x427e7d]\n??:? void tmp_j9xo5gk.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn  >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n)\n\t\tp <<= 1;\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn  >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n    if (n == 0) \n        return 1; \n    else if (n > 0 && (n & (n - 1)) == 0) \n        return n; \n    else\n    { \n        while ((n & (n - 1)) > 0)  \n            n = n & (n - 1); \n        return (n << 1); \n    } \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn  >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2.0, ceil(log(n) / log(2.0)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8m8hc51.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a05]\n??:? void tmpq8m8hc51.__unittest_L12_C1() [0x427e31]\n??:? void tmpq8m8hc51.__modtest() [0x428784]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430945]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430df4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]\n??:? runModuleUnitTests [0x42c6f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e54]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tlong p = 1; \n\tif (n && !(n & (n - 1))) \n\t\treturn n; \n\twhile (p < n) { \n\t\tp <<= 1; \n\t} \n\treturn p; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx7oth716.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmpx7oth716.__unittest_L12_C1() [0x427e7d]\n??:? void tmpx7oth716.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log2(n)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "/tmp/tmpmixkrv6l.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log2(cast(real)n)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmixkrv6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{ \n\tn--; \n\tn |= n >> 1; \n\tn |= n >> 2; \n\tn |= n >> 4; \n\tn |= n >> 8; \n\tn |= n >> 16; \n\tn++; \n\treturn n; \n} \nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0ub0l13.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d55]\n??:? void tmp_0ub0l13.__unittest_L19_C1() [0x427a81]\n??:? void tmp_0ub0l13.__modtest() [0x427ad8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a90e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]\n??:? runModuleUnitTests [0x42b851]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\t\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\t\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\t\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2.0, ceil(log(n)/log(2.0)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa3vvae58.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a05]\n??:? void tmpa3vvae58.__unittest_L12_C1() [0x427e31]\n??:? void tmpa3vvae58.__modtest() [0x428784]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430945]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430df4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]\n??:? runModuleUnitTests [0x42c6f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e54]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n)\n\t\tp <<= 1;\n\treturn p;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn cast(long)pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lph6t75.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x428a6d]\n??:? void tmp2lph6t75.__unittest_L12_C1() [0x427e7d]\n??:? void tmp2lph6t75.__modtest() [0x4287ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c987]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430939]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]\n??:? runModuleUnitTests [0x42c75d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ebc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\tlong count = 0;\n\tif (n && !(n & (n - 1)))\n\t\treturn n;\n\twhile( n != 0)\n\t{\n\t\tn >>= 1;\n\t\tcount += 1;\n\t}\n\treturn 1 << count;\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n) / log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpikyxtl9a.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikyxtl9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n\t\n*/\nlong next_power_of_2(long n) \n{\n\treturn pow(2, ceil(log(n)/log(2)));\n}\nunittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpu74m9n_4.d(10): Error: cannot implicitly convert expression `pow(2, ceil(log(cast(real)n) / log(2.00000L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu74m9n_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}