{
  "name": "mbpp_771_check_expression",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpxuwa4m7r.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxuwa4m7r.d(23): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuwa4m7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpc288v053.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpc288v053.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc288v053.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t} \n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif (c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpmoe7kt8_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmoe7kt8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpbzqly2ft.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpbzqly2ft.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbzqly2ft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpixe6lc73.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixe6lc73.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint len = exp.length;\n\tint flag = 0;\n\tStack!char st = new Stack!char;\n\tfor(i = 0; i < len; i++) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tst.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(st.empty) \n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar temp = st.pop;\n\t\t\t\tif(exp[i] == ')' && temp != '(') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && temp != '{') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && temp != '[') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == 1 || !st.empty) \n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpja8hf3_x.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpja8hf3_x.d(13): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpja8hf3_x.d(13): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpja8hf3_x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char)(); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            else\n                s.pop(); \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp1bmz3sqm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp1bmz3sqm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bmz3sqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp49uiiznv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49uiiznv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpwclgq30y.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpwclgq30y.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwclgq30y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpd203ygkt.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd203ygkt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpsqs3oyl1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqs3oyl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpc288v053.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpc288v053.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc288v053.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpd9caayal.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9caayal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || s.top != '(') \n                return false; \n            else\n                s.pop; \n            break; \n        case '}': \n            if (s.empty || s.top != '{') \n                return false; \n            else\n                s.pop; \n            break; \n        case ']': \n            if (s.empty || s.top != '[') \n                return false; \n            else\n                s.pop; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpfcut_hbr.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcut_hbr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp_6mbfs1l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6mbfs1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp9kp1afz1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kp1afz1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpr_gkud2i.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpr_gkud2i.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpr_gkud2i.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_gkud2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp8qro4kve.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qro4kve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach (char c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp1sr8jacq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sr8jacq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk6ga6xuv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6ga6xuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp_tsdou2u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_tsdou2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpeww1om7g.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeww1om7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp) \n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[') \n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(ch == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(ch == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpd73oensd.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd73oensd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpr07na667.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr07na667.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar x = stack.pop;\n\t\t\t\tif(exp[i] == ')' && x != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && x != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && x != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp6s7vm7dl.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s7vm7dl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpkj5pcil5.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj5pcil5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == ')' && stack.top == '(')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp_exh0kbm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_exh0kbm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == ')' && stack.top == '(')\n\t\t\t\t{\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpcg_wrbrd.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcg_wrbrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t\tstack.pop;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t\tbalanced = false;\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpjkmrcouv.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpjkmrcouv.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkmrcouv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpc288v053.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpc288v053.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc288v053.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpsjm7s5i0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsjm7s5i0.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjm7s5i0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '{' || ch == '[') \n            s.push(ch); \n        else if (ch == ')' || ch == '}' || ch == ']') \n        { \n            if (s.empty) \n                return false; \n            if (ch == ')' && s.top != '(') \n                return false; \n            if (ch == '}' && s.top != '{') \n                return false; \n            if (ch == ']' && s.top != '[') \n                return false; \n            s.pop; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp3yj0sgap.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yj0sgap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpghabfrtg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghabfrtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmptjgbwvl0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptjgbwvl0.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjgbwvl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp0o3un_9q.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp0o3un_9q.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o3un_9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpvmq9lppi.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpvmq9lppi.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvmq9lppi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, ch) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpop1yiggv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpop1yiggv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpop1yiggv.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop1yiggv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || s.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (s.empty || s.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (s.empty || s.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmph6vlrnhl.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6vlrnhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpum18bqt1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpum18bqt1.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpum18bqt1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpn_nwivjh.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_nwivjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpkmc3iwcq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmc3iwcq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpmes5d79j.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpmes5d79j.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmes5d79j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpsjm7s5i0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsjm7s5i0.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjm7s5i0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmppkkmhjm_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmppkkmhjm_.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkkmhjm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplak5c4mg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplak5c4mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tauto stack = new Stack!char();\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar ch = stack.pop;\n\t\t\tif (exp[i] == ')' && ch != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && ch != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && ch != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpl3m4cnkt.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpl3m4cnkt.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3m4cnkt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpx80cey_f.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx80cey_f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tauto top = stack.pop();\n\t\t\tif(c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpzjj8dghf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjj8dghf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(')'); \n        else if (ch == '{') \n            s.push('}'); \n        else if (ch == '[') \n            s.push(']'); \n        else if (s.empty || s.pop != ch) \n            return false; \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpygu_yagq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpygu_yagq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygu_yagq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk6ga6xuv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6ga6xuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp2o5xr4tu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o5xr4tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpcce53_cu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpcce53_cu.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcce53_cu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpiwryyxuz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwryyxuz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tfor (i = 0; i < exp.length; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (stack.top == '(' && exp[i] == ')') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (stack.top == '[' && exp[i] == ']') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (stack.top == '{' && exp[i] == '}') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpthota8vx.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpthota8vx.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthota8vx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpj4mit1c3.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpj4mit1c3.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4mit1c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(i, c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8y06wfny.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp8y06wfny.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8y06wfny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp27j_vxzz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp27j_vxzz.d(19): Error: undefined identifier `is_matching`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27j_vxzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpavkislhz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavkislhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && s.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && s.top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && s.top != '{')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\ts.pop;\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpzmimitct.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmimitct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if ( !isMatchingPair(st.pop, ch) ) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp3wjhmxra.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmp3wjhmxra.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wjhmxra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpu2l8alqx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2l8alqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(stack.pop(), ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpsb0jnt02.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsb0jnt02.d(23): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsb0jnt02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpw5ggv3gj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpw5ggv3gj.d(21): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5ggv3gj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpecq3up3u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecq3up3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpgocnet2h.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpgocnet2h.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgocnet2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length();\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < n)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch = stack.pop();\n\t\t\t\tif(!((exp[i] == ')' && ch == '(') || (exp[i] == '}' && ch == '{') || (exp[i] == ']' && ch == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8bps0xh5.d(10): Error: no property `length` for type `string`\n/tmp/tmp8bps0xh5.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bps0xh5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpnshwgdex.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpnshwgdex.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpnshwgdex.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpnshwgdex.d(25): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnshwgdex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp2o5xr4tu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o5xr4tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar pop = stack.pop();\n\t\t\t\tif(exp[i] == ')' && pop != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && pop != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && pop != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpu7db8_yp.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpu7db8_yp.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpu7db8_yp.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7db8_yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpb3rx8plg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3rx8plg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar x = stack.pop;\n\t\t\tif(!((c == ')' && x == '(') || (c == ']' && x == '[') || (c == '}' && x == '{')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpilzz6pu7.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpilzz6pu7.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpilzz6pu7.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilzz6pu7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif (c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif (c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if (c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp1tjegsrm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tjegsrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk6ga6xuv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6ga6xuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(top == '(' && c == ')')\n\t\t\t\tcontinue;\n\t\t\telse if(top == '{' && c == '}')\n\t\t\t\tcontinue;\n\t\t\telse if(top == '[' && c == ']')\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpnb6fstbx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb6fstbx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\t// Create a stack of characters\n\tStack!char s;\n\t\n\t// Traverse the given expression to check matching parenthesis\n\tforeach(char ch; exp)\n\t{\n\t\t//If the exp[i] is a starting parenthesis then push it\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\ts.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\t//If we see an ending parenthesis without a pair then return false\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\t/* Pop the top element from stack, if it is not a pair parenthesis of character then there is a mismatch.\n\t\t\t   This happens for expressions like {(}) */\n\t\t\tif(!isMatchingPair(s.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// If there is something left in expression then there is a starting parenthesis without a closing parenthesis\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpu3yf49ws.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpu3yf49ws.d(27): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3yf49ws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack;\n\tforeach(i, c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpv6ksgc1b.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpv6ksgc1b.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6ksgc1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpb3rx8plg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3rx8plg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp5oflf4x2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5oflf4x2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach (c; exp) \n\t{\n\t\tif (c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif (!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpign8_b5m.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpign8_b5m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch = stack.pop;\n\t\t\t\tif(ch == '(' && exp[i] == ')')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ch == '[' && exp[i] == ']')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ch == '{' && exp[i] == '}')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk9scbfyt.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpk9scbfyt.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9scbfyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpwclgq30y.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpwclgq30y.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwclgq30y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto x = stack.pop;\n\t\t\t\tif(!((x == '(' && c == ')') || (x == '{' && c == '}') || (x == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpy48cip18.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy48cip18.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tfor (auto c : exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif (!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmph7kv608k.d(11): Error: no identifier for declarator `c`\n/tmp/tmph7kv608k.d(11): Error: expression expected, not `:`\n/tmp/tmph7kv608k.d(11): Error: found `exp` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7kv608k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tif(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\tif(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\tif(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpfl3d3xme.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl3d3xme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp2o5xr4tu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o5xr4tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t\tbalanced = false;\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpb9vkyb7w.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpb9vkyb7w.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9vkyb7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tif(len == 0)\n\t\treturn true;\n\t\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpts2vaqg1.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpts2vaqg1.d(14): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpts2vaqg1.d(14): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpts2vaqg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint n = exp.length;\n\tStack!char stack;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpad7_n6e0.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpad7_n6e0.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad7_n6e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tauto top = stack.pop();\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp_0i_tk1t.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0i_tk1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool result = true;\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpvtkq2s03.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpvtkq2s03.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtkq2s03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n\tStack!char stack = new Stack!char(); \n\tforeach (ch; exp) \n\t{ \n\t\tif (ch == '(' || ch == '[' || ch == '{') \n\t\t\tstack.push(ch); \n\t\telse if (ch == ')' || ch == ']' || ch == '}') \n\t\t{ \n\t\t\tif (stack.empty) \n\t\t\t\treturn false; \n\t\t\telse if (!is_matching_pair(stack.pop, ch)) \n\t\t\t\treturn false; \n\t\t} \n\t} \n\tif (stack.empty) \n\t\treturn true; /*balanced*/\n\telse\n\t\treturn false; /*not balanced*/\n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp003j9gae.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp003j9gae.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp003j9gae.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp003j9gae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpc288v053.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpc288v053.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc288v053.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpb3rx8plg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3rx8plg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\tif(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\tif(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp2lnqkmw6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lnqkmw6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint n = exp.length;\n\tStack!(char) s = new Stack!(char)();\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (s.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && s.top == '(') \n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && s.top == '{') \n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && s.top == '[') \n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp1o948j8c.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp1o948j8c.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp1o948j8c.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o948j8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpqd6751n_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd6751n_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (stack.top == '(' && c == ')')\n\t\t\t\tstack.pop;\n\t\t\telse if (stack.top == '{' && c == '}')\n\t\t\t\tstack.pop;\n\t\t\telse if (stack.top == '[' && c == ']')\n\t\t\t\tstack.pop;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpufp6s7rs.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufp6s7rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp) \n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[') \n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if (ch == ')' || ch == '}' || ch == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif (top == '(' && ch != ')') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (top == '{' && ch != '}') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (top == '[' && ch != ']') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpfxq5omxv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfxq5omxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp9kzrl5_g.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp9kzrl5_g.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kzrl5_g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length();\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpk588uxd7.d(10): Error: no property `length` for type `string`\n/tmp/tmpk588uxd7.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpk588uxd7.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpk588uxd7.d(24): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk588uxd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool result = true;\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmppbwzohl3.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbwzohl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpmf295e71.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpmf295e71.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpmf295e71.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf295e71.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(char c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpaam_ia67.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaam_ia67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpxfthvgj8.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxfthvgj8.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfthvgj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpmi2igr7_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi2igr7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpxyizjyvj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxyizjyvj.d(21): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyizjyvj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmproxisjki.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmproxisjki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint n = exp.length;\n\tStack!char s = new Stack!char();\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop, exp[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(s.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpaiowq7_b.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpaiowq7_b.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpaiowq7_b.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpaiowq7_b.d(14): Error: variable `i` is shadowing variable `tmpaiowq7_b.check_expression.i`\n/tmp/tmpaiowq7_b.d(26): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaiowq7_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(char ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop();\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\tif(ch == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\tif(ch == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpq2ac8mph.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpq2ac8mph.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2ac8mph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile (i < len) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif (exp[i] == ')' && top != '(') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == '}' && top != '{') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == ']' && top != '[') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp30unhy8s.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp30unhy8s.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp30unhy8s.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30unhy8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmplgdwal0y.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgdwal0y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpxs_667px.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs_667px.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!is_matching_pair(s.pop, ch)) \n                return false; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpsx41lccr.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsx41lccr.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx41lccr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmptfz2rc1f.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptfz2rc1f.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptfz2rc1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '{' || c == '[') \n            s.push(c); \n        else if (c == ')' || c == '}' || c == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp3um4izv_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp3um4izv_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp3um4izv_.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3um4izv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint n = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor(i = 0; i < n; i++) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), exp[i])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp15db5k56.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp15db5k56.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp15db5k56.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp15db5k56.d(26): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15db5k56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpfol3gryb.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfol3gryb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpfrl_rq10.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrl_rq10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tbool result = true;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar c = stack.pop();\n\t\t\tif(exp[i] == ')' && c != '(')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && c != '{')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && c != '[')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpbg95k55v.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpbg95k55v.d(13): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpbg95k55v.d(13): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbg95k55v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp_vwqq26h.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_vwqq26h.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vwqq26h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpxg29bjcn.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg29bjcn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpqx27e4vc.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqx27e4vc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ')' && stack.top == '(')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp6o1cny9d.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6o1cny9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < len) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpsea6fb0v.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpsea6fb0v.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsea6fb0v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmppkkmhjm_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmppkkmhjm_.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkkmhjm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyvopbapn.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyvopbapn.d(21): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvopbapn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpr1w85b7s.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1w85b7s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tif(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\tif(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\tif(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp1h2zl5w_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1h2zl5w_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpibhtaf_d.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpibhtaf_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpej9cxymv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej9cxymv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))\n\t\t\t\t{\n\t\t\t\t\tbalanced = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t{\n\t\tbalanced = false;\n\t}\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmphusknf4c.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmphusknf4c.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphusknf4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor(i = 0; i < len; i++) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), exp[i])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyo3oxwzx.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpyo3oxwzx.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyo3oxwzx.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyo3oxwzx.d(25): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyo3oxwzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmphj8p_3o0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphj8p_3o0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp9v9cx1ez.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9v9cx1ez.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyibk6k3z.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyibk6k3z.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyibk6k3z.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyibk6k3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp1nqcj541.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nqcj541.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpk7l04cvh.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpk7l04cvh.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7l04cvh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp_vmaxfqg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_vmaxfqg.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vmaxfqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk6ga6xuv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6ga6xuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpezvrxuko.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezvrxuko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpr96glz6k.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr96glz6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t\tstack.pop();\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t\tbalanced = false;\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp4ujswhix.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp4ujswhix.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ujswhix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop();\n\t\t\tif(c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpnat3utie.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnat3utie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || s.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (s.empty || s.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (s.empty || s.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpjwaipp30.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwaipp30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpmarmlxnx.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpmarmlxnx.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmarmlxnx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tbool is_balanced = true;\n\tauto stack = new Stack!char();\n\t\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\tis_balanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif (exp[i] == ')' && top != '(') \n\t\t\t\t{\n\t\t\t\t\tis_balanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == '}' && top != '{') \n\t\t\t\t{\n\t\t\t\t\tis_balanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == ']' && top != '[') \n\t\t\t\t{\n\t\t\t\t\tis_balanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (!stack.empty) \n\t{\n\t\tis_balanced = false;\n\t}\n\t\n\treturn is_balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpe_d0x04a.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpe_d0x04a.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_d0x04a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpeww1om7g.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeww1om7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tbool ret = true;\n\tStack!(char) s = new Stack!(char)();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\tret = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!s.empty)\n\t{\n\t\tret = false;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpks8t5vnt.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpks8t5vnt.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks8t5vnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpeh_9i2hs.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpeh_9i2hs.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpeh_9i2hs.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeh_9i2hs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(exp[i] == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmps14txbi1.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmps14txbi1.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmps14txbi1.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps14txbi1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmprdtln5ic.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmprdtln5ic.d(12): Error: variable `i` is shadowing variable `tmprdtln5ic.check_expression.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdtln5ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplak5c4mg.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplak5c4mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack;\n\tforeach(i, ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp4d329t1n.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp4d329t1n.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d329t1n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tint i = 0;\n\twhile(i < exp.length && balanced)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((exp[i] == ')' && top == '(') || (exp[i] == ']' && top == '[') || (exp[i] == '}' && top == '{')))\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp2xdfgs58.d(16): Error: undefined identifier `stack`\n/tmp/tmp2xdfgs58.d(20): Error: undefined identifier `stack`\n/tmp/tmp2xdfgs58.d(26): Error: undefined identifier `stack`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xdfgs58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tif(len == 0)\n\t\treturn true;\n\tif(len % 2 != 0)\n\t\treturn false;\n\tStack!char stack = new Stack!char();\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tchar c = exp[i];\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\tif(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\tif(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp5bi60xgf.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp5bi60xgf.d(15): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp5bi60xgf.d(15): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bi60xgf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n\tStack!(char) s; \n\tforeach (ch; exp) \n\t{ \n\t\tif (ch == '(' || ch == '{' || ch == '[') \n\t\t\ts.push(ch); \n\t\telse if (ch == ')' || ch == '}' || ch == ']') \n\t\t{ \n\t\t\tif (s.empty) \n\t\t\t\treturn false; \n\t\t\telse if (!isMatchingPair(s.pop, ch)) \n\t\t\t\treturn false; \n\t\t} \n\t} \n\tif (s.empty) \n\t\treturn true; \n\telse\n\t\treturn false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpt8eu5gyo.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpt8eu5gyo.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt8eu5gyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack = new Stack!char();\n\tforeach(i; 0..n)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t\tstack.push(exp[i]);\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i]))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpslm491br.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpslm491br.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpslm491br.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpslm491br.d(20): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslm491br.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == ')' && stack.top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpson31xi9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson31xi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tif(len == 0)\n\t\treturn true;\n\tif(len == 1)\n\t\treturn false;\n\t\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\tif(ch == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\tif(ch == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmps74blnhp.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmps74blnhp.d(16): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmps74blnhp.d(16): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps74blnhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpabadna_u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabadna_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < len) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpmkz4609i.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpmkz4609i.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkz4609i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp49uiiznv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49uiiznv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tchar ch = exp[i];\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyi2qa7km.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpyi2qa7km.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyi2qa7km.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi2qa7km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpzdhugtu_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpzdhugtu_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpzdhugtu_.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdhugtu_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp7rzcg80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rzcg80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpou8ctl3a.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpou8ctl3a.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpou8ctl3a.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpou8ctl3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpjas4yt49.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjas4yt49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (c; exp) \n    { \n        if (c == '(') \n            s.push(c); \n        else if (c == ')') \n        { \n            if (s.empty) \n                return false; \n            s.pop; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp40wl5u5z.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp40wl5u5z.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40wl5u5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto x = stack.pop;\n\t\t\t\tif(!((c == ')' && x == '(') || (c == '}' && x == '{') || (c == ']' && x == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpa22ph3no.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa22ph3no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpd9caayal.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9caayal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ')' && stack.top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == '}' && stack.top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ']' && stack.top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp35zhhz3q.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35zhhz3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tauto stack = new Stack!char();\n\t\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tauto top = stack.pop();\n\t\t\t\n\t\t\tif(top == '(' && c != ')') \n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']') \n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}') \n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(!stack.empty) \n\t{\n\t\tbalanced = false;\n\t}\n\t\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp6n1emd2l.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n1emd2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack = new Stack!char;\n\twhile (i < exp.length) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif (exp[i] == ')' && top != '(') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == ']' && top != '[') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (exp[i] == '}' && top != '{') \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpzyqatmp0.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpzyqatmp0.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyqatmp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && ch != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && ch != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && ch != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyjhwq25a.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjhwq25a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpqeai0ta0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqeai0ta0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || (s.pop() != '(')) \n                return false; \n            break; \n        case '}': \n            if (s.empty || (s.pop() != '{')) \n                return false; \n            break; \n        case ']': \n            if (s.empty || (s.pop() != '[')) \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp7j92ieb0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7j92ieb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < len) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar c = stack.pop();\n\t\t\tif (exp[i] == ')' && c != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == '}' && c != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == ']' && c != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp65xczgf4.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp65xczgf4.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp65xczgf4.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65xczgf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpcvutc8ql.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvutc8ql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tint len = exp.length;\n\tStack!char stack;\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpuc2ewt75.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpuc2ewt75.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuc2ewt75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpeglffifm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeglffifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpt1bq2_a4.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpt1bq2_a4.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1bq2_a4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmplupxagif.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplupxagif.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach (c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto x = stack.pop;\n\t\t\tif (c == ')' && x != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == '}' && x != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ']' && x != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp7q17etgu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q17etgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpopoz2v3x.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopoz2v3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch = stack.pop;\n\t\t\t\tif(!((ch == '(' && exp[i] == ')') || (ch == '{' && exp[i] == '}') || (ch == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmppejqvqo_.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmppejqvqo_.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmppejqvqo_.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppejqvqo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char[])();\n\tforeach (c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (c == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (c == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpaix_qgon.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaix_qgon.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (i, c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, c) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp6xcs4lp1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp6xcs4lp1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp6xcs4lp1.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xcs4lp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar x = stack.pop;\n\t\t\t\tif (c == ')' && x != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == '}' && x != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == ']' && x != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpv0ieummu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0ieummu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\tif (stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp4md5i4t1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4md5i4t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpsu0u07xl.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu0u07xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpk6ga6xuv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6ga6xuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stk;\n\tforeach(c; exp)\n\t{\n\t\tswitch(c)\n\t\t{\n\t\t\tcase '(':\n\t\t\tcase '{':\n\t\t\tcase '[':\n\t\t\t\tstk.push(c);\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tif(stk.empty || stk.top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\tstk.pop();\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tif(stk.empty || stk.top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\tstk.pop();\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tif(stk.empty || stk.top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\tstk.pop();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn stk.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmph6uc51gp.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6uc51gp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.pop != '(')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.pop != '[')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.pop != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpjkne_7a2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkne_7a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool result = true;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpyaq7di4c.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyaq7di4c.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyaq7di4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpwclgq30y.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpwclgq30y.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwclgq30y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}