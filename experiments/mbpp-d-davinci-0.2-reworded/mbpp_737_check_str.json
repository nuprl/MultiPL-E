{
  "name": "mbpp_737_check_str",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t\n*/\nbool check_str(string string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = check_str;\n\n    assert(candidate(\"annie\") == true);\n    assert(candidate(\"dawood\") == false);\n    assert(candidate(\"Else\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn regex(r\"^[aeiouAEIOU].*\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").length > 0;\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").length > 0;\n}",
    "{\n\treturn regex(string, \"^[aeiou].*\").match(string);\n}",
    "{\n\treturn regex(r\"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\tstring pattern = \"^[aeiouAEIOU].*\";\n\treturn regexMatch(pattern, string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU].*\").matchLength > 0;\n}",
    "{\n\treturn regex(r\"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(r\"^[aeiou].*\", string, \"i\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(r\"^[aeiouAEIOU].*\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiou]\").match(string);\n}",
    "{\n\treturn regexMatch(string, \"^[aeiou].*\");\n}",
    "{\n\treturn regex(r\"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\tauto regex = regex(\"^[aeiouAEIOU]\");\n\treturn regex.matchFirst(string);\n}",
    "{\n\treturn regex(r\"^[aeiouAEIOU]\").match(string);\n}",
    "{\n\treturn regex(string, \"^[aeiouAEIOU].*\").match;\n}"
  ]
}