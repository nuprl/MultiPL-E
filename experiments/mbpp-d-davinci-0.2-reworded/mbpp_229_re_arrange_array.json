{
  "name": "mbpp_229_re_arrange_array",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\n*/\nlong[] re_arrange_array(long[] arr, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = re_arrange_array;\n\n    assert(candidate([-1L, 2L, -3L, 4L, 5L, 6L, -7L, 8L, 9L], 9L) == [-1L, -3L, -7L, 4L, 5L, 6L, 2L, 8L, 9L]);\n    assert(candidate([12L, -14L, -26L, 13L, 15L], 5L) == [-14L, -26L, 12L, 13L, 15L]);\n    assert(candidate([10L, 24L, 36L, -42L, -39L, -78L, 85L], 7L) == [-42L, -39L, -78L, 10L, 24L, 36L, 85L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong p = 0;\n\tlong neg = 0;\n\tlong pos = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg] = arr[i];\n\t\t\tneg++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos] = arr[i];\n\t\t\tpos++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg; i++)\n\t{\n\t\tresult[p] = negative[i];\n\t\tp++;\n\t}\n\t\n\tfor (long i = 0; i < pos; i++)\n\t{\n\t\tresult[p] = positive[i];\n\t\tp++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor(long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[i + negative_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{ \n\tlong i = 0;\n\tlong j = n - 1;\n\twhile (i < j) \n\t{ \n\t\tif (arr[i] < 0) \n\t\t{ \n\t\t\ti++; \n\t\t\tcontinue; \n\t\t} \n\t\tif (arr[j] >= 0) \n\t\t{ \n\t\t\tj--; \n\t\t\tcontinue; \n\t\t} \n\t\tswap(arr[i], arr[j]); \n\t\ti++; \n\t\tj--; \n\t} \n\treturn arr;\n} ",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tres[neg_index + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = neg_count; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - neg_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tlong i = 0;\n\tfor (; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tfor (i = 0; i < neg_count; i++)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tfor (i = neg_count; i < n; i++)\n\t{\n\t\tres[i] = pos[i - neg_count];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[j] = arr[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < j) \n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\twhile (i < n) \n\t{\n\t\tresult[i] = positive[i - j];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; negative_index..n)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = negative_index; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor(long i = 0; i < zero_index; i++)\n\t{\n\t\tresult[negative_index + i] = zero[i];\n\t}\n\t\n\tfor(long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + zero_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[i + negative_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] arr_neg = new long[n];\n\tlong[] arr_pos = new long[n];\n\tlong[] arr_res = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(i;0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tarr_neg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr_pos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i;0..neg_count)\n\t{\n\t\tarr_res[i] = arr_neg[i];\n\t}\n\t\n\tforeach(i;0..pos_count)\n\t{\n\t\tarr_res[neg_count + i] = arr_pos[i];\n\t}\n\t\n\treturn arr_res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < negative_count; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < positive_count; i++) \n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_count)\n\t{\n\t\tret[i] = neg[i];\n\t}\n\t\n\tforeach(long i; 0..pos_count)\n\t{\n\t\tret[neg_count + i] = pos[i];\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] zero = new long[n];\n\tlong neg_index = 0;\n\tlong pos_index = 0;\n\tlong zero_index = 0;\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse if(arr[i] > 0)\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tneg_index = 0;\n\tpos_index = 0;\n\tzero_index = 0;\n\tforeach(long i; 0..n)\n\t{\n\t\tif(neg_index < n)\n\t\t{\n\t\t\tresult[i] = negative[neg_index];\n\t\t\tneg_index++;\n\t\t}\n\t\telse if(pos_index < n)\n\t\t{\n\t\t\tresult[i] = positive[pos_index];\n\t\t\tpos_index++;\n\t\t}\n\t\telse if(zero_index < n)\n\t\t{\n\t\t\tresult[i] = zero[zero_index];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor(long i = negative_index; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative_arr = new long[n];\n\tlong[] positive_arr = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative_arr[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive_arr[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative_arr[i];\n\t}\n\t\n\tforeach(long i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive_arr[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] >= 0)\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong[] neg_res = new long[neg_count];\n\tlong[] pos_res = new long[pos_count];\n\tforeach(i; 0..neg_count)\n\t{\n\t\tneg_res[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tpos_res[i] = pos[i];\n\t}\n\tneg_res ~= pos_res;\n\treturn neg_res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0 .. neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0 .. pos_count)\n\t{\n\t\tresult[i + neg_count] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0..pos_count)\n\t{\n\t\tresult[neg_count+i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < neg_index) \n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < pos_index) \n\t{\n\t\tresult[i + neg_index] = positive[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong j = 0;\n\tfor (long i = 0; i < neg_count; i++) \n\t{\n\t\tresult[j] = negative[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < pos_count; i++) \n\t{\n\t\tresult[j] = positive[i];\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] >= 0)\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t}\n\tforeach(long i; 0 .. neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\tforeach(long i; 0 .. pos_count)\n\t{\n\t\tresult[i + neg_count] = pos[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < n) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[j] = arr[i];\n\t\t\tj++;\n\t\t} else {\n\t\t\tpositive[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < j) {\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\twhile (i < n) {\n\t\tresult[i] = positive[i - j];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\twhile(i < neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\twhile(i < pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(long i; 0 .. negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(long i; 0 .. zero_index)\n\t{\n\t\tresult[index] = zero[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(long i; 0 .. positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tnegative = negative[0..negative_index];\n\tpositive = positive[0..positive_index];\n\t\n\tresult = negative ~ positive;\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong count = 0;\n\tforeach(i; 0..neg_count)\n\t{\n\t\tres[count] = neg[i];\n\t\tcount++;\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tres[count] = pos[i];\n\t\tcount++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < pos_index; i++) \n\t{\n\t\tresult[i + neg_index] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong j = 0;\n\tforeach(long i; 0 .. neg_count)\n\t{\n\t\tres[j] = neg[i];\n\t\tj++;\n\t}\n\tforeach(long i; 0 .. pos_count)\n\t{\n\t\tres[j] = pos[i];\n\t\tj++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong i = 0, j = n - 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem < 0)\n\t\t{\n\t\t\tresult[i] = elem;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[j] = elem;\n\t\t\tj--;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = arr.dup;\n\tlong i = 0;\n\tlong j = n - 1;\n\twhile (i < j) \n\t{\n\t\twhile (result[i] < 0) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\twhile (result[j] >= 0) \n\t\t{\n\t\t\tj--;\n\t\t}\n\t\tif (i < j) \n\t\t{\n\t\t\tswap(result[i], result[j]);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < pos_index; i++)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] > 0) \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t} \n\t\telse if (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\tfor (long i = 0; i < zero_index; i++) \n\t{\n\t\tresult[index] = zero[i];\n\t\tindex++;\n\t}\n\tfor (long i = 0; i < positive_index; i++) \n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong j = 0;\n\tforeach(i; 0 .. neg_count)\n\t{\n\t\tresult[j] = negative[i];\n\t\tj++;\n\t}\n\tforeach(i; 0 .. pos_count)\n\t{\n\t\tresult[j] = positive[i];\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse {\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++) {\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++) {\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count+i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\tlong[] temp = negative[0..negative_index] ~ positive[0..positive_index];\n\tresult = temp[0..n];\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong j = 0;\n\tlong k = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ttemp2[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tfor (long i = 0; i < j; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[j + i] = temp2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_index = 0;\n\tlong pos_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_index)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_index)\n\t{\n\t\tres[neg_index + i] = pos[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp1 = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tlong i = 0;\n\tforeach(long j; 0..neg_count)\n\t{\n\t\tresult[i] = negative[j];\n\t\ti++;\n\t}\n\tforeach(long j; 0..pos_count)\n\t{\n\t\tresult[i] = positive[j];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++) \n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++) \n\t{\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor(long i = negative_index; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; neg_count..n)\n\t{\n\t\tresult[i] = positive[i-neg_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_index = 0;\n\tlong pos_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(i < negative_index)\n\t\t{\n\t\t\tresult[i] = negative[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = positive[i - negative_index];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t}\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; negative_index..n)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < pos_count; i++)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tlong[] temp = new long[n];\n\t\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[n-k-1] = arr[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tforeach(long i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_count; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_count; i++) \n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_count = 0;\n\tlong positive_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[i + negative_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[i + negative_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] temp = new long[n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\t\n\tforeach(long l; arr)\n\t{\n\t\tif(l < 0)\n\t\t{\n\t\t\tnegative[i] = l;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[j] = l;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tforeach(long l; negative)\n\t{\n\t\tif(l != 0)\n\t\t{\n\t\t\ttemp[k] = l;\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\tforeach(long l; positive)\n\t{\n\t\tif(l != 0)\n\t\t{\n\t\t\ttemp[k] = l;\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tfor (long i = 0; i < neg_index; i++) \n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\tfor (long i = 0; i < pos_index; i++) \n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\twhile (i < n) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} else {\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < neg_index) {\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < pos_index) {\n\t\tresult[neg_index + i] = positive[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_cnt = 0;\n\tlong neg_cnt = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_cnt] = arr[i];\n\t\t\tneg_cnt++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_cnt] = arr[i];\n\t\t\tpos_cnt++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_cnt; i++)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tfor (long i = 0; i < pos_cnt; i++)\n\t{\n\t\tres[i + neg_cnt] = pos[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong p = 0;\n\tlong n = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[n] = arr[i];\n\t\t\tn++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[p] = arr[i];\n\t\t\tp++;\n\t\t}\n\t}\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0 .. p)\n\t{\n\t\tresult[i+n] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong j = 0;\n\tlong k = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ttemp2[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tj = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (i < j) \n\t\t{\n\t\t\tresult[i] = temp[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[i] = temp2[i - j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\tlong zero_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_count] = arr[i];\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..zero_count)\n\t{\n\t\tresult[index] = zero[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] result_pos = new long[n];\n\tlong[] result_neg = new long[n];\n\tlong[] result_zero = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tresult_pos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tresult_neg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_zero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_index)\n\t{\n\t\tresult[i] = result_neg[i];\n\t}\n\t\n\tforeach(long i; 0..zero_index)\n\t{\n\t\tresult[neg_index + i] = result_zero[i];\n\t}\n\t\n\tforeach(long i; 0..pos_index)\n\t{\n\t\tresult[neg_index + zero_index + i] = result_pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..zero_index)\n\t{\n\t\tresult[index] = zero[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tforeach(long i; 0..neg_index)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\tforeach(long i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = pos[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_count)\n\t{\n\t\tresult[i + neg_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive_arr = new long[n];\n\tlong[] negative_arr = new long[n];\n\tlong positive_arr_index = 0;\n\tlong negative_arr_index = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative_arr[negative_arr_index] = arr[i];\n\t\t\tnegative_arr_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive_arr[positive_arr_index] = arr[i];\n\t\t\tpositive_arr_index++;\n\t\t}\n\t}\n\tforeach(long i; 0 .. negative_arr_index)\n\t{\n\t\tresult[i] = negative_arr[i];\n\t}\n\tforeach(long i; 0 .. positive_arr_index)\n\t{\n\t\tresult[negative_arr_index + i] = positive_arr[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[i + neg_count] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..zero_index)\n\t{\n\t\tresult[negative_index + i] = zero[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + zero_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(long i; neg_count..n)\n\t{\n\t\tres[i] = pos[i - neg_count];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] result = new long[n];\n    int i = 0;\n    int j = n - 1;\n    foreach(long num; arr)\n    {\n        if (num < 0)\n        {\n            result[i] = num;\n            i++;\n        }\n        else\n        {\n            result[j] = num;\n            j--;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong i = 0, j = n - 1;\n\tforeach(long x; arr)\n\t{\n\t\tif(x < 0)\n\t\t{\n\t\t\tres[i] = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[j] = x;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] temp = new long[n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\twhile (i < n) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[j] = arr[i];\n\t\t\tj++;\n\t\t} else {\n\t\t\tpositive[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < j) {\n\t\ttemp[l] = negative[i];\n\t\tl++;\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < k) {\n\t\ttemp[l] = positive[i];\n\t\tl++;\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < n) {\n\t\tresult[i] = temp[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < positive_count; i++)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tif(i < negative_count)\n\t\t{\n\t\t\tresult[i] = negative[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = positive[i - negative_count];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tlong zero_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_count] = arr[i];\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\tlong count = 0;\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[count] = negative[i];\n\t\tcount++;\n\t}\n\t\n\tforeach(i; 0..zero_count)\n\t{\n\t\tresult[count] = zero[i];\n\t\tcount++;\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[count] = positive[i];\n\t\tcount++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tresult = negative[0 .. negative_index] ~ positive[0 .. positive_index];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[i + neg_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_count = 0;\n\tlong positive_count = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(long elem; arr)\n\t{\n\t\tif(elem < 0)\n\t\t{\n\t\t\tneg[neg_count] = elem;\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = elem;\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long elem; neg)\n\t{\n\t\tres ~= elem;\n\t}\n\t\n\tforeach(long elem; pos)\n\t{\n\t\tres ~= elem;\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0 .. zero_index)\n\t{\n\t\tresult[index] = zero[i];\n\t\tindex++;\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = neg_count; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - neg_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\tlong j = 0;\n\twhile(j < positive_index)\n\t{\n\t\tresult[i] = positive[j];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < pos_count; i++)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[arr.length];\n\tlong[] pos = new long[arr.length];\n\tlong[] neg = new long[arr.length];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_count; i++) \n\t{\n\t\tresult[i] = neg[i];\n\t}\n\tfor (long i = 0; i < pos_count; i++) \n\t{\n\t\tresult[neg_count + i] = pos[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_idx = 0;\n\tlong neg_idx = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_idx] = arr[i];\n\t\t\tneg_idx++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_idx] = arr[i];\n\t\t\tpos_idx++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_idx)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_idx)\n\t{\n\t\tresult[i + neg_idx] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0 .. pos_count)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] arr_neg = new long[n];\n\tlong[] arr_pos = new long[n];\n\tlong[] arr_res = new long[n];\n\tlong neg_idx = 0;\n\tlong pos_idx = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tarr_neg[neg_idx] = arr[i];\n\t\t\tneg_idx++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr_pos[pos_idx] = arr[i];\n\t\t\tpos_idx++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_idx)\n\t{\n\t\tarr_res[i] = arr_neg[i];\n\t}\n\t\n\tforeach(i; 0 .. pos_idx)\n\t{\n\t\tarr_res[neg_idx + i] = arr_pos[i];\n\t}\n\t\n\treturn arr_res;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_idx = 0;\n\tlong neg_idx = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_idx] = arr[i];\n\t\t\tneg_idx++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_idx] = arr[i];\n\t\t\tpos_idx++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_idx; i++)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tfor (long i = neg_idx; i < n; i++)\n\t{\n\t\tres[i] = pos[i - neg_idx];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[arr.length];\n\tlong[] negative = new long[arr.length];\n\tlong[] positive = new long[arr.length];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = negative_count; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\twhile (i < n) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} else {\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < neg_index) {\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\twhile (i < n) {\n\t\tresult[i] = positive[i - neg_index];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_idx = 0;\n\tlong neg_idx = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_idx] = arr[i];\n\t\t\tneg_idx++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_idx] = arr[i];\n\t\t\tpos_idx++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_idx)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_idx)\n\t{\n\t\tres[neg_idx + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tlong i = 0;\n\twhile (i < n) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t} else {\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < neg_count) {\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < pos_count) {\n\t\tresult[neg_count + i] = positive[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tnegative_index = 0;\n\tpositive_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(negative_index < negative.length)\n\t\t{\n\t\t\tresult[i] = negative[negative_index];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = positive[positive_index];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tfor (long i = 0; i < pos_count; i++)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[i + negative_index] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_index)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_index)\n\t{\n\t\tres[neg_index+i] = pos[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tfor (long i = 0; i < pos_count; i++)\n\t{\n\t\tresult[neg_count + i] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\twhile (i < neg_index + pos_index)\n\t{\n\t\tresult[i] = positive[i - neg_index];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] neg_arr = new long[n];\n\tlong[] pos_arr = new long[n];\n\tlong neg_index = 0;\n\tlong pos_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg_arr[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos_arr[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tneg_arr = neg_arr[0 .. neg_index];\n\tpos_arr = pos_arr[0 .. pos_index];\n\t\n\treturn neg_arr ~ pos_arr;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n) {\n\t\tif(arr[i] < 0) {\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t} else {\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count) {\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count) {\n\t\tres[neg_count + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_count = 0;\n\tlong pos_count = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_count)\n\t{\n\t\tret[i] = neg[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_count)\n\t{\n\t\tret[i + neg_count] = pos[i];\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} else {\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_index; i++) {\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = neg_index; i < n; i++) {\n\t\tresult[i] = positive[i - neg_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count+i] = pos[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tif (arr[i] < 0) {\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t} else {\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++) {\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++) {\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = 0; i < positive_index; i++) \n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] zero = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tlong zero_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..zero_index)\n\t{\n\t\tresult[negative_index + i] = zero[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + zero_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] >= 0)\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = negative_index; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[index] = negative[i];\n\t\tindex++;\n\t}\n\tfor (long i = 0; i < positive_index; i++) \n\t{\n\t\tresult[index] = positive[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] temp = new long[n];\n\tlong[] result = new long[n];\n\tlong[] result2 = new long[n];\n\tlong[] result3 = new long[n];\n\tlong[] result4 = new long[n];\n\tlong[] result5 = new long[n];\n\tlong[] result6 = new long[n];\n\tlong[] result7 = new long[n];\n\tlong[] result8 = new long[n];\n\tlong[] result9 = new long[n];\n\tlong[] result10 = new long[n];\n\tlong[] result11 = new long[n];\n\tlong[] result12 = new long[n];\n\tlong[] result13 = new long[n];\n\tlong[] result14 = new long[n];\n\tlong[] result15 = new long[n];\n\tlong[] result16 = new long[n];\n\tlong[] result17 = new long[n];\n\tlong[] result18 = new long[n];\n\tlong[] result19 = new long[n];\n\tlong[] result20 = new long[n];\n\tlong[] result21 = new long[n];\n\tlong[] result22 = new long[n];\n\tlong[] result23 = new long[n];\n\tlong[] result24 = new long[n];\n\tlong[] result25 = new long[n];\n\tlong[] result26 = new long[n];\n\tlong[] result27 = new long[n];\n\tlong[] result28 = new long[n];\n\tlong[] result29 = new long[n];\n\tlong[] result30 = new long[n];\n\tlong[] result31 = new long[n];\n\tlong[] result32 = new long[n];\n\tlong[] result33 = new long[n];\n\tlong[] result34 = new long[n];\n\tlong[] result35 = new long[n];\n\tlong[] result36 = new long[n];\n\tlong[] result37 = new long[n];\n\tlong[] result38 = new long[n];\n\tlong[] result39 = new long[n];\n\tlong[] result40 = new long[n];\n\tlong[] result41 = new long[n];\n\tlong[] result42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[i + negative_count] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_idx = 0;\n\tlong pos_idx = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_idx] = arr[i];\n\t\t\tneg_idx++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_idx] = arr[i];\n\t\t\tpos_idx++;\n\t\t}\n\t}\n\tlong i = 0;\n\tforeach(j; 0 .. neg_idx)\n\t{\n\t\tres[i] = neg[j];\n\t\ti++;\n\t}\n\tforeach(j; 0 .. pos_idx)\n\t{\n\t\tres[i] = pos[j];\n\t\ti++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; negative_index..n)\n\t{\n\t\tresult[i] = positive[i-negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t\ti++;\n\t}\n\tlong j = 0;\n\twhile(i < n)\n\t{\n\t\tresult[i] = positive[j];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = neg_count; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - neg_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = negative_index; i < n; i++) \n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tres[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tres[neg_count + i] = pos[i];\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] pos = new long[n];\n\tlong[] neg = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = pos[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[arr.length];\n\tlong[] pos = new long[arr.length];\n\tlong[] neg = new long[arr.length];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_index)\n\t{\n\t\tresult[i] = neg[i];\n\t}\n\t\n\tforeach(i; 0..pos_index)\n\t{\n\t\tresult[neg_index + i] = pos[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] result_pos = new long[n];\n\tlong[] result_neg = new long[n];\n\tlong[] result_zero = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tlong zero_index = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tresult_pos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tresult_neg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_zero[zero_index] = arr[i];\n\t\t\tzero_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[index] = result_neg[i];\n\t\tindex++;\n\t}\n\tforeach(long i; 0 .. zero_index)\n\t{\n\t\tresult[index] = result_zero[i];\n\t\tindex++;\n\t}\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[index] = result_pos[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] zero = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_count = 0;\n\tlong positive_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_count; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = neg_count; i < neg_count + pos_count; i++)\n\t{\n\t\tresult[i] = positive[i - neg_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(index, val; arr)\n\t{\n\t\tif(val < 0)\n\t\t{\n\t\t\tnegative[neg_index] = val;\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = val;\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(index, val; negative)\n\t{\n\t\tif(val != 0)\n\t\t{\n\t\t\tresult[index] = val;\n\t\t}\n\t}\n\t\n\tforeach(index, val; positive)\n\t{\n\t\tif(val != 0)\n\t\t{\n\t\t\tresult[index + neg_index] = val;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < neg_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = neg_index; i < neg_index + pos_index; i++) \n\t{\n\t\tresult[i] = positive[i - neg_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_index = 0;\n\tlong positive_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_index)\n\t{\n\t\tresult[negative_index+i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < negative_index; i++)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tfor (long i = negative_index; i < n; i++)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; neg_index .. n)\n\t{\n\t\tresult[i] = positive[i - neg_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_count; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < pos_count; i++) \n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new"
  ]
}