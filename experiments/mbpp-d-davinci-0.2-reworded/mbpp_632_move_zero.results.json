{
  "name": "mbpp_632_move_zero",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[i - zero_count] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong result_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_list[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult_list[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(i < non_zero_count)\n\t\t{\n\t\t\tresult[i] = non_zero_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = zero_list[i - non_zero_count];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517592,
      "stdout": "",
      "stderr": "/tmp/tmpga1ntcbg.d(9): Error: no property `copy` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1ntcbg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\t\n\twhile (j < num_list.length)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj += 1;\n\t}\n\t\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] num_list_copy_2 = num_list.copy();\n\tlong[] num_list_copy_3 = num_list.copy();\n\tlong[] num_list_copy_4 = num_list.copy();\n\tlong[] num_list_copy_5 = num_list.copy();\n\tlong[] num_list_copy_6 = num_list.copy();\n\tlong[] num_list_copy_7 = num_list.copy();\n\tlong[] num_list_copy_8 = num_list.copy();\n\tlong[] num_list_copy_9 = num_list.copy();\n\tlong[] num_list_copy_10 = num_list.copy();\n\tlong[] num_list_copy_11 = num_list.copy();\n\tlong[] num_list_copy_12 = num_list.copy();\n\tlong[] num_list_copy_13 = num_list.copy();\n\tlong[] num_list_copy_14 = num_list.copy();\n\tlong[] num_list_copy_15 = num_list.copy();\n\tlong[] num_list_copy_16 = num_list.copy();\n\tlong[] num_list_copy_17 = num_list.copy();\n\tlong[] num_list_copy_18 = num_list.copy();\n\tlong[] num_list_copy_19 = num_list.copy();\n\tlong[] num_list_copy_20 = num_list.copy();\n\tlong[] num_list_copy_21 = num_list.copy();\n\tlong[] num_list_copy_22 = num_list.copy();\n\tlong[] num_list_copy_23 = num_list.copy();\n\tlong[] num_list_copy_24 = num_list.copy();\n\tlong[] num_list_copy_25 = num_list.copy();\n\tlong[] num_list_copy_26 = num_list.copy();\n\tlong[] num_list_copy_27 = num_list.copy();\n\tlong[] num_list_copy_28 = num_list.copy();\n\tlong[] num_list_\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "/tmp/tmpfjmuqasq.d(38): Error: semicolon expected, not `unittest`\n/tmp/tmpfjmuqasq.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjmuqasq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint i = 0;\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong j = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu7b57y7g.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmpu7b57y7g.__unittest_L33_C1() [0x4280ac]\n??:? void tmpu7b57y7g.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\t\n\tforeach(long num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\t\n\treturn non_zero_list ~ zero_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmpb1f80mrl.d(9): Error: no property `copy` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1f80mrl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxefwufdf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmpxefwufdf.__unittest_L30_C1() [0x4280ac]\n??:? void tmpxefwufdf.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] result = new long[num_list.length];\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tresult[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++) \n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor(long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = len(num_list);\n\twhile (i < len)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count += 1;\n\t\t\ti += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj += 1;\n\t\t\ti += 1;\n\t\t}\n\t}\n\twhile (j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj += 1;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmp9w6h7m4a.d(12): Error: undefined identifier `len`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9w6h7m4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile(i < len)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmp1wzkqorh.d(11): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wzkqorh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint zero_count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tfor (i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tfor (i = num_list.length - zero_count; i < num_list.length; i++)\n\t{\n\t\tnum_list[i] = 0;\n\t}\n\t\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmp7lz7jftv.d(26): Error: cannot implicitly convert expression `num_list.length - cast(ulong)zero_count` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lz7jftv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count] = 0;\n\t\tcount++;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile(i < len)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmp1wzkqorh.d(11): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wzkqorh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2c_2txrz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42856d]\n??:? void tmp2c_2txrz.__unittest_L30_C1() [0x4280a4]\n??:? void tmp2c_2txrz.__modtest() [0x4282ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430769]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b5]\n??:? runModuleUnitTests [0x42c421]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint zero_count = 0;\n\tint i = 0;\n\tfor (i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t} else {\n\t\t\tzero_count++;\n\t\t}\n\t}\n\tfor (i = num_list.length - zero_count; i < num_list.length; i++) {\n\t\tresult[i] = 0;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmpefbex68d.d(19): Error: cannot implicitly convert expression `num_list.length - cast(ulong)zero_count` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefbex68d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp48u6dfei.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmp48u6dfei.__unittest_L30_C1() [0x4280ac]\n??:? void tmp48u6dfei.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0c7r28hg.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp0c7r28hg.__unittest_L30_C1() [0x4280a0]\n??:? void tmp0c7r28hg.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c643]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ad]\n??:? runModuleUnitTests [0x42c419]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint counter = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[counter] = num_list[i];\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeroes[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zeroes[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] num_list_copy_2 = num_list.copy();\n\tlong[] num_list_copy_3 = num_list.copy();\n\tlong[] num_list_copy_4 = num_list.copy();\n\tlong[] num_list_copy_5 = num_list.copy();\n\tlong[] num_list_copy_6 = num_list.copy();\n\tlong[] num_list_copy_7 = num_list.copy();\n\tlong[] num_list_copy_8 = num_list.copy();\n\tlong[] num_list_copy_9 = num_list.copy();\n\tlong[] num_list_copy_10 = num_list.copy();\n\tlong[] num_list_copy_11 = num_list.copy();\n\tlong[] num_list_copy_12 = num_list.copy();\n\tlong[] num_list_copy_13 = num_list.copy();\n\tlong[] num_list_copy_14 = num_list.copy();\n\tlong[] num_list_copy_15 = num_list.copy();\n\tlong[] num_list_copy_16 = num_list.copy();\n\tlong[] num_list_copy_17 = num_list.copy();\n\tlong[] num_list_copy_18 = num_list.copy();\n\tlong[] num_list_copy_19 = num_list.copy();\n\tlong[] num_list_copy_20 = num_list.copy();\n\tlong[] num_list_copy_21 = num_list.copy();\n\tlong[] num_list_copy_22 = num_list.copy();\n\tlong[] num_list_copy_23 = num_list.copy();\n\tlong[] num_list_copy_24 = num_list.copy();\n\tlong[] num_list_copy_25 = num_list.copy();\n\tlong[] num_list_copy_26 = num_list.copy();\n\tlong[] num_list_copy_27 = num_list.copy();\n\tlong[] num_list_copy_28 = num_list.copy();\n\tlong[] num_list_\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "/tmp/tmpfjmuqasq.d(38): Error: semicolon expected, not `unittest`\n/tmp/tmpfjmuqasq.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjmuqasq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp48u6dfei.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmp48u6dfei.__unittest_L30_C1() [0x4280ac]\n??:? void tmp48u6dfei.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tresult[i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_count = 0;\n    int result_count = 0;\n    for(int i = 0; i < num_list.length; i++)\n    {\n        if(num_list[i] == 0)\n        {\n            zero_list[zero_count] = num_list[i];\n            zero_count++;\n        }\n        else\n        {\n            result[result_count] = num_list[i];\n            result_count++;\n        }\n    }\n    for(int i = 0; i < zero_count; i++)\n    {\n        result[result_count] = zero_list[i];\n        result_count++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmprt2hu66f.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt2hu66f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong non_zero_count = 0;\n\tlong zero_count = 0;\n\tlong i = 0;\n\twhile (i < num_list.length) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < non_zero_count) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < zero_count) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpks_x1un1.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42853d]\n??:? void tmpks_x1un1.__unittest_L30_C1() [0x428078]\n??:? void tmpks_x1un1.__modtest() [0x4282c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430739]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b485]\n??:? runModuleUnitTests [0x42c3f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++) \n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = 0;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1x4ad5b1.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42854d]\n??:? void tmp1x4ad5b1.__unittest_L33_C1() [0x428088]\n??:? void tmp1x4ad5b1.__modtest() [0x4282d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c62b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430749]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b495]\n??:? runModuleUnitTests [0x42c401]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length-count+i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgpul9k1s.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmpgpul9k1s.__unittest_L30_C1() [0x4280ac]\n??:? void tmpgpul9k1s.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\t\n\tfor(int i = index; i < result.length; i++)\n\t{\n\t\tresult[i] = 0;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_count] = num_list[i];\n\t\t\tnew_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_count] = zero_list[i];\n\t\tnew_count++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\t\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++) {\n\t\tif(num_list[i] == 0) {\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse {\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < zero_count; i++) {\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tint n = num_list.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmpnrz4_6ir.d(10): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrz4_6ir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count] = 0;\n\t\tcount++;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn temp_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplu1gr80s.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmplu1gr80s.__unittest_L41_C1() [0x42812c]\n??:? void tmplu1gr80s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3ewr31zo.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285ee]\n??:? long[] tmp3ewr31zo.move_zero(long[]) [0x427f76]\n??:? void tmp3ewr31zo.__unittest_L36_C1() [0x427fff]\n??:? void tmp3ewr31zo.__modtest() [0x4282bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430739]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b485]\n??:? runModuleUnitTests [0x42c3f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmprt2hu66f.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt2hu66f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tint n = len(num_list);\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "/tmp/tmpptk632nx.d(10): Error: undefined identifier `len`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptk632nx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count += 1;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count += 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tint n = num_list.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < n) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmpnrz4_6ir.d(10): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrz4_6ir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint num_zeros = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\tlong[] new_list = new long[len];\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_zeros++;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < num_zeros; i++)\n\t{\n\t\tnew_list[j] = 0;\n\t\tj++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "/tmp/tmputv30_w3.d(12): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputv30_w3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zeros[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zeros[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmprt2hu66f.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt2hu66f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint num_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum_list_copy[num_count] = num_list[i];\n\t\t\tnum_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnum_list_copy[num_count + i] = zero_list[i];\n\t}\n\treturn num_list_copy;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = num_list.length;\n\twhile (i < len)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < len)\n\t{\n\t\tnum_list[j] = 0;\n\t\tj++;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "/tmp/tmp3858t5nj.d(11): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3858t5nj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint j = 0;\n\tint k = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzero_list[k] = num_list[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_list.length; i++)\n\t{\n\t\tif (zero_list[i] == 0)\n\t\t{\n\t\t\tresult[j] = zero_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo6lk2hh7.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x428646]\n??:? long[] tmpo6lk2hh7.move_zero(long[]) [0x427fb1]\n??:? void tmpo6lk2hh7.__unittest_L36_C1() [0x42805b]\n??:? void tmpo6lk2hh7.__modtest() [0x428318]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c673]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b506]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430791]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43071d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4dd]\n??:? runModuleUnitTests [0x42c449]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_counter = 0;\n\tint result_counter = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_counter] = num_list[i];\n\t\t\tzero_counter++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_counter] = num_list[i];\n\t\t\tresult_counter++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_counter; i++)\n\t{\n\t\tresult[result_counter] = zero_list[i];\n\t\tresult_counter++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_count = 0;\n    int result_count = 0;\n    foreach(num; num_list)\n    {\n        if(num == 0)\n        {\n            zero_list[zero_count] = num;\n            zero_count++;\n        }\n        else\n        {\n            result[result_count] = num;\n            result_count++;\n        }\n    }\n    return result ~ zero_list[0..zero_count];\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf04smfa9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmpf04smfa9.__unittest_L28_C1() [0x42802c]\n??:? void tmpf04smfa9.__modtest() [0x428274]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43067d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length) \n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.copy();\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\t\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\t\n\treturn non_zero_list ~ zero_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "/tmp/tmpi94el3vi.d(9): Error: no property `copy` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi94el3vi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i=0; i<num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i=0; i<non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i=non_zero_count; i<num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i-non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "/tmp/tmp52kh2rgi.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52kh2rgi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "/tmp/tmprt2hu66f.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt2hu66f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to move all zeroes to the end of the given array.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < num_list.length)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}