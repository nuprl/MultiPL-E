{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/dthon-program-to-count-the-pairs-of-reverse-strings/\n\t\n*/\nlong count_reverse_pairs(string[] test_list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_reverse_pairs;\n\n    assert(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2L);\n    assert(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1L);\n    assert(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.dup.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tif(s.length > 1)\n\t\t{\n\t\t\tstring rev_s = s[$-1..$];\n\t\t\tforeach(string s2; test_list)\n\t\t\t{\n\t\t\t\tif(s2 == rev_s)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t)\n\t\t\t\tcontinue;\n\t\t\tif(s.length != t.length)\n\t\t\t\tcontinue;\n\t\t\tif(s == t.dup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t)\n\t\t\t\tcontinue;\n\t\t\tif(s.length != t.length)\n\t\t\t\tcontinue;\n\t\t\tif(s == t.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string != test_string2 && test_string == test_string2.dup.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_str; test_list)\n\t{\n\t\tforeach(string test_str2; test_list)\n\t\t{\n\t\t\tif(test_str == test_str2.dup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string == test_string2)\n\t\t\t\tcontinue;\n\t\t\tif(test_string.length != test_string2.length)\n\t\t\t\tcontinue;\n\t\t\tstring reverse_string = test_string2.dup.reverse;\n\t\t\tif(test_string == reverse_string)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_str; test_list)\n\t{\n\t\tforeach(string test_str2; test_list)\n\t\t{\n\t\t\tif(test_str == test_str2.dup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string == test_string2.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tstring reverse_string = test_string.dup.reverse;\n\t\tforeach(string test_string_2; test_list)\n\t\t{\n\t\t\tif(test_string_2 == reverse_string)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < test_list.length; j++) \n\t\t{\n\t\t\tif (test_list[i].length == test_list[j].length) \n\t\t\t{\n\t\t\t\tbool is_reverse = true;\n\t\t\t\tfor (int k = 0; k < test_list[i].length; k++) \n\t\t\t\t{\n\t\t\t\t\tif (test_list[i][k] != test_list[j][test_list[j].length - k - 1]) \n\t\t\t\t\t{\n\t\t\t\t\t\tis_reverse = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (is_reverse) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tstring reverse_string = test_string[$-1..0];\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string2 == reverse_string)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tstring reverse_string = test_string.dup.reverse;\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string2 == reverse_string)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tstring reverse_string = test_string.dup.reverse;\n\t\tforeach(string test_string_2; test_list)\n\t\t{\n\t\t\tif(test_string_2 == reverse_string)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list)\n\t{\n\t\tstring reverse_string = test_string[$-1..0];\n\t\tforeach(string test_string2; test_list)\n\t\t{\n\t\t\tif(test_string2 == reverse_string)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test; test_list)\n\t{\n\t\tstring reverse_test = test[$-1..0];\n\t\tforeach(string test2; test_list)\n\t\t{\n\t\t\tif(test2 == reverse_test)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t)\n\t\t\t\tcontinue;\n\t\t\tif(s == t.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}