{
  "name": "mbpp_161_remove_elements",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long x; list1)\n\t{\n\t\tif(!list2.canFind(x))\n\t\t{\n\t\t\tresult ~= x;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(element; list1)\n\t{\n\t\tif(!list2.canFind(element))\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list2)\n\t{\n\t\tlist3 = list1.remove(i);\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\tcontinue;\n\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tnew_list ~= elem;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tlong[] temp3 = new long[list1.length];\n\tlong[] temp4 = new long[list1.length];\n\tlong[] temp5 = new long[list1.length];\n\tlong[] temp6 = new long[list1.length];\n\tlong[] temp7 = new long[list1.length];\n\tlong[] temp8 = new long[list1.length];\n\tlong[] temp9 = new long[list1.length];\n\tlong[] temp10 = new long[list1.length];\n\tlong[] temp11 = new long[list1.length];\n\tlong[] temp12 = new long[list1.length];\n\tlong[] temp13 = new long[list1.length];\n\tlong[] temp14 = new long[list1.length];\n\tlong[] temp15 = new long[list1.length];\n\tlong[] temp16 = new long[list1.length];\n\tlong[] temp17 = new long[list1.length];\n\tlong[] temp18 = new long[list1.length];\n\tlong[] temp19 = new long[list1.length];\n\tlong[] temp20 = new long[list1.length];\n\tlong[] temp21 = new long[list1.length];\n\tlong[] temp22 = new long[list1.length];\n\tlong[] temp23 = new long[list1.length];\n\tlong[] temp24 = new long[list1.length];\n\tlong[] temp25 = new long[list1.length];\n\tlong[] temp26 = new long[list1.length];\n\tlong[] temp27 = new long[list1.length];\n\tlong[] temp28 = new long[list1.length];\n\tlong[] temp29 = new long[list1.length];\n\tlong[] temp30 = new long[list1.length];\n\tlong[] temp31 = new long[list1.length];\n\tlong[] temp32 = new long[list1.length];\n\tlong[] temp33 = new long[list1.length];\n\t",
    "{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult[i] = elem;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(long i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}",
    "{\n\tlong[] result;\n\tforeach(e; list1)\n\t{\n\t\tif(e in list2)\n\t\t{\n\t\t\tresult ~= e;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint index = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[index] = i;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result[0..index];\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < list2.length; m++)\n\t\t{\n\t\t\tif (list1[i] == list2[m])\n\t\t\t{\n\t\t\t\ttemp[j] = list1[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < temp.length; m++)\n\t\t{\n\t\t\tif (list1[i] == temp[m])\n\t\t\t{\n\t\t\t\ttemp2[k] = list1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < temp2.length; m++)\n\t\t{\n\t\t\tif (list1[i] != temp2[m])\n\t\t\t{\n\t\t\t\tresult[l] = list1[i];\n\t\t\t\tl++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(!element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] != list2[i]) \n\t\t{\n\t\t\tlist3[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(k; list2)\n\t\t{\n\t\t\tif(i == k)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tforeach(j; 0 .. list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tlist1 = list1[0 .. i] ~ list1[i+1 .. $];\n\t\t\t}\n\t\t}\n\t}\n\treturn list1;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < list1.length)\n\t{\n\t\tj = 0;\n\t\twhile(j < list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tresult = new long[list1.length - count];\n\t\n\ti = 0;\n\tj = 0;\n\tk = 0;\n\t\n\twhile(i < list1.length)\n\t{\n\t\tj = 0;\n\t\twhile(j < list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(j == list2.length)\n\t\t{\n\t\t\tresult[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element !in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tforeach(element; list1)\n\t{\n\t\tif(element != list2[i])\n\t\t{\n\t\t\tresult[j] = element;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt =",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long item; list1)\n\t{\n\t\tif(!list2.canFind(item))\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j++] = i;\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1) \n\t{\n\t\tif(element in list2) \n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(list1[i] != list2[j])\n\t\t{\n\t\t\tlist3[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t\tif(i == list1.length)\n\t\t{\n\t\t\tj++;\n\t\t\ti = 0;\n\t\t}\n\t\tif(j == list2.length)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list2)\n\t{\n\t\tresult = list1.remove(elem);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult[count] = elem;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(j == i)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist3[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn list3[0..count];\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j++] = i;\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(i; list2)\n\t{\n\t\tresult = list1.remove(i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem;list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tlist3 ~= element;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(!list2.canFind(element))\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tlist3 ~= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn list1.difference(list3);\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem != list2[i])\n\t\t{\n\t\t\tresult[j] = elem;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] != list2[j])\n\t\t{\n\t\t\tresult[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\ttemp[k] = list1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (l = 0; l < list1.length; l++)\n\t{\n\t\tfor (m = 0; m < temp.length; m++)\n\t\t{\n\t\t\tif (list1[l] == temp[m])\n\t\t\t{\n\t\t\t\ttemp2[n] = list1[l];\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (o = 0; o < list1.length; o++)\n\t{\n\t\tfor (p = 0; p < temp2.length; p++)\n\t\t{\n\t\t\tif (list1[o] == temp2[p])\n\t\t\t{\n\t\t\t\tresult[q] = list1[o];\n\t\t\t\tq++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (r = 0; r < list1.length; r++)\n\t{\n\t\tfor (s = 0; s < result.length; s++)\n\t\t",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j] = i;\n\t\tj++;\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list2)\n\t{\n\t\tresult = list1.filter!(a => a != elem);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i in list2)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tlist3 ~= elem;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(l1; list1)\n\t{\n\t\tif(l1 in list2)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= l1;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist1 = list1.remove(i);\n\t\t}\n\t}\n\treturn list1;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tlong[] temp3 = new long[list1.length];\n\tlong[] temp4 = new long[list1.length];\n\tlong[] temp5 = new long[list1.length];\n\tlong[] temp6 = new long[list1.length];\n\tlong[] temp7 = new long[list1.length];\n\tlong[] temp8 = new long[list1.length];\n\tlong[] temp9 = new long[list1.length];\n\tlong[] temp10 = new long[list1.length];\n\tlong[] temp11 = new long[list1.length];\n\tlong[] temp12 = new long[list1.length];\n\tlong[] temp13 = new long[list1.length];\n\tlong[] temp14 = new long[list1.length];\n\tlong[] temp15 = new long[list1.length];\n\tlong[] temp16 = new long[list1.length];\n\tlong[] temp17 = new long[list1.length];\n\tlong[] temp18 = new long[list1.length];\n\tlong[] temp19 = new long[list1.length];\n\tlong[] temp20 = new long[list1.length];\n\tlong[] temp21 = new long[list1.length];\n\tlong[] temp22 = new long[list1.length];\n\tlong[] temp23 = new long[list1.length];\n\tlong[] temp24 = new long[list1.length];\n\tlong[] temp25 = new long[list1.length];\n\tlong[] temp26 = new long[list1.length];\n\tlong[] temp27 = new long[list1.length];\n\tlong[] temp28 = new long[list1.length];\n\tlong[] temp29 = new long[list1.length];\n\tlong[] temp30 = new long[list1.length];\n\tlong[] temp31 = new long[list1.length];\n\tlong[] temp32 = new long[list1.length];\n\tlong[] temp33 = new long[list1.length];\n\t",
    "{\n\tlong[] result;\n\tforeach(element; list1) \n\t{\n\t\tif(element in list2) \n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == list2.length)\n\t\t{\n\t\t\ttemp[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tresult = temp[0..k];\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tforeach(j; 0 .. list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tlist1 = list1[0 .. i] ~ list1[i+1 .. $];\n\t\t\t}\n\t\t}\n\t}\n\treturn list1;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem !in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(!list2.canFind(x))\n\t\t{\n\t\t\tresult[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list2)\n\t{\n\t\tresult = list1.filter!(x => x != i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(int i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint count = 0;\n\tint count2 = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 0)\n\t\t{\n\t\t\ttemp[count2] = i;\n\t\t\tcount2++;\n\t\t}\n\t\tcount = 0;\n\t}\n\t\n\tresult = temp[0..count2];\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}