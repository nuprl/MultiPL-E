{
  "name": "mbpp_119_search",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpi36_69up.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpi36_69up.search(long[]) [0x427de7]\n??:? void tmpi36_69up.__unittest_L47_C1() [0x427f51]\n??:? void tmpi36_69up.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfq_6w2jm.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpfq_6w2jm.search(long[]) [0x427dab]\n??:? void tmpfq_6w2jm.__unittest_L42_C1() [0x427ed5]\n??:? void tmpfq_6w2jm.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmpi_re_d.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpmpi_re_d.search(long[]) [0x427da7]\n??:? void tmpmpi_re_d.__unittest_L33_C1() [0x427ed1]\n??:? void tmpmpi_re_d.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8on1kac9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8on1kac9.search(long[]) [0x427da7]\n??:? void tmp8on1kac9.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8on1kac9.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long mid = 0; \n  \n    // Iterate till single element is left \n    while (low != high) { \n        // Find the mid element \n        mid = (low + high) / 2; \n  \n        // If mid is even and element next to mid is \n        // same as mid, then output element lies on \n        // right side, else on left side \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n  \n        // If mid is odd \n        else if (mid % 2 == 1) { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) \n\t\t{ \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpssorbgx2.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpssorbgx2.search(long[]) [0x427dab]\n??:? void tmpssorbgx2.__unittest_L34_C1() [0x427ed5]\n??:? void tmpssorbgx2.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low+high)/2;\n\t\tif(mid == 0 || mid == n-1)\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t\treturn arr[mid];\n\t\telse if(arr[mid] == arr[mid-1] && mid%2 == 0)\n\t\t\tlow = mid+1;\n\t\telse if(arr[mid] == arr[mid+1] && mid%2 == 1)\n\t\t\tlow = mid+1;\n\t\telse\n\t\t\thigh = mid-1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgpjqyo9w.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpgpjqyo9w.__unittest_L30_C1() [0x427fec]\n??:? void tmpgpjqyo9w.__modtest() [0x42813c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430465]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430914]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa1hmvh24.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpa1hmvh24.search(long[]) [0x427de6]\n??:? void tmpa1hmvh24.__unittest_L49_C1() [0x427f51]\n??:? void tmpa1hmvh24.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaeol7sv1.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpaeol7sv1.search(long[]) [0x427dab]\n??:? void tmpaeol7sv1.__unittest_L42_C1() [0x427ed5]\n??:? void tmpaeol7sv1.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else if (arr[mid] == arr[mid - 1]) \n                high = mid - 2; \n            else\n                return arr[mid]; \n        } else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else if (arr[mid] == arr[mid + 1]) \n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzhqmuvjb.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428446]\n??:? long tmpzhqmuvjb.search(long[]) [0x427dab]\n??:? void tmpzhqmuvjb.__unittest_L31_C1() [0x427fad]\n??:? void tmpzhqmuvjb.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkmun764p.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpkmun764p.search(long[]) [0x427da7]\n??:? void tmpkmun764p.__unittest_L41_C1() [0x427ed1]\n??:? void tmpkmun764p.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7cvofy7g.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp7cvofy7g.search(long[]) [0x427de7]\n??:? void tmp7cvofy7g.__unittest_L46_C1() [0x427f51]\n??:? void tmp7cvofy7g.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpncfc9vyx.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpncfc9vyx.search(long[]) [0x427da7]\n??:? void tmpncfc9vyx.__unittest_L41_C1() [0x427ed1]\n??:? void tmpncfc9vyx.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) {\n\t\t\tif (arr[mid] == arr[mid + 1]) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_71xarg8.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp_71xarg8.search(long[]) [0x427dab]\n??:? void tmp_71xarg8.__unittest_L31_C1() [0x427ed5]\n??:? void tmp_71xarg8.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp33nx2huw.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp33nx2huw.search(long[]) [0x427da7]\n??:? void tmp33nx2huw.__unittest_L33_C1() [0x427ed1]\n??:? void tmp33nx2huw.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\t\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjzcw8o0r.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpjzcw8o0r.search(long[]) [0x427da7]\n??:? void tmpjzcw8o0r.__unittest_L36_C1() [0x427ed1]\n??:? void tmpjzcw8o0r.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptuh7tz59.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmptuh7tz59.search(long[]) [0x427daa]\n??:? void tmptuh7tz59.__unittest_L40_C1() [0x427ed1]\n??:? void tmptuh7tz59.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp462ga72j.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp462ga72j.search(long[]) [0x427da7]\n??:? void tmp462ga72j.__unittest_L41_C1() [0x427ed1]\n??:? void tmp462ga72j.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == arr.length - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        else if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid - 2; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2341vxbz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmp2341vxbz.__unittest_L36_C1() [0x428072]\n??:? void tmp2341vxbz.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else if (mid % 2 == 1) { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpw8_op7x0.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpw8_op7x0.search(long[]) [0x427daa]\n??:? void tmpw8_op7x0.__unittest_L40_C1() [0x427ed1]\n??:? void tmpw8_op7x0.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2fuwbomg.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp2fuwbomg.search(long[]) [0x427da7]\n??:? void tmp2fuwbomg.__unittest_L33_C1() [0x427ed1]\n??:? void tmp2fuwbomg.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptuh7tz59.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmptuh7tz59.search(long[]) [0x427daa]\n??:? void tmptuh7tz59.__unittest_L40_C1() [0x427ed1]\n??:? void tmptuh7tz59.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpepv2tmvh.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpepv2tmvh.__unittest_L36_C1() [0x427fc8]\n??:? void tmpepv2tmvh.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < arr.length && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile(low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6rqodmea.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp6rqodmea.search(long[]) [0x427daa]\n??:? void tmp6rqodmea.__unittest_L43_C1() [0x427ed1]\n??:? void tmp6rqodmea.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz8knot_8.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpz8knot_8.__unittest_L36_C1() [0x427fc8]\n??:? void tmpz8knot_8.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid+1]) \n\t\t\t{\n\t\t\t\tlow = mid+2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid-1]) \n\t\t\t{\n\t\t\t\tlow = mid+1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid-1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmps6a5t5d4.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmps6a5t5d4.search(long[]) [0x427dab]\n??:? void tmps6a5t5d4.__unittest_L42_C1() [0x427ed5]\n??:? void tmps6a5t5d4.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9kyao8c_.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp9kyao8c_.search(long[]) [0x427da7]\n??:? void tmp9kyao8c_.__unittest_L33_C1() [0x427ed1]\n??:? void tmp9kyao8c_.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\t\n\twhile (start < end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[start];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1])\n\t\t\t\thigh = mid - 2;\n\t\t\telse\n\t\t\t\treturn arr[mid];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1])\n\t\t\t\thigh = mid - 1;\n\t\t\telse\n\t\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcs0yc6ns.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpcs0yc6ns.search(long[]) [0x427daa]\n??:? void tmpcs0yc6ns.__unittest_L43_C1() [0x427ed1]\n??:? void tmpcs0yc6ns.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tint n = arr.length;\n\tint low = 0;\n\tint high = n - 1;\n\tint mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "/tmp/tmp16355q3_.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16355q3_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length-1;\n\tlong mid = 0;\n\twhile(l <= r)\n\t{\n\t\tmid = (l+r)/2;\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t\treturn arr[mid];\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif((mid-1)%2 == 0)\n\t\t\t\tr = mid-2;\n\t\t\telse\n\t\t\t\tl = mid+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif((mid-1)%2 == 0)\n\t\t\t\tl = mid+2;\n\t\t\telse\n\t\t\t\tr = mid-1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwypoz6wz.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283e6]\n??:? long tmpwypoz6wz.search(long[]) [0x427d9c]\n??:? void tmpwypoz6wz.__unittest_L35_C1() [0x427f4d]\n??:? void tmpwypoz6wz.__modtest() [0x4280b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b24a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b221]\n??:? runModuleUnitTests [0x42c18d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkhdmaa3r.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpkhdmaa3r.search(long[]) [0x427da7]\n??:? void tmpkhdmaa3r.__unittest_L33_C1() [0x427ed1]\n??:? void tmpkhdmaa3r.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr33e_5_z.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpr33e_5_z.__unittest_L46_C1() [0x427fc4]\n??:? void tmpr33e_5_z.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (mid == 0 || arr[mid - 1] < arr[mid] && \n            mid == arr.length - 1 || arr[mid] < arr[mid + 1]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid - 1] == arr[mid]) { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } else if (mid < arr.length - 1 && arr[mid] == arr[mid + 1]) { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0i85rzzw.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp0i85rzzw.__unittest_L30_C1() [0x4280a6]\n??:? void tmp0i85rzzw.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430465]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430914]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0) {\n\t\t\tif (arr[mid] != arr[mid + 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} else if (mid == arr.length - 1) {\n\t\t\tif (arr[mid] != arr[mid - 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n\t\t\treturn arr[mid];\n\t\t} else if (arr[mid] == arr[mid - 1]) {\n\t\t\tif ((mid - 1) % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else if (arr[mid] == arr[mid + 1]) {\n\t\t\tif ((mid + 1) % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvxv8idnp.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpvxv8idnp.__unittest_L45_C1() [0x428104]\n??:? void tmpvxv8idnp.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile(l <= r)\n\t{\n\t\tmid = l + (r - l) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu648f4ng.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpu648f4ng.search(long[]) [0x427dab]\n??:? void tmpu648f4ng.__unittest_L41_C1() [0x427ed5]\n??:? void tmpu648f4ng.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid == 0 || mid == n-1)\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif((mid-1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid+1])\n\t\t{\n\t\t\tif((mid+1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8bg8ctwi.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8bg8ctwi.__unittest_L50_C1() [0x428014]\n??:? void tmp8bg8ctwi.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c467]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]\n??:? runModuleUnitTests [0x42c23d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        else if (arr[mid] == arr[mid - 1]) \n        { \n            if ((mid - 1) % 2 == 0) \n                low = mid + 1; \n            else\n                high = mid - 2; \n        } \n        else if (arr[mid] == arr[mid + 1]) \n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa4nqy394.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42843e]\n??:? long tmpa4nqy394.search(long[]) [0x427de3]\n??:? void tmpa4nqy394.__unittest_L33_C1() [0x427fa5]\n??:? void tmpa4nqy394.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_0w_tgoe.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp_0w_tgoe.search(long[]) [0x427da7]\n??:? void tmp_0w_tgoe.__unittest_L33_C1() [0x427ed1]\n??:? void tmp_0w_tgoe.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8ytpvr66.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8ytpvr66.search(long[]) [0x427daa]\n??:? void tmp8ytpvr66.__unittest_L43_C1() [0x427ed1]\n??:? void tmp8ytpvr66.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else if (mid % 2 == 1) { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8ytpvr66.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8ytpvr66.search(long[]) [0x427daa]\n??:? void tmp8ytpvr66.__unittest_L43_C1() [0x427ed1]\n??:? void tmp8ytpvr66.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp462ga72j.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp462ga72j.search(long[]) [0x427da7]\n??:? void tmp462ga72j.__unittest_L41_C1() [0x427ed1]\n??:? void tmp462ga72j.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\thigh = mid - 2;\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk0norm1x.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpk0norm1x.__unittest_L36_C1() [0x427fc4]\n??:? void tmpk0norm1x.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long mid = 0; \n  \n    // Iterate till single element is left \n    while (low != high) \n    { \n        // Find the mid index \n        mid = (low + high) / 2; \n  \n        // If mid is even and element next to mid is \n        // same as mid, then output element lies on \n        // right side, else on left side \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n  \n        // If mid is odd \n        else if (mid % 2 == 1) \n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[low]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = 0;\n\tforeach(i;0..arr.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(i == arr.length-1)\n\t\t{\n\t\t\tif(arr[i] != arr[i-1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[i] != arr[i-1] && arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmpi_re_d.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpmpi_re_d.search(long[]) [0x427da7]\n??:? void tmpmpi_re_d.__unittest_L33_C1() [0x427ed1]\n??:? void tmpmpi_re_d.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp33nx2huw.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp33nx2huw.search(long[]) [0x427da7]\n??:? void tmp33nx2huw.__unittest_L33_C1() [0x427ed1]\n??:? void tmp33nx2huw.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n  \n    // If there is not exactly one element \n    if (high == 0) \n        return arr[0]; \n  \n    // Find the middle point \n    mid = (low + high) / 2; \n  \n    // Check if the middle point is the element \n    // itself \n    if (mid % 2 == 1) \n    { \n        if (arr[mid] == arr[mid - 1]) \n            low = mid + 1; \n        else if (arr[mid] == arr[mid + 1]) \n            high = mid - 1; \n        else\n            return arr[mid]; \n    } \n  \n    // If the middle point is not the element \n    // itself, then the element lies on the \n    // left side of the middle point \n    else\n    { \n        if (arr[mid] == arr[mid + 1]) \n            low = mid + 2; \n        else if (arr[mid] == arr[mid - 1]) \n            high = mid - 2; \n    } \n  \n    return search(arr[low..high]); \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjf75c7um.d(38): Range violation\n----------------\n??:? _d_arrayboundsp [0x428476]\n??:? long tmpjf75c7um.search(long[]) [0x427e8e]\n??:? long tmpjf75c7um.search(long[]) [0x427f70]\n??:? void tmpjf75c7um.__unittest_L46_C1() [0x427fd9]\n??:? void tmpjf75c7um.__modtest() [0x428144]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c447]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43046d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43091c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b1]\n??:? runModuleUnitTests [0x42c21d]\n??:? void rt.dmain2._d_run_m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n    long low = 0;\n    long high = arr.length - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else if (arr[mid] == arr[mid - 1]) {\n                high = mid - 2;\n            } else {\n                return arr[mid];\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else if (arr[mid] == arr[mid + 1]) {\n                high = mid - 1;\n            } else {\n                return arr[mid];\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3m3el5r6.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42844e]\n??:? long tmp3m3el5r6.search(long[]) [0x427dab]\n??:? void tmp3m3el5r6.__unittest_L35_C1() [0x427fb5]\n??:? void tmp3m3el5r6.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430445]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]\n??:? runModuleUnitTests [0x42c1f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp33nx2huw.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp33nx2huw.search(long[]) [0x427da7]\n??:? void tmp33nx2huw.__unittest_L33_C1() [0x427ed1]\n??:? void tmp33nx2huw.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(i == arr.length-1)\n\t\t{\n\t\t\tif(arr[i] != arr[i-1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[i] != arr[i-1] && arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm7mrvm2i.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpm7mrvm2i.search(long[]) [0x427dab]\n??:? void tmpm7mrvm2i.__unittest_L42_C1() [0x427ed5]\n??:? void tmpm7mrvm2i.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong mid = 0;\n\twhile (start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzzjuxls_.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpzzjuxls_.search(long[]) [0x427d91]\n??:? void tmpzzjuxls_.__unittest_L45_C1() [0x427efd]\n??:? void tmpzzjuxls_.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c367]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d1]\n??:? runModuleUnitTests [0x42c13d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6kfkltqd.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmp6kfkltqd.__unittest_L46_C1() [0x427fc4]\n??:? void tmp6kfkltqd.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8on1kac9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8on1kac9.search(long[]) [0x427da7]\n??:? void tmp8on1kac9.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8on1kac9.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz8knot_8.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpz8knot_8.__unittest_L36_C1() [0x427fc8]\n??:? void tmpz8knot_8.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tint n = arr.length;\n\tint low = 0;\n\tint high = n - 1;\n\tint mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "/tmp/tmpaex3ewha.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaex3ewha.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppexf519v.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppexf519v.search(long[]) [0x427da7]\n??:? void tmppexf519v.__unittest_L41_C1() [0x427ed1]\n??:? void tmppexf519v.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low+high)/2;\n\t\tif(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif(mid%2 == 0)\n\t\t\t\thigh = mid-2;\n\t\t\telse\n\t\t\t\tlow = mid+1;\n\t\t}\n\t\telse if(arr[mid] == arr[mid+1])\n\t\t{\n\t\t\tif(mid%2 == 0)\n\t\t\t\tlow = mid+2;\n\t\t\telse\n\t\t\t\thigh = mid-1;\n\t\t}\n\t\telse\n\t\t\treturn arr[mid];\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpoxw4wwpj.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpoxw4wwpj.search(long[]) [0x427e1d]\n??:? void tmpoxw4wwpj.__unittest_L35_C1() [0x427efd]\n??:? void tmpoxw4wwpj.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c367]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d1]\n??:? runModuleUnitTests [0x42c13d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == arr[m - 1]) \n\t\t{\n\t\t\tif ((m - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tr = m - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[m] == arr[m + 1]) \n\t\t{\n\t\t\tif (m % 2 == 0) \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[m];\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpikg375lv.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283be]\n??:? long tmpikg375lv.search(long[]) [0x427d90]\n??:? void tmpikg375lv.__unittest_L44_C1() [0x427f25]\n??:? void tmpikg375lv.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c38f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b222]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]\n??:? runModuleUnitTests [0x42c165]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk7ls71kl.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpk7ls71kl.search(long[]) [0x427da7]\n??:? void tmpk7ls71kl.__unittest_L41_C1() [0x427ed1]\n??:? void tmpk7ls71kl.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tint l = 0;\n\tint r = arr.length - 1;\n\twhile(l < r)\n\t{\n\t\tint m = (l + r) / 2;\n\t\tif(m % 2 == 0)\n\t\t{\n\t\t\tif(arr[m] == arr[m + 1])\n\t\t\t\tl = m + 2;\n\t\t\telse\n\t\t\t\tr = m;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[m] == arr[m - 1])\n\t\t\t\tl = m + 1;\n\t\t\telse\n\t\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "/tmp/tmpxnf6dh0z.d(11): Error: cannot implicitly convert expression `arr.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnf6dh0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = 0;\n\twhile (l <= r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (m % 2 == 0)\n\t\t{\n\t\t\tif (arr[m] == arr[m + 1])\n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[m] == arr[m - 1])\n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpe2czhpfs.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpe2czhpfs.search(long[]) [0x427da7]\n??:? void tmpe2czhpfs.__unittest_L41_C1() [0x427ed1]\n??:? void tmpe2czhpfs.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) {\n\t\t\tif (arr[mid] == arr[mid + 1]) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpueu5osit.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpueu5osit.search(long[]) [0x427da7]\n??:? void tmpueu5osit.__unittest_L31_C1() [0x427ed1]\n??:? void tmpueu5osit.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) \n\t\t{ \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpssorbgx2.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpssorbgx2.search(long[]) [0x427dab]\n??:? void tmpssorbgx2.__unittest_L34_C1() [0x427ed5]\n??:? void tmpssorbgx2.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8u6b22au.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8u6b22au.search(long[]) [0x427da7]\n??:? void tmp8u6b22au.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8u6b22au.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long n = arr.length; \n    long i; \n    for (i = 0; i < n; i++) \n    { \n        if (i == 0) \n        { \n            if (arr[i] != arr[i + 1]) \n                return arr[i]; \n        } \n        else if (i == n - 1) \n        { \n            if (arr[i] != arr[i - 1]) \n                return arr[i]; \n        } \n        else\n        { \n            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) \n                return arr[i]; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile(low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif(mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif(arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsa4_8qz0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpsa4_8qz0.__unittest_L53_C1() [0x427ffc]\n??:? void tmpsa4_8qz0.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length-1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l+r)/2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m+1]) \n\t\t\t{\n\t\t\t\tl = m+2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m-1]) \n\t\t\t{\n\t\t\t\tl = m+1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m-1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = 0;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3gdydy8z.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp3gdydy8z.search(long[]) [0x427da7]\n??:? void tmp3gdydy8z.__unittest_L41_C1() [0x427ed1]\n??:? void tmp3gdydy8z.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpd8z3r0pu.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpd8z3r0pu.search(long[]) [0x427de7]\n??:? void tmpd8z3r0pu.__unittest_L50_C1() [0x427f55]\n??:? void tmpd8z3r0pu.__modtest() [0x4280c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaeol7sv1.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpaeol7sv1.search(long[]) [0x427dab]\n??:? void tmpaeol7sv1.__unittest_L42_C1() [0x427ed5]\n??:? void tmpaeol7sv1.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppblqmjkq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppblqmjkq.search(long[]) [0x427da7]\n??:? void tmppblqmjkq.__unittest_L41_C1() [0x427ed1]\n??:? void tmppblqmjkq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkh3mh_zf.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpkh3mh_zf.search(long[]) [0x427da7]\n??:? void tmpkh3mh_zf.__unittest_L41_C1() [0x427ed1]\n??:? void tmpkh3mh_zf.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmpi_re_d.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpmpi_re_d.search(long[]) [0x427da7]\n??:? void tmpmpi_re_d.__unittest_L33_C1() [0x427ed1]\n??:? void tmpmpi_re_d.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpoue51s7k.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? long tmpoue51s7k.search(long[]) [0x427da4]\n??:? void tmpoue51s7k.__unittest_L41_C1() [0x427ecd]\n??:? void tmpoue51s7k.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfq_6w2jm.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpfq_6w2jm.search(long[]) [0x427dab]\n??:? void tmpfq_6w2jm.__unittest_L42_C1() [0x427ed5]\n??:? void tmpfq_6w2jm.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid+1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid-1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpleyqm6mf.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpleyqm6mf.search(long[]) [0x427daa]\n??:? void tmpleyqm6mf.__unittest_L31_C1() [0x427ed1]\n??:? void tmpleyqm6mf.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfq_6w2jm.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpfq_6w2jm.search(long[]) [0x427dab]\n??:? void tmpfq_6w2jm.__unittest_L42_C1() [0x427ed5]\n??:? void tmpfq_6w2jm.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l < r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk3onabuj.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428426]\n??:? long tmpk3onabuj.search(long[]) [0x427de7]\n??:? void tmpk3onabuj.__unittest_L46_C1() [0x427f8d]\n??:? void tmpk3onabuj.__modtest() [0x4280f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b28a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43041d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]\n??:? runModuleUnitTests [0x42c1cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfq_6w2jm.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpfq_6w2jm.search(long[]) [0x427dab]\n??:? void tmpfq_6w2jm.__unittest_L42_C1() [0x427ed5]\n??:? void tmpfq_6w2jm.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8on1kac9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8on1kac9.search(long[]) [0x427da7]\n??:? void tmp8on1kac9.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8on1kac9.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz38obf9_.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpz38obf9_.__unittest_L45_C1() [0x427fc8]\n??:? void tmpz38obf9_.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpyxwuy6st.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpyxwuy6st.search(long[]) [0x427daa]\n??:? void tmpyxwuy6st.__unittest_L40_C1() [0x427ed1]\n??:? void tmpyxwuy6st.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(i == arr.length - 1)\n\t\t{\n\t\t\tif(arr[i] != arr[i-1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[i] != arr[i-1] && arr[i] != arr[i+1])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpazp4kviv.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? long tmpazp4kviv.search(long[]) [0x427da4]\n??:? void tmpazp4kviv.__unittest_L41_C1() [0x427ec9]\n??:? void tmpazp4kviv.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqlz37ncv.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpqlz37ncv.search(long[]) [0x427dab]\n??:? void tmpqlz37ncv.__unittest_L34_C1() [0x427ed5]\n??:? void tmpqlz37ncv.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptuh7tz59.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmptuh7tz59.search(long[]) [0x427daa]\n??:? void tmptuh7tz59.__unittest_L40_C1() [0x427ed1]\n??:? void tmptuh7tz59.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    long mid; \n  \n    // iterate till search space contains at-least one element \n    while (low <= high) \n    { \n        // find the mid value in the search space and  \n        // compares it with its next element \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] &&  \n                            arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n  \n        // if the mid element is equal to its previous \n        // element, then the required element  \n        // is in the left half of mid \n        if (arr[mid] == arr[mid - 1]) \n        { \n            if (mid % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n  \n        // if the mid element is equal to its next \n        // element, then the required element  \n        // is in the right half of mid \n        else\n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    // we reach here when no element is found in the array \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8jgabmj2.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp8jgabmj2.search(long[]) [0x427de4]\n??:? void tmp8jgabmj2.__unittest_L49_C1() [0x427f51]\n??:? void tmp8jgabmj2.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long left = 0, right = arr.length - 1; \n    while (left < right) \n    { \n        long mid = (left + right) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid+1]) \n                left = mid + 2; \n            else\n                right = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid-1]) \n                left = mid + 1; \n            else\n                right = mid - 1; \n        } \n    } \n    return arr[left]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (mid == 0 || mid == arr.length - 1) \n            return arr[mid]; \n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        if (arr[mid] == arr[mid - 1]) \n        { \n            if ((mid - 1) % 2 == 0) \n                low = mid + 1; \n            else\n                high = mid - 2; \n        } \n        else if (arr[mid] == arr[mid + 1]) \n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpolets5pv.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpolets5pv.__unittest_L45_C1() [0x427fc8]\n??:? void tmpolets5pv.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1])\n\t\t\t\thigh = mid - 2;\n\t\t\telse\n\t\t\t\treturn arr[mid];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1])\n\t\t\t\thigh = mid - 1;\n\t\t\telse\n\t\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l < r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr2svhw3r.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpr2svhw3r.search(long[]) [0x427da7]\n??:? void tmpr2svhw3r.__unittest_L44_C1() [0x427ed1]\n??:? void tmpr2svhw3r.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\t\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpriamx9ts.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpriamx9ts.search(long[]) [0x427da7]\n??:? void tmpriamx9ts.__unittest_L44_C1() [0x427ed1]\n??:? void tmpriamx9ts.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjeqlhtn.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmppjeqlhtn.__unittest_L50_C1() [0x428014]\n??:? void tmppjeqlhtn.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c467]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]\n??:? runModuleUnitTests [0x42c23d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpce1m58kd.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428376]\n??:? long tmpce1m58kd.search(long[]) [0x427daf]\n??:? void tmpce1m58kd.__unittest_L42_C1() [0x427ed9]\n??:? void tmpce1m58kd.__modtest() [0x428044]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c347]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43036d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43081c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b1]\n??:? runModuleUnitTests [0x42c11d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc_200yjp.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpc_200yjp.search(long[]) [0x427dab]\n??:? void tmpc_200yjp.__unittest_L42_C1() [0x427ed5]\n??:? void tmpc_200yjp.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8u6b22au.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8u6b22au.search(long[]) [0x427da7]\n??:? void tmp8u6b22au.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8u6b22au.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptuh7tz59.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmptuh7tz59.search(long[]) [0x427daa]\n??:? void tmptuh7tz59.__unittest_L40_C1() [0x427ed1]\n??:? void tmptuh7tz59.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == arr.length - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid - 2; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt4k8xjtu.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpt4k8xjtu.__unittest_L34_C1() [0x428072]\n??:? void tmpt4k8xjtu.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) \n\t\t{ \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpssorbgx2.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpssorbgx2.search(long[]) [0x427dab]\n??:? void tmpssorbgx2.__unittest_L34_C1() [0x427ed5]\n??:? void tmpssorbgx2.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1, mid; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid - 1] < arr[mid] && \n            mid == arr.length - 1 || arr[mid + 1] > arr[mid]) \n            return arr[mid]; \n        else if (arr[mid] < arr[mid - 1]) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwkfeir18.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4282f5]\n??:? void tmpwkfeir18.__unittest_L24_C1() [0x427f24]\n??:? void tmpwkfeir18.__modtest() [0x428074]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c377]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b20a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43039d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43084c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430329]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e1]\n??:? runModuleUnitTests [0x42c14d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = low + (high - low) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == arr.length - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid] == arr[mid - 1]) \n        { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n        else if (mid < arr.length - 1 && arr[mid] == arr[mid + 1]) \n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmg5hf6ze.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpmg5hf6ze.__unittest_L34_C1() [0x4280b6]\n??:? void tmpmg5hf6ze.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (arr[mid] < arr[mid - 1]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe67_qjoy.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4282f5]\n??:? void tmpe67_qjoy.__unittest_L32_C1() [0x42805f]\n??:? void tmpe67_qjoy.__modtest() [0x428078]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c377]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b20a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43039d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43084c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430329]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e1]\n??:? runModuleUnitTests [0x42c14d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = 0;\n\tint n = arr.length;\n\tint i = 0;\n\twhile(i < n)\n\t{\n\t\tif(i == n-1)\n\t\t{\n\t\t\tresult = arr[i];\n\t\t\tbreak;\n\t\t}\n\t\tif(arr[i] != arr[i+1])\n\t\t{\n\t\t\tresult = arr[i];\n\t\t\tbreak;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "/tmp/tmp3z_a8mgl.d(11): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z_a8mgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8on1kac9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp8on1kac9.search(long[]) [0x427da7]\n??:? void tmp8on1kac9.__unittest_L41_C1() [0x427ed1]\n??:? void tmp8on1kac9.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid+1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid-1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphek6_4y4.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmphek6_4y4.search(long[]) [0x427da7]\n??:? void tmphek6_4y4.__unittest_L33_C1() [0x427ed1]\n??:? void tmphek6_4y4.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tl = mid + 2;\n\t\t\telse\n\t\t\t\tr = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tl = mid + 1;\n\t\t\telse\n\t\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpoosmreq2.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpoosmreq2.search(long[]) [0x427da9]\n??:? void tmpoosmreq2.__unittest_L33_C1() [0x427ed1]\n??:? void tmpoosmreq2.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tint n = arr.length;\n\tint low = 0;\n\tint high = n - 1;\n\tint mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "/tmp/tmpaex3ewha.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaex3ewha.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    long mid; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid - 1] < arr[mid] && \n            mid == arr.length - 1 || arr[mid] < arr[mid + 1]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid - 1] == arr[mid]) \n        { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n        else if (mid < arr.length - 1 && arr[mid] == arr[mid + 1]) \n        { \n            if (mid % 2 == 0) \n                high = mid - 1; \n            else\n                low = mid + 2; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq7hzb3g9.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpq7hzb3g9.__unittest_L35_C1() [0x427ff0]\n??:? void tmpq7hzb3g9.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430465]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430914]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tint n = arr.length;\n\tint low = 0;\n\tint high = n-1;\n\tint mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid+1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid-1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "/tmp/tmpn_b4t3rz.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_b4t3rz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2ppu8_j9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp2ppu8_j9.search(long[]) [0x427dab]\n??:? void tmp2ppu8_j9.__unittest_L41_C1() [0x427ed5]\n??:? void tmp2ppu8_j9.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid+1]) \n                low = mid + 2; \n            else if (arr[mid] == arr[mid-1]) \n                high = mid - 2; \n            else\n                return arr[mid]; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid-1]) \n                low = mid + 1; \n            else if (arr[mid] == arr[mid+1]) \n                high = mid - 1; \n            else\n                return arr[mid]; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsy0ukeoq.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42844e]\n??:? long tmpsy0ukeoq.search(long[]) [0x427daa]\n??:? void tmpsy0ukeoq.__unittest_L35_C1() [0x427fb5]\n??:? void tmpsy0ukeoq.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430445]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]\n??:? runModuleUnitTests [0x42c1f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpl9cr69tt.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpl9cr69tt.search(long[]) [0x427da7]\n??:? void tmpl9cr69tt.__unittest_L41_C1() [0x427ed1]\n??:? void tmpl9cr69tt.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid+1])\n\t\t\t\tlow = mid+2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid-1])\n\t\t\t\tlow = mid+1;\n\t\t\telse\n\t\t\t\thigh = mid-1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpn24fyki4.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpn24fyki4.search(long[]) [0x427da7]\n??:? void tmpn24fyki4.__unittest_L33_C1() [0x427ed1]\n??:? void tmpn24fyki4.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpepv2tmvh.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpepv2tmvh.__unittest_L36_C1() [0x427fc8]\n??:? void tmpepv2tmvh.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7qlp5zao.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp7qlp5zao.search(long[]) [0x427da7]\n??:? void tmp7qlp5zao.__unittest_L41_C1() [0x427ed1]\n??:? void tmp7qlp5zao.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n\tlong low = 0; \n\tlong high = arr.length - 1; \n\tlong mid = 0; \n\twhile (low < high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) \n\t\t{ \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l < r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppexf519v.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmppexf519v.search(long[]) [0x427da7]\n??:? void tmppexf519v.__unittest_L41_C1() [0x427ed1]\n??:? void tmppexf519v.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn -1;\n\t\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low < high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\t\n\twhile(l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\t\n\t\tif(m % 2 == 0) \n\t\t{\n\t\t\tif(arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l < r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tr = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe6r2_snc.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpe6r2_snc.__unittest_L45_C1() [0x427fee]\n??:? void tmpe6r2_snc.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid+1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else if (mid % 2 == 1) \n        { \n            if (arr[mid] == arr[mid-1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}